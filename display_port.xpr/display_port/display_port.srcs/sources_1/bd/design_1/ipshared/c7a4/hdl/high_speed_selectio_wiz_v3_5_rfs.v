// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1 ps / 1 ps

(* DowngradeIPIdentifiedWarnings="yes" *)
module high_speed_selectio_wiz_v3_5_1_sync_cell
#(
    parameter   C_SYNC_STAGE        = 2,
    parameter   C_DW                = 4,
    parameter   pTCQ                = 100
)
(
  input  wire  [C_DW-1:0]                 src_data,

  input  wire                             dest_clk,
  output wire  [C_DW-1:0]                 dest_data
);

(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_0;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_1;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_2;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_3;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_4;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_5;
(* async_reg = "true" *) reg [C_DW-1:0] sync_flop_6;

always @ ( posedge dest_clk )
begin
   sync_flop_0 <= #pTCQ src_data;
   sync_flop_1 <= #pTCQ sync_flop_0;
   sync_flop_2 <= #pTCQ sync_flop_1;
   sync_flop_3 <= #pTCQ sync_flop_2;
   sync_flop_4 <= #pTCQ sync_flop_3;
   sync_flop_5 <= #pTCQ sync_flop_4;
   sync_flop_6 <= #pTCQ sync_flop_5;
end

generate if ( C_SYNC_STAGE == 2 )
begin:sync2
   assign dest_data = sync_flop_1;
end
else if ( C_SYNC_STAGE == 3 )
begin:sync3
   assign dest_data = sync_flop_2;
end
else if ( C_SYNC_STAGE == 4 )
begin:sync4
   assign dest_data = sync_flop_3;
end
else if ( C_SYNC_STAGE == 5 )
begin:sync5
   assign dest_data = sync_flop_4;
end
else if ( C_SYNC_STAGE == 6 )
begin:sync6
   assign dest_data = sync_flop_5;
end
else if ( C_SYNC_STAGE == 7 )
begin:sync7
   assign dest_data = sync_flop_6;
end
endgenerate

endmodule



//------------------------------------------------------------------------------
//    File Name:  PRBS_ANY.v
//      Version:  1.0 
//         Date:  6-jul-10
//------------------------------------------------------------------------------
//
//      Company:  Xilinx, Inc.
//  Contributor:  Daniele Riccardi, Paolo Novellini
// 
//   Disclaimer:  XILINX IS PROVIDING THIS DESIGN, CODE, OR
//                INFORMATION "AS IS" SOLELY FOR USE IN DEVELOPING
//                PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY
//                PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
//                ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,
//                APPLICATION OR STANDARD, XILINX IS MAKING NO
//                REPRESENTATION THAT THIS IMPLEMENTATION IS FREE
//                FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE
//                RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY
//                REQUIRE FOR YOUR IMPLEMENTATION.  XILINX
//                EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH
//                RESPECT TO THE ADEQUACY OF THE IMPLEMENTATION,
//                INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR
//                REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
//                FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES
//                OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//                PURPOSE.
//
//                (c) Copyright 2010 Xilinx, Inc.
//                All rights reserved.
//
//--------------------------------------------------------------------------
// DESCRIPTION
//--------------------------------------------------------------------------
//   This module generates or check a PRBS pattern. The following table shows how  
//   to set the PARAMETERS for compliance to ITU-T Recommendation O.150 Section 5.
//    
//   When the CHK_MODE is "false", it uses a  LFSR strucure to generate the
//   PRBS pattern.
//   When the CHK_MODE is "true", the incoming data are loaded into prbs registers
//   and compared with the locally generated PRBS 
// 
//--------------------------------------------------------------------------
// PARAMETERS 
//--------------------------------------------------------------------------
//   CHK_MODE     : true =>  check mode
//                  false => generate mode
//   INV_PATTERN  : true : invert prbs pattern
//                     in "generate mode" the generated prbs is inverted bit-wise at outputs
//                     in "check mode" the input data are inverted before processing
//   POLY_LENGHT  : length of the polynomial (= number of shift register stages)
//   POLY_TAP     : intermediate stage that is xor-ed with the last stage to generate to next prbs bit 
//   NBITS        : bus size of DATA_IN and DATA_OUT
//
//--------------------------------------------------------------------------
// NOTES
//--------------------------------------------------------------------------
//
//
//   Set paramaters to the following values for a ITU-T compliant PRBS
//------------------------------------------------------------------------------
// POLY_LENGHT POLY_TAP INV_PATTERN  || nbr of   bit seq.   max 0      feedback   
//                                   || stages    length  sequence      stages  
//------------------------------------------------------------------------------ 
//     7          6       false      ||    7         127      6 ni        6, 7   (*)
//     9          5       false      ||    9         511      8 ni        5, 9   
//    11          9       false      ||   11        2047     10 ni        9,11   
//    15         14       true       ||   15       32767     15 i        14,15   
//    20          3       false      ||   20     1048575     19 ni        3,20   
//    23         18       true       ||   23     8388607     23 i        18,23   
//    29         27       true       ||   29   536870911     29 i        27,29   
//    31         28       true       ||   31  2147483647     31 i        28,31   
//
// i=inverted, ni= non-inverted
// (*) non standard
//----------------------------------------------------------------------------
//
// In the generated parallel PRBS, LSB is the first generated bit, for example
//         if the PRBS serial stream is : 000001111011... then
//         the generated PRBS with a parallelism of 3 bit becomes:
//            data_out(2) = 0  1  1  1 ... 
//            data_out(1) = 0  0  1  1 ...  
//            data_out(0) = 0  0  1  0 ... 
// In the received parallel PRBS, LSB is oldest bit received
//
// RESET pin is not needed for power-on reset : all registers are properly inizialized 
// in the source code.
// 
//------------------------------------------------------------------------------
// PINS DESCRIPTION 
//------------------------------------------------------------------------------
//
//      RST          : in : syncronous reset active high
//      CLK          : in : system clock
//      DATA_IN      : in : inject error (in generate mode)
//                          data to be checked (in check mode)
//      EN           : in : enable/pause pattern generation/check
//      DATA_OUT     : out: generated prbs pattern (in generate mode)
//                          error found (in check mode)
//
//-------------------------------------------------------------------------------------------------
// History:
//      Version    : 1.0
//      Date       : 6-jul-10
//      Author     : Daniele Riccardi
//      Description: First release
//-------------------------------------------------------------------------------------------------
// no timescale needed

module PRBS_ANY(RST, CLK, DATA_IN, EN, DATA_OUT);

  //--------------------------------------------		
  // Configuration parameters
  //--------------------------------------------		
   parameter CHK_MODE = 0;
   parameter INV_PATTERN = 0;
   parameter POLY_LENGHT = 31;
   parameter POLY_TAP = 3;
   parameter NBITS = 16;

  //--------------------------------------------		
  // Input/Outputs
  //--------------------------------------------		

   input RST;
   input CLK;
   input [NBITS - 1:0] DATA_IN;
   input EN;
   output reg [NBITS - 1:0] DATA_OUT = {NBITS{1'b1}};

  //--------------------------------------------		
  // Internal variables
  //--------------------------------------------		

   wire [1:POLY_LENGHT] prbs[NBITS:0];
   wire [NBITS - 1:0] data_in_i;
   wire [NBITS - 1:0] prbs_xor_a;
   wire [NBITS - 1:0] prbs_xor_b;
   wire [NBITS:1] prbs_msb;
   reg  [1:POLY_LENGHT]prbs_reg = {(POLY_LENGHT){1'b1}};

  //--------------------------------------------		
  // Implementation
  //--------------------------------------------		

   assign data_in_i = INV_PATTERN == 0 ? DATA_IN : ( ~DATA_IN);
   assign prbs[0] = prbs_reg; 
   
   genvar I;
   generate for (I=0; I<NBITS; I=I+1) begin : g1
      assign prbs_xor_a[I] = prbs[I][POLY_TAP] ^ prbs[I][POLY_LENGHT];
      assign prbs_xor_b[I] = prbs_xor_a[I] ^ data_in_i[I];
      assign prbs_msb[I+1] = CHK_MODE == 0 ? prbs_xor_a[I]  :  data_in_i[I];  
      assign prbs[I+1] = {prbs_msb[I+1] , prbs[I][1:POLY_LENGHT-1]};
   end
   endgenerate

   always @(posedge CLK) begin
      if(RST == 1'b 1) begin
         prbs_reg <= {POLY_LENGHT{1'b1}};
         DATA_OUT <= {NBITS{1'b1}};
      end
      else if(EN == 1'b 1) begin
         DATA_OUT <= prbs_xor_b;
         prbs_reg <= prbs[NBITS];
      end
  end

endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.


`timescale 1ns/1ps

`define pTCQ  #1
module high_speed_selectio_wiz_v3_5_1_rst_scheme #( 
   parameter C_USE_RIU_CLK_FROM_PLL = 1'b0,
   parameter C_EN_MULTI_INTF        = 0,
   parameter C_PLL0_RX_EXTERNAL_CLK_TO_DATA   =  0,
   parameter USE_PLL1               = 1'b0
)
(
   input              riu_clk_in,            //same as RIU clk (assume it is free running)
   input              pll0_clkout1,          //can be used as RIU clk when option is selected in GUI
   input              fab_clk_pll0_in,       //fabric clock from PLL0
   input              fab_clk_pll1_in,       //fabric clock from PLL1
   input              rst_in,                //User reset
   input              all_bsc_dly_rdy_in,    //Synced to riu_clk_in
   input              all_bsc_vtc_rdy_in,    //Synced to riu_clk_in
   input              pll0_locked_in,       
   input              pll1_locked_in,
   input              multi_intf_lock_in,
   input              bs_rst_dphy_in,        //MIPI specific 
   output   [51:0]    rst_dly_out,           //Synced to fab_clk_pll0 or fab_clk_pll1
   output   [51:0]    bs_rst_out,            //Synced to fab_clk_pll0 or fab_clk_pll1
   output             bsctrl_rst_out,        //Synced to fab_clk_pll0 or fab_clk_pll1
   output             pll0_clkoutphy_en_out, //Synced to fab_clk_pll0
   output             pll1_clkoutphy_en_out, //Synced to fab_clk_pll1
   output             pll0_rst_out,
   output             pll1_rst_out,
   output             bsc_en_vtc_out,
   output             rst_seq_done_out

);

  localparam  TIMEOUT_1M = 1000000;   //Count 1M riu_clk cycles
  localparam  WAIT_FAB_CLK_CNT = 64;
  localparam  CNTR_WIDTH = 20;        //TODO - make it a generic based on the count value

  localparam  SW                     = 9;
  localparam  ONE_HOT                = 9'b1;
  localparam  ASSERT_ALL_RESETS      = ONE_HOT << 0;   //Assert resets to PLL, BS_RST_DLY, BS_RST and BS_CTRL
  localparam  DEASSERT_PLL_RESET     = ONE_HOT << 1;   //Deasert PLL Reset
  localparam  WAIT_FOR_PLL_LOCK      = ONE_HOT << 2;   //Wait for PLL lock to be asserted
  localparam  DEASSERT_BS_RESETS     = ONE_HOT << 3;   //Once PLL lock is obtained, deassert the reset to BS and BS_CTRL
  localparam  ASSERT_PLL_CLKOUTPHYEN = ONE_HOT << 4;   //Wait for 64 Fabric clock cycles and assert PLL_CLKOUTPHYEN
  localparam  WAIT_FOR_BSC_DLY_RDY   = ONE_HOT << 5;   //Wait for DLY_RDY from all active Bitslice Controls
  localparam  ASSERT_BSC_EN_VTC      = ONE_HOT << 6;   //Assert EN_VTC for all active Bitslice Controls
  localparam  WAIT_FOR_BSC_VTC_RDY   = ONE_HOT << 7;   //Wait for VTC_RDY from all active Bitslice Controls
  localparam  RESET_SEQ_DONE         = ONE_HOT << 8;   //Final state to indicate that Reset sequencing is complete

  reg [8:0]   hssio_state = ASSERT_ALL_RESETS;

  wire        riu_clk;
  wire        rst_in_sync;
  wire        rst_to_sm;
  reg         pll0_clkoutphy_en = 1'b0;
  reg         pll1_clkoutphy_en = 1'b0;

  reg         pll0_rst = 1'b0;                   //generated in riu_clk domain
  reg         pll1_rst = 1'b0;                   //generated in riu_clk domain 
(* keep = "true" *)   reg  [51:0] bs_dly_rst_r;  //generated in riu_clk domain
(* keep = "true" *)   reg  [51:0] bs_rst_r;      //generated in riu_clk domain
  wire [51:0] bs_rst_int;
  wire        bs_rst_dphy_sync;
(* keep = "true" *)   reg  [51:0] bs_rst_int_r = 52'd0;
  reg         bs_dly_rst = 1'b0;                 //generated in riu_clk domain
  reg         bs_rst = 1'b0;                     //generated in riu_clk domain
  reg         bs_ctrl_rst = 1'b0;                //generated in riu_clk domain

  reg         rst_seq_done = 1'b0;               //generated in riu_clk domain
  reg         timeout_cntr_rst = 1'b0;
  reg         start_fab_clk_cntr;                //generated in riu_clk domain
  wire        start_fab_clk_cntr_pll0_sync;      //synced to fab_clk
  wire        start_fab_clk_cntr_pll1_sync;      //synced to fab_clk

  reg  [CNTR_WIDTH-1:0]       timeout_cntr;

  reg  [6:0]  pll0_fab_clk_cntr = 7'd0;      //To count >50 fab clk cycles 
  reg  [6:0]  pll1_fab_clk_cntr = 7'd0;
  reg  [6:0]  pll0_clkout1_cntr = 7'd0;

  reg         wait_pll_lock_timeout = 1'b0;
  reg         wait_bsc_dly_rdy_timeout = 1'b0;
  reg         wait_bsc_vtc_rdy_timeout = 1'b0;

  reg         wait_pll0_x_fab_clk_timeout;         //generated in fab_clk_pll0 domain
  reg         wait_pll1_x_fab_clk_timeout;         //generated in fab_clk_pll1 domain
  wire        wait_pll0_x_fab_clk_timeout_sync;    //synced to riu_clk 
  wire        wait_pll1_x_fab_clk_timeout_sync;    //synced to riu_clk

  reg         pll0_clkout1_stable;

  reg         bsc_en_vtc = 1'b0;
  wire        all_bsc_dly_rdy; 
  wire        all_bsc_vtc_rdy; 
  wire        pll0_locked_sync;                    //synced to riu_clk
  wire        pll1_locked_sync;                    //synced to riu_clk


  assign      bs_rst_int             = bs_rst_dphy_sync ? {52{1'b1}} : bs_rst_r;
  assign      rst_dly_out            = bs_dly_rst_r;
  assign      bs_rst_out             = bs_rst_int_r;
  assign      pll0_rst_out           = C_USE_RIU_CLK_FROM_PLL == 1'b0  ? pll0_rst : rst_in;
  assign      pll1_rst_out           = C_USE_RIU_CLK_FROM_PLL == 1'b0  ? pll1_rst : rst_in;
  assign      bsctrl_rst_out         = bs_ctrl_rst;
  assign      pll0_clkoutphy_en_out  = pll0_clkoutphy_en; //Synced to fab_clk_pll0?
  assign      pll1_clkoutphy_en_out  = pll1_clkoutphy_en; //Synced to fab_clk_pll1?
  assign      rst_seq_done_out       = rst_seq_done;      //Synced to RIU clk
  assign      bsc_en_vtc_out         = bsc_en_vtc;        //Synced to RIU clk

  assign      all_bsc_vtc_rdy = all_bsc_vtc_rdy_in;

  assign      riu_clk = (C_USE_RIU_CLK_FROM_PLL == 1'b0) ? riu_clk_in : pll0_clkout1;

    always @(posedge riu_clk)
    begin
       bs_rst_int_r <= `pTCQ bs_rst_int; 
    end

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_pll0lock_inst       (.src_data(pll0_locked_in), .dest_clk(riu_clk), .dest_data(pll0_locked_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_rst_inst            (.src_data(rst_in), .dest_clk(riu_clk), .dest_data(rst_in_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_bs_rst_dphy_inst            (.src_data(bs_rst_dphy_in), .dest_clk(riu_clk), .dest_data(bs_rst_dphy_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_mult_intf_lock_inst       (.src_data(multi_intf_lock_in), .dest_clk(riu_clk), .dest_data(multi_intf_lock_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_wait_pll0_fab_timeout_inst       (.src_data(wait_pll0_x_fab_clk_timeout), .dest_clk(riu_clk), .dest_data(wait_pll0_x_fab_clk_timeout_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_start_fab_cntr_pll0_inst       (.src_data(start_fab_clk_cntr), .dest_clk(fab_clk_pll0_in), .dest_data(start_fab_clk_cntr_pll0_sync));

generate
if(USE_PLL1 ) begin : GEN_PLL1_LOCKED_SYNC
    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_pll1lock_inst       (.src_data(pll1_locked_in), .dest_clk(riu_clk), .dest_data(pll1_locked_sync));
end
endgenerate

generate
if(USE_PLL1 == 1'b0 ) begin : GEN_PLL1_LOCKED_SYNC_D
    assign pll1_locked_sync = 1'b0;
end
endgenerate

generate
if(USE_PLL1 ) begin
    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_wait_pll1_fab_timeout_inst       (.src_data(wait_pll1_x_fab_clk_timeout), .dest_clk(riu_clk), .dest_data(wait_pll1_x_fab_clk_timeout_sync));

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_start_fab_cntr_pll1_inst       (.src_data(start_fab_clk_cntr), .dest_clk(fab_clk_pll1_in), .dest_data(start_fab_clk_cntr_pll1_sync));
end
endgenerate

generate
if(USE_PLL1 == 1'b0) begin : GEN_WAIT_PLL1_X_FAB_CLK_TIMEOUT_SYNC_D
    assign wait_pll1_x_fab_clk_timeout_sync = 1'b0;
end
endgenerate

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(10)) 
    sync_cell_dly_rdy_inst       (.src_data(all_bsc_dly_rdy_in), .dest_clk(riu_clk), .dest_data(all_bsc_dly_rdy));
   
   assign locked = (C_EN_MULTI_INTF == 1'b0 ) ? ((pll0_locked_sync && USE_PLL1 == 1'b0) || (pll0_locked_sync && USE_PLL1 == 1'b1 && pll1_locked_sync) ) : ((pll0_locked_sync && USE_PLL1 == 1'b0) || (pll0_locked_sync && USE_PLL1 == 1'b1 && pll1_locked_sync) ) && multi_intf_lock_sync;

generate
if(C_USE_RIU_CLK_FROM_PLL == 1'b1) begin : GEN_PLL0_CLKOUT1_CNTR
 //Counter for 64 clock cycles to ensure PLL0_CLKOUT1 is stable
 always @(posedge rst_to_sm or posedge pll0_clkout1)
 begin
    if(rst_to_sm) begin
       pll0_clkout1_cntr   <= 7'd0;
       pll0_clkout1_stable <= 1'b0;
    end
 
    else begin
          if( pll0_clkout1_cntr < WAIT_FAB_CLK_CNT) 
             pll0_clkout1_cntr <= pll0_clkout1_cntr + 1;

          if(pll0_clkout1_cntr >= WAIT_FAB_CLK_CNT)
             pll0_clkout1_stable <= 1'b1;
    end
 end
end
endgenerate

 //Counter for 64 fabric clock cycles
 always @(posedge fab_clk_pll0_in)
 begin
    if( start_fab_clk_cntr_pll0_sync && pll0_fab_clk_cntr <= WAIT_FAB_CLK_CNT) 
       pll0_fab_clk_cntr <= pll0_fab_clk_cntr + 1;
    else
       pll0_fab_clk_cntr <= 7'd0;

    if(pll0_fab_clk_cntr >= WAIT_FAB_CLK_CNT)
       wait_pll0_x_fab_clk_timeout <= 1'b1;
    else
       wait_pll0_x_fab_clk_timeout <= 1'b0;
 end

generate
if(USE_PLL1) begin : GEN_PLL1_FAB_CLK_CNTR

 always @(posedge fab_clk_pll1_in)
 begin
    if(start_fab_clk_cntr_pll1_sync && pll1_fab_clk_cntr <= WAIT_FAB_CLK_CNT) 
       pll1_fab_clk_cntr <= pll1_fab_clk_cntr + 1;
    else
       pll1_fab_clk_cntr <= 7'd0;

    if(pll1_fab_clk_cntr >= WAIT_FAB_CLK_CNT)
       wait_pll1_x_fab_clk_timeout <= 1'b1;
    else
       wait_pll1_x_fab_clk_timeout <= 1'b0;
 end

end
endgenerate

 //Counter to generate the timeouts
 always @(posedge riu_clk)
 begin
    if(timeout_cntr_rst) begin
      timeout_cntr             <= `pTCQ 0;
      wait_pll_lock_timeout    <= `pTCQ 1'b0;
      wait_bsc_dly_rdy_timeout <= `pTCQ 1'b0;
      wait_bsc_vtc_rdy_timeout <= `pTCQ 1'b0;
    end
    else begin
       if(timeout_cntr == TIMEOUT_1M) begin

          case (hssio_state)

             WAIT_FOR_PLL_LOCK: 
               wait_pll_lock_timeout    <= `pTCQ 1'b1;

             WAIT_FOR_BSC_DLY_RDY: 
               wait_bsc_dly_rdy_timeout <= `pTCQ 1'b1;

             WAIT_FOR_BSC_VTC_RDY: 
               wait_bsc_vtc_rdy_timeout <= `pTCQ 1'b1;
           
             default: begin
                         wait_pll_lock_timeout    <= `pTCQ 1'b0;
                         wait_bsc_dly_rdy_timeout <= `pTCQ 1'b0;
                         wait_bsc_vtc_rdy_timeout <= `pTCQ 1'b0;
                      end
           endcase
       end
       else
         timeout_cntr  <= `pTCQ timeout_cntr + 1;
         
    end
    
 end //always

generate
if (C_USE_RIU_CLK_FROM_PLL == 1'b0) begin : GEN_RIU_NOT_FROM_PLL
  //Reset Sequencer
  //At every state check if PLL lock is set 
  always @(posedge riu_clk_in)
  begin
     if(rst_in_sync) begin
        hssio_state              <= `pTCQ ASSERT_ALL_RESETS;
        pll0_rst                 <= `pTCQ 1'b1;
        pll1_rst                 <= `pTCQ 1'b1;
        bs_dly_rst               <= `pTCQ 1'b1;
        bs_rst                   <= `pTCQ 1'b1;
        bs_ctrl_rst              <= `pTCQ 1'b1;
        bsc_en_vtc               <= `pTCQ 1'b0;
        pll0_clkoutphy_en        <= `pTCQ 1'b0;
        pll1_clkoutphy_en        <= `pTCQ 1'b0;
        timeout_cntr_rst         <= `pTCQ 1'b1;
        start_fab_clk_cntr       <= `pTCQ 1'b0;
        rst_seq_done             <= `pTCQ 1'b0;
     end

     else begin
        case (hssio_state)

           ASSERT_ALL_RESETS:  
           begin
              pll0_rst           <= `pTCQ 1'b1;
              pll1_rst           <= `pTCQ 1'b1;
              bs_dly_rst         <= `pTCQ 1'b1;
              bs_rst             <= `pTCQ 1'b1;
              bs_ctrl_rst        <= `pTCQ 1'b1;
              bsc_en_vtc         <= `pTCQ 1'b0;
              pll0_clkoutphy_en  <= `pTCQ 1'b0;
              pll1_clkoutphy_en  <= `pTCQ 1'b0;
              rst_seq_done       <= `pTCQ 1'b0;
              timeout_cntr_rst   <= `pTCQ 1'b1;
              start_fab_clk_cntr <= `pTCQ 1'b0;
              hssio_state        <= `pTCQ DEASSERT_PLL_RESET;
           end 

           DEASSERT_PLL_RESET:
           begin
              pll0_rst          <= `pTCQ 1'b0;
              pll1_rst          <= `pTCQ 1'b0;
              timeout_cntr_rst  <= `pTCQ 1'b0;
              hssio_state       <= `pTCQ WAIT_FOR_PLL_LOCK;
           end

           WAIT_FOR_PLL_LOCK:
           begin
              if(locked) begin
                 timeout_cntr_rst  <= `pTCQ 1'b1;
                 hssio_state       <= `pTCQ DEASSERT_BS_RESETS;
              end
              else if (wait_pll_lock_timeout && ((!pll0_locked_sync &&  USE_PLL1 == 1'b0) || (!pll0_locked_sync || (USE_PLL1 == 1'b1 && !pll1_locked_sync))))
                 hssio_state       <= `pTCQ ASSERT_ALL_RESETS;
              else 
                 hssio_state       <= `pTCQ WAIT_FOR_PLL_LOCK;
           end

           DEASSERT_BS_RESETS:
           begin
              if(!locked) 
                 hssio_state       <= `pTCQ ASSERT_ALL_RESETS;
              else begin
                 bs_dly_rst        <= `pTCQ 1'b0;
                 bs_rst            <= `pTCQ 1'b0;
                 bs_ctrl_rst       <= `pTCQ 1'b0;
                 timeout_cntr_rst  <= `pTCQ 1'b1;
                 hssio_state       <= `pTCQ ASSERT_PLL_CLKOUTPHYEN;
              end
           end
         
           ASSERT_PLL_CLKOUTPHYEN:
           begin
              if(!locked) 
                 hssio_state   <= `pTCQ ASSERT_ALL_RESETS;

              else if((wait_pll0_x_fab_clk_timeout_sync && USE_PLL1==0) || (wait_pll0_x_fab_clk_timeout_sync && (USE_PLL1==1 && wait_pll1_x_fab_clk_timeout_sync))) begin
                 timeout_cntr_rst   <= `pTCQ 1'b0;
                 start_fab_clk_cntr <= `pTCQ 1'b0;
                 pll0_clkoutphy_en  <= `pTCQ 1'b1;

                 if(USE_PLL1) begin
                    pll1_clkoutphy_en  <= `pTCQ 1'b1;
                 end

                 hssio_state        <= `pTCQ WAIT_FOR_BSC_DLY_RDY;
              end

              else begin
                 start_fab_clk_cntr <= `pTCQ 1'b1;
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 pll0_clkoutphy_en  <= `pTCQ 1'b0;
                 pll1_clkoutphy_en  <= `pTCQ 1'b0;
                 hssio_state        <= `pTCQ ASSERT_PLL_CLKOUTPHYEN;
              end
           end

           WAIT_FOR_BSC_DLY_RDY:
           begin
              if(!locked) 
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else if(all_bsc_dly_rdy) begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 if (C_PLL0_RX_EXTERNAL_CLK_TO_DATA == 2)
                    hssio_state        <=  `pTCQ RESET_SEQ_DONE;
                 else
                    hssio_state        <= `pTCQ ASSERT_BSC_EN_VTC;
              end
              else
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_DLY_RDY;
           end

           ASSERT_BSC_EN_VTC:
           begin
              if (!locked || !all_bsc_dly_rdy)
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else begin
                 timeout_cntr_rst   <= `pTCQ 1'b0;
                 bsc_en_vtc         <= `pTCQ 1'b1;
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_VTC_RDY;
              end
           end

           WAIT_FOR_BSC_VTC_RDY:
           begin
              if (!locked || !all_bsc_dly_rdy)
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else if(all_bsc_vtc_rdy) begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 hssio_state        <=  `pTCQ RESET_SEQ_DONE;
              end
              else
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_VTC_RDY;
           end

           RESET_SEQ_DONE:
           begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
              if(!locked) 
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else begin
                 rst_seq_done       <= `pTCQ 1'b1;
                 hssio_state        <= `pTCQ RESET_SEQ_DONE;
              end

           end

           default: begin
                        hssio_state              <= `pTCQ ASSERT_ALL_RESETS;
                        pll0_rst                 <= `pTCQ 1'b1;
                        pll1_rst                 <= `pTCQ 1'b1;
                        bs_dly_rst               <= `pTCQ 1'b1;
                        bs_rst                   <= `pTCQ 1'b1;
                        bs_ctrl_rst              <= `pTCQ 1'b1;
                        pll0_clkoutphy_en        <= `pTCQ 1'b0;
                        timeout_cntr_rst         <= `pTCQ 1'b1;
                        rst_seq_done             <= `pTCQ 1'b0;
                    end
          
           endcase 
      
     end

  end //always

end
endgenerate

generate
if (C_USE_RIU_CLK_FROM_PLL == 1'b1) begin : GEN_RIU_FROM_PLL

/*  always @(posedge riu_clk)
  begin
     if(C_EN_MULTI_INTF == 1'b0 && (rst_in_sync || !pll0_locked_sync || (!pll1_locked_sync && USE_PLL1 == 1'b1)))
       rst_to_sm <= 1'b1;
     else if (C_EN_MULTI_INTF == 1'b1 && (rst_in_sync || !pll0_locked_sync || (!pll1_locked_sync && USE_PLL1 == 1'b1) || !multi_intf_lock_sync))
       rst_to_sm <= 1'b1;
     else
       rst_to_sm <= 1'b0;
  end */
assign rst_to_sm = (rst_in || !pll0_locked_in || (!pll1_locked_in && USE_PLL1 == 1'b1) || (C_EN_MULTI_INTF == 1'b1 && !multi_intf_lock_in)) ? 1'b1 : 1'b0;


  //Reset Sequencer
  always @(posedge rst_to_sm  or posedge riu_clk)
  begin
     if(rst_to_sm) begin
        hssio_state              <= `pTCQ ASSERT_ALL_RESETS;
        bs_dly_rst               <= `pTCQ 1'b1;
        bs_rst                   <= `pTCQ 1'b1;
        bs_ctrl_rst              <= `pTCQ 1'b1;
        bsc_en_vtc               <= `pTCQ 1'b0;
        pll0_clkoutphy_en        <= `pTCQ 1'b0;
        pll1_clkoutphy_en        <= `pTCQ 1'b0;
        timeout_cntr_rst         <= `pTCQ 1'b1;
        start_fab_clk_cntr       <= `pTCQ 1'b0;
        rst_seq_done             <= `pTCQ 1'b0;
     end

     else begin
        case (hssio_state)

           ASSERT_ALL_RESETS:  
           begin
              if(pll0_clkout1_stable) begin
              bs_dly_rst         <= `pTCQ 1'b1;
              bs_rst             <= `pTCQ 1'b1;
              bs_ctrl_rst        <= `pTCQ 1'b1;
              bsc_en_vtc         <= `pTCQ 1'b0;
              pll0_clkoutphy_en  <= `pTCQ 1'b0;
              pll1_clkoutphy_en  <= `pTCQ 1'b0;
              rst_seq_done       <= `pTCQ 1'b0;
              timeout_cntr_rst   <= `pTCQ 1'b1;
              start_fab_clk_cntr <= `pTCQ 1'b0;
              hssio_state        <= `pTCQ DEASSERT_BS_RESETS;
              end
           end 

           DEASSERT_BS_RESETS:
           begin
                 bs_dly_rst        <= `pTCQ 1'b0;
                 bs_rst            <= `pTCQ 1'b0;
                 bs_ctrl_rst       <= `pTCQ 1'b0;
                 timeout_cntr_rst  <= `pTCQ 1'b1;
                 hssio_state       <= `pTCQ ASSERT_PLL_CLKOUTPHYEN;
           end
         
           ASSERT_PLL_CLKOUTPHYEN:
           begin
                 pll0_clkoutphy_en     <= `pTCQ 1'b1;
                 if(USE_PLL1) begin
                    pll1_clkoutphy_en  <= `pTCQ 1'b1;
                 end

                 hssio_state        <= `pTCQ WAIT_FOR_BSC_DLY_RDY;
            end

           WAIT_FOR_BSC_DLY_RDY:
           begin
              if(all_bsc_dly_rdy) begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 if (C_PLL0_RX_EXTERNAL_CLK_TO_DATA == 2)
                    hssio_state        <=  `pTCQ RESET_SEQ_DONE;
                 else
                    hssio_state        <= `pTCQ ASSERT_BSC_EN_VTC;
              end
              else
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_DLY_RDY;
           end

           ASSERT_BSC_EN_VTC:
           begin
              if (!all_bsc_dly_rdy)
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else begin
                 timeout_cntr_rst   <= `pTCQ 1'b0;
                 bsc_en_vtc         <= `pTCQ 1'b1;
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_VTC_RDY;
              end
           end

           WAIT_FOR_BSC_VTC_RDY:
           begin
              if (!all_bsc_dly_rdy)
                 hssio_state        <= `pTCQ ASSERT_ALL_RESETS;
              else if(all_bsc_vtc_rdy) begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 hssio_state        <=  `pTCQ RESET_SEQ_DONE;
              end
              else
                 hssio_state        <= `pTCQ WAIT_FOR_BSC_VTC_RDY;
           end

           RESET_SEQ_DONE:
           begin
                 timeout_cntr_rst   <= `pTCQ 1'b1;
                 rst_seq_done       <= `pTCQ 1'b1;
                 hssio_state        <= `pTCQ RESET_SEQ_DONE;

           end

           default: begin
                        hssio_state              <= `pTCQ ASSERT_ALL_RESETS;
                        bs_dly_rst               <= `pTCQ 1'b1;
                        bs_rst                   <= `pTCQ 1'b1;
                        bs_ctrl_rst              <= `pTCQ 1'b1;
                        pll0_clkoutphy_en        <= `pTCQ 1'b0;
                        timeout_cntr_rst         <= `pTCQ 1'b1;
                        rst_seq_done             <= `pTCQ 1'b0;
                    end
          
           endcase 
      
     end

  end //always

end
endgenerate

  generate 
  genvar bs;
    for (bs = 0; bs <= 51; bs=bs+1) 
    begin : bs_rst_gen
      always @( posedge riu_clk)
      begin
        bs_dly_rst_r[bs]           <= `pTCQ bs_dly_rst;
        bs_rst_r[bs]               <= `pTCQ bs_rst;
      end
    end
  endgenerate


// synthesis translate_off
reg [255:0] state_str;

always @ ( hssio_state )
begin
   case ( hssio_state )
    ASSERT_ALL_RESETS      : state_str = "ASSERT_ALL_RESETS";        //Assert resets to PLL, BS_RST_DLY, BS_RST and BS_CTRL
    DEASSERT_PLL_RESET     : state_str = "DEASSERT_PLL_RESET";       //Deasert PLL Reset
    WAIT_FOR_PLL_LOCK      : state_str = "WAIT_FOR_PLL_LOCK";        //Wait for PLL lock to be asserted
    DEASSERT_BS_RESETS     : state_str = "DEASSERT_BS_RESETS";       //Once PLL lock is obtained, deassert the reset to BS and BS_CTRL
    ASSERT_PLL_CLKOUTPHYEN : state_str = "ASSERT_PLL_CLKOUTPHYEN";   //Wait for 64 Fabric clock cycles and assert PLL_CLKOUTPHYEN
    WAIT_FOR_BSC_DLY_RDY   : state_str = "WAIT_FOR_BSC_DLY_RDY";     //Wait for DLY_RDY from all active Bitslice Controls
    ASSERT_BSC_EN_VTC      : state_str = "ASSERT_BSC_EN_VTC";        //Assert EN_VTC for all active Bitslice Controls
    WAIT_FOR_BSC_VTC_RDY   : state_str = "WAIT_FOR_BSC_VTC_RDY";     //Wait for VTC_RDY from all active Bitslice Controls
    RESET_SEQ_DONE         : state_str = "RESET_SEQ_DONE";           //Final state to indicate that Reset sequencing is complete
   endcase
end
// synthesis translate_on

endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_clk_scheme #( 
   parameter C_SIM_DEVICE           = "ULTRASCALE", 
   parameter C_SIM_VERSION          = 1.0,
   parameter C_DEVICE               = "xcku115",
   parameter C_SERIALIZATION_FACTOR = 4,
   parameter C_PLL_SHARE            = 0,
   parameter C_PLL0_DIV_FACTOR      = 1,
   parameter C_PLL1_DIV_FACTOR      = 1,
   parameter C_PLL0_PHY_MODE        = "VCO",
   parameter C_PLL1_PHY_MODE        = "VCO",
   parameter C_CLKIN_PERIOD         =  1.000, 
   parameter C_PLL0_M               =  1,
   parameter C_PLL0_D               =  1,
   parameter C_PLL0_O1              =  1,
   parameter C_PLL1_M               =  1,
   parameter C_PLL1_D               =  1,
   parameter C_EN_TX                =  0,
   parameter C_EN_RX                =  0,
   parameter C_PLL0_CLK0_PHASE      =  0.000, 
   parameter C_PLL0_CLK1_PHASE      =  0.000, 
   parameter C_PLL1_CLK0_PHASE      =  0.000, 
   parameter C_PLL1_CLK1_PHASE      =  0.000, 
   parameter C_SERIAL_MODE          = "FALSE"
)
(
   input     [6:0]  daddr,
   input            dclk,
   input            den,
   input     [15:0] di,
   input            dwe,
   output    [15:0] do_out,
   output           drdy,
   input            clk_in,
   input            pll0_rst_in,
   input            pll1_rst_in,
   input            pll0_clkoutphy_en_in,
   input            pll1_clkoutphy_en_in,
   output           pll0_clkoutphy_out,
   output           pll0_clkout0_out,
   output           pll0_clkout1_out,
   output           pll1_clkoutphy_out,
   output           pll1_clkout0_out,
   output           pll0_locked_out,
   output           pll1_locked_out
);

   localparam C_PLL0_O0 = C_SERIALIZATION_FACTOR * C_PLL0_DIV_FACTOR;
   localparam C_PLL1_O0 = C_SERIALIZATION_FACTOR * C_PLL1_DIV_FACTOR;

   wire        pll0_locked;
   wire        pll1_locked;
   
   wire        pll1_clkoutphy;

   wire        pll0_clkout1;
   wire        clkin_to_pll;

   assign pll1_clkoutphy_out = (C_SERIAL_MODE == "TRUE" && C_EN_TX == 1 && C_EN_RX == 1)  ? pll1_clkoutphy : 1'b0;
  

   assign pll1_locked_out    = (C_SERIAL_MODE == "TRUE" && C_EN_TX == 1 && C_EN_RX == 1)  ? pll1_locked    : 1'b1;



   assign clkin_to_pll       =  clk_in;

   assign pll0_locked_out    =  pll0_locked;

generate 
  if (C_SIM_DEVICE == "ULTRASCALE" && C_PLL_SHARE == 0) begin : GEN_PLL_IN_IP_US
  // Clocking PRIMITIVE
  //------------------------------------
  // Instantiation of the PLLE3 PRIMITIVE
  //    * Unused inputs are tied off
  //    * Unused outputs are labeled unused
  wire [15:0] pll0_do_unused;
  wire        pll0_drdy_unused;
  wire        pll0_psdone_unused;
  wire        pll0_clkfbout;
  wire        pll0_clkfboutb_unused;
  wire        pll0_clkout0b_unused;
  wire        pll0_clkout1_unused;
  wire        pll0_clkout1b_unused;
  wire        pll0_clkfbstopped_unused;
  wire        pll0_clkinstopped_unused;
  wire        pll0_clkout0;

  PLLE3_ADV
  #(
    .COMPENSATION         ("INTERNAL"),
    .CLKOUTPHY_MODE       (C_PLL0_PHY_MODE),
    .STARTUP_WAIT         ("FALSE"),
    .DIVCLK_DIVIDE        (C_PLL0_D),
    .CLKFBOUT_MULT        (C_PLL0_M),
    .CLKFBOUT_PHASE       (0.000),
    .CLKOUT0_DIVIDE       (C_PLL0_O0),
    .CLKOUT1_DIVIDE       (C_PLL0_O1),
    .CLKOUT0_PHASE        (C_PLL0_CLK0_PHASE),
    .CLKOUT1_PHASE        (C_PLL0_CLK1_PHASE),
    .CLKOUT0_DUTY_CYCLE   (0.500),
    .CLKIN_PERIOD         (C_CLKIN_PERIOD),
    .REF_JITTER           (0.010))
  plle3_adv_pll0_inst
    // Output clocks
   (
    .CLKFBOUT            (pll0_clkfbout),
    .CLKOUT0             (pll0_clkout0),
    .CLKOUT0B            (pll0_clkout0b_unused),
    .CLKOUT1             (pll0_clkout1),
    .CLKOUT1B            (pll0_clkout1b_unused),
     // Input clock control
    .CLKFBIN             (pll0_clkfbout),
    .CLKIN               (clkin_to_pll),
    // Ports for dynamic reconfiguration
    .DADDR               (daddr),
    .DCLK                (dclk),
    .DEN                 (den),
    .DI                  (di),
    .DO                  (do_out),
    .DRDY                (drdy),
    .DWE                 (dwe),
    .CLKOUTPHYEN         (pll0_clkoutphy_en_in),
    .CLKOUTPHY           (pll0_clkoutphy_out),
    // Other control and status signals
    .LOCKED              (pll0_locked),
    .PWRDWN              (1'b0),
    .RST                 (pll0_rst_in)
);

  // Output buffering
  //-----------------------------------

  BUFGCE pll0_clkout0_buf
   (.O   (pll0_clkout0_out),
    .CE  (pll0_locked),
    .I   (pll0_clkout0)
   );

  BUFGCE pll0_clkout1_buf
   (.O   (pll0_clkout1_out),
    .CE  (pll0_locked),
    .I   (pll0_clkout1)
   );


end
endgenerate

generate 
  if (C_SIM_DEVICE == "ULTRASCALE_PLUS_ES1" && C_PLL_SHARE == 0) begin : GEN_PLL_IN_IP_USP
  // Clocking PRIMITIVE
  //------------------------------------
  // Instantiation of the PLLE4 PRIMITIVE
  //    * Unused inputs are tied off
  //    * Unused outputs are labeled unused
  wire [15:0] pll0_do_unused;
  wire        pll0_drdy_unused;
  wire        pll0_psdone_unused;
  wire        pll0_clkfbout;
  wire        pll0_clkfboutb_unused;
  wire        pll0_clkout0b_unused;
  wire        pll0_clkout1_unused;
  wire        pll0_clkout1b_unused;
  wire        pll0_clkfbstopped_unused;
  wire        pll0_clkinstopped_unused;
  wire        pll0_clkout0;

  PLLE4_ADV
  #(
    .COMPENSATION         ("INTERNAL"),
    .CLKOUTPHY_MODE       (C_PLL0_PHY_MODE),
    .STARTUP_WAIT         ("FALSE"),
    .DIVCLK_DIVIDE        (C_PLL0_D),
    .CLKFBOUT_MULT        (C_PLL0_M),
    .CLKFBOUT_PHASE       (0.000),
    .CLKOUT0_DIVIDE       (C_PLL0_O0),
    .CLKOUT1_DIVIDE       (C_PLL0_O1),
    .CLKOUT0_PHASE        (C_PLL0_CLK0_PHASE),
    .CLKOUT1_PHASE        (C_PLL0_CLK1_PHASE),
    .CLKOUT0_DUTY_CYCLE   (0.500),
    .CLKIN_PERIOD         (C_CLKIN_PERIOD),
    .REF_JITTER           (0.010))
  plle4_adv_pll0_inst
    // Output clocks
   (
    .CLKFBOUT            (pll0_clkfbout),
    .CLKOUT0             (pll0_clkout0),
    .CLKOUT0B            (pll0_clkout0b_unused),
    .CLKOUT1             (pll0_clkout1),
    .CLKOUT1B            (pll0_clkout1b_unused),
     // Input clock control
    .CLKFBIN             (pll0_clkfbout),
    .CLKIN               (clkin_to_pll),
    // Ports for dynamic reconfiguration
    .DADDR               (daddr),
    .DCLK                (dclk),
    .DEN                 (den),
    .DI                  (di),
    .DO                  (do_out),
    .DRDY                (drdy),
    .DWE                 (dwe),
    .CLKOUTPHYEN         (pll0_clkoutphy_en_in),
    .CLKOUTPHY           (pll0_clkoutphy_out),
    // Other control and status signals
    .LOCKED              (pll0_locked),
    .PWRDWN              (1'b0),
    .RST                 (pll0_rst_in)
);

  // Output buffering
  //-----------------------------------

  BUFGCE pll0_clkout0_buf
   (.O   (pll0_clkout0_out),
    .CE  (pll0_locked),
    .I   (pll0_clkout0)
   );

  BUFGCE pll0_clkout1_buf
   (.O   (pll0_clkout1_out),
    .CE  (pll0_locked),
    .I   (pll0_clkout1)
   );


end
endgenerate


//If Rx is in Serial Mode, Tx uses PLL1
 generate
  if (C_SIM_DEVICE == "ULTRASCALE" && C_PLL_SHARE == 0) begin : GEN_PLL_IN_IP_US_PLL
 if (C_SERIAL_MODE == "TRUE"  && C_EN_TX == 1 && C_EN_RX == 1) begin  : GEN_PLL_IN_IP_US_PLL1
  // Clocking PRIMITIVE
  //------------------------------------
  // Instantiation of the PLLE3 PRIMITIVE
  //    * Unused inputs are tied off
  //    * Unused outputs are labeled unused
  wire [15:0] pll1_do_unused;
  wire        pll1_drdy_unused;
  wire        pll1_psdone_unused;
  wire        pll1_clkfbout;
  wire        pll1_clkfbout_buf;
  wire        pll1_clkfboutb_unused;
  wire        pll1_clkout0b_unused;
  wire        pll1_clkout1_unused;
  wire        pll1_clkout1b_unused;
  wire        pll1_clkfbstopped_unused;
  wire        pll1_clkinstopped_unused;
  wire        pll1_clkout0;

  PLLE3_ADV
  #(
    .COMPENSATION         ("INTERNAL"),
    .CLKOUTPHY_MODE       (C_PLL1_PHY_MODE),
    .STARTUP_WAIT         ("FALSE"),
    .DIVCLK_DIVIDE        (C_PLL1_D),
    .CLKFBOUT_MULT        (C_PLL1_M),
    .CLKFBOUT_PHASE       (0.000),
    .CLKOUT0_DIVIDE       (C_PLL1_O0),
    .CLKOUT1_DIVIDE       (1.000),
    .CLKOUT0_PHASE        (C_PLL1_CLK0_PHASE),
    .CLKOUT1_PHASE        (C_PLL1_CLK1_PHASE),
    .CLKOUT0_DUTY_CYCLE   (0.500),
    .CLKIN_PERIOD         (C_CLKIN_PERIOD),
    .REF_JITTER           (0.010)
   )
   plle3_adv_pll1_inst
    // Output clocks
   (
    .CLKFBOUT            (pll1_clkfbout),
    .CLKOUT0             (pll1_clkout0),
    .CLKOUT0B            (pll1_clkout0b_unused),
    .CLKOUT1             (pll1_clkout1_unused),
    .CLKOUT1B            (pll1_clkout1b_unused),
     // Input clock control
    .CLKFBIN             (pll1_clkfbout),
    .CLKIN               (clkin_to_pll),
    // Ports for dynamic reconfiguration
    .DADDR               (7'h0),
    .DCLK                (1'b0),
    .DEN                 (1'b0),
    .DI                  (16'h0),
    .DO                  (pll1_do_unused),
    .DRDY                (pll1_drdy_unused),
    .DWE                 (1'b0),
    .CLKOUTPHYEN         (pll1_clkoutphy_en_in),
    .CLKOUTPHY           (pll1_clkoutphy),
    // Other control and status signals
    .LOCKED              (pll1_locked),
    .PWRDWN              (1'b0),
    .RST                 (pll1_rst_in)
);

  // Output buffering
  //-----------------------------------

  BUFGCE pll1_clkout0_buf
   (.O   (pll1_clkout0_out),
    .CE  (pll1_locked),
    .I   (pll1_clkout0)
   );
end
end
endgenerate


 generate
  if (C_SIM_DEVICE == "ULTRASCALE_PLUS_ES1" && C_PLL_SHARE == 0) begin : GEN_PLL_IN_IP_USP_PLL
 if (C_SERIAL_MODE == "TRUE"  && C_EN_TX == 1 && C_EN_RX == 1) begin  : GEN_PLL_IN_IP_USP_PLL1
  // Clocking PRIMITIVE
  //------------------------------------
  // Instantiation of the PLLE4 PRIMITIVE
  //    * Unused inputs are tied off
  //    * Unused outputs are labeled unused
  wire [15:0] pll1_do_unused;
  wire        pll1_drdy_unused;
  wire        pll1_psdone_unused;
  wire        pll1_clkfbout;
  wire        pll1_clkfbout_buf;
  wire        pll1_clkfboutb_unused;
  wire        pll1_clkout0b_unused;
  wire        pll1_clkout1_unused;
  wire        pll1_clkout1b_unused;
  wire        pll1_clkfbstopped_unused;
  wire        pll1_clkinstopped_unused;
  wire        pll1_clkout0;

  PLLE4_ADV
  #(
    .COMPENSATION         ("INTERNAL"),
    .CLKOUTPHY_MODE       (C_PLL1_PHY_MODE),
    .STARTUP_WAIT         ("FALSE"),
    .DIVCLK_DIVIDE        (C_PLL1_D),
    .CLKFBOUT_MULT        (C_PLL1_M),
    .CLKFBOUT_PHASE       (0.000),
    .CLKOUT0_DIVIDE       (C_PLL1_O0),
    .CLKOUT1_DIVIDE       (1.000),
    .CLKOUT0_PHASE        (C_PLL1_CLK0_PHASE),
    .CLKOUT1_PHASE        (C_PLL1_CLK1_PHASE),
    .CLKOUT0_DUTY_CYCLE   (0.500),
    .CLKIN_PERIOD         (C_CLKIN_PERIOD),
    .REF_JITTER           (0.010)
   )
   plle4_adv_pll1_inst
    // Output clocks
   (
    .CLKFBOUT            (pll1_clkfbout),
    .CLKOUT0             (pll1_clkout0),
    .CLKOUT0B            (pll1_clkout0b_unused),
    .CLKOUT1             (pll1_clkout1_unused),
    .CLKOUT1B            (pll1_clkout1b_unused),
     // Input clock control
    .CLKFBIN             (pll1_clkfbout),
    .CLKIN               (clkin_to_pll),
    // Ports for dynamic reconfiguration
    .DADDR               (7'h0),
    .DCLK                (1'b0),
    .DEN                 (1'b0),
    .DI                  (16'h0),
    .DO                  (pll1_do_unused),
    .DRDY                (pll1_drdy_unused),
    .DWE                 (1'b0),
    .CLKOUTPHYEN         (pll1_clkoutphy_en_in),
    .CLKOUTPHY           (pll1_clkoutphy),
    // Other control and status signals
    .LOCKED              (pll1_locked),
    .PWRDWN              (1'b0),
    .RST                 (pll1_rst_in)
);

  // Output buffering
  //-----------------------------------

  BUFGCE pll1_clkout0_buf
   (.O   (pll1_clkout0_out),
    .CE  (pll1_locked),
    .I   (pll1_clkout0)
   );
end
end
endgenerate

endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_clk_rst_top #( 
   parameter C_SIM_DEVICE    = "ULTRASCALE", 
   parameter C_SIM_VERSION   = 1.0,
   parameter C_DEVICE = "xcku115",
   parameter C_SERIALIZATION_FACTOR = 4,
   parameter C_EN_MULTI_INTF        =  0,
   parameter C_PLL_SHARE            = 0,
   parameter C_PLL0_DIV_FACTOR      = 1,
   parameter C_PLL1_DIV_FACTOR      = 1,
   parameter C_PLL0_PHY_MODE  = "VCO",
   parameter C_PLL1_PHY_MODE  = "VCO",
   parameter C_CLKIN_PERIOD   =  1.000, 
   parameter C_PLL0_M         =  1,
   parameter C_PLL0_D         =  1,
   parameter C_PLL0_O1        =  1,
   parameter C_PLL1_M         =  1,
   parameter C_PLL1_D         =  1,
   parameter C_EN_TX          =  0,
   parameter C_EN_RX          =  0,
   parameter C_SERIAL_MODE    = "FALSE",
   parameter C_PLL0_CLK0_PHASE      =  0.000, 
   parameter C_PLL0_CLK1_PHASE      =  0.000, 
   parameter C_PLL1_CLK0_PHASE      =  0.000, 
   parameter C_PLL1_CLK1_PHASE      =  0.000,
   parameter C_USE_RIU_CLK_FROM_PLL = 1'b0,
   parameter C_PLL0_RX_EXTERNAL_CLK_TO_DATA   =  0,
   parameter USE_PLL1         = 1'b0
)
(
   input     [6:0]  daddr,
   input            dclk,
   input            den,
   input     [15:0] di,
   input            dwe,
   output    [15:0] do_out,
   output           drdy,
   input     clk_in,
   input     riu_clk_in,
   input     rst_in,
   input     multi_intf_lock_in,
   input     all_bsc_dly_rdy_in,
   input     all_bsc_vtc_rdy_in,
   input     shared_pll0_clkout0_in,
   input     shared_pll1_clkout0_in,
   input     shared_pll0_locked_in,
   input     shared_pll1_locked_in,
   input     bs_rst_dphy_in,
   output    pll0_clkoutphy_out,
   output    pll0_clkout0_out,
   output    pll0_clkout1_out,
   output    pll1_clkoutphy_out,
   output    pll1_clkout0_out,
   output    pll0_locked_out,
   output    pll1_locked_out,
   output    [51:0] rst_dly_out,
   output    [51:0] bs_rst_out,
   output    bsctrl_rst_out,
   output    bsc_en_vtc_out,
   output    rst_seq_done_out
   
);

   wire      pll0_locked;
   wire      pll1_locked;
   wire      pll0_locked_int;
   wire      pll1_locked_int;
   wire      pll0_rst;
   wire      pll1_rst;
   wire      pll0_clkoutphy_en;
   wire      pll1_clkoutphy_en;
   wire      pll0_clkout0;
   wire      pll1_clkout0;
   wire      pll0_clkout0_int;
   wire      pll1_clkout0_int;
   wire      pll0_clkout1;

   assign pll0_locked_out    =  pll0_locked;
   assign pll1_locked_out    =  pll1_locked;
   assign pll0_clkout0_out   =  pll0_clkout0;
   assign pll1_clkout0_out   =  pll1_clkout0;
   assign pll0_clkout1_out   =  pll0_clkout1;
   assign pll0_locked_int    =  (C_PLL_SHARE == 0) ? pll0_locked  : shared_pll0_locked_in;
   assign pll1_locked_int    =  (C_PLL_SHARE == 0) ? pll1_locked  : shared_pll1_locked_in;
   assign pll0_clkout0_int   =  (C_PLL_SHARE == 0) ? pll0_clkout0 : shared_pll0_clkout0_in;
   assign pll1_clkout0_int   =  (C_PLL_SHARE == 0) ? pll1_clkout0 : shared_pll1_clkout0_in;

 high_speed_selectio_wiz_v3_5_1_clk_scheme #( 
    .C_SIM_DEVICE            (C_SIM_DEVICE),
    .C_SIM_VERSION           (C_SIM_VERSION),
    .C_DEVICE                (C_DEVICE),
    .C_SERIALIZATION_FACTOR  (C_SERIALIZATION_FACTOR), 
    .C_PLL_SHARE             (C_PLL_SHARE),
    .C_PLL0_DIV_FACTOR       (C_PLL0_DIV_FACTOR),      
    .C_PLL1_DIV_FACTOR       (C_PLL1_DIV_FACTOR),      
    .C_PLL0_PHY_MODE         (C_PLL0_PHY_MODE),  
    .C_PLL1_PHY_MODE         (C_PLL1_PHY_MODE), 
    .C_CLKIN_PERIOD          (C_CLKIN_PERIOD),   
    .C_PLL0_M                (C_PLL0_M),     
    .C_PLL0_D                (C_PLL0_D),       
    .C_PLL0_O1               (C_PLL0_O1),       
    .C_PLL1_M                (C_PLL1_M),       
    .C_PLL1_D                (C_PLL1_D),       
    .C_EN_TX                 (C_EN_TX),
    .C_EN_RX                 (C_EN_RX),
    .C_PLL0_CLK0_PHASE       (C_PLL0_CLK0_PHASE),
    .C_PLL0_CLK1_PHASE       (C_PLL0_CLK1_PHASE),
    .C_PLL1_CLK0_PHASE       (C_PLL1_CLK0_PHASE),
    .C_PLL1_CLK1_PHASE       (C_PLL1_CLK1_PHASE),
    .C_SERIAL_MODE           (C_SERIAL_MODE)
)   
clk_scheme_inst
(
        .daddr                (daddr),
        .dclk                 (dclk),
        .den                  (den),
        .di                   (di),
        .do_out               (do_out),
        .drdy                 (drdy),
        .dwe                  (dwe),
        .clk_in               (clk_in),
        .pll0_rst_in          (pll0_rst),
        .pll1_rst_in          (pll1_rst),
        .pll0_clkoutphy_en_in (pll0_clkoutphy_en),
        .pll1_clkoutphy_en_in (pll1_clkoutphy_en),
        .pll0_clkoutphy_out   (pll0_clkoutphy_out),
        .pll0_clkout0_out     (pll0_clkout0),
        .pll0_clkout1_out     (pll0_clkout1),
        .pll1_clkoutphy_out   (pll1_clkoutphy_out),
        .pll1_clkout0_out     (pll1_clkout0),
        .pll0_locked_out      (pll0_locked),
        .pll1_locked_out      (pll1_locked)
);

high_speed_selectio_wiz_v3_5_1_rst_scheme #(
         .C_USE_RIU_CLK_FROM_PLL  (C_USE_RIU_CLK_FROM_PLL), 
         .C_EN_MULTI_INTF         (C_EN_MULTI_INTF),
         .C_PLL0_RX_EXTERNAL_CLK_TO_DATA (C_PLL0_RX_EXTERNAL_CLK_TO_DATA),
         .USE_PLL1                (USE_PLL1)
)
rst_scheme_inst( 
         .riu_clk_in               (riu_clk_in),
         .rst_in                   (rst_in),
         .multi_intf_lock_in       (multi_intf_lock_in),
         .fab_clk_pll0_in          (pll0_clkout0_int),
         .fab_clk_pll1_in          (pll1_clkout0_int),
         .pll0_clkout1             (pll0_clkout1),
         .all_bsc_dly_rdy_in       (all_bsc_dly_rdy_in),
         .all_bsc_vtc_rdy_in       (all_bsc_vtc_rdy_in),
         .pll0_locked_in           (pll0_locked_int),
         .pll1_locked_in           (pll1_locked_int),
         .bs_rst_dphy_in           (bs_rst_dphy_in),
         .rst_dly_out              (rst_dly_out),
         .bs_rst_out               (bs_rst_out),
         .bsctrl_rst_out           (bsctrl_rst_out),
         .pll0_clkoutphy_en_out    (pll0_clkoutphy_en),
         .pll1_clkoutphy_en_out    (pll1_clkoutphy_en),
         .pll0_rst_out             (pll0_rst),
         .pll1_rst_out             (pll1_rst),
         .bsc_en_vtc_out           (bsc_en_vtc_out),
         .rst_seq_done_out         (rst_seq_done_out)
);

endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.



`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_bs_ctrl_top #(
   parameter C_SIM_DEVICE = "ULTRASCALE",
   parameter C_SIM_VERSION = 1.0,
   parameter C_EN_BSC0  = 0,
   parameter C_EN_BSC1  = 0,
   parameter C_EN_BSC2  = 0,
   parameter C_EN_BSC3  = 0,
   parameter C_EN_BSC4  = 0,
   parameter C_EN_BSC5  = 0,
   parameter C_EN_BSC6  = 0,
   parameter C_EN_BSC7  = 0,
   parameter [7:0]  C_INV_RX_CLK                =  8'b0,
   parameter C_BSC_CTRL_CLK         = "EXTERNAL",
   parameter C_BSC_EN_DYN_ODLY_MODE = "FALSE",
   parameter C_BSC_IDLY_VT_TRACK    = "TRUE",
   parameter C_BSC_ODLY_VT_TRACK    = "TRUE",
   parameter C_BSC_QDLY_VT_TRACK    = "TRUE",
   parameter C_BSC_READ_IDLE_COUNT  = 6'h00,
   parameter C_BSC_REFCLK_SRC       = "PLLCLK",
   parameter C_BSC_ROUNDING_FACTOR  = 16,
   parameter C_BSC_RXGATE_EXTEND    = "FALSE",
   parameter C_BSC_RX_GATING        = "DISABLE",
   parameter C_BSC_SIM_SPEEDUP      = "FAST",
   parameter C_BSC_SELF_CALIBRATE   = "ENABLE",
   parameter C_DIV_MODE                        = "DIV2",
   parameter C_NIB0_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB0_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB0_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB0_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB1_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB1_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB1_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB1_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB2_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB2_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB2_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB2_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB3_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB3_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB3_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB3_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB4_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB4_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB4_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB4_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB5_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB5_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB5_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB5_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB6_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB6_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB6_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB6_EN_OTHER_NCLK              = 1'b0,
   parameter C_NIB7_EN_CLK_TO_EXT_NORTH        = 1'b0,
   parameter C_NIB7_EN_CLK_TO_EXT_SOUTH        = 1'b0,
   parameter C_NIB7_EN_OTHER_PCLK              = 1'b0,
   parameter C_NIB7_EN_OTHER_NCLK              = 1'b0,
   parameter C_ENABLE_RIU_SPLIT                = "FALSE",
   parameter C_EN_RIU_OR0                      = "FALSE",
   parameter C_EN_RIU_OR1                      = "FALSE",
   parameter C_EN_RIU_OR2                      = "FALSE",
   parameter C_EN_RIU_OR3                      = "FALSE",
   parameter C_RX_CLK_PHASE                    = "SHIFT_0",
   parameter C_SERIAL_MODE                     = "FALSE",
   parameter C_NUM_BS_CTRL                     = 8,
   parameter C_TX_IN_NIB0                      = 1'b0,
   parameter C_TX_IN_NIB1                      = 1'b0,
   parameter C_TX_IN_NIB2                      = 1'b0,
   parameter C_TX_IN_NIB3                      = 1'b0,
   parameter C_TX_IN_NIB4                      = 1'b0,
   parameter C_TX_IN_NIB5                      = 1'b0,
   parameter C_TX_IN_NIB6                      = 1'b0,
   parameter C_TX_IN_NIB7                      = 1'b0,
   parameter C_BIDIR_IN_NIB0                   = 1'b0,
   parameter C_BIDIR_IN_NIB1                   = 1'b0,
   parameter C_BIDIR_IN_NIB2                   = 1'b0,
   parameter C_BIDIR_IN_NIB3                   = 1'b0,
   parameter C_BIDIR_IN_NIB4                   = 1'b0,
   parameter C_BIDIR_IN_NIB5                   = 1'b0,
   parameter C_BIDIR_IN_NIB6                   = 1'b0,
   parameter C_BIDIR_IN_NIB7                   = 1'b0,
   parameter C_RX_IN_NIB0                      = 1'b0,
   parameter C_RX_IN_NIB1                      = 1'b0,
   parameter C_RX_IN_NIB2                      = 1'b0,
   parameter C_RX_IN_NIB3                      = 1'b0,
   parameter C_RX_IN_NIB4                      = 1'b0,
   parameter C_RX_IN_NIB5                      = 1'b0,
   parameter C_RX_IN_NIB6                      = 1'b0,
   parameter C_RX_IN_NIB7                      = 1'b0
)
(  input             rst_in,
   output            n0_dly_rdy_out,
   output     [39:0] n0_rx_bit_ctrl_out0,
   output     [39:0] n0_rx_bit_ctrl_out1, 
   output     [39:0] n0_rx_bit_ctrl_out2, 
   output     [39:0] n0_rx_bit_ctrl_out3, 
   output     [39:0] n0_rx_bit_ctrl_out4,
   output     [39:0] n0_rx_bit_ctrl_out5,
   output     [39:0] n0_rx_bit_ctrl_out6,
   output     [39:0] n0_tx_bit_ctrl_out0,
   output     [39:0] n0_tx_bit_ctrl_out1, 
   output     [39:0] n0_tx_bit_ctrl_out2, 
   output     [39:0] n0_tx_bit_ctrl_out3, 
   output     [39:0] n0_tx_bit_ctrl_out4,
   output     [39:0] n0_tx_bit_ctrl_out5,
   output     [39:0] n0_tx_bit_ctrl_out6,
   output     [39:0] n0_tx_bit_ctrl_out_tri,
   output            n0_vtc_rdy_out,
   input             n0_en_vtc_in,
   input             n0_pll_clk_in,
   input             n0_refclk_in,
   input      [5:0]  n01_riu_addr_in,
   input             n01_riu_clk_in,
   input      [1:0]  n01_riu_nibble_sel_in,
   input      [15:0] n01_riu_wr_data_in,
   input             n01_riu_wr_en_in,
   output     [15:0] n01_riu_rd_data_out,
   output            n01_riu_valid_out,
   input      [5:0]  n0_riu_addr_in,
   input             n0_riu_nibble_sel_in,
   input      [15:0] n0_riu_wr_data_in,
   input             n0_riu_wr_en_in,
   output     [15:0] n0_riu_rd_data_out,
   output            n0_riu_valid_out,
   input      [5:0]  n1_riu_addr_in,
   input             n1_riu_nibble_sel_in,
   input      [15:0] n1_riu_wr_data_in,
   input             n1_riu_wr_en_in,
   output     [15:0] n1_riu_rd_data_out,
   output            n1_riu_valid_out,
   input      [39:0] n0_rx_bit_ctrl_in0,
   input      [39:0] n0_rx_bit_ctrl_in1, 
   input      [39:0] n0_rx_bit_ctrl_in2, 
   input      [39:0] n0_rx_bit_ctrl_in3, 
   input      [39:0] n0_rx_bit_ctrl_in4,
   input      [39:0] n0_rx_bit_ctrl_in5,
   input      [39:0] n0_rx_bit_ctrl_in6,
   input      [3:0]  n0_tbyte_in,
   input      [39:0] n0_tx_bit_ctrl_in0,
   input      [39:0] n0_tx_bit_ctrl_in1, 
   input      [39:0] n0_tx_bit_ctrl_in2, 
   input      [39:0] n0_tx_bit_ctrl_in3, 
   input      [39:0] n0_tx_bit_ctrl_in4,
   input      [39:0] n0_tx_bit_ctrl_in5,
   input      [39:0] n0_tx_bit_ctrl_in6,
   input      [39:0] n0_tx_bit_ctrl_in_tri,

   output            n1_dly_rdy_out,
   output     [39:0] n1_rx_bit_ctrl_out0,
   output     [39:0] n1_rx_bit_ctrl_out1, 
   output     [39:0] n1_rx_bit_ctrl_out2, 
   output     [39:0] n1_rx_bit_ctrl_out3, 
   output     [39:0] n1_rx_bit_ctrl_out4,
   output     [39:0] n1_rx_bit_ctrl_out5,
   output     [39:0] n1_rx_bit_ctrl_out6,
   output     [39:0] n1_tx_bit_ctrl_out0,
   output     [39:0] n1_tx_bit_ctrl_out1, 
   output     [39:0] n1_tx_bit_ctrl_out2, 
   output     [39:0] n1_tx_bit_ctrl_out3, 
   output     [39:0] n1_tx_bit_ctrl_out4,
   output     [39:0] n1_tx_bit_ctrl_out5,
   output     [39:0] n1_tx_bit_ctrl_out6,
   output     [39:0] n1_tx_bit_ctrl_out_tri,
   output            n1_vtc_rdy_out,
   input             n1_en_vtc_in,
   input             n1_pll_clk_in,
   input             n1_refclk_in,
   input      [39:0] n1_rx_bit_ctrl_in0,
   input      [39:0] n1_rx_bit_ctrl_in1, 
   input      [39:0] n1_rx_bit_ctrl_in2, 
   input      [39:0] n1_rx_bit_ctrl_in3, 
   input      [39:0] n1_rx_bit_ctrl_in4,
   input      [39:0] n1_rx_bit_ctrl_in5,
   input      [39:0] n1_rx_bit_ctrl_in6,
   input      [3:0]  n1_tbyte_in,
   input      [39:0] n1_tx_bit_ctrl_in0,
   input      [39:0] n1_tx_bit_ctrl_in1, 
   input      [39:0] n1_tx_bit_ctrl_in2, 
   input      [39:0] n1_tx_bit_ctrl_in3, 
   input      [39:0] n1_tx_bit_ctrl_in4,
   input      [39:0] n1_tx_bit_ctrl_in5,
   input      [39:0] n1_tx_bit_ctrl_in6,
   input      [39:0] n1_tx_bit_ctrl_in_tri,

   output            n2_dly_rdy_out,
   output     [39:0] n2_rx_bit_ctrl_out0,
   output     [39:0] n2_rx_bit_ctrl_out1, 
   output     [39:0] n2_rx_bit_ctrl_out2, 
   output     [39:0] n2_rx_bit_ctrl_out3, 
   output     [39:0] n2_rx_bit_ctrl_out4,
   output     [39:0] n2_rx_bit_ctrl_out5,
   output     [39:0] n2_rx_bit_ctrl_out6,
   output     [39:0] n2_tx_bit_ctrl_out0,
   output     [39:0] n2_tx_bit_ctrl_out1, 
   output     [39:0] n2_tx_bit_ctrl_out2, 
   output     [39:0] n2_tx_bit_ctrl_out3, 
   output     [39:0] n2_tx_bit_ctrl_out4,
   output     [39:0] n2_tx_bit_ctrl_out5,
   output     [39:0] n2_tx_bit_ctrl_out6,
   output     [39:0] n2_tx_bit_ctrl_out_tri,
   output            n2_vtc_rdy_out,
   input             n2_en_vtc_in,
   input             n2_pll_clk_in,
   input             n2_refclk_in,
   input      [5:0]  n23_riu_addr_in,
   input             n23_riu_clk_in,
   input      [1:0]  n23_riu_nibble_sel_in,
   input     [15:0]  n23_riu_wr_data_in,
   input             n23_riu_wr_en_in,
   output    [15:0]  n23_riu_rd_data_out,
   output            n23_riu_valid_out,
   input      [5:0]  n2_riu_addr_in,
   input             n2_riu_nibble_sel_in,
   input      [15:0] n2_riu_wr_data_in,
   input             n2_riu_wr_en_in,
   output     [15:0] n2_riu_rd_data_out,
   output            n2_riu_valid_out,
   input      [5:0]  n3_riu_addr_in,
   input             n3_riu_nibble_sel_in,
   input      [15:0] n3_riu_wr_data_in,
   input             n3_riu_wr_en_in,
   output     [15:0] n3_riu_rd_data_out,
   output            n3_riu_valid_out,
   input      [39:0] n2_rx_bit_ctrl_in0,
   input      [39:0] n2_rx_bit_ctrl_in1, 
   input      [39:0] n2_rx_bit_ctrl_in2, 
   input      [39:0] n2_rx_bit_ctrl_in3, 
   input      [39:0] n2_rx_bit_ctrl_in4,
   input      [39:0] n2_rx_bit_ctrl_in5,
   input      [39:0] n2_rx_bit_ctrl_in6,
   input      [3:0]  n2_tbyte_in,
   input      [39:0] n2_tx_bit_ctrl_in0,
   input      [39:0] n2_tx_bit_ctrl_in1, 
   input      [39:0] n2_tx_bit_ctrl_in2, 
   input      [39:0] n2_tx_bit_ctrl_in3, 
   input      [39:0] n2_tx_bit_ctrl_in4,
   input      [39:0] n2_tx_bit_ctrl_in5,
   input      [39:0] n2_tx_bit_ctrl_in6,
   input      [39:0] n2_tx_bit_ctrl_in_tri,

   output            n3_dly_rdy_out,
   output     [39:0] n3_rx_bit_ctrl_out0,
   output     [39:0] n3_rx_bit_ctrl_out1, 
   output     [39:0] n3_rx_bit_ctrl_out2, 
   output     [39:0] n3_rx_bit_ctrl_out3, 
   output     [39:0] n3_rx_bit_ctrl_out4,
   output     [39:0] n3_rx_bit_ctrl_out5,
   output     [39:0] n3_rx_bit_ctrl_out6,
   output     [39:0] n3_tx_bit_ctrl_out0,
   output     [39:0] n3_tx_bit_ctrl_out1, 
   output     [39:0] n3_tx_bit_ctrl_out2, 
   output     [39:0] n3_tx_bit_ctrl_out3, 
   output     [39:0] n3_tx_bit_ctrl_out4,
   output     [39:0] n3_tx_bit_ctrl_out5,
   output     [39:0] n3_tx_bit_ctrl_out6,
   output     [39:0] n3_tx_bit_ctrl_out_tri,
   output            n3_vtc_rdy_out,
   input             n3_en_vtc_in,
   input             n3_pll_clk_in,
   input             n3_refclk_in,
   input      [39:0] n3_rx_bit_ctrl_in0,
   input      [39:0] n3_rx_bit_ctrl_in1, 
   input      [39:0] n3_rx_bit_ctrl_in2, 
   input      [39:0] n3_rx_bit_ctrl_in3, 
   input      [39:0] n3_rx_bit_ctrl_in4,
   input      [39:0] n3_rx_bit_ctrl_in5,
   input      [39:0] n3_rx_bit_ctrl_in6,
   input      [3:0]  n3_tbyte_in,
   input      [39:0] n3_tx_bit_ctrl_in0,
   input      [39:0] n3_tx_bit_ctrl_in1, 
   input      [39:0] n3_tx_bit_ctrl_in2, 
   input      [39:0] n3_tx_bit_ctrl_in3, 
   input      [39:0] n3_tx_bit_ctrl_in4,
   input      [39:0] n3_tx_bit_ctrl_in5,
   input      [39:0] n3_tx_bit_ctrl_in6,
   input      [39:0] n3_tx_bit_ctrl_in_tri,

   output            n4_dly_rdy_out,
   output     [39:0] n4_rx_bit_ctrl_out0,
   output     [39:0] n4_rx_bit_ctrl_out1, 
   output     [39:0] n4_rx_bit_ctrl_out2, 
   output     [39:0] n4_rx_bit_ctrl_out3, 
   output     [39:0] n4_rx_bit_ctrl_out4,
   output     [39:0] n4_rx_bit_ctrl_out5,
   output     [39:0] n4_rx_bit_ctrl_out6,
   output     [39:0] n4_tx_bit_ctrl_out0,
   output     [39:0] n4_tx_bit_ctrl_out1, 
   output     [39:0] n4_tx_bit_ctrl_out2, 
   output     [39:0] n4_tx_bit_ctrl_out3, 
   output     [39:0] n4_tx_bit_ctrl_out4,
   output     [39:0] n4_tx_bit_ctrl_out5,
   output     [39:0] n4_tx_bit_ctrl_out6,
   output     [39:0] n4_tx_bit_ctrl_out_tri,
   output            n4_vtc_rdy_out,
   input             n4_en_vtc_in,
   input             n4_pll_clk_in,
   input             n4_refclk_in,
   input      [5:0]  n45_riu_addr_in,
   input             n45_riu_clk_in,
   input      [1:0]  n45_riu_nibble_sel_in,
   input      [15:0] n45_riu_wr_data_in,
   input             n45_riu_wr_en_in,
   output     [15:0] n45_riu_rd_data_out,
   output            n45_riu_valid_out,
   input      [5:0]  n4_riu_addr_in,
   input             n4_riu_nibble_sel_in,
   input      [15:0] n4_riu_wr_data_in,
   input             n4_riu_wr_en_in,
   output     [15:0] n4_riu_rd_data_out,
   output            n4_riu_valid_out,
   input      [5:0]  n5_riu_addr_in,
   input             n5_riu_nibble_sel_in,
   input      [15:0] n5_riu_wr_data_in,
   input             n5_riu_wr_en_in,
   output     [15:0] n5_riu_rd_data_out,
   output            n5_riu_valid_out,
   input      [39:0] n4_rx_bit_ctrl_in0,
   input      [39:0] n4_rx_bit_ctrl_in1, 
   input      [39:0] n4_rx_bit_ctrl_in2, 
   input      [39:0] n4_rx_bit_ctrl_in3, 
   input      [39:0] n4_rx_bit_ctrl_in4,
   input      [39:0] n4_rx_bit_ctrl_in5,
   input      [39:0] n4_rx_bit_ctrl_in6,
   input      [3:0]  n4_tbyte_in,
   input      [39:0] n4_tx_bit_ctrl_in0,
   input      [39:0] n4_tx_bit_ctrl_in1, 
   input      [39:0] n4_tx_bit_ctrl_in2, 
   input      [39:0] n4_tx_bit_ctrl_in3, 
   input      [39:0] n4_tx_bit_ctrl_in4,
   input      [39:0] n4_tx_bit_ctrl_in5,
   input      [39:0] n4_tx_bit_ctrl_in6,
   input      [39:0] n4_tx_bit_ctrl_in_tri,

   output            n5_dly_rdy_out,
   output     [39:0] n5_rx_bit_ctrl_out0,
   output     [39:0] n5_rx_bit_ctrl_out1, 
   output     [39:0] n5_rx_bit_ctrl_out2, 
   output     [39:0] n5_rx_bit_ctrl_out3, 
   output     [39:0] n5_rx_bit_ctrl_out4,
   output     [39:0] n5_rx_bit_ctrl_out5,
   output     [39:0] n5_rx_bit_ctrl_out6,
   output     [39:0] n5_tx_bit_ctrl_out0,
   output     [39:0] n5_tx_bit_ctrl_out1, 
   output     [39:0] n5_tx_bit_ctrl_out2, 
   output     [39:0] n5_tx_bit_ctrl_out3, 
   output     [39:0] n5_tx_bit_ctrl_out4,
   output     [39:0] n5_tx_bit_ctrl_out5,
   output     [39:0] n5_tx_bit_ctrl_out6,
   output     [39:0] n5_tx_bit_ctrl_out_tri,
   output            n5_vtc_rdy_out,
   input             n5_en_vtc_in,
   input             n5_pll_clk_in,
   input             n5_refclk_in,
   input      [39:0] n5_rx_bit_ctrl_in0,
   input      [39:0] n5_rx_bit_ctrl_in1, 
   input      [39:0] n5_rx_bit_ctrl_in2, 
   input      [39:0] n5_rx_bit_ctrl_in3, 
   input      [39:0] n5_rx_bit_ctrl_in4,
   input      [39:0] n5_rx_bit_ctrl_in5,
   input      [39:0] n5_rx_bit_ctrl_in6,
   input      [3:0]  n5_tbyte_in,
   input      [39:0] n5_tx_bit_ctrl_in0,
   input      [39:0] n5_tx_bit_ctrl_in1, 
   input      [39:0] n5_tx_bit_ctrl_in2, 
   input      [39:0] n5_tx_bit_ctrl_in3, 
   input      [39:0] n5_tx_bit_ctrl_in4,
   input      [39:0] n5_tx_bit_ctrl_in5,
   input      [39:0] n5_tx_bit_ctrl_in6,
   input      [39:0] n5_tx_bit_ctrl_in_tri,

   output            n6_dly_rdy_out,
   output     [39:0] n6_rx_bit_ctrl_out0,
   output     [39:0] n6_rx_bit_ctrl_out1, 
   output     [39:0] n6_rx_bit_ctrl_out2, 
   output     [39:0] n6_rx_bit_ctrl_out3, 
   output     [39:0] n6_rx_bit_ctrl_out4,
   output     [39:0] n6_rx_bit_ctrl_out5,
   output     [39:0] n6_rx_bit_ctrl_out6,
   output     [39:0] n6_tx_bit_ctrl_out0,
   output     [39:0] n6_tx_bit_ctrl_out1, 
   output     [39:0] n6_tx_bit_ctrl_out2, 
   output     [39:0] n6_tx_bit_ctrl_out3, 
   output     [39:0] n6_tx_bit_ctrl_out4,
   output     [39:0] n6_tx_bit_ctrl_out5,
   output     [39:0] n6_tx_bit_ctrl_out6,
   output     [39:0] n6_tx_bit_ctrl_out_tri,
   output            n6_vtc_rdy_out,
   input             n6_en_vtc_in,
   input             n6_pll_clk_in,
   input             n6_refclk_in,
   input     [5:0]   n67_riu_addr_in,
   input             n67_riu_clk_in,
   input     [1:0]   n67_riu_nibble_sel_in,
   input     [15:0]  n67_riu_wr_data_in,
   input             n67_riu_wr_en_in,
   output    [15:0]  n67_riu_rd_data_out,
   output            n67_riu_valid_out,
   input      [5:0]  n6_riu_addr_in,
   input             n6_riu_nibble_sel_in,
   input      [15:0] n6_riu_wr_data_in,
   input             n6_riu_wr_en_in,
   output     [15:0] n6_riu_rd_data_out,
   output            n6_riu_valid_out,
   input      [5:0]  n7_riu_addr_in,
   input             n7_riu_nibble_sel_in,
   input      [15:0] n7_riu_wr_data_in,
   input             n7_riu_wr_en_in,
   output     [15:0] n7_riu_rd_data_out,
   output            n7_riu_valid_out,
   input      [39:0] n6_rx_bit_ctrl_in0,
   input      [39:0] n6_rx_bit_ctrl_in1, 
   input      [39:0] n6_rx_bit_ctrl_in2, 
   input      [39:0] n6_rx_bit_ctrl_in3, 
   input      [39:0] n6_rx_bit_ctrl_in4,
   input      [39:0] n6_rx_bit_ctrl_in5,
   input      [39:0] n6_rx_bit_ctrl_in6,
   input      [3:0]  n6_tbyte_in,
   input      [39:0] n6_tx_bit_ctrl_in0,
   input      [39:0] n6_tx_bit_ctrl_in1, 
   input      [39:0] n6_tx_bit_ctrl_in2, 
   input      [39:0] n6_tx_bit_ctrl_in3, 
   input      [39:0] n6_tx_bit_ctrl_in4,
   input      [39:0] n6_tx_bit_ctrl_in5,
   input      [39:0] n6_tx_bit_ctrl_in6,
   input      [39:0] n6_tx_bit_ctrl_in_tri,

   output            n7_dly_rdy_out,
   output     [39:0] n7_rx_bit_ctrl_out0,
   output     [39:0] n7_rx_bit_ctrl_out1, 
   output     [39:0] n7_rx_bit_ctrl_out2, 
   output     [39:0] n7_rx_bit_ctrl_out3, 
   output     [39:0] n7_rx_bit_ctrl_out4,
   output     [39:0] n7_rx_bit_ctrl_out5,
   output     [39:0] n7_rx_bit_ctrl_out6,
   output     [39:0] n7_tx_bit_ctrl_out0,
   output     [39:0] n7_tx_bit_ctrl_out1, 
   output     [39:0] n7_tx_bit_ctrl_out2, 
   output     [39:0] n7_tx_bit_ctrl_out3, 
   output     [39:0] n7_tx_bit_ctrl_out4,
   output     [39:0] n7_tx_bit_ctrl_out5,
   output     [39:0] n7_tx_bit_ctrl_out6,
   output     [39:0] n7_tx_bit_ctrl_out_tri,
   output            n7_vtc_rdy_out,
   input             n7_en_vtc_in,
   input             n7_pll_clk_in,
   input             n7_refclk_in,
   input      [39:0] n7_rx_bit_ctrl_in0,
   input      [39:0] n7_rx_bit_ctrl_in1, 
   input      [39:0] n7_rx_bit_ctrl_in2, 
   input      [39:0] n7_rx_bit_ctrl_in3, 
   input      [39:0] n7_rx_bit_ctrl_in4,
   input      [39:0] n7_rx_bit_ctrl_in5,
   input      [39:0] n7_rx_bit_ctrl_in6,
   input      [3:0]  n7_tbyte_in,
   input      [39:0] n7_tx_bit_ctrl_in0,
   input      [39:0] n7_tx_bit_ctrl_in1, 
   input      [39:0] n7_tx_bit_ctrl_in2, 
   input      [39:0] n7_tx_bit_ctrl_in3, 
   input      [39:0] n7_tx_bit_ctrl_in4,
   input      [39:0] n7_tx_bit_ctrl_in5,
   input      [39:0] n7_tx_bit_ctrl_in6,
   input      [39:0] n7_tx_bit_ctrl_in_tri,

   input      [3:0]  n0_phy_rden_in,
   input      [3:0]  n1_phy_rden_in,
   input      [3:0]  n2_phy_rden_in,
   input      [3:0]  n3_phy_rden_in,
   input      [3:0]  n4_phy_rden_in,
   input      [3:0]  n5_phy_rden_in,
   input      [3:0]  n6_phy_rden_in,
   input      [3:0]  n7_phy_rden_in

);

    localparam [7:0] C_RX_IN_NIB               = { C_RX_IN_NIB7, C_RX_IN_NIB6, C_RX_IN_NIB5, C_RX_IN_NIB4,
                                                   C_RX_IN_NIB3, C_RX_IN_NIB2, C_RX_IN_NIB1, C_RX_IN_NIB0};

    localparam [7:0] C_TX_IN_NIB               = { C_TX_IN_NIB7, C_TX_IN_NIB6, C_TX_IN_NIB5, C_TX_IN_NIB4,
                                                   C_TX_IN_NIB3, C_TX_IN_NIB2, C_TX_IN_NIB1, C_TX_IN_NIB0};

    localparam [7:0] C_BIDIR_IN_NIB               = { C_BIDIR_IN_NIB7, C_BIDIR_IN_NIB6, C_BIDIR_IN_NIB5, C_BIDIR_IN_NIB4,
                                                   C_BIDIR_IN_NIB3, C_BIDIR_IN_NIB2, C_BIDIR_IN_NIB1, C_BIDIR_IN_NIB0};

    localparam [7:0] C_NIB_EN_CLK_TO_EXT_NORTH = {  C_NIB7_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB6_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB5_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB4_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB3_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB2_EN_CLK_TO_EXT_NORTH,
                                                    C_NIB1_EN_CLK_TO_EXT_NORTH, 
                                                    C_NIB0_EN_CLK_TO_EXT_NORTH};


    localparam [7:0] C_NIB_EN_CLK_TO_EXT_SOUTH = {C_NIB7_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB6_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB5_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB4_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB3_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB2_EN_CLK_TO_EXT_SOUTH,
                                                  C_NIB1_EN_CLK_TO_EXT_SOUTH, 
                                                  C_NIB0_EN_CLK_TO_EXT_SOUTH 
                                                  };

  
    localparam [7:0] C_NIB_EN_OTHER_PCLK  =       {C_NIB7_EN_OTHER_PCLK,
                                                   C_NIB6_EN_OTHER_PCLK,
                                                   C_NIB5_EN_OTHER_PCLK,
                                                   C_NIB4_EN_OTHER_PCLK,
                                                   C_NIB3_EN_OTHER_PCLK,
                                                   C_NIB2_EN_OTHER_PCLK,
                                                   C_NIB1_EN_OTHER_PCLK, 
                                                   C_NIB0_EN_OTHER_PCLK};

    localparam [7:0] C_NIB_EN_OTHER_NCLK  =        {C_NIB7_EN_OTHER_NCLK,
                                                    C_NIB6_EN_OTHER_NCLK,
                                                    C_NIB5_EN_OTHER_NCLK,
                                                    C_NIB4_EN_OTHER_NCLK,
                                                    C_NIB3_EN_OTHER_NCLK,
                                                    C_NIB2_EN_OTHER_NCLK,
                                                    C_NIB1_EN_OTHER_NCLK, 
                                                    C_NIB0_EN_OTHER_NCLK};


   wire   [C_NUM_BS_CTRL-1:0]            clk_to_ext_north_out;
   wire   [C_NUM_BS_CTRL-1:0]            clk_to_ext_south_out;
   wire   [C_NUM_BS_CTRL-1:0]            dly_rdy_out;
   wire   [C_NUM_BS_CTRL-1:0]            nclk_nibble_out;
   wire   [C_NUM_BS_CTRL-1:0]            pclk_nibble_out;
   wire   [39:0]                         rx_bit_ctrl_out0[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_out1[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_out2[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_out3[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_out4[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_out5[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_out6[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_out0[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_out1[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_out2[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_out3[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_out4[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_out5[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_out6[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_out_tri[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_in_tri[C_NUM_BS_CTRL-1:0];
   wire   [C_NUM_BS_CTRL-1:0]            vtc_rdy_out;
   wire   [C_NUM_BS_CTRL-1:0]            en_vtc_in;
   wire   [C_NUM_BS_CTRL-1:0]            clk_from_ext_in;
   wire   [C_NUM_BS_CTRL-1:0]            nclk_nibble_in;
   wire   [C_NUM_BS_CTRL-1:0]            pclk_nibble_in;
   wire   [C_NUM_BS_CTRL-1:0]            pll_clk_in;
   wire   [C_NUM_BS_CTRL-1:0]            refclk_in;
   wire   [C_NUM_BS_CTRL-1:0]            riu_clk_in;
   wire   [C_NUM_BS_CTRL-1:0]            riu_nibble_sel_in;
   wire   [C_NUM_BS_CTRL-1:0]            riu_wr_en_in;
   wire   [C_NUM_BS_CTRL-1:0]            riu_valid_out;
   wire   [15:0]                         riu_wr_data_in[C_NUM_BS_CTRL-1:0];
   wire   [5:0]                          riu_addr_in[C_NUM_BS_CTRL-1:0];
   wire   [15:0]                         riu_rd_data_out[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_in0[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_in1[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_in2[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_in3[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         rx_bit_ctrl_in4[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_in5[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         rx_bit_ctrl_in6[C_NUM_BS_CTRL-1:0];
   wire   [3:0]                          tbyte_in[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_in0[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_in1[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_in2[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_in3[C_NUM_BS_CTRL-1:0]; 
   wire   [39:0]                         tx_bit_ctrl_in4[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_in5[C_NUM_BS_CTRL-1:0];
   wire   [39:0]                         tx_bit_ctrl_in6[C_NUM_BS_CTRL-1:0];

   wire   [15:0]                         riu_or_rd_data_out[3:0];
   wire   [3:0]                          riu_or_rd_valid_out;
   wire   [15:0]                         riu_or_rd_data_low_in[3:0];
   wire   [15:0]                         riu_or_rd_data_upp_in[3:0];
   wire   [3:0]                          riu_or_rd_valid_low_in;
   wire   [3:0]                          riu_or_rd_valid_upp_in;
   wire   [3:0]                          phy_rden[C_NUM_BS_CTRL-1:0];


   //Inter-Nibble Clocking 

   assign     nclk_nibble_in[0]        = (C_EN_BSC0 == 0 || C_EN_BSC1 == 0) ? 1'b0 : nclk_nibble_out[1];
   assign     pclk_nibble_in[0]        = (C_EN_BSC0 == 0 || C_EN_BSC1 == 0) ? 1'b0 : pclk_nibble_out[1];
 
   assign     nclk_nibble_in[1]        = (C_EN_BSC1 == 0 || C_EN_BSC0 == 0) ? 1'b0 : nclk_nibble_out[0];
   assign     pclk_nibble_in[1]        = (C_EN_BSC1 == 0 || C_EN_BSC0 == 0) ? 1'b0 : pclk_nibble_out[0];

   assign     nclk_nibble_in[2]        = (C_EN_BSC2 == 0 || C_EN_BSC3 == 0) ? 1'b0 : nclk_nibble_out[3];
   assign     pclk_nibble_in[2]        = (C_EN_BSC2 == 0 || C_EN_BSC3 == 0) ? 1'b0 : pclk_nibble_out[3];
 
   assign     nclk_nibble_in[3]        = (C_EN_BSC3 == 0 || C_EN_BSC2 == 0) ? 1'b0 : nclk_nibble_out[2];
   assign     pclk_nibble_in[3]        = (C_EN_BSC3 == 0 || C_EN_BSC2 == 0) ? 1'b0 : pclk_nibble_out[2];

   assign     nclk_nibble_in[4]        = (C_EN_BSC4 == 0 || C_EN_BSC5 == 0) ? 1'b0 : nclk_nibble_out[5];
   assign     pclk_nibble_in[4]        = (C_EN_BSC4 == 0 || C_EN_BSC5 == 0) ? 1'b0 : pclk_nibble_out[5];
 
   assign     nclk_nibble_in[5]        = (C_EN_BSC5 == 0 || C_EN_BSC4 == 0) ? 1'b0 : nclk_nibble_out[4];
   assign     pclk_nibble_in[5]        = (C_EN_BSC5 == 0 || C_EN_BSC4 == 0) ? 1'b0 : pclk_nibble_out[4];

   assign     nclk_nibble_in[6]        = (C_EN_BSC6 == 0 || C_EN_BSC7 == 0) ? 1'b0 : nclk_nibble_out[7];
   assign     pclk_nibble_in[6]        = (C_EN_BSC6 == 0 || C_EN_BSC7 == 0) ? 1'b0 : pclk_nibble_out[7];
 
   assign     nclk_nibble_in[7]        = (C_EN_BSC7 == 0 || C_EN_BSC6 == 0) ? 1'b0 : nclk_nibble_out[6];
   assign     pclk_nibble_in[7]        = (C_EN_BSC7 == 0 || C_EN_BSC6 == 0) ? 1'b0 : pclk_nibble_out[6];

   //Inter-Byte Clocking 
   assign     clk_from_ext_in[0]       = (C_NIB2_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[2] : 1'b1;

   assign     clk_from_ext_in[1]       = (C_NIB3_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[3] : 1'b1;

   assign     clk_from_ext_in[2]       = (C_NIB0_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[0] :
                                         (C_NIB4_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[4] : 1'b1;

   assign     clk_from_ext_in[3]       = (C_NIB1_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[1] :
                                         (C_NIB5_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[5] : 1'b1;

   assign     clk_from_ext_in[4]       = (C_NIB2_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[2] :
                                         (C_NIB6_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[6] : 1'b1;

   assign     clk_from_ext_in[5]       = (C_NIB3_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[3] :
                                         (C_NIB7_EN_CLK_TO_EXT_SOUTH == 1'b1) ? clk_to_ext_south_out[7] : 1'b1;

   assign     clk_from_ext_in[6]       = (C_NIB4_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[4] : 1'b1;

   assign     clk_from_ext_in[7]       = (C_NIB5_EN_CLK_TO_EXT_NORTH == 1'b1) ? clk_to_ext_north_out[5] : 1'b1;

   assign     n0_dly_rdy_out           = dly_rdy_out[0];
   assign     n0_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[0];
   assign     n0_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[0]; 
   assign     n0_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[0]; 
   assign     n0_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[0]; 
   assign     n0_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[0];
   assign     n0_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[0];
   assign     n0_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[0];
   assign     n0_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[0];
   assign     n0_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[0]; 
   assign     n0_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[0]; 
   assign     n0_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[0]; 
   assign     n0_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[0];
   assign     n0_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[0];
   assign     n0_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[0];
   assign     n0_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[0];
   assign     n0_vtc_rdy_out           = vtc_rdy_out[0];
   assign     tx_bit_ctrl_in_tri[0]    = n0_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[0]             = n0_en_vtc_in;
   assign     pll_clk_in[0]            = n0_pll_clk_in;
   assign     refclk_in[0]             = n0_refclk_in;
   assign     rx_bit_ctrl_in0[0]       = n0_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[0]       = n0_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[0]       = n0_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[0]       = n0_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[0]       = n0_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[0]       = n0_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[0]       = n0_rx_bit_ctrl_in6;
   assign     tbyte_in[0]              = n0_tbyte_in;
   assign     tx_bit_ctrl_in0[0]       = n0_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[0]       = n0_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[0]       = n0_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[0]       = n0_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[0]       = n0_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[0]       = n0_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[0]       = n0_tx_bit_ctrl_in6;

   assign     n1_dly_rdy_out           = dly_rdy_out[1];
   assign     n1_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[1];
   assign     n1_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[1]; 
   assign     n1_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[1]; 
   assign     n1_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[1]; 
   assign     n1_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[1];
   assign     n1_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[1];
   assign     n1_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[1];
   assign     n1_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[1];
   assign     n1_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[1]; 
   assign     n1_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[1]; 
   assign     n1_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[1]; 
   assign     n1_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[1];
   assign     n1_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[1];
   assign     n1_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[1];
   assign     n1_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[1];
   assign     n1_vtc_rdy_out           = vtc_rdy_out[1];
   assign     tx_bit_ctrl_in_tri[1]    = n1_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[1]             = n1_en_vtc_in;
   assign     pll_clk_in[1]            = n1_pll_clk_in;
   assign     refclk_in[1]             = n1_refclk_in;
   assign     rx_bit_ctrl_in0[1]       = n1_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[1]       = n1_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[1]       = n1_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[1]       = n1_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[1]       = n1_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[1]       = n1_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[1]       = n1_rx_bit_ctrl_in6;
   assign     tbyte_in[1]              = n1_tbyte_in;
   assign     tx_bit_ctrl_in0[1]       = n1_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[1]       = n1_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[1]       = n1_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[1]       = n1_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[1]       = n1_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[1]       = n1_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[1]       = n1_tx_bit_ctrl_in6;

   assign     n2_dly_rdy_out           = dly_rdy_out[2];
   assign     n2_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[2];
   assign     n2_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[2]; 
   assign     n2_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[2]; 
   assign     n2_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[2]; 
   assign     n2_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[2];
   assign     n2_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[2];
   assign     n2_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[2];
   assign     n2_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[2];
   assign     n2_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[2]; 
   assign     n2_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[2]; 
   assign     n2_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[2]; 
   assign     n2_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[2];
   assign     n2_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[2];
   assign     n2_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[2];
   assign     n2_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[2];
   assign     n2_vtc_rdy_out           = vtc_rdy_out[2];
   assign     tx_bit_ctrl_in_tri[2]    = n2_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[2]             = n2_en_vtc_in;
   assign     pll_clk_in[2]            = n2_pll_clk_in;
   assign     refclk_in[2]             = n2_refclk_in;
   assign     rx_bit_ctrl_in0[2]       = n2_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[2]       = n2_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[2]       = n2_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[2]       = n2_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[2]       = n2_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[2]       = n2_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[2]       = n2_rx_bit_ctrl_in6;
   assign     tbyte_in[2]              = n2_tbyte_in;
   assign     tx_bit_ctrl_in0[2]       = n2_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[2]       = n2_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[2]       = n2_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[2]       = n2_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[2]       = n2_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[2]       = n2_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[2]       = n2_tx_bit_ctrl_in6;

   assign     n3_dly_rdy_out           = dly_rdy_out[3];
   assign     n3_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[3];
   assign     n3_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[3]; 
   assign     n3_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[3]; 
   assign     n3_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[3]; 
   assign     n3_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[3];
   assign     n3_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[3];
   assign     n3_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[3];
   assign     n3_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[3];
   assign     n3_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[3]; 
   assign     n3_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[3]; 
   assign     n3_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[3]; 
   assign     n3_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[3];
   assign     n3_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[3];
   assign     n3_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[3];
   assign     n3_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[3];
   assign     n3_vtc_rdy_out           = vtc_rdy_out[3];
   assign     tx_bit_ctrl_in_tri[3]    = n3_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[3]             = n3_en_vtc_in;
   assign     pll_clk_in[3]            = n3_pll_clk_in;
   assign     refclk_in[3]             = n3_refclk_in;
   assign     rx_bit_ctrl_in0[3]       = n3_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[3]       = n3_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[3]       = n3_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[3]       = n3_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[3]       = n3_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[3]       = n3_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[3]       = n3_rx_bit_ctrl_in6;
   assign     tbyte_in[3]              = n3_tbyte_in;
   assign     tx_bit_ctrl_in0[3]       = n3_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[3]       = n3_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[3]       = n3_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[3]       = n3_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[3]       = n3_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[3]       = n3_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[3]       = n3_tx_bit_ctrl_in6;

   assign     n4_dly_rdy_out           = dly_rdy_out[4];
   assign     n4_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[4];
   assign     n4_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[4]; 
   assign     n4_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[4]; 
   assign     n4_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[4]; 
   assign     n4_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[4];
   assign     n4_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[4];
   assign     n4_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[4];
   assign     n4_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[4];
   assign     n4_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[4]; 
   assign     n4_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[4]; 
   assign     n4_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[4]; 
   assign     n4_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[4];
   assign     n4_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[4];
   assign     n4_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[4];
   assign     n4_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[4];
   assign     n4_vtc_rdy_out           = vtc_rdy_out[4];
   assign     tx_bit_ctrl_in_tri[4]    = n4_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[4]             = n4_en_vtc_in;
   assign     pll_clk_in[4]            = n4_pll_clk_in;
   assign     refclk_in[4]             = n4_refclk_in;
   assign     rx_bit_ctrl_in0[4]       = n4_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[4]       = n4_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[4]       = n4_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[4]       = n4_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[4]       = n4_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[4]       = n4_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[4]       = n4_rx_bit_ctrl_in6;
   assign     tbyte_in[4]              = n4_tbyte_in;
   assign     tx_bit_ctrl_in0[4]       = n4_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[4]       = n4_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[4]       = n4_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[4]       = n4_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[4]       = n4_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[4]       = n4_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[4]       = n4_tx_bit_ctrl_in6;

   assign     n5_dly_rdy_out           = dly_rdy_out[5];
   assign     n5_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[5];
   assign     n5_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[5]; 
   assign     n5_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[5]; 
   assign     n5_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[5]; 
   assign     n5_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[5];
   assign     n5_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[5];
   assign     n5_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[5];
   assign     n5_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[5];
   assign     n5_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[5]; 
   assign     n5_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[5]; 
   assign     n5_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[5]; 
   assign     n5_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[5];
   assign     n5_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[5];
   assign     n5_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[5];
   assign     n5_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[5];
   assign     n5_vtc_rdy_out           = vtc_rdy_out[5];
   assign     tx_bit_ctrl_in_tri[5]    = n5_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[5]             = n5_en_vtc_in;
   assign     pll_clk_in[5]            = n5_pll_clk_in;
   assign     refclk_in[5]             = n5_refclk_in;
   assign     rx_bit_ctrl_in0[5]       = n5_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[5]       = n5_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[5]       = n5_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[5]       = n5_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[5]       = n5_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[5]       = n5_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[5]       = n5_rx_bit_ctrl_in6;
   assign     tbyte_in[5]              = n5_tbyte_in;
   assign     tx_bit_ctrl_in0[5]       = n5_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[5]       = n5_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[5]       = n5_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[5]       = n5_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[5]       = n5_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[5]       = n5_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[5]       = n5_tx_bit_ctrl_in6;

   assign     n6_dly_rdy_out           = dly_rdy_out[6];
   assign     n6_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[6];
   assign     n6_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[6]; 
   assign     n6_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[6]; 
   assign     n6_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[6]; 
   assign     n6_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[6];
   assign     n6_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[6];
   assign     n6_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[6];
   assign     n6_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[6];
   assign     n6_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[6]; 
   assign     n6_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[6]; 
   assign     n6_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[6]; 
   assign     n6_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[6];
   assign     n6_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[6];
   assign     n6_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[6];
   assign     n6_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[6];
   assign     n6_vtc_rdy_out           = vtc_rdy_out[6];
   assign     tx_bit_ctrl_in_tri[6]    = n6_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[6]             = n6_en_vtc_in;
   assign     pll_clk_in[6]            = n6_pll_clk_in;
   assign     refclk_in[6]             = n6_refclk_in;
   assign     rx_bit_ctrl_in0[6]       = n6_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[6]       = n6_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[6]       = n6_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[6]       = n6_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[6]       = n6_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[6]       = n6_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[6]       = n6_rx_bit_ctrl_in6;
   assign     tbyte_in[6]              = n6_tbyte_in;
   assign     tx_bit_ctrl_in0[6]       = n6_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[6]       = n6_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[6]       = n6_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[6]       = n6_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[6]       = n6_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[6]       = n6_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[6]       = n6_tx_bit_ctrl_in6;

   assign     n7_dly_rdy_out           = dly_rdy_out[7];
   assign     n7_rx_bit_ctrl_out0      = rx_bit_ctrl_out0[7];
   assign     n7_rx_bit_ctrl_out1      = rx_bit_ctrl_out1[7]; 
   assign     n7_rx_bit_ctrl_out2      = rx_bit_ctrl_out2[7]; 
   assign     n7_rx_bit_ctrl_out3      = rx_bit_ctrl_out3[7]; 
   assign     n7_rx_bit_ctrl_out4      = rx_bit_ctrl_out4[7];
   assign     n7_rx_bit_ctrl_out5      = rx_bit_ctrl_out5[7];
   assign     n7_rx_bit_ctrl_out6      = rx_bit_ctrl_out6[7];
   assign     n7_tx_bit_ctrl_out0      = tx_bit_ctrl_out0[7];
   assign     n7_tx_bit_ctrl_out1      = tx_bit_ctrl_out1[7]; 
   assign     n7_tx_bit_ctrl_out2      = tx_bit_ctrl_out2[7]; 
   assign     n7_tx_bit_ctrl_out3      = tx_bit_ctrl_out3[7]; 
   assign     n7_tx_bit_ctrl_out4      = tx_bit_ctrl_out4[7];
   assign     n7_tx_bit_ctrl_out5      = tx_bit_ctrl_out5[7];
   assign     n7_tx_bit_ctrl_out6      = tx_bit_ctrl_out6[7];
   assign     n7_tx_bit_ctrl_out_tri   = tx_bit_ctrl_out_tri[7];
   assign     n7_vtc_rdy_out           = vtc_rdy_out[7];
   assign     tx_bit_ctrl_in_tri[7]    = n7_tx_bit_ctrl_in_tri;
   assign     en_vtc_in[7]             = n7_en_vtc_in;
   assign     pll_clk_in[7]            = n7_pll_clk_in;
   assign     refclk_in[7]             = n7_refclk_in;
   assign     rx_bit_ctrl_in0[7]       = n7_rx_bit_ctrl_in0;
   assign     rx_bit_ctrl_in1[7]       = n7_rx_bit_ctrl_in1; 
   assign     rx_bit_ctrl_in2[7]       = n7_rx_bit_ctrl_in2; 
   assign     rx_bit_ctrl_in3[7]       = n7_rx_bit_ctrl_in3; 
   assign     rx_bit_ctrl_in4[7]       = n7_rx_bit_ctrl_in4;
   assign     rx_bit_ctrl_in5[7]       = n7_rx_bit_ctrl_in5;
   assign     rx_bit_ctrl_in6[7]       = n7_rx_bit_ctrl_in6;
   assign     tbyte_in[7]              = n7_tbyte_in;
   assign     tx_bit_ctrl_in0[7]       = n7_tx_bit_ctrl_in0;
   assign     tx_bit_ctrl_in1[7]       = n7_tx_bit_ctrl_in1; 
   assign     tx_bit_ctrl_in2[7]       = n7_tx_bit_ctrl_in2; 
   assign     tx_bit_ctrl_in3[7]       = n7_tx_bit_ctrl_in3; 
   assign     tx_bit_ctrl_in4[7]       = n7_tx_bit_ctrl_in4;
   assign     tx_bit_ctrl_in5[7]       = n7_tx_bit_ctrl_in5;
   assign     tx_bit_ctrl_in6[7]       = n7_tx_bit_ctrl_in6;

   assign     phy_rden[0]             = n0_phy_rden_in;
   assign     phy_rden[1]             = n1_phy_rden_in;
   assign     phy_rden[2]             = n2_phy_rden_in;
   assign     phy_rden[3]             = n3_phy_rden_in;
   assign     phy_rden[4]             = n4_phy_rden_in;
   assign     phy_rden[5]             = n5_phy_rden_in;
   assign     phy_rden[6]             = n6_phy_rden_in;
   assign     phy_rden[7]             = n7_phy_rden_in;

generate
genvar i;
  for (i = 0; i < 8 ; i = i + 1) 
    begin : BITSLICE_CTRL


  BITSLICE_CONTROL #(
        .CTRL_CLK              (C_BSC_CTRL_CLK),
        .DIV_MODE              (C_DIV_MODE),
        .EN_CLK_TO_EXT_NORTH   (C_NIB_EN_CLK_TO_EXT_NORTH[i] == 1'b0 ? "DISABLE" : "ENABLE"),
        .EN_CLK_TO_EXT_SOUTH   (C_NIB_EN_CLK_TO_EXT_SOUTH[i] == 1'b0 ? "DISABLE" : "ENABLE"),
        .EN_DYN_ODLY_MODE      (C_BSC_EN_DYN_ODLY_MODE),
        .EN_OTHER_PCLK         (C_NIB_EN_OTHER_PCLK[i] == 1'b0 ? "FALSE" : "TRUE"),
        .EN_OTHER_NCLK         (C_NIB_EN_OTHER_NCLK[i] == 1'b0 ? "FALSE" : "TRUE"),
        .IDLY_VT_TRACK         (C_BSC_IDLY_VT_TRACK),
        .INV_RXCLK             (C_INV_RX_CLK[i] == 1'b0 ? "FALSE" : "TRUE"),
        .ODLY_VT_TRACK         (C_BSC_ODLY_VT_TRACK),
        .QDLY_VT_TRACK         (C_BSC_QDLY_VT_TRACK),
        .READ_IDLE_COUNT       (C_BSC_READ_IDLE_COUNT),
        .REFCLK_SRC            (C_BSC_REFCLK_SRC),
        .ROUNDING_FACTOR       (C_BSC_ROUNDING_FACTOR),
        .RXGATE_EXTEND         (C_BSC_RXGATE_EXTEND),
        .RX_CLK_PHASE_N        ((C_SERIAL_MODE == "TRUE" && C_RX_IN_NIB[i] == 1'b1) ? "SHIFT_90" : C_RX_CLK_PHASE),
        .RX_CLK_PHASE_P        ((C_SERIAL_MODE == "TRUE" && C_RX_IN_NIB[i] == 1'b1) ? "SHIFT_90" : C_RX_CLK_PHASE),
    	.RX_GATING             (C_BSC_RX_GATING),
    	.TX_GATING             (C_TX_IN_NIB[i] == 1'b1   ? "ENABLE" : "DISABLE"),  //TODO
        .SIM_SPEEDUP           (C_BSC_SIM_SPEEDUP),
        .SELF_CALIBRATE        (C_BSC_SELF_CALIBRATE),
	.SIM_DEVICE            (C_SIM_DEVICE),
	.SIM_VERSION           (C_SIM_VERSION),
        .SERIAL_MODE           ((C_SERIAL_MODE == "TRUE" && C_RX_IN_NIB[i] == 1'b1) ? "TRUE" : "FALSE")
      )
      bs_ctrl_inst
      (
        .CLK_TO_EXT_NORTH      (clk_to_ext_north_out[i]),
        .CLK_TO_EXT_SOUTH      (clk_to_ext_south_out[i]),
        .DLY_RDY               (dly_rdy_out[i]),
        .DYN_DCI               (),
        .NCLK_NIBBLE_OUT       (nclk_nibble_out[i]),
        .PCLK_NIBBLE_OUT       (pclk_nibble_out[i]),
        .RX_BIT_CTRL_OUT0      (rx_bit_ctrl_out0[i]),
        .RX_BIT_CTRL_OUT1      (rx_bit_ctrl_out1[i]), 
        .RX_BIT_CTRL_OUT2      (rx_bit_ctrl_out2[i]), 
        .RX_BIT_CTRL_OUT3      (rx_bit_ctrl_out3[i]), 
        .RX_BIT_CTRL_OUT4      (rx_bit_ctrl_out4[i]),
        .RX_BIT_CTRL_OUT5      (rx_bit_ctrl_out5[i]),
        .RX_BIT_CTRL_OUT6      (rx_bit_ctrl_out6[i]),
        .TX_BIT_CTRL_OUT0      (tx_bit_ctrl_out0[i]),
        .TX_BIT_CTRL_OUT1      (tx_bit_ctrl_out1[i]), 
        .TX_BIT_CTRL_OUT2      (tx_bit_ctrl_out2[i]), 
        .TX_BIT_CTRL_OUT3      (tx_bit_ctrl_out3[i]), 
        .TX_BIT_CTRL_OUT4      (tx_bit_ctrl_out4[i]),
        .TX_BIT_CTRL_OUT5      (tx_bit_ctrl_out5[i]),
        .TX_BIT_CTRL_OUT6      (tx_bit_ctrl_out6[i]),
        .TX_BIT_CTRL_OUT_TRI   (tx_bit_ctrl_out_tri[i]),
        .TX_BIT_CTRL_IN_TRI    (tx_bit_ctrl_in_tri[i]),
        .VTC_RDY               (vtc_rdy_out[i]),
        .EN_VTC                (en_vtc_in[i]),
        .CLK_FROM_EXT          (clk_from_ext_in[i]),
        .NCLK_NIBBLE_IN        (nclk_nibble_in[i]),
        .PCLK_NIBBLE_IN        (pclk_nibble_in[i]),
        .PHY_RDCS0             (4'h0),
        .PHY_RDCS1             (4'h0),
        .PHY_RDEN              (C_BIDIR_IN_NIB[i] == 1'b1 ? phy_rden[i] : (C_TX_IN_NIB[i] == 1'b1  && C_BIDIR_IN_NIB[i] == 1'b0 && C_RX_IN_NIB[i] == 1'b0) ? 4'h0 : 4'hF),
        .PHY_WRCS0             (4'h0),
        .PHY_WRCS1             (4'h0),
        .PLL_CLK               (pll_clk_in[i]),
        .REFCLK                (refclk_in[i]),
        .RIU_ADDR              (riu_addr_in[i]),
        .RIU_CLK               (riu_clk_in[i]),
        .RIU_NIBBLE_SEL        (riu_nibble_sel_in[i]),
        .RIU_WR_DATA           (riu_wr_data_in[i]),
        .RIU_WR_EN             (riu_wr_en_in[i]),
        .RIU_RD_DATA           (riu_rd_data_out[i]),
        .RIU_VALID             (riu_valid_out[i]),
        .RX_BIT_CTRL_IN0       (rx_bit_ctrl_in0[i]),
        .RX_BIT_CTRL_IN1       (rx_bit_ctrl_in1[i]), 
        .RX_BIT_CTRL_IN2       (rx_bit_ctrl_in2[i]), 
        .RX_BIT_CTRL_IN3       (rx_bit_ctrl_in3[i]), 
        .RX_BIT_CTRL_IN4       (rx_bit_ctrl_in4[i]),
        .RX_BIT_CTRL_IN5       (rx_bit_ctrl_in5[i]),
        .RX_BIT_CTRL_IN6       (rx_bit_ctrl_in6[i]),
        .TBYTE_IN              (tbyte_in[i]),
        .TX_BIT_CTRL_IN0       (tx_bit_ctrl_in0[i]),
        .TX_BIT_CTRL_IN1       (tx_bit_ctrl_in1[i]), 
        .TX_BIT_CTRL_IN2       (tx_bit_ctrl_in2[i]), 
        .TX_BIT_CTRL_IN3       (tx_bit_ctrl_in3[i]), 
        .TX_BIT_CTRL_IN4       (tx_bit_ctrl_in4[i]),
        .TX_BIT_CTRL_IN5       (tx_bit_ctrl_in5[i]),
        .TX_BIT_CTRL_IN6       (tx_bit_ctrl_in6[i]),
        .RST                   (rst_in)
       );
end
endgenerate

//RIU Connections
generate
genvar j;
  for (j = 0; j < ((C_NUM_BS_CTRL)/2) ; j = j + 1) 
    begin : RIU_OR

  RIU_OR #(
	.SIM_DEVICE(C_SIM_DEVICE),
	.SIM_VERSION(C_SIM_VERSION)
)
   riu_or_inst
(
   .RIU_RD_DATA           (riu_or_rd_data_out[j]),
   .RIU_RD_VALID          (riu_or_rd_valid_out[j]),
   .RIU_RD_DATA_LOW       (riu_or_rd_data_low_in[j]),
   .RIU_RD_DATA_UPP       (riu_or_rd_data_upp_in[j]),
   .RIU_RD_VALID_LOW      (riu_or_rd_valid_low_in[j]),
   .RIU_RD_VALID_UPP      (riu_or_rd_valid_upp_in[j])
);
end
endgenerate

   assign  riu_or_rd_data_low_in[0] = (C_EN_RIU_OR0 == "TRUE") ? riu_rd_data_out[0] : 15'd0;
   assign  riu_or_rd_data_low_in[1] = (C_EN_RIU_OR1 == "TRUE") ? riu_rd_data_out[2] : 15'd0;
   assign  riu_or_rd_data_low_in[2] = (C_EN_RIU_OR2 == "TRUE") ? riu_rd_data_out[4] : 15'd0;
   assign  riu_or_rd_data_low_in[3] = (C_EN_RIU_OR3 == "TRUE") ? riu_rd_data_out[6] : 15'd0;


   assign  riu_or_rd_valid_low_in[0] = (C_EN_RIU_OR0 == "TRUE") ? riu_valid_out[0] : 15'd0;
   assign  riu_or_rd_valid_low_in[1] = (C_EN_RIU_OR1 == "TRUE") ? riu_valid_out[2] : 15'd0;
   assign  riu_or_rd_valid_low_in[2] = (C_EN_RIU_OR2 == "TRUE") ? riu_valid_out[4] : 15'd0;
   assign  riu_or_rd_valid_low_in[3] = (C_EN_RIU_OR3 == "TRUE") ? riu_valid_out[6] : 15'd0;

   assign  riu_or_rd_data_upp_in[0] = (C_EN_RIU_OR0 == "TRUE") ? riu_rd_data_out[1] : 15'd0;
   assign  riu_or_rd_data_upp_in[1] = (C_EN_RIU_OR1 == "TRUE") ? riu_rd_data_out[3] : 15'd0;
   assign  riu_or_rd_data_upp_in[2] = (C_EN_RIU_OR2 == "TRUE") ? riu_rd_data_out[5] : 15'd0;
   assign  riu_or_rd_data_upp_in[3] = (C_EN_RIU_OR3 == "TRUE") ? riu_rd_data_out[7] : 15'd0;

   assign  riu_or_rd_valid_upp_in[0] = (C_EN_RIU_OR0 == "TRUE") ? riu_valid_out[1] : 15'd0;
   assign  riu_or_rd_valid_upp_in[1] = (C_EN_RIU_OR1 == "TRUE") ? riu_valid_out[3] : 15'd0;
   assign  riu_or_rd_valid_upp_in[2] = (C_EN_RIU_OR2 == "TRUE") ? riu_valid_out[5] : 15'd0;
   assign  riu_or_rd_valid_upp_in[3] = (C_EN_RIU_OR3 == "TRUE") ? riu_valid_out[7] : 15'd0;

   assign     n01_riu_rd_data_out   = (C_EN_RIU_OR0 == "TRUE") ? riu_or_rd_data_out[0]  : (C_EN_BSC0 == 1) ? riu_rd_data_out[0] :
	                                                                                  (C_EN_BSC1 == 1) ? riu_rd_data_out[1] : 16'd0;

   assign     n01_riu_valid_out     = (C_EN_RIU_OR0 == "TRUE") ? riu_or_rd_valid_out[0] : (C_EN_BSC0 == 1 ) ? riu_valid_out[0] :
	                                                                                  (C_EN_BSC1 == 1 ) ? riu_valid_out[1] :1'd0;


   assign     n23_riu_rd_data_out   = (C_EN_RIU_OR1 == "TRUE") ? riu_or_rd_data_out[1]  : (C_EN_BSC2 == 1) ? riu_rd_data_out[2]:
	                                                                                  (C_EN_BSC3 == 1) ? riu_rd_data_out[3] : 16'd0;

   assign     n23_riu_valid_out     = (C_EN_RIU_OR1 == "TRUE") ? riu_or_rd_valid_out[1] : (C_EN_BSC2 == 1) ? riu_valid_out[2]:
	                                                                                  (C_EN_BSC3 == 1) ? riu_valid_out[3] : 1'd0;


   assign     n45_riu_rd_data_out   = (C_EN_RIU_OR2 == "TRUE") ? riu_or_rd_data_out[2]  : (C_EN_BSC4 == 1) ? riu_rd_data_out[4]:
	                                                                                  (C_EN_BSC5 == 1) ? riu_rd_data_out[5] : 16'd0;

   assign     n45_riu_valid_out     = (C_EN_RIU_OR2 == "TRUE") ? riu_or_rd_valid_out[2] :  (C_EN_BSC4 == 1) ? riu_valid_out[4]:
	                                                                                   (C_EN_BSC5 == 1) ? riu_valid_out[5] : 1'd0;


   assign     n67_riu_rd_data_out   = (C_EN_RIU_OR3 == "TRUE") ? riu_or_rd_data_out[3]  :  (C_EN_BSC6 == 1) ? riu_rd_data_out[6]:
	                                                                                   (C_EN_BSC7 == 1) ? riu_rd_data_out[7] : 16'd0;

   assign     n67_riu_valid_out     = (C_EN_RIU_OR3 == "TRUE") ? riu_or_rd_valid_out[3] :  (C_EN_BSC6 == 1) ? riu_valid_out[6]:
	                                                                                   (C_EN_BSC7 == 1) ? riu_valid_out[7] : 1'd0;
   assign     n0_riu_rd_data_out         =  (C_EN_BSC0 == 1) ? riu_rd_data_out[0] : 16'd0;
   assign     n1_riu_rd_data_out         =  (C_EN_BSC1 == 1) ? riu_rd_data_out[1] : 16'd0;
   assign     n2_riu_rd_data_out         =  (C_EN_BSC2 == 1) ? riu_rd_data_out[2] : 16'd0;
   assign     n3_riu_rd_data_out         =  (C_EN_BSC3 == 1) ? riu_rd_data_out[3] : 16'd0;
   assign     n4_riu_rd_data_out         =  (C_EN_BSC4 == 1) ? riu_rd_data_out[4] : 16'd0;
   assign     n5_riu_rd_data_out         =  (C_EN_BSC5 == 1) ? riu_rd_data_out[5] : 16'd0;
   assign     n6_riu_rd_data_out         =  (C_EN_BSC6 == 1) ? riu_rd_data_out[6] : 16'd0;
   assign     n7_riu_rd_data_out         =  (C_EN_BSC7 == 1) ? riu_rd_data_out[7] : 16'd0;
   assign     n0_riu_valid_out         =  (C_EN_BSC0 == 1) ? riu_valid_out[0] : 1'd0;
   assign     n1_riu_valid_out         =  (C_EN_BSC1 == 1) ? riu_valid_out[1] : 1'd0;
   assign     n2_riu_valid_out         =  (C_EN_BSC2 == 1) ? riu_valid_out[2] : 1'd0;
   assign     n3_riu_valid_out         =  (C_EN_BSC3 == 1) ? riu_valid_out[3] : 1'd0;
   assign     n4_riu_valid_out         =  (C_EN_BSC4 == 1) ? riu_valid_out[4] : 1'd0;
   assign     n5_riu_valid_out         =  (C_EN_BSC5 == 1) ? riu_valid_out[5] : 1'd0;
   assign     n6_riu_valid_out         =  (C_EN_BSC6 == 1) ? riu_valid_out[6] : 1'd0;
   assign     n7_riu_valid_out         =  (C_EN_BSC7 == 1) ? riu_valid_out[7] : 1'd0;
   assign     riu_addr_in[0]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n0_riu_addr_in : n01_riu_addr_in;
   assign     riu_clk_in[0]            =  n01_riu_clk_in;
   assign     riu_nibble_sel_in[0]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n0_riu_nibble_sel_in : n01_riu_nibble_sel_in[0]; 
   assign     riu_wr_data_in[0]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n0_riu_wr_data_in : n01_riu_wr_data_in;
   assign     riu_wr_en_in[0]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n0_riu_wr_en_in : n01_riu_wr_en_in;

   assign     riu_addr_in[1]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n1_riu_addr_in : n01_riu_addr_in;
   assign     riu_clk_in[1]            =  n01_riu_clk_in;
   assign     riu_nibble_sel_in[1]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n1_riu_nibble_sel_in : n01_riu_nibble_sel_in[1];
   assign     riu_wr_data_in[1]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n1_riu_nibble_sel_in : n01_riu_nibble_sel_in;
   assign     riu_wr_en_in[1]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n1_riu_wr_en_in : n01_riu_wr_en_in;

   assign     riu_addr_in[2]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n2_riu_addr_in : n23_riu_addr_in;
   assign     riu_clk_in[2]            =  n23_riu_clk_in;
   assign     riu_nibble_sel_in[2]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n2_riu_nibble_sel_in : n23_riu_nibble_sel_in[0];
   assign     riu_wr_data_in[2]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n2_riu_wr_data_in : n23_riu_wr_data_in;
   assign     riu_wr_en_in[2]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n2_riu_wr_en_in : n23_riu_wr_en_in;


   assign     riu_addr_in[3]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n3_riu_addr_in : n23_riu_addr_in;
   assign     riu_clk_in[3]            =  n23_riu_clk_in;
   assign     riu_nibble_sel_in[3]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n3_riu_nibble_sel_in : n23_riu_nibble_sel_in[1];
   assign     riu_wr_data_in[3]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n3_riu_wr_data_in : n23_riu_wr_data_in;
   assign     riu_wr_en_in[3]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n3_riu_wr_en_in : n23_riu_wr_en_in;

   assign     riu_addr_in[4]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n4_riu_addr_in : n45_riu_addr_in;
   assign     riu_clk_in[4]            =  n45_riu_clk_in;
   assign     riu_nibble_sel_in[4]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n4_riu_nibble_sel_in : n45_riu_nibble_sel_in[0];
   assign     riu_wr_data_in[4]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n4_riu_wr_data_in : n45_riu_wr_data_in;
   assign     riu_wr_en_in[4]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n4_riu_wr_en_in : n45_riu_wr_en_in;


   assign     riu_addr_in[5]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n5_riu_addr_in : n45_riu_addr_in;
   assign     riu_clk_in[5]            =  n45_riu_clk_in;
   assign     riu_nibble_sel_in[5]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n5_riu_nibble_sel_in : n45_riu_nibble_sel_in[1];
   assign     riu_wr_data_in[5]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n5_riu_wr_data_in : n45_riu_wr_data_in;
   assign     riu_wr_en_in[5]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n5_riu_wr_en_in : n45_riu_wr_en_in;


   assign     riu_addr_in[6]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n6_riu_addr_in : n67_riu_addr_in;
   assign     riu_clk_in[6]            =  n67_riu_clk_in;
   assign     riu_nibble_sel_in[6]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n6_riu_nibble_sel_in : n67_riu_nibble_sel_in[0];
   assign     riu_wr_data_in[6]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n6_riu_wr_data_in : n67_riu_wr_data_in;
   assign     riu_wr_en_in[6]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n6_riu_wr_en_in : n67_riu_wr_en_in;

   assign     riu_addr_in[7]           =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n7_riu_addr_in : n67_riu_addr_in;
   assign     riu_clk_in[7]            =  n67_riu_clk_in;
   assign     riu_nibble_sel_in[7]     =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n7_riu_nibble_sel_in : n67_riu_nibble_sel_in[1];
   assign     riu_wr_data_in[7]        =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n7_riu_wr_data_in : n67_riu_wr_data_in;
   assign     riu_wr_en_in[7]          =  (C_ENABLE_RIU_SPLIT == "TRUE") ? n7_riu_wr_en_in : n67_riu_wr_en_in;

endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_iobuf_top #(
   parameter  C_NUM_IO                =  52,
   parameter  C_CLK_SOURCE                           =  "IBUF_TO_PLL",
   parameter  C_CLKIN_DIFF_EN                        =  0,
   parameter  C_PLL_SHARE                            =  0,
   parameter [C_NUM_IO-1 :0] C_DIFF_EN               =  52'd0,  // Indicates whether the pin is differential or single ended
   parameter [C_NUM_IO-1 :0] C_TX_BITSLICE_EN        =  52'd0,  // Bitslice # for which TX bitslice should be enabled 
   parameter [C_NUM_IO-1 :0] C_RX_PIN_EN             =  52'd0,  // Bitslice # for which RX bitslice should be enabled 
   parameter [C_NUM_IO-1 :0] C_BIDIR_BITSLICE_EN     =  52'd0,  // Bitslice # for which Bidir bitslice should be enabled 
   parameter  C_ENABLE_TX_TRI                        =  0    

)
(  
   input                     clkin_from_pins_p,    //Differential input clock from pins
   input                     clkin_from_pins_n,
   input                     clkin_from_pins,      //Single ended input clock from pins
   input     [C_NUM_IO-1 :0] bs_to_buf_data_in,    //Serialised input from TX or BiDir Bitslices
   input     [C_NUM_IO-1 :0] bs_to_buf_t_in,       //3-state input from BiDir Bitslices
   output                    clk_from_buf_out,     //clock output from IBUF
   output    [C_NUM_IO-1 :0] data_to_bs_out,       //Data from buffers to Rx or BiDir Bitslices
   output    [C_NUM_IO-1 :0] data_to_bs_n_out,     //Data from buffers to Rx or BiDir Bitslices
   output    [C_NUM_IO-1 :0] data_to_pins,         //Data ouput from buffers to pins
   input     [C_NUM_IO-1 :0] data_from_pins,       //data input to buffers from pins
   inout     [C_NUM_IO-1 :0] data_to_from_pins     //data input to buffers from pins
);

//CLOCKING BUFFERS
generate
   if(C_CLK_SOURCE != "BUFG_TO_PLL" && C_PLL_SHARE == 0) begin : GEN_CLK_IN_BUFFERS
      if(C_CLKIN_DIFF_EN == 1) begin
         IBUFDS if0_clkin1_ibufds
            (.O  (clk_from_buf_out),
             .I  (clkin_from_pins_p),
             .IB (clkin_from_pins_n));
      end 
      else begin
         IBUF if0_clkin1_ibuf
            (.O  (clk_from_buf_out),
             .I  (clkin_from_pins));
      end
   end
   else begin  
        assign clk_from_buf_out = clkin_from_pins;
   end
endgenerate

//IO BUFFERS
generate
genvar i;
  for (i = 0; i < C_NUM_IO ; i = i + 1) begin : io_gen

     if(C_TX_BITSLICE_EN[i] == 1'b1 && C_ENABLE_TX_TRI == 1'b0) begin
       if(C_DIFF_EN[i] == 1'b1) begin

          OBUFDS 
          obufds_inst
            (.I  (bs_to_buf_data_in[i]),
             .O  (data_to_pins[i]), 
             .OB (data_to_pins[i+1])); 
       end
       else begin

          OBUF
          obuf_inst
            (.I  (bs_to_buf_data_in[i]),
             .O  (data_to_pins[i])); 

       end // C_DIFF_EN
     end //C_TX_BITSLICE_EN

     if(C_TX_BITSLICE_EN[i] == 1'b1 && C_ENABLE_TX_TRI == 1'b1) begin
       if(C_DIFF_EN[i] == 1'b1) begin

          OBUFTDS 
          obufds_inst
            (.I  (bs_to_buf_data_in[i]),
             .O  (data_to_pins[i]), 
             .OB (data_to_pins[i+1]),
             .T  (bs_to_buf_t_in[i])); 
       end
       else begin

          OBUFT
          obuf_inst
            (.I  (bs_to_buf_data_in[i]),
             .O  (data_to_pins[i]),
             .T  (bs_to_buf_t_in[i])); 

       end // C_DIFF_EN
     end //C_TX_BITSLICE_EN and C_ENABLE_TX_TRI

     if(C_RX_PIN_EN[i] == 1'b1) begin
       if(C_DIFF_EN[i] == 1'b1) begin

          IBUFDS_DIFF_OUT 
          ibufds_diff_out_inst
            (.O  (data_to_bs_out[i]),
             .OB (data_to_bs_n_out[i]),
             .I  (data_from_pins[i]), 
             .IB (data_from_pins[i+1])); 

       end
       else begin
          assign data_to_bs_n_out[i] = 1'b0;
          IBUF
          ibuf_inst
            (.O  (data_to_bs_out[i]),
             .I  (data_from_pins[i])); 

          end // C_DIFF_EN
     end //C_RX_PIN_EN

     else if(C_BIDIR_BITSLICE_EN[i] == 1'b1) begin
          if(C_DIFF_EN[i] == 1'b1) begin

          IOBUFDS_DIFF_OUT 
          iobufds_diff_out_inst
             (.O   (data_to_bs_out[i]),
              .OB  (),
              .IO  (data_to_from_pins[i]), 
              .IOB (data_to_from_pins[i+1]), 
              .I   (bs_to_buf_data_in[i]), 
              .TM  (bs_to_buf_t_in[i]), 
              .TS  (bs_to_buf_t_in[i])); 
          assign data_to_bs_n_out[i] = 1'b0;
       end
       else begin
          assign data_to_bs_n_out[i] = 1'b0;

          IOBUF 
          iobuf_inst
            (.O  (data_to_bs_out[i]),
             .IO (data_to_from_pins[i]), 
             .I  (bs_to_buf_data_in[i]), 
             .T  (bs_to_buf_t_in[i])); 

          end // C_DIFF_EN
     end //C_BIDIR_BITSLICE_EN
     else begin
          assign data_to_bs_n_out[i] = 1'b0;
          assign data_to_bs_out[i] = 1'b0;
     end

  end //for
endgenerate

endmodule



// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_C2BCEtc 
	(
        input  CntClk,
        input  CntRst,
        input  CntEna,
        output [1:0] CntOut,
        output CntTc 
	);
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire [1:0] IntCnt;
reg [1:0] IntCntLog;
wire IntCntTcLog;
wire IntCntTc;
////////////////////////////////////////////////////////////////////////////////////////////-
//
    // The FFs of the counter is instantiated and its logic is written as separate process.
    // The FFs use now their dedicated inputs for reset and enable.
    // The counter process is described as a ROM kind of logic.
    // This could eventually be replaced by instantiating LUT primitives.
    //
  generate
  genvar n;

    for (n = 0; n <= 1 ; n = n + 1) 
    begin : Gen_CntThree
         FDCE 
            #(.INIT(1'b0))
         CntThreeFf
            (.D(IntCntLog[n]), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCnt[n]));
    end
  endgenerate
    //
         FDCE 
            #(.INIT(1'b0))
         CntThreeTcFf
            (.D(IntCntTcLog), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCntTc));
    //
    assign IntCntTcLog = (IntCnt == 2'b10)? 1'b1 :1'b0;
    assign CntOut = IntCnt;
    assign CntTc = IntCntTc;
    //
    // Counter bit 2
   always @ (IntCnt)
   begin
      case (IntCnt)
          2'b00 : IntCntLog = 2'b01;    
          2'b01 : IntCntLog = 2'b10;
          2'b10 : IntCntLog = 2'b11;
          default  : IntCntLog = 2'b00;
      endcase
   end
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_C2BCEtc_dwnld
	(
        input  CntClk,
        input  CntRst,
        input  CntEna,
        input  CntLoad,
        input [1:0] CntLdVal,
        output [1:0] CntOut,
        output CntTc 
	);
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire [1:0] IntCnt;
reg [1:0] IntCntLog;
wire IntCntTcLog;
wire IntCntTc;
////////////////////////////////////////////////////////////////////////////////////////////-
//
// The FFs of the counter is instantiated and its logic is written as separate process.
// The FFs use now their dedicated inputs for reset and enable.
// The counter process is described as a ROM kind of logic.
// This could eventually be replaced by instantiating LUT primitives.
//
  generate
  genvar n;

    for (n = 0; n <= 1 ; n = n + 1) 
    begin : Gen_CntThree
         FDCE 
            #(.INIT(1'b0))
         CntThreeFf
            (.D(IntCntLog[n]), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCnt[n]));
    end
  endgenerate
    //
         FDCE 
            #(.INIT(1'b0))
         CntThreeTcFf
            (.D(IntCntTcLog), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCntTc));
//
    assign IntCntTcLog = (IntCntLog == 2'b00)? 1'b1 :1'b0;
    assign CntOut = IntCnt;
    assign CntTc = IntCntTc;
// Counter bit 1
   always @ (CntEna or  CntLoad or CntLdVal[1] or IntCnt)
   begin
    // This counter originates from the 3-bit counter C3CEBtc_dwnld.
    // Becuase this is a 2-bit counter the MSB bit of the 3-bit counter is removed.
    // For the two remaining bits the third bits is always pull low.
    // This is the easiest solution to adapt the counter logic.
      case ({CntEna, CntLoad, CntLdVal[1],1'b0,IntCnt[1:0]})
        6'b000000 : IntCntLog[1] = 1'b0;
        6'b000001 : IntCntLog[1] = 1'b0;   // Disable and not load
        6'b000010 : IntCntLog[1] = 1'b1;   // Input of counter is
        6'b000011 : IntCntLog[1] = 1'b1;   // reflected onto output
        6'b000100 : IntCntLog[1] = 1'b0;   // When reset is released.
        6'b000101 : IntCntLog[1] = 1'b0;
        6'b000110 : IntCntLog[1] = 1'b1;
        6'b000111 : IntCntLog[1] = 1'b1;
        6'b001000 : IntCntLog[1] = 1'b0;
        6'b001001 : IntCntLog[1] = 1'b0;
        6'b001010 : IntCntLog[1] = 1'b1;
        6'b001011 : IntCntLog[1] = 1'b1;
        6'b001100 : IntCntLog[1] = 1'b0;
        6'b001101 : IntCntLog[1] = 1'b0;
        6'b001110 : IntCntLog[1] = 1'b1;
        6'b001111 : IntCntLog[1] = 1'b1;
      
        6'b010000 : IntCntLog[1] = 1'b0;
        6'b010001 : IntCntLog[1] = 1'b0;   // Disabled but load is active
        6'b010010 : IntCntLog[1] = 1'b0;   // Load value appears on counter 
        6'b010011 : IntCntLog[1] = 1'b0;   // output when reset is released.
        6'b010100 : IntCntLog[1] = 1'b0;
        6'b010101 : IntCntLog[1] = 1'b0;
        6'b010110 : IntCntLog[1] = 1'b0;
        6'b010111 : IntCntLog[1] = 1'b0;
        6'b011000 : IntCntLog[1] = 1'b1;
        6'b011001 : IntCntLog[1] = 1'b1;
        6'b011010 : IntCntLog[1] = 1'b1;
        6'b011011 : IntCntLog[1] = 1'b1;
        6'b011100 : IntCntLog[1] = 1'b1;
        6'b011101 : IntCntLog[1] = 1'b1;
        6'b011110 : IntCntLog[1] = 1'b1;
        6'b011111 : IntCntLog[1] = 1'b1;
       
        6'b100111 : IntCntLog[1] = 1'b1;
        6'b100110 : IntCntLog[1] = 1'b0;   // enabled but not load
        6'b100101 : IntCntLog[1] = 1'b0;   // count down 
        6'b100100 : IntCntLog[1] = 1'b1;   // when reset is released.
        6'b100011 : IntCntLog[1] = 1'b1;
        6'b100010 : IntCntLog[1] = 1'b0;
        6'b100001 : IntCntLog[1] = 1'b0;
        6'b100000 : IntCntLog[1] = 1'b1;
        6'b101111 : IntCntLog[1] = 1'b1;
        6'b101110 : IntCntLog[1] = 1'b0;
        6'b101101 : IntCntLog[1] = 1'b0;
        6'b101100 : IntCntLog[1] = 1'b1;
        6'b101011 : IntCntLog[1] = 1'b1;
        6'b101010 : IntCntLog[1] = 1'b0;
        6'b101001 : IntCntLog[1] = 1'b0;
        6'b101000 : IntCntLog[1] = 1'b1;

        6'b110000 : IntCntLog[1] = 1'b0;
        6'b110001 : IntCntLog[1] = 1'b0;   // Enable and load are active
        6'b110010 : IntCntLog[1] = 1'b0;   // Load value appears on counter 
        6'b110011 : IntCntLog[1] = 1'b0;   // output when reset is released.
        6'b110100 : IntCntLog[1] = 1'b0;
        6'b110101 : IntCntLog[1] = 1'b0;
        6'b110110 : IntCntLog[1] = 1'b0;
        6'b110111 : IntCntLog[1] = 1'b0;
        6'b111000 : IntCntLog[1] = 1'b1;
        6'b111001 : IntCntLog[1] = 1'b1;
        6'b111010 : IntCntLog[1] = 1'b1;
        6'b111011 : IntCntLog[1] = 1'b1;
        6'b111100 : IntCntLog[1] = 1'b1;
        6'b111101 : IntCntLog[1] = 1'b1;
        6'b111110 : IntCntLog[1] = 1'b1;
        6'b111111 : IntCntLog[1] = 1'b1;
        default      : IntCntLog[1] = 1'b0;
      endcase
   end
// Counter bit 0
   always @ (CntEna or  CntLoad or CntLdVal[0] or IntCnt)
   begin
    // This counter originates from the 3-bit counter C3CEBtc_dwnld.
    // Becuase this is a 2-bit counter the MSB bit of the 3-bit counter is removed.
    // For the two remaining bits the third bits is always pull low.
    // This is the easiest solution to adapt the counter logic.
      case ({CntEna, CntLoad, CntLdVal[0],1'b0,IntCnt[1:0]})
        6'b000000 : IntCntLog[0] = 1'b0;
        6'b000001 : IntCntLog[0] = 1'b1;   // Disable and not load
        6'b000010 : IntCntLog[0] = 1'b0;   // Input of counter is
        6'b000011 : IntCntLog[0] = 1'b1;   // reflected onto output
        6'b000100 : IntCntLog[0] = 1'b0;   // When reset is released.
        6'b000101 : IntCntLog[0] = 1'b1;
        6'b000110 : IntCntLog[0] = 1'b0;
        6'b000111 : IntCntLog[0] = 1'b1;
        6'b001000 : IntCntLog[0] = 1'b0;
        6'b001001 : IntCntLog[0] = 1'b1;
        6'b001010 : IntCntLog[0] = 1'b0;
        6'b001011 : IntCntLog[0] = 1'b1;
        6'b001100 : IntCntLog[0] = 1'b0;
        6'b001101 : IntCntLog[0] = 1'b1;
        6'b001110 : IntCntLog[0] = 1'b0;
        6'b001111 : IntCntLog[0] = 1'b1;
                            
        6'b010000 : IntCntLog[0] = 1'b0;
        6'b010001 : IntCntLog[0] = 1'b0;   // Disabled but load is active
        6'b010010 : IntCntLog[0] = 1'b0;   // Load value appears on counter 
        6'b010011 : IntCntLog[0] = 1'b0;   // output when reset is released.
        6'b010100 : IntCntLog[0] = 1'b0;
        6'b010101 : IntCntLog[0] = 1'b0;
        6'b010110 : IntCntLog[0] = 1'b0;
        6'b010111 : IntCntLog[0] = 1'b0;
        6'b011000 : IntCntLog[0] = 1'b1;
        6'b011001 : IntCntLog[0] = 1'b1;
        6'b011010 : IntCntLog[0] = 1'b1;
        6'b011011 : IntCntLog[0] = 1'b1;
        6'b011100 : IntCntLog[0] = 1'b1;
        6'b011101 : IntCntLog[0] = 1'b1;
        6'b011110 : IntCntLog[0] = 1'b1;
        6'b011111 : IntCntLog[0] = 1'b1;
                              
        6'b100111 : IntCntLog[0] = 1'b0;
        6'b100110 : IntCntLog[0] = 1'b1;   // enabled but not load
        6'b100101 : IntCntLog[0] = 1'b0;   // count down 
        6'b100100 : IntCntLog[0] = 1'b1;   // when reset is released.
        6'b100011 : IntCntLog[0] = 1'b0;
        6'b100010 : IntCntLog[0] = 1'b1;
        6'b100001 : IntCntLog[0] = 1'b0;
        6'b100000 : IntCntLog[0] = 1'b1;
        6'b101111 : IntCntLog[0] = 1'b0;
        6'b101110 : IntCntLog[0] = 1'b1;
        6'b101101 : IntCntLog[0] = 1'b0;
        6'b101100 : IntCntLog[0] = 1'b1;
        6'b101011 : IntCntLog[0] = 1'b0;
        6'b101010 : IntCntLog[0] = 1'b1;
        6'b101001 : IntCntLog[0] = 1'b0;
        6'b101000 : IntCntLog[0] = 1'b1;
                             
        6'b110000 : IntCntLog[0] = 1'b0;
        6'b110001 : IntCntLog[0] = 1'b0;   // Enable and load are active
        6'b110010 : IntCntLog[0] = 1'b0;   // Load value appears on counter 
        6'b110011 : IntCntLog[0] = 1'b0;   // output when reset is released.
        6'b110100 : IntCntLog[0] = 1'b0;
        6'b110101 : IntCntLog[0] = 1'b0;
        6'b110110 : IntCntLog[0] = 1'b0;
        6'b110111 : IntCntLog[0] = 1'b0;
        6'b111000 : IntCntLog[0] = 1'b1;
        6'b111001 : IntCntLog[0] = 1'b1;
        6'b111010 : IntCntLog[0] = 1'b1;
        6'b111011 : IntCntLog[0] = 1'b1;
        6'b111100 : IntCntLog[0] = 1'b1;
        6'b111101 : IntCntLog[0] = 1'b1;
        6'b111110 : IntCntLog[0] = 1'b1;
        6'b111111 : IntCntLog[0] = 1'b1;
        default   : IntCntLog[0] = 1'b0;
      endcase
   end
//
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_C3BCEtc
	(
        input  CntClk,
        input  CntRst,
        input  CntEna,
        output [2:0] CntOut,
        output CntTc 
	);
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire [2:0] IntCnt;
reg [2:0] IntCntLog;
wire IntCntTcLog;
wire IntCntTc;
////////////////////////////////////////////////////////////////////////////////////////////-
    // The FFs of the counter is instantiated and its logic is written as separate process.
    // The FFs use now their dedicated inputs for reset and enable.
    // The counter process is described as a ROM kind of logic.
    // This could eventually be replaced by instantiating LUT primitives.
    //
  generate
  genvar n;

    for (n = 0; n <= 2 ; n = n + 1) 
    begin : Gen_CntThree
         FDCE 
            #(.INIT(1'b0))
         CntThreeFf
            (.D(IntCntLog[n]), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCnt[n]));
    end
  endgenerate
    //
         FDCE 
            #(.INIT(1'b0))
         CntThreeTcFf
            (.D(IntCntTcLog), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCntTc));
    //
    assign IntCntTcLog = (IntCnt == 3'b110)? 1'b1 :1'b0;
    assign CntOut = IntCnt;
    assign CntTc = IntCntTc;
    //
    // Counter bit 2
   always @ (IntCnt)
   begin
      case (IntCnt) 
          3'b000 : IntCntLog = 3'b001;    
          3'b001 : IntCntLog = 3'b010;
          3'b010 : IntCntLog = 3'b011;
          3'b011 : IntCntLog = 3'b100;    
          3'b100 : IntCntLog = 3'b101;
          3'b101 : IntCntLog = 3'b110;
          3'b110 : IntCntLog = 3'b111;
          default  : IntCntLog = 3'b000;
      endcase
   end
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_C3BCEtc_dwnld 
	(
        input  CntClk,
        input  CntRst,
        input  CntEna,
        input  CntLoad,
        input [2:0] CntLdVal,
        output [2:0] CntOut,
        output CntTc 
	);
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire [2:0] IntCnt;
reg [2:0] IntCntLog;
wire IntCntTcLog;
wire IntCntTc;
////////////////////////////////////////////////////////////////////////////////////////////-
// The FFs of the counter is instantiated and its logic is written as separate process.
// The FFs use now their dedicated inputs for reset and enable.
// The counter process is described as a ROM kind of logic.
// This could eventually be replaced by instantiating LUT primitives.
//
  generate
  genvar n;

    for (n = 0; n <= 2 ; n = n + 1) 
    begin : Gen_CntThree
         FDCE 
            #(.INIT(1'b0))
         CntThreeFf
            (.D(IntCntLog[n]), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCnt[n]));
    end
  endgenerate
    //
         FDCE 
            #(.INIT(1'b0))
         CntThreeTcFf
            (.D(IntCntTcLog), .CE(CntEna), .C(CntClk), .CLR(CntRst), .Q(IntCntTc));
//
    assign IntCntTcLog = (IntCntLog == 3'b000)? 1'b1 :1'b0;
    assign CntOut = IntCnt;
    assign CntTc = IntCntTc;
// Counter bit 2
   always @ (CntEna or  CntLoad or CntLdVal[2] or IntCnt)
   begin
    // This counter originates from the 3-bit counter C3CEBtc_dwnld.
    // Becuase this is a 2-bit counter the MSB bit of the 3-bit counter is removed.
    // For the two remaining bits the third bits is always pull low.
    // This is the easiest solution to adapt the counter logic.
      case ({CntEna, CntLoad, CntLdVal[2],IntCnt[2:0]})
        6'b000000 : IntCntLog[2] = 1'b0;
        6'b000001 : IntCntLog[2] = 1'b0;   // Disable and not load
        6'b000010 : IntCntLog[2] = 1'b0;   // Input of counter is
        6'b000011 : IntCntLog[2] = 1'b0;   // reflected onto output
        6'b000100 : IntCntLog[2] = 1'b1;   // When reset is released.
        6'b000101 : IntCntLog[2] = 1'b1;
        6'b000110 : IntCntLog[2] = 1'b1;
        6'b000111 : IntCntLog[2] = 1'b1;
        6'b001000 : IntCntLog[2] = 1'b0;
        6'b001001 : IntCntLog[2] = 1'b0;
        6'b001010 : IntCntLog[2] = 1'b0;
        6'b001011 : IntCntLog[2] = 1'b0;
        6'b001100 : IntCntLog[2] = 1'b1;
        6'b001101 : IntCntLog[2] = 1'b1;
        6'b001110 : IntCntLog[2] = 1'b1;
        6'b001111 : IntCntLog[2] = 1'b1;
                                       
        6'b010000 : IntCntLog[2] = 1'b0;
        6'b010001 : IntCntLog[2] = 1'b0;   // Disabled but load is active
        6'b010010 : IntCntLog[2] = 1'b0;   // Load value appears on counter 
        6'b010011 : IntCntLog[2] = 1'b0;   // output when reset is released.
        6'b010100 : IntCntLog[2] = 1'b0;
        6'b010101 : IntCntLog[2] = 1'b0;
        6'b010110 : IntCntLog[2] = 1'b0;
        6'b010111 : IntCntLog[2] = 1'b0;
        6'b011000 : IntCntLog[2] = 1'b1;
        6'b011001 : IntCntLog[2] = 1'b1;
        6'b011010 : IntCntLog[2] = 1'b1;
        6'b011011 : IntCntLog[2] = 1'b1;
        6'b011100 : IntCntLog[2] = 1'b1;
        6'b011101 : IntCntLog[2] = 1'b1;
        6'b011110 : IntCntLog[2] = 1'b1;
        6'b011111 : IntCntLog[2] = 1'b1;
                                       
        6'b100111 : IntCntLog[2] = 1'b1;
        6'b100110 : IntCntLog[2] = 1'b1;   // enabled but not load
        6'b100101 : IntCntLog[2] = 1'b1;   // count down 
        6'b100100 : IntCntLog[2] = 1'b0;   // when reset is released.
        6'b100011 : IntCntLog[2] = 1'b0;
        6'b100010 : IntCntLog[2] = 1'b0;
        6'b100001 : IntCntLog[2] = 1'b0;
        6'b100000 : IntCntLog[2] = 1'b1;
        6'b101111 : IntCntLog[2] = 1'b1;
        6'b101110 : IntCntLog[2] = 1'b1;
        6'b101101 : IntCntLog[2] = 1'b1;
        6'b101100 : IntCntLog[2] = 1'b0;
        6'b101011 : IntCntLog[2] = 1'b0;
        6'b101010 : IntCntLog[2] = 1'b0;
        6'b101001 : IntCntLog[2] = 1'b0;
        6'b101000 : IntCntLog[2] = 1'b1;
                                       
        6'b110000 : IntCntLog[2] = 1'b0;
        6'b110001 : IntCntLog[2] = 1'b0;   // Enable and load are active
        6'b110010 : IntCntLog[2] = 1'b0;   // Load value appears on counter 
        6'b110011 : IntCntLog[2] = 1'b0;   // output when reset is released.
        6'b110100 : IntCntLog[2] = 1'b0;
        6'b110101 : IntCntLog[2] = 1'b0;
        6'b110110 : IntCntLog[2] = 1'b0;
        6'b110111 : IntCntLog[2] = 1'b0;
        6'b111000 : IntCntLog[2] = 1'b1;
        6'b111001 : IntCntLog[2] = 1'b1;
        6'b111010 : IntCntLog[2] = 1'b1;
        6'b111011 : IntCntLog[2] = 1'b1;
        6'b111100 : IntCntLog[2] = 1'b1;
        6'b111101 : IntCntLog[2] = 1'b1;
        6'b111110 : IntCntLog[2] = 1'b1;
        6'b111111 : IntCntLog[2] = 1'b1;
        default      : IntCntLog[2] = 1'b0;
      endcase
   end
// Counter bit 1
   always @ (CntEna or  CntLoad or CntLdVal[1] or IntCnt)
   begin
    // This counter originates from the 3-bit counter C3CEBtc_dwnld.
    // Becuase this is a 2-bit counter the MSB bit of the 3-bit counter is removed.
    // For the two remaining bits the third bits is always pull low.
    // This is the easiest solution to adapt the counter logic.
      case ({CntEna, CntLoad, CntLdVal[1],IntCnt[2:0]})
        6'b000000 : IntCntLog[1] = 1'b0;
        6'b000001 : IntCntLog[1] = 1'b0;   // Disable and not load
        6'b000010 : IntCntLog[1] = 1'b1;   // Input of counter is
        6'b000011 : IntCntLog[1] = 1'b1;   // reflected onto output
        6'b000100 : IntCntLog[1] = 1'b0;   // When reset is released.
        6'b000101 : IntCntLog[1] = 1'b0;
        6'b000110 : IntCntLog[1] = 1'b1;
        6'b000111 : IntCntLog[1] = 1'b1;
        6'b001000 : IntCntLog[1] = 1'b0;
        6'b001001 : IntCntLog[1] = 1'b0;
        6'b001010 : IntCntLog[1] = 1'b1;
        6'b001011 : IntCntLog[1] = 1'b1;
        6'b001100 : IntCntLog[1] = 1'b0;
        6'b001101 : IntCntLog[1] = 1'b0;
        6'b001110 : IntCntLog[1] = 1'b1;
        6'b001111 : IntCntLog[1] = 1'b1;
                                       
        6'b010000 : IntCntLog[1] = 1'b0;
        6'b010001 : IntCntLog[1] = 1'b0;   // Disabled but load is active
        6'b010010 : IntCntLog[1] = 1'b0;   // Load value appears on counter 
        6'b010011 : IntCntLog[1] = 1'b0;   // output when reset is released.
        6'b010100 : IntCntLog[1] = 1'b0;
        6'b010101 : IntCntLog[1] = 1'b0;
        6'b010110 : IntCntLog[1] = 1'b0;
        6'b010111 : IntCntLog[1] = 1'b0;
        6'b011000 : IntCntLog[1] = 1'b1;
        6'b011001 : IntCntLog[1] = 1'b1;
        6'b011010 : IntCntLog[1] = 1'b1;
        6'b011011 : IntCntLog[1] = 1'b1;
        6'b011100 : IntCntLog[1] = 1'b1;
        6'b011101 : IntCntLog[1] = 1'b1;
        6'b011110 : IntCntLog[1] = 1'b1;
        6'b011111 : IntCntLog[1] = 1'b1;
                                       
        6'b100111 : IntCntLog[1] = 1'b1;
        6'b100110 : IntCntLog[1] = 1'b0;   // enabled but not load
        6'b100101 : IntCntLog[1] = 1'b0;   // count down 
        6'b100100 : IntCntLog[1] = 1'b1;   // when reset is released.
        6'b100011 : IntCntLog[1] = 1'b1;
        6'b100010 : IntCntLog[1] = 1'b0;
        6'b100001 : IntCntLog[1] = 1'b0;
        6'b100000 : IntCntLog[1] = 1'b1;
        6'b101111 : IntCntLog[1] = 1'b1;
        6'b101110 : IntCntLog[1] = 1'b0;
        6'b101101 : IntCntLog[1] = 1'b0;
        6'b101100 : IntCntLog[1] = 1'b1;
        6'b101011 : IntCntLog[1] = 1'b1;
        6'b101010 : IntCntLog[1] = 1'b0;
        6'b101001 : IntCntLog[1] = 1'b0;
        6'b101000 : IntCntLog[1] = 1'b1;
                                       
        6'b110000 : IntCntLog[1] = 1'b0;
        6'b110001 : IntCntLog[1] = 1'b0;   // Enable and load are active
        6'b110010 : IntCntLog[1] = 1'b0;   // Load value appears on counter 
        6'b110011 : IntCntLog[1] = 1'b0;   // output when reset is released.
        6'b110100 : IntCntLog[1] = 1'b0;
        6'b110101 : IntCntLog[1] = 1'b0;
        6'b110110 : IntCntLog[1] = 1'b0;
        6'b110111 : IntCntLog[1] = 1'b0;
        6'b111000 : IntCntLog[1] = 1'b1;
        6'b111001 : IntCntLog[1] = 1'b1;
        6'b111010 : IntCntLog[1] = 1'b1;
        6'b111011 : IntCntLog[1] = 1'b1;
        6'b111100 : IntCntLog[1] = 1'b1;
        6'b111101 : IntCntLog[1] = 1'b1;
        6'b111110 : IntCntLog[1] = 1'b1;
        6'b111111 : IntCntLog[1] = 1'b1;
        default      : IntCntLog[1] = 1'b0;
      endcase
   end
// Counter bit 0
   always @ (CntEna or  CntLoad or CntLdVal[0] or IntCnt)
   begin
    // This counter originates from the 3-bit counter C3CEBtc_dwnld.
    // Becuase this is a 2-bit counter the MSB bit of the 3-bit counter is removed.
    // For the two remaining bits the third bits is always pull low.
    // This is the easiest solution to adapt the counter logic.
      case ({CntEna, CntLoad, CntLdVal[0],IntCnt[2:0]}) 
        6'b000000 : IntCntLog[0] = 1'b0;
        6'b000001 : IntCntLog[0] = 1'b1;   // Disable and not load
        6'b000010 : IntCntLog[0] = 1'b0;   // Input of counter is
        6'b000011 : IntCntLog[0] = 1'b1;   // reflected onto output
        6'b000100 : IntCntLog[0] = 1'b0;   // When reset is released.
        6'b000101 : IntCntLog[0] = 1'b1;
        6'b000110 : IntCntLog[0] = 1'b0;
        6'b000111 : IntCntLog[0] = 1'b1;
        6'b001000 : IntCntLog[0] = 1'b0;
        6'b001001 : IntCntLog[0] = 1'b1;
        6'b001010 : IntCntLog[0] = 1'b0;
        6'b001011 : IntCntLog[0] = 1'b1;
        6'b001100 : IntCntLog[0] = 1'b0;
        6'b001101 : IntCntLog[0] = 1'b1;
        6'b001110 : IntCntLog[0] = 1'b0;
        6'b001111 : IntCntLog[0] = 1'b1;
                                       
        6'b010000 : IntCntLog[0] = 1'b0;
        6'b010001 : IntCntLog[0] = 1'b0;   // Disabled but load is active
        6'b010010 : IntCntLog[0] = 1'b0;   // Load value appears on counter 
        6'b010011 : IntCntLog[0] = 1'b0;   // output when reset is released.
        6'b010100 : IntCntLog[0] = 1'b0;
        6'b010101 : IntCntLog[0] = 1'b0;
        6'b010110 : IntCntLog[0] = 1'b0;
        6'b010111 : IntCntLog[0] = 1'b0;
        6'b011000 : IntCntLog[0] = 1'b1;
        6'b011001 : IntCntLog[0] = 1'b1;
        6'b011010 : IntCntLog[0] = 1'b1;
        6'b011011 : IntCntLog[0] = 1'b1;
        6'b011100 : IntCntLog[0] = 1'b1;
        6'b011101 : IntCntLog[0] = 1'b1;
        6'b011110 : IntCntLog[0] = 1'b1;
        6'b011111 : IntCntLog[0] = 1'b1;
                                       
        6'b100111 : IntCntLog[0] = 1'b0;
        6'b100110 : IntCntLog[0] = 1'b1;   // enabled but not load
        6'b100101 : IntCntLog[0] = 1'b0;   // count down 
        6'b100100 : IntCntLog[0] = 1'b1;   // when reset is released.
        6'b100011 : IntCntLog[0] = 1'b0;
        6'b100010 : IntCntLog[0] = 1'b1;
        6'b100001 : IntCntLog[0] = 1'b0;
        6'b100000 : IntCntLog[0] = 1'b1;
        6'b101111 : IntCntLog[0] = 1'b0;
        6'b101110 : IntCntLog[0] = 1'b1;
        6'b101101 : IntCntLog[0] = 1'b0;
        6'b101100 : IntCntLog[0] = 1'b1;
        6'b101011 : IntCntLog[0] = 1'b0;
        6'b101010 : IntCntLog[0] = 1'b1;
        6'b101001 : IntCntLog[0] = 1'b0;
        6'b101000 : IntCntLog[0] = 1'b1;
                                       
        6'b110000 : IntCntLog[0] = 1'b0;
        6'b110001 : IntCntLog[0] = 1'b0;   // Enable and load are active
        6'b110010 : IntCntLog[0] = 1'b0;   // Load value appears on counter 
        6'b110011 : IntCntLog[0] = 1'b0;   // output when reset is released.
        6'b110100 : IntCntLog[0] = 1'b0;
        6'b110101 : IntCntLog[0] = 1'b0;
        6'b110110 : IntCntLog[0] = 1'b0;
        6'b110111 : IntCntLog[0] = 1'b0;
        6'b111000 : IntCntLog[0] = 1'b1;
        6'b111001 : IntCntLog[0] = 1'b1;
        6'b111010 : IntCntLog[0] = 1'b1;
        6'b111011 : IntCntLog[0] = 1'b1;
        6'b111100 : IntCntLog[0] = 1'b1;
        6'b111101 : IntCntLog[0] = 1'b1;
        6'b111110 : IntCntLog[0] = 1'b1;
        6'b111111 : IntCntLog[0] = 1'b1;
        default   : IntCntLog[0] = 1'b0;
      endcase
   end

//
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module  high_speed_selectio_wiz_v3_5_1_Fdcr  #(
        parameter INIT = 1'b0 )
	(
        input D,
        input CE,
        input C,
        input R,
        output Q
	);
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
reg IntDceR;
wire IntQ;
//
   always @ (IntQ or  R or CE or D)
   begin
      case ({IntQ , R , CE , D})
          4'b0011 : IntDceR = 1'b1;    
          4'b1000 : IntDceR = 1'b1;
          4'b1001 : IntDceR = 1'b1;
          4'b1011 : IntDceR = 1'b1;
          default : IntDceR = 1'b0;
      endcase
   end

   assign Q = IntQ;
//
         FD
            #(.INIT(INIT))
         Fdcr_I_Fd
            (.D(IntDceR), .C(C), .Q(IntQ));
//
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_GenPulse 
    (
        input  Clk,
        input  Ena,
        input  SigIn,
        output SigOut
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire IntSigClr;
//
         high_speed_selectio_wiz_v3_5_1_Fdcr
            #(.INIT(1'b0))
         GenPulse_I_Fdcr_1
            (.D(SigIn), .CE(Ena), .C(Clk), .R(IntSigClr), .Q(SigOut));
//
         high_speed_selectio_wiz_v3_5_1_Fdcr
            #(.INIT(1'b0))
         GenPulse_I_Fdcr_2
            (.D(SigIn), .CE(High), .C(Clk), .R(Low), .Q(IntSigClr));
//////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_4b 
    #(
        parameter integer C_ErrOut = 1,         // 1 = ErrOut pin available.
		parameter C_BITSLIP_MODE = "SLIP_PER_BIT",
        parameter integer C_InputReg = 0       // 0 = No, 1 = Yes
    ) (
        input [3:0]  DataIn_pin, 
        input Bitslip_pin,
        input [1:0]  SlipVal_pin,
        input [3:0] CompVal_pin,
        input Ena_pin,    
        input Rst_pin,    
        input Clk_pin,    
        output [3:0]  DataOut_pin,
        output ErrOut_pin 
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
reg [3:0] IntBitSlipPosition;
reg IntFrstBitSlipPstn;
reg [3:0] IntBitSlipData;
reg [3:0] IntRankTwo;
reg [3:0] IntRankTre;
wire IntEnaReg;
reg IntEnaReg_d;
wire IntShftSlipReg;
reg IntSlipPulse_d;
reg IntShiftEna_d;
wire IntSlipPulse;
wire IntShiftEna;
wire IntShftCntTc;
wire IntShftCntEna;
wire IntCompEqu;
reg IntCompEqu_d;
wire IntCompEqu_Rst;
wire IntShftCntRst;
wire [1:0] IntBitSlipCntOut;
wire IntErrOut;
wire IntErrOut_d;
////////////////////////////////////////////////////////////////////////////////////////////-
// Extra front input register.
// Adds one pipeline stage!
////////////////////////////////////////////////////////////////////////////////////////-
reg [3:0] IntRankOne;
generate
    if( C_InputReg == 1 )
    begin : GEN_REG_INPUT
       always @ (posedge Clk_pin or posedge Rst_pin)
       begin
        if (Rst_pin)
            IntRankOne <= 4'h0;
        else if (Ena_pin)
                IntRankOne <= DataIn_pin;
        end
    end
    else
    begin
       always @ (*)
          IntRankOne <= DataIn_pin;
    end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
// These are the bitslip registers.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
          IntRankTwo <= 4'h0;
          IntRankTre <= 4'b0;
      end
      else
      begin
          if (Ena_pin)
              IntRankTwo <= IntRankOne;
          if (IntEnaReg)
              IntRankTre <= IntBitSlipData;
      end
   end
//
   assign DataOut_pin = IntRankTre; 
//
   always @ (IntBitSlipPosition or Ena_pin or IntRankOne or IntRankTwo)
   begin
      case ({Ena_pin,IntBitSlipPosition})
          5'b10000 : IntBitSlipData = IntRankOne[3:0];
          5'b10001 : IntBitSlipData = {IntRankOne[0] , IntRankTwo[3:1]};
          5'b10010 : IntBitSlipData = {IntRankOne[1:0] , IntRankTwo[3:2]};
          5'b10100 : IntBitSlipData = {IntRankOne[2:0] , IntRankTwo[3]}; 
          5'b11000 : IntBitSlipData = IntRankOne[3:0];
          default  : IntBitSlipData = 4'b0000;
      endcase
   end
////////////////////////////////////////////////////////////////////////////////////////-
// This is the bitslip controller.
// When the attribute is set to "Slip" the generated controller is simple.
// When the attribute is set to "Nmbr" the controller is more complex.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
        IntBitSlipPosition <= 4'h0;
        IntFrstBitSlipPstn <= 1'b0;
      end
      else
         if (Ena_pin)
         begin
            if (IntShftSlipReg == 1'b1 && IntFrstBitSlipPstn == 1'b0)
                IntBitSlipPosition <= {IntBitSlipPosition[2:0] , ~IntBitSlipPosition[3]};
            else if (IntShftSlipReg == 1'b1 && IntFrstBitSlipPstn != 1'b0) 
                IntBitSlipPosition <= {IntBitSlipPosition[2:0] , IntBitSlipPosition[3]};
            if (IntShftSlipReg)
                IntFrstBitSlipPstn <= High;
          end
   end
////////////////////////////////////////////////////////////////////////////////////////-
generate
if (C_BITSLIP_MODE == "SLIP_PER_BIT" ) begin : GEN_SLIP_PER_BIT_L
    assign IntShftSlipReg = Bitslip_pin;
    assign IntEnaReg = High;
    if( C_ErrOut == 0 )
        assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
        high_speed_selectio_wiz_v3_5_1_C2BCEtc
        BitSlipInLogic_4b_I_C2bcetc
          (
            .CntClk(Clk_pin), // in 
            .CntRst(Rst_pin), // in 
            .CntEna(Bitslip_pin), // in 
            .CntOut(), // out [1:0]
            .CntTc(IntErrOut) // out
          );
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_4b_I_Fdce_ErrCntTc
            (.D(IntErrOut), .CE(Bitslip_pin), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut_d));
        //
        high_speed_selectio_wiz_v3_5_1_GenPulse
        BitSlipInLogic_4b_I_GenPulse_ErrCntTc
            (.Clk(Clk_pin), .Ena(High), .SigIn(IntErrOut_d), .SigOut(ErrOut_pin));   
    end
end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
generate
if ( C_BITSLIP_MODE == "SLIP_BY_VAL") begin : GEN_SLIP_BY_VAL_L
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
        IntSlipPulse_d <= 1'b0;
      end
      else
         if (Ena_pin)
                IntSlipPulse_d <= Bitslip_pin;
   end

   //
   always @ (posedge Clk_pin or posedge Rst_pin or posedge Bitslip_pin)
   begin
      if (Rst_pin || Bitslip_pin)
      begin
        IntEnaReg_d <= 1'b0;
      end
      else
         if (IntShftCntTc)
                IntEnaReg_d <= High;
   end
    //
   always @ (posedge Clk_pin or posedge Rst_pin or posedge IntShftCntTc)
   begin
      if (Rst_pin || IntShftCntTc)
      begin
        IntShiftEna_d <= 1'b0;
      end
      else
         if (IntSlipPulse)
                IntShiftEna_d <= High;
   end
    //
    assign IntSlipPulse = (~Bitslip_pin) && IntSlipPulse_d;
    assign IntShiftEna = IntShiftEna_d || IntSlipPulse;
    assign IntShftCntEna = IntShiftEna && Ena_pin;
    assign IntShftSlipReg = IntShiftEna;
    assign IntEnaReg = IntShftCntTc || IntEnaReg_d;
    // The error output ErrOut_pin is her not really an erro output but more
    // an indication that the data is ready and available at the output of the module.
end
endgenerate

generate
if ( C_BITSLIP_MODE == "SLIP_BY_VAL") begin : GEN_SLIP_BY_VAL1_L
    if( C_ErrOut == 0 )
       assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_4b_Fdce_CntTc
            (.D(IntShftCntTc), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut));
        //
        assign ErrOut_pin = IntErrOut; 
    end
end
endgenerate
    //
generate
if ( C_BITSLIP_MODE == "SLIP_BY_VAL") begin : GEN_SLIP_BY_VAL2_L
    high_speed_selectio_wiz_v3_5_1_C2BCEtc_dwnld
    BitSlipInLogic_4b_I_C2bcetcdwnld
     (
        .CntClk(Clk_pin), // in 
        .CntRst(IntShftCntRst), // in 
        .CntEna(IntShftCntEna), // in 
        .CntLoad(Bitslip_pin), // in 
        .CntLdVal(SlipVal_pin), // in [1:0]
        .CntOut(IntBitSlipCntOut), //, // out [1:0]
        .CntTc(	IntShftCntTc) // out
    );
    //
    high_speed_selectio_wiz_v3_5_1_GenPulse
    BitSlipInLogic_4b_I_GenPulse
     (
        .Clk(Clk_pin), // in
        .Ena(High), // in
        .SigIn(IntShftCntTc), // in
        .SigOut(IntShftCntRst) // out
    );
  end	
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
generate
if (C_BITSLIP_MODE == "SLIP_BY_COMP") begin : GEN_SLIP_BY_COMP_L
    assign IntShftSlipReg = Bitslip_pin;
    // Compare bit slipped data (before output register, Rnk3) with the input data.
    // When equal enable the output register.
    assign IntCompEqu = (IntBitSlipData == CompVal_pin) ? 1'b1 : 1'b0;
    assign IntEnaReg = IntCompEqu || IntCompEqu_d;
    assign IntCompEqu_Rst = Rst_pin || Bitslip_pin;
    //
   always @ (posedge Clk_pin or posedge IntCompEqu_Rst)
   begin
      if (IntCompEqu_Rst)
      begin
        IntCompEqu_d <= 1'b0;
      end
      else
         if (IntCompEqu)
                IntCompEqu_d <= High;
   end
 end
endgenerate
    //
generate
if (C_BITSLIP_MODE == "SLIP_BY_COMP") begin : GEN_SLIP_BY_COMP1_L
    if( C_ErrOut == 0 )
       assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_4b_Fdce_ErrOut
            (.D(IntCompEqu), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(ErrOut_pin));
        //
    end
end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_8b 
    #(
        parameter integer C_ErrOut = 1,         // 1 = ErrOut pin available.
		parameter C_BITSLIP_MODE = "SLIP_PER_BIT",
        parameter integer C_InputReg = 0       // 0 = No, 1 = Yes
    ) (
        input [7:0]  DataIn_pin, 
        input Bitslip_pin,
        input [2:0]  SlipVal_pin,
        input [7:0] CompVal_pin,
        input Ena_pin,    
        input Rst_pin,    
        input Clk_pin,    
        output [7:0]  DataOut_pin,
        output ErrOut_pin 
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
reg [7:0] IntBitSlipPosition;
reg IntFrstBitSlipPstn;
reg [7:0] IntBitSlipData;
reg [7:0] IntRankTwo;
reg [7:0] IntRankTre;
wire IntEnaReg;
reg IntEnaReg_d;
wire IntShftSlipReg;
reg IntSlipPulse_d;
reg IntShiftEna_d;
wire IntSlipPulse;
wire IntShiftEna;
wire IntShftCntTc;
wire IntShftCntEna;
wire IntCompEqu;
reg IntCompEqu_d;
wire IntCompEqu_Rst;
wire IntShftCntRst;
wire [2:0] IntBitSlipCntOut;
wire IntErrOut;
wire IntErrOut_d;
////////////////////////////////////////////////////////////////////////////////////////////-
// Extra front input register.
// Adds one pipeline stage!
////////////////////////////////////////////////////////////////////////////////////////-
reg [7:0] IntRankOne;
generate
    if( C_InputReg == 1 )
    begin : GEN_INPUT_REG_8
       always @ (posedge Clk_pin or posedge Rst_pin)
       begin
        if (Rst_pin)
            IntRankOne <= 8'h00;
        else if (Ena_pin)
                IntRankOne <= DataIn_pin;
        end
    end
    else
    begin
       always @ (*)
          IntRankOne <= DataIn_pin;
    end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
// These are the bitslip registers.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
          IntRankTwo <= 8'h00;
          IntRankTre <= 8'h00;
      end
      else
      begin
          if (Ena_pin)
              IntRankTwo <= IntRankOne;
          if (IntEnaReg)
              IntRankTre <= IntBitSlipData;
      end
   end
//
   assign DataOut_pin = IntRankTre; 
//
   always @ (IntBitSlipPosition or Ena_pin or IntRankOne or IntRankTwo)
   begin
      case ({Ena_pin,IntBitSlipPosition}) 
          9'b100000000 : IntBitSlipData = IntRankOne[7:0];
          9'b100000001 : IntBitSlipData = {IntRankOne[0],IntRankTwo[7:1]};
          9'b100000010 : IntBitSlipData = {IntRankOne[1:0],IntRankTwo[7:2]};
          9'b100000100 : IntBitSlipData = {IntRankOne[2:0],IntRankTwo[7:3]};
          9'b100001000 : IntBitSlipData = {IntRankOne[3:0],IntRankTwo[7:4]};
          9'b100010000 : IntBitSlipData = {IntRankOne[4:0],IntRankTwo[7:5]};
          9'b100100000 : IntBitSlipData = {IntRankOne[5:0],IntRankTwo[7:6]};
          9'b101000000 : IntBitSlipData = {IntRankOne[6:0],IntRankTwo[7]};
          9'b110000000 : IntBitSlipData = IntRankOne[7:0];
          default      : IntBitSlipData = 8'h00;
      endcase
   end
////////////////////////////////////////////////////////////////////////////////////////-
// This is the bitslip controller.
// When the attribute is set to "Slip" the generated controller is simple.
// When the attribute is set to "Nmbr" the controller is more complex.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
        IntBitSlipPosition <= 8'h00;
        IntFrstBitSlipPstn <= 1'b0;
      end
      else
         if (Ena_pin)
         begin
            if (IntShftSlipReg == 1'b1 && IntFrstBitSlipPstn == 1'b0)
                IntBitSlipPosition <= {IntBitSlipPosition[6:0] , ~IntBitSlipPosition[7]};
            else if (IntShftSlipReg == 1'b1 && IntFrstBitSlipPstn != 1'b0) 
                IntBitSlipPosition <= {IntBitSlipPosition[6:0] , IntBitSlipPosition[7]};
            if (IntShftSlipReg)
                IntFrstBitSlipPstn <= High;
          end
   end
////////////////////////////////////////////////////////////////////////////////////////-
generate
if ( C_BITSLIP_MODE == "SLIP_PER_BIT" ) begin : GEN_SLIP_PER_BIT_8_L
    assign IntShftSlipReg = Bitslip_pin;
    assign IntEnaReg = High;
    if( C_ErrOut == 0 )
        assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
        high_speed_selectio_wiz_v3_5_1_C3BCEtc
        BitSlipInLogic_8b_I_C3bcetc
          (
            .CntClk(Clk_pin), // in 
            .CntRst(Rst_pin), // in 
            .CntEna(Bitslip_pin), // in 
            .CntOut(), // out [2:0]
            .CntTc(IntErrOut) // out
          );
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_8b_I_Fdce_ErrCntTc
            (.D(IntErrOut), .CE(Bitslip_pin), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut_d));
        //
        high_speed_selectio_wiz_v3_5_1_GenPulse
        BitSlipInLogic_8b_I_GenPulse_ErrCntTc
            (.Clk(Clk_pin), .Ena(High), .SigIn(IntErrOut_d), .SigOut(ErrOut_pin));   
    end
end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
generate
if (C_BITSLIP_MODE == "SLIP_BY_VAL" ) begin : GEN_SLIP_PER_VAL_8_L
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
        IntSlipPulse_d <= 1'b0;
      end
      else
         if (Ena_pin)
                IntSlipPulse_d <= Bitslip_pin;
   end

   //
   always @ (posedge Clk_pin or posedge Rst_pin or posedge Bitslip_pin)
   begin
      if (Rst_pin || Bitslip_pin)
      begin
        IntEnaReg_d <= 1'b0;
      end
      else
         if (IntShftCntTc)
                IntEnaReg_d <= High;
   end
    //
   always @ (posedge Clk_pin or posedge Rst_pin or posedge IntShftCntTc)
   begin
      if (Rst_pin || IntShftCntTc)
      begin
        IntShiftEna_d <= 1'b0;
      end
      else
         if (IntSlipPulse)
                IntShiftEna_d <= High;
   end
    //
    assign IntSlipPulse = (~Bitslip_pin) && IntSlipPulse_d;
    assign IntShiftEna = IntShiftEna_d || IntSlipPulse;
    assign IntShftCntEna = IntShiftEna && Ena_pin;
    assign IntShftSlipReg = IntShiftEna;
    assign IntEnaReg = IntShftCntTc || IntEnaReg_d;

    // The error output ErrOut_pin is her not really an erro output but more
    // an indication that the data is ready and available at the output of the module.

    if( C_ErrOut == 0 )
       assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_8b_Fdce_CntTc
            (.D(IntShftCntTc), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut));
        //
        assign ErrOut_pin = IntErrOut; 
    end

    high_speed_selectio_wiz_v3_5_1_C3BCEtc_dwnld
    BitSlipInLogic_8b_I_C3bcetcdwnld
     (
        .CntClk(Clk_pin), // in 
        .CntRst(IntShftCntRst), // in 
        .CntEna(IntShftCntEna), // in 
        .CntLoad(Bitslip_pin), // in 
        .CntLdVal(SlipVal_pin), // in [2:0]
        .CntOut(IntBitSlipCntOut), //, // out [2:0]
        .CntTc(	IntShftCntTc) // out
    );
    //
    high_speed_selectio_wiz_v3_5_1_GenPulse
    BitSlipInLogic_8b_I_GenPulse
     (
        .Clk(Clk_pin), // in
        .Ena(High), // in
        .SigIn(IntShftCntTc), // in
        .SigOut(IntShftCntRst) // out
    );
  end
endgenerate

////////////////////////////////////////////////////////////////////////////////////////-
generate
if ( C_BITSLIP_MODE == "SLIP_BY_COMP" )  begin : GEN_SLIP_PER_COMP_8_L
   assign IntShftSlipReg = Bitslip_pin;
    // Compare bit slipped data (before output register, Rnk3) with the input data.
    // When equal enable the output register.
    assign IntCompEqu = (IntBitSlipData == CompVal_pin) ? 1'b1 : 1'b0;
    assign IntEnaReg = IntCompEqu || IntCompEqu_d;
    assign IntCompEqu_Rst = Rst_pin || Bitslip_pin;
    //
   always @ (posedge Clk_pin or posedge IntCompEqu_Rst)
   begin
      if (IntCompEqu_Rst)
      begin
        IntCompEqu_d <= 1'b0;
      end
      else
         if (IntCompEqu)
                IntCompEqu_d <= High;
   end
    
    if( C_ErrOut == 0 )
       assign ErrOut_pin = Low;
    else
    begin
    // Got four bitslips and the value is still not discovered.
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_8b_Fdce_ErrOut
            (.D(IntCompEqu), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(ErrOut_pin));
        //
    end
end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_FstCmp_4b 
    #(
        parameter integer C_ErrOut = 1,         // 1 = ErrOut pin available.
        parameter integer C_InputReg = 0       // 0 = No, 1 = Yes
    ) (
        input [3:0]  DataIn_pin, 
        input Bitslip_pin,
        input [3:0] CompVal_pin,
        input Ena_pin,    
        input Rst_pin,    
        input Clk_pin,    
        output reg [3:0] DataOut_pin,
        output ErrOut_pin 
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
reg [3:0] IntRankTwo;
wire [15:0] IntRnkMux;
reg [15:0] IntRankTre;
reg [3:0] IntRankTreXtr;
wire [3:0] IntCmpEqu;
wire [3:0] IntCmpEqu_d;
wire [3:0] IntEquFfRst;
wire [3:0] IntEquMuxSel;
wire IntBtslpOne;   
wire IntBitslip;    
wire IntBitslipRst; 
wire IntNewBitslip; 
wire IntBtslpOvr;   
wire IntErrOut;     
wire IntCmpEquOr_n; 
wire IntCmpEquOr_nd;
wire IntEqundAndOvr;
////////////////////////////////////////////////////////////////////////////////////////////-
// Extra front input register.
// Adds one pipeline stage!
////////////////////////////////////////////////////////////////////////////////////////-
reg [3:0] IntRankOne;
generate
    if ( C_InputReg == 1 )
    begin : GEN_INPUT_REG_4_FAST
       always @ (posedge Clk_pin or posedge Rst_pin)
       begin
        if (Rst_pin)
            IntRankOne <= 4'h0;
        else
            if (Ena_pin)
                IntRankOne <= DataIn_pin;
        end
    end
    else
    begin
       always @ (*)
          IntRankOne <= DataIn_pin;
    end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
// These are the bitslip registers.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
          IntRankTwo <= 4'h0;
          IntRankTre <= 4'h0;
          IntRankTreXtr <= 4'h0;
      end
      else
          if (Ena_pin)
          begin
            IntRankTwo <= IntRankOne;
            IntRankTre <= IntRnkMux;
            IntRankTreXtr <= IntRankTwo;
          end
   end
// Multiplexer
   assign IntRnkMux[15:12] = {IntRankOne[0]   , IntRankTwo[3:1]};
   assign IntRnkMux[11: 8] = {IntRankOne[1:0] , IntRankTwo[3:2]};
   assign IntRnkMux[7 : 4] = {IntRankOne[2:0] , IntRankTwo[3]};
   assign IntRnkMux[3 : 0] = IntRankOne[3:0];
//
   assign IntCmpEqu[3] = (IntRnkMux[15:12] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[2] = (IntRnkMux[11:8] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[1] = (IntRnkMux[7:4] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[0] = (IntRnkMux[3:0] == CompVal_pin) ? 1'b1 : 1'b0;
//
   assign IntEquFfRst[3] = (Rst_pin || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[2] = (Rst_pin || IntCmpEqu[3] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[1] = (Rst_pin || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[0]);
   assign IntEquFfRst[0] = (Rst_pin || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1]);
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_Fdce_Equ_3
            (.D(High), .CE(IntCmpEqu[3]), .C(Clk_pin), .CLR(IntEquFfRst[3]), .Q(IntCmpEqu_d[3]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_Fdce_Equ_2
            (.D(High), .CE(IntCmpEqu[2]), .C(Clk_pin), .CLR(IntEquFfRst[2]), .Q(IntCmpEqu_d[2]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_Fdce_Equ_1
            (.D(High), .CE(IntCmpEqu[1]), .C(Clk_pin), .CLR(IntEquFfRst[1]), .Q(IntCmpEqu_d[1]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_Fdce_Equ_0
            (.D(High), .CE(IntCmpEqu[0]), .C(Clk_pin), .CLR(IntEquFfRst[0]), .Q(IntCmpEqu_d[0]));
//
   assign IntEquMuxSel[3] = IntCmpEqu[3] || IntCmpEqu_d[3];
   assign IntEquMuxSel[2] = IntCmpEqu[2] || IntCmpEqu_d[2];
   assign IntEquMuxSel[1] = IntCmpEqu[1] || IntCmpEqu_d[1];
   assign IntEquMuxSel[0] = IntCmpEqu[0] || IntCmpEqu_d[0];
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_I_Fdce_BtslpOne
            (.D(Bitslip_pin), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBtslpOne));
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_I_Fdce_Btslptwo
            (.D(IntBtslpOne), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBitslip));
//
   assign IntNewBitslip = Bitslip_pin && IntBitslip;
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_I_Fdce_BtslpRst
            (.D(IntNewBitslip), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBitslipRst));
//
   always @ (IntEquMuxSel or IntBitslip or IntRankTre or IntRankTreXtr)
   begin
      case ({IntEquMuxSel,IntBitslip})
          5'b00001 : DataOut_pin = IntRankTreXtr;    
          5'b00011 : DataOut_pin = IntRankTre[3:0];  
          5'b00101 : DataOut_pin = IntRankTre[7:4]; 
          5'b01001 : DataOut_pin = IntRankTre[11:8];
          5'b10001 : DataOut_pin = IntRankTre[15:12];
          default  : DataOut_pin = IntRankTreXtr;
      endcase
   end
//
        high_speed_selectio_wiz_v3_5_1_C2BCEtc
        BitSlipInLogic_FstCmp_4b_I_BtslpCnt
          (
            .CntClk(Clk_pin), // in 
            .CntRst(Rst_pin), // in 
            .CntEna(Bitslip_pin), // in 
            .CntOut(), // out [1:0]
            .CntTc(IntBtslpOvr) // out
          );
//
   assign IntCmpEquOr_n = ~(IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEqundAndOvr = IntBtslpOvr && IntCmpEquOr_nd;
//
         FDRE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_I_Fdre_Equ
            (.D(High), .CE(IntCmpEquOr_n), .C(Clk_pin), .R(IntErrOut), .Q(IntCmpEquOr_nd));
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_4b_I_Fdce_Err
            (.D(IntEqundAndOvr), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut));
//             
   assign ErrOut_pin = IntErrOut;
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_FstCmp_8b 
    #(
        parameter integer C_ErrOut = 1,         // 1 = ErrOut pin available.
        parameter integer C_InputReg = 0       // 0 = No, 1 = Yes
    ) (
        input [7:0]  DataIn_pin, 
        input Bitslip_pin,
        input [7:0] CompVal_pin,
        input Ena_pin,    
        input Rst_pin,    
        input Clk_pin,    
        output reg [7:0] DataOut_pin,
        output ErrOut_pin 
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
reg [7:0] IntRankTwo;
wire [63:0] IntRnkMux;
reg [63:0] IntRankTre;
reg [7:0] IntRankTreXtr;
wire [7:0] IntCmpEqu;
wire [7:0] IntCmpEqu_d;
wire [7:0] IntEquFfRst;
wire [7:0] IntEquMuxSel;
wire IntBtslpOne;   
wire IntBtslpTwo;   
wire IntBitslip;    
wire IntBitslipRst; 
wire IntNewBitslip; 
wire IntBtslpOvr;   
wire IntErrOut;     
wire IntCmpEquOr_n; 
wire IntCmpEquOr_nd;
wire IntEqundAndOvr;
////////////////////////////////////////////////////////////////////////////////////////////-
// Extra front input register.
// Adds one pipeline stage!
////////////////////////////////////////////////////////////////////////////////////////-
reg [7:0] IntRankOne;
generate
    if ( C_InputReg == 1 )
    begin : GEN_INPUT_REG_8_FAST
       always @ (posedge Clk_pin or posedge Rst_pin)
       begin
        if (Rst_pin)
            IntRankOne <= 8'h00;
        else
            if (Ena_pin)
                IntRankOne <= DataIn_pin;
        end
    end
    else
    begin
       always @ (*)
          IntRankOne <= DataIn_pin;
    end
endgenerate
////////////////////////////////////////////////////////////////////////////////////////-
// These are the bitslip registers.
////////////////////////////////////////////////////////////////////////////////////////-
   always @ (posedge Clk_pin or posedge Rst_pin)
   begin
      if (Rst_pin)
      begin
          IntRankTwo <= 8'h00;
          IntRankTre <= 8'h00;
          IntRankTreXtr <= 8'h00;
      end
      else
      begin
          if (Ena_pin)
          begin
            IntRankTwo <= IntRankOne;
            IntRankTre <= IntRnkMux;
            IntRankTreXtr <= IntRankTwo;
          end
      end
   end
// Multiplexer
   assign IntRnkMux[63:56] = {IntRankOne[0]   , IntRankTwo[7:1]};
   assign IntRnkMux[55:48] = {IntRankOne[1:0]   , IntRankTwo[7:2]};
   assign IntRnkMux[47:40] = {IntRankOne[2:0]   , IntRankTwo[7:3]};
   assign IntRnkMux[39:32] = {IntRankOne[3:0]   , IntRankTwo[7:4]};
   assign IntRnkMux[31:24] = {IntRankOne[4:0]   , IntRankTwo[7:5]};
   assign IntRnkMux[23:16] = {IntRankOne[5:0]   , IntRankTwo[7:6]};
   assign IntRnkMux[15: 8] = {IntRankOne[6:0]   , IntRankTwo[7]};
   assign IntRnkMux[7 : 0] = IntRankOne[7 : 0];
//
   assign IntCmpEqu[7] = (IntRnkMux[63:56] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[6] = (IntRnkMux[55:48] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[5] = (IntRnkMux[47:40] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[4] = (IntRnkMux[39:32] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[3] = (IntRnkMux[31:24] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[2] = (IntRnkMux[23:16] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[1] = (IntRnkMux[15: 8] == CompVal_pin) ? 1'b1 : 1'b0;
   assign IntCmpEqu[0] = (IntRnkMux[7 : 0] == CompVal_pin) ? 1'b1 : 1'b0;
//
   assign IntEquFfRst[7] = (Rst_pin || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[6] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[5] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[4] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[3] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[2] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEquFfRst[1] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[0]);
   assign IntEquFfRst[0] = (Rst_pin || IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1]);
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_7
            (.D(High), .CE(IntCmpEqu[7]), .C(Clk_pin), .CLR(IntEquFfRst[7]), .Q(IntCmpEqu_d[7]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_6
            (.D(High), .CE(IntCmpEqu[6]), .C(Clk_pin), .CLR(IntEquFfRst[6]), .Q(IntCmpEqu_d[6]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_5
            (.D(High), .CE(IntCmpEqu[5]), .C(Clk_pin), .CLR(IntEquFfRst[5]), .Q(IntCmpEqu_d[5]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_4
            (.D(High), .CE(IntCmpEqu[4]), .C(Clk_pin), .CLR(IntEquFfRst[4]), .Q(IntCmpEqu_d[4]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_3
            (.D(High), .CE(IntCmpEqu[3]), .C(Clk_pin), .CLR(IntEquFfRst[3]), .Q(IntCmpEqu_d[3]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_2
            (.D(High), .CE(IntCmpEqu[2]), .C(Clk_pin), .CLR(IntEquFfRst[2]), .Q(IntCmpEqu_d[2]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_1
            (.D(High), .CE(IntCmpEqu[1]), .C(Clk_pin), .CLR(IntEquFfRst[1]), .Q(IntCmpEqu_d[1]));
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_Fdce_Equ_0
            (.D(High), .CE(IntCmpEqu[0]), .C(Clk_pin), .CLR(IntEquFfRst[0]), .Q(IntCmpEqu_d[0]));
//
   assign IntEquMuxSel[7] = IntCmpEqu[7] || IntCmpEqu_d[7];
   assign IntEquMuxSel[6] = IntCmpEqu[6] || IntCmpEqu_d[6];
   assign IntEquMuxSel[5] = IntCmpEqu[5] || IntCmpEqu_d[5];
   assign IntEquMuxSel[4] = IntCmpEqu[4] || IntCmpEqu_d[4];
   assign IntEquMuxSel[3] = IntCmpEqu[3] || IntCmpEqu_d[3];
   assign IntEquMuxSel[2] = IntCmpEqu[2] || IntCmpEqu_d[2];
   assign IntEquMuxSel[1] = IntCmpEqu[1] || IntCmpEqu_d[1];
   assign IntEquMuxSel[0] = IntCmpEqu[0] || IntCmpEqu_d[0];
//
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdce_BtslpOne
            (.D(Bitslip_pin), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBtslpOne));
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdce_Btslptwo
            (.D(IntBtslpOne), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBtslpTwo));
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdce_Bitslip
            (.D(High), .CE(IntBtslpTwo), .C(Clk_pin), .CLR(IntBitslipRst), .Q(IntBitslip));
//
   assign IntNewBitslip = Bitslip_pin && IntBitslip;
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdce_BtslpRst
            (.D(IntNewBitslip), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntBitslipRst));
//
   always @ (IntEquMuxSel or IntBitslip or IntRankTre or IntRankTreXtr)
   begin
      case ({IntEquMuxSel,IntBitslip})
          9'b000000001 : DataOut_pin = IntRankTreXtr;    
          9'b000000011 : DataOut_pin = IntRankTre[7:0];  
          9'b000000101 : DataOut_pin = IntRankTre[15:8]; 
          9'b000001001 : DataOut_pin = IntRankTre[23:16];
          9'b000010001 : DataOut_pin = IntRankTre[31:24];
          9'b000100001 : DataOut_pin = IntRankTre[39:32]; 
          9'b001000001 : DataOut_pin = IntRankTre[47:40];
          9'b010000001 : DataOut_pin = IntRankTre[55:48];
          9'b100000001 : DataOut_pin = IntRankTre[63:56];
          default  : DataOut_pin = IntRankTreXtr;
      endcase
   end
//
        high_speed_selectio_wiz_v3_5_1_C3BCEtc
        BitSlipInLogic_FstCmp_8b_I_BtslpCnt
          (
            .CntClk(Clk_pin), // in 
            .CntRst(Rst_pin), // in 
            .CntEna(Bitslip_pin), // in 
            .CntOut(), // out [1:0]
            .CntTc(IntBtslpOvr) // out
          );
//
   assign IntCmpEquOr_n = ~(IntCmpEqu[7] || IntCmpEqu[6] || IntCmpEqu[5] || IntCmpEqu[4] || IntCmpEqu[3] || IntCmpEqu[2] || IntCmpEqu[1] || IntCmpEqu[0]);
   assign IntEqundAndOvr = IntBtslpOvr && IntCmpEquOr_nd;
//
         FDRE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdre_Equ
            (.D(High), .CE(IntCmpEquOr_n), .C(Clk_pin), .R(IntErrOut), .Q(IntCmpEquOr_nd));
//
         FDCE 
            #(.INIT(1'b0))
         BitSlipInLogic_FstCmp_8b_I_Fdce_Err
            (.D(IntEqundAndOvr), .CE(High), .C(Clk_pin), .CLR(Rst_pin), .Q(IntErrOut));
//             
   assign ErrOut_pin = IntErrOut;
////////////////////////////////////////////////////////////////////////////////////////////-
endmodule
//


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.

`timescale 1ps/1ps

module high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_Toplevel #(
        parameter integer C_DataWidth = 8,      // 8, 4
        parameter integer C_PulsedSlip = 1,       // 1 = bitslip is reduced to a clock period.
                                                // Leave this at '1', unless you are sure that
                                                // a bitslip given by an application is longer
                                                // than one Clk_pin cycle.
        parameter integer C_ErrOut = 1,         // 1 = ErrOut pin available.
		parameter C_BITSLIP_MODE = "SLIP_PER_BIT",
        parameter integer C_InputReg = 0       // 0 = No, 1 = Yes
    ) (
        input [C_DataWidth-1:0]  DataIn_pin, 
        input Bitslip_pin,
        input [2:0]  SlipVal_pin,
        input [C_DataWidth-1:0] CompVal_pin,
        input Ena_pin,    
        input Rst_pin,    
        input Clk_pin,    
        output reg [C_DataWidth-1:0]  DataOut_pin,
        output reg ErrOut_pin 
    );
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants, Wire Declarations
////////////////////////////////////////////////////////////////////////////////////////////-
// Constants
wire Low  = 1'b0;
wire High = 1'b1;
// wires
wire IntBitslip_pin;
reg [C_DataWidth-1:0] Int_Reg_DataIn_pin;
reg Int_Reg_Bitslip_pin;
reg [2:0] Int_Reg_SlipVal_pin;
reg [C_DataWidth-1:0] Int_Reg_CompVal_pin;
reg Int_Reg_Ena_pin;
reg Int_Reg_Rst_pin;
wire [C_DataWidth-1:0] Int_Reg_DataOut_pin;
wire Int_Reg_ErrOut_pin;
////////////////////////////////////////////////////////////////////////////////////////////-
// Input registers
////////////////////////////////////////////////////////////////////////////////////////////-
always @ (posedge Clk_pin)
begin
       Int_Reg_DataIn_pin <= DataIn_pin;
       Int_Reg_Bitslip_pin <= Bitslip_pin;
       Int_Reg_SlipVal_pin <= SlipVal_pin;
       Int_Reg_CompVal_pin <= CompVal_pin;
       Int_Reg_Ena_pin <= Ena_pin; 
       Int_Reg_Rst_pin <= Rst_pin;
end
//////////////////////////////////////////////////////////////////////////////////////////////-
//// Output registers
//////////////////////////////////////////////////////////////////////////////////////////////-
always @ (posedge Clk_pin)
begin
   DataOut_pin <= Int_Reg_DataOut_pin;
   ErrOut_pin <= Int_Reg_ErrOut_pin;
end
//////////////////////////////////////////////////////////////////////////////////////////////-
//// Generate or not, from a input signal that goes high and stay high a single pulse.
//// The input signal can stay high for 1 to n clock cycles, the output will be a 
//// pulse of the length of a clock period.
//////////////////////////////////////////////////////////////////////////////////////////-
generate
    if( C_PulsedSlip == 1 )
    begin : GEN_PULSEDSLIP_L
        high_speed_selectio_wiz_v3_5_1_GenPulse BitSlipInLogic_Toplevel_I_GenPulsedSlip
        (.Clk(Clk_pin), .Ena(High), .SigIn(Int_Reg_Bitslip_pin), .SigOut(IntBitslip_pin));
    end
    else
    assign IntBitslip_pin = Bitslip_pin;

 if ( C_DataWidth == 8 )  begin
    if (C_BITSLIP_MODE != "SLIP_FAST_COMP") begin
        high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_8b  
            #(
                .C_ErrOut(C_ErrOut), // 1 = ErrOut pin available.
                .C_InputReg(C_InputReg), // 0 = No, 1 = Yes
				.C_BITSLIP_MODE(C_BITSLIP_MODE)
            )
        BitSlipInLogic_Toplevel_I_Btslp8b 
            (
                .DataIn_pin(Int_Reg_DataIn_pin), // in [7:0]
                .Bitslip_pin(IntBitslip_pin), // in 
                .SlipVal_pin(Int_Reg_SlipVal_pin), // in [2:0]
                .CompVal_pin(Int_Reg_CompVal_pin), // in [7:0]
                .Ena_pin(Int_Reg_Ena_pin), // in
                .Rst_pin(Int_Reg_Rst_pin), // in
                .Clk_pin(Clk_pin), // in
                .DataOut_pin(Int_Reg_DataOut_pin), // out [7:0]
                .ErrOut_pin(Int_Reg_ErrOut_pin)
            );
    end
    if (C_BITSLIP_MODE == "SLIP_FAST_COMP") begin
       high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_FstCmp_8b
            #(
                .C_ErrOut(C_ErrOut), // 1 = ErrOut pin available.
                .C_InputReg(C_InputReg) // 0 = No, 1 = Yes
            )
       BitSlipInLogic_Toplevel_I_BtslpFstC8b
            (
                .DataIn_pin(Int_Reg_DataIn_pin), // in [7:0]
                .Bitslip_pin(IntBitslip_pin), // in 
                .CompVal_pin(Int_Reg_CompVal_pin), // in [7:0],
                .Ena_pin(Int_Reg_Ena_pin), // in, // in
                .Rst_pin(Int_Reg_Rst_pin), // in, // in
                .Clk_pin(Clk_pin), // in, // in
                .DataOut_pin(Int_Reg_DataOut_pin), // out [7:0],
                .ErrOut_pin(Int_Reg_ErrOut_pin) // out
            );
    end  
end			
 if ( C_DataWidth == 4 )  begin
    if (C_BITSLIP_MODE != "SLIP_FAST_COMP") begin 
       high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_4b
            #(
                .C_ErrOut(C_ErrOut), // 1 = ErrOut pin available., //
                .C_InputReg (C_InputReg), // 0 = No, 1 = Yes //
				.C_BITSLIP_MODE(C_BITSLIP_MODE)				
            )
        BitSlipInLogic_Toplevel_I_Btslp4b 
            (
                .DataIn_pin(Int_Reg_DataIn_pin), // in [3:0]
                .Bitslip_pin(IntBitslip_pin), // in 
                .SlipVal_pin(Int_Reg_SlipVal_pin[1:0]), // in [1:0]
                .CompVal_pin(Int_Reg_CompVal_pin), // in [3:0]
                .Ena_pin(Int_Reg_Ena_pin), // in
                .Rst_pin(Int_Reg_Rst_pin), // in
                .Clk_pin(Clk_pin), // in
                .DataOut_pin(Int_Reg_DataOut_pin), // out [3:0]
                .ErrOut_pin(Int_Reg_ErrOut_pin)
            );
	end		
	if (C_BITSLIP_MODE == "SLIP_FAST_COMP") begin		
	  high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_FstCmp_4b
            #(
                .C_ErrOut(C_ErrOut), // 1 = ErrOut pin available., //
                .C_InputReg (C_InputReg) // 0 = No, 1 = Yes //
            )
       BitSlipInLogic_Toplevel_I_BtslpFstC4b
            (             
                .DataIn_pin(Int_Reg_DataIn_pin), // in [3:0]
                .Bitslip_pin(IntBitslip_pin), // in 
                .CompVal_pin(Int_Reg_CompVal_pin), // in [3:0],
                .Ena_pin(Int_Reg_Ena_pin), // in, // in
                .Rst_pin(Int_Reg_Rst_pin), // in, // in
                .Clk_pin(Clk_pin), // in, // in
                .DataOut_pin(Int_Reg_DataOut_pin), // out [3:0],
                .ErrOut_pin(Int_Reg_ErrOut_pin) // out
            );
   end
 end			
endgenerate
//////////////////////////////////////////////////////////////////////////////////////////////-
endmodule


   
   // (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
   // 
   // This file contains confidential and proprietary information
   // of Xilinx, Inc. and is protected under U.S. and
   // international copyright and other intellectual property
   // laws.
   // 
   // DISCLAIMER
   // This disclaimer is not a license and does not grant any
   // rights to the materials distributed herewith. Except as
   // otherwise provided in a valid license issued to you by
   // Xilinx, and to the maximum extent permitted by applicable
   // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
   // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
   // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
   // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
   // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
   // (2) Xilinx shall not be liable (whether in contract or tort,
   // including negligence, or under any other theory of
   // liability) for any loss or damage of any kind or nature
   // related to, arising under or in connection with these
   // materials, including for any direct, or any indirect,
   // special, incidental, or consequential loss or damage
   // (including loss of data, profits, goodwill, or any type of
   // loss or damage suffered as a result of any action brought
   // by a third party) even if such damage or loss was
   // reasonably foreseeable or Xilinx had been advised of the
   // possibility of the same.
   // 
   // CRITICAL APPLICATIONS
   // Xilinx products are not designed or intended to be fail-
   // safe, or for use in any application requiring fail-safe
   // performance, such as life-support or safety devices or
   // systems, Class III medical devices, nuclear facilities,
   // applications related to the deployment of airbags, or any
   // other applications that could lead to death, personal
   // injury, or severe property or environmental damage
   // (individually and collectively, "Critical
   // Applications"). Customer assumes the sole risk and
   // liability of any use of Xilinx products in Critical
   // Applications, subject only to applicable laws and
   // regulations governing limitations on product liability.
   // 
   // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
   // PART OF THIS FILE AT ALL TIMES.
   `timescale 1ps/1ps
   module high_speed_selectio_wiz_v3_5_1_rxtx_bs #(
      parameter         C_SERIALIZATION_FACTOR         = 4,
      parameter [51:0]  C_DIFF_EN                      =  52'd0,  // Indicates whether the pin is differential or single ended
      parameter         C_SIM_DEVICE                   = "ULTRASCALE", 
      parameter         C_SIM_VERSION                  = 1.0,
      parameter         C_PLL0_RX_EXTERNAL_CLK_TO_DATA = 1,
      parameter         C_BIDIR_FIFO_SYNC_MODE         = "FALSE",
      parameter         C_BIDIR_RX_DELAY_FORMAT        = "TIME",
      parameter         C_BIDIR_TX_DELAY_FORMAT        = "TIME",
      //parameter         C_BIDIR_RX_UPDATE_MODE         = "ASYNC",
      //parameter         C_BIDIR_TX_UPDATE_MODE         = "ASYNC",
      parameter         C_BIDIR_IS_RX_CLK_INVERTED         = 1'b0,
      parameter         C_BIDIR_IS_RX_RST_DLY_INVERTED     = 1'b0,
      parameter         C_BIDIR_IS_RX_RST_INVERTED         = 1'b0,
      parameter         C_BIDIR_IS_TX_CLK_INVERTED         = 1'b0,
      parameter         C_BIDIR_IS_TX_RST_DLY_INVERTED     = 1'b0,
      parameter         C_BIDIR_IS_TX_RST_INVERTED         = 1'b0,
      parameter [1:0] C_RX_DELAY_TYPE0        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE1        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE2        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE3        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE4        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE5        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE6        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE7        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE8        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE9        =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE10       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE11       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE12       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE13       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE14       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE15       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE16       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE17       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE18       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE19       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE20       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE21       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE22       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE23       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE24       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE25       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE26       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE27       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE28       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE29       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE30       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE31       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE32       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE33       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE34       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE35       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE36       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE37       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE38       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE39       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE40       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE41       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE42       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE43       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE44       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE45       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE46       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE47       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE48       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE49       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE50       =  2'b00, // RX delay type
      parameter [1:0] C_RX_DELAY_TYPE51       =  2'b00, // RX delay type
      parameter [11:0] C_RX_DELAY_VALUE0       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE1       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE2       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE3       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE4       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE5       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE6       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE7       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE8       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE9       =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE10      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE11      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE12      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE13      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE14      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE15      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE16      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE17      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE18      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE19      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE20      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE21      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE22      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE23      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE24      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE25      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE26      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE27      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE28      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE29      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE30      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE31      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE32      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE33      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE34      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE35      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE36      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE37      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE38      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE39      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE40      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE41      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE42      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE43      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE44      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE45      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE46      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE47      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE48      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE49      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE50      =    'd0,  // RX delay value
      parameter [11:0] C_RX_DELAY_VALUE51      =    'd0,  // RX delay value
      parameter C_CLOCK_TRI             =      1,  // Combinatorial
      parameter C_DATA_TRI              =      1,  // Combinatorial
      parameter C_FIFO_SYNC_MODE        =   1'b0,  // RX clock frequency
      parameter C_RX_REFCLK_FREQ        =    200,  // RX clock frequency
      parameter [15:0] C_RX_STROBE_EN   =   1'b1,
      parameter [1:0] C_TX_DELAY_TYPE0        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE1        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE2        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE3        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE4        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE5        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE6        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE7        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE8        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE9        =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE10       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE11       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE12       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE13       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE14       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE15       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE16       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE17       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE18       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE19       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE20       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE21       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE22       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE23       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE24       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE25       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE26       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE27       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE28       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE29       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE30       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE31       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE32       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE33       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE34       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE35       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE36       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE37       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE38       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE39       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE40       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE41       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE42       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE43       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE44       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE45       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE46       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE47       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE48       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE49       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE50       =  2'b00, // TX delay type
      parameter [1:0] C_TX_DELAY_TYPE51       =  2'b00, // TX delay type
      parameter [11:0] C_TX_DELAY_VALUE0       =  'd0, // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE1       =  'd0, // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE2       =  'd0, // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE3       =  'd0, // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE4       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE5       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE6       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE7       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE8       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE9       =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE10      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE11      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE12      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE13      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE14      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE15      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE16      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE17      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE18      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE19      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE20      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE21      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE22      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE23      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE24      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE25      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE26      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE27      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE28      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE29      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE30      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE31      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE32      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE33      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE34      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE35      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE36      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE37      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE38      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE39      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE40      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE41      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE42      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE43      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE44      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE45      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE46      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE47      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE48      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE49      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE50      =    'd0,  // TX delay value
      parameter [11:0] C_TX_DELAY_VALUE51      =    'd0,  // TX delay value
      parameter C_TX_REFCLK_FREQ        =    200,  // RX clock frequency
      parameter C_FIFO_WR_CLK_EN        =   1'b1,  // Fifo Write Clock
      parameter C_ENABLE_BITSLIP        =   1'b0,  // Enable Bitslip
      parameter C_BITSLIP_MODE          =   "SLIP_PER_BIT",  // Bitslip Mode
      parameter [51:0] C_BIDIR_BITSLICE_EN     =   52'b0,
      parameter [51:0] C_BS_INIT_VAL           =  52'd0,
      parameter [7:0]  C_BITSLIP_VAL    =  8'h00,   // Bitslip value
      
      parameter C_NIB5_EN_CLK_TO_EXT_NORTH = 1'b1,   // 6th Nibble 
      parameter C_NIB4_EN_CLK_TO_EXT_NORTH = 1'b1,   // 5th Nibble 
      parameter C_NIB3_EN_CLK_TO_EXT_NORTH = 1'b1,   // 5th Nibble 
      parameter C_NIB2_EN_CLK_TO_EXT_NORTH = 1'b1,   // 4th Nibble 
      parameter C_NIB5_EN_CLK_TO_EXT_SOUTH = 1'b1,   // 3rd Nibble 
      parameter C_NIB4_EN_CLK_TO_EXT_SOUTH = 1'b1,   // 2nd Nibble
      parameter C_NIB3_EN_CLK_TO_EXT_SOUTH = 1'b1,   // 1st Nibble
      parameter C_NIB2_EN_CLK_TO_EXT_SOUTH = 1'b1,   // 0th Nibble
      parameter C_TX_PREEMPHASIS_S         = "NONE",
      parameter C_TX_PREEMPHASIS_D         = "NONE"
   )
   (
   // Common Signals  
   input            rst_seq_done,
   input            rst_in,
   input            rxtx_bs_rx_clk_in,                                              
   input  [51:0]    rxtx_bs_rx_rst_dly_in,                                  
   input  [51:0]    rxtx_bs_rx_rst_in,                                     
   input  [51:0]    rxtx_bs_tx_rst_in,                                    
   input  [51:0]    rxtx_bs_tx_rst_dly_in,                               
   input            rxtx_bs_tx_clk_in,                                         
   input            div_clk_to_fabric,
   input            start_bitslip,
   input  [51:0]    core_rdy,
   output           rxtx_bitslip_sync_done,

   // TBYTE signals from TX_BITSLICE_TRI, One for each nibble
   input                                    rxtx_nib0_tx_tbyte_in,  
   input                                    rxtx_nib1_tx_tbyte_in, 
   input                                    rxtx_nib2_tx_tbyte_in,
   input                                    rxtx_nib3_tx_tbyte_in,     
   input                                    rxtx_nib4_tx_tbyte_in,    
   input                                    rxtx_nib5_tx_tbyte_in,   
   input                                    rxtx_nib6_tx_tbyte_in,  
   input                                    rxtx_nib7_tx_tbyte_in, 
   
   // -----------------------------------------------------------------------
   // Bitslice0 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs0_D_data_from_fabric_in,  
   input                                    rxtx_bs0_rx_datain,            
   output                                   rxtx_bs0_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs0_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs0_rx_fifo_empty_out,        
   input                                    rxtx_bs0_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs0_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs0_rx_ce_in,                
   input  [8:0]                             rxtx_bs0_rx_cntvaluein,        
   output [8:0]                             rxtx_bs0_rx_cntvalueout,     
   input                                    rxtx_bs0_rx_en_vtc_in,            
   input                                    rxtx_bs0_rx_inc_in,               
   input                                    rxtx_bs0_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs0_tx_t_in,                 
   output                                   rxtx_bs0_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs0_tx_ce_in,
   input  [8:0]                             rxtx_bs0_tx_cntvaluein,        
   output [8:0]                             rxtx_bs0_tx_cntvalueout,      
   input                                    rxtx_bs0_tx_en_vtc_in,            
   input                                    rxtx_bs0_tx_inc_in,               
   input                                    rxtx_bs0_tx_load_in,              
   
   input  [39:0]                            rxtx_bs0_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs0_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs0_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs0_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice1 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs1_D_data_from_fabric_in,  
   input                                    rxtx_bs1_rx_datain,            
   output                                   rxtx_bs1_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs1_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs1_rx_fifo_empty_out,        
   input                                    rxtx_bs1_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs1_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs1_rx_ce_in,                
   input  [8:0]                             rxtx_bs1_rx_cntvaluein,        
   output [8:0]                             rxtx_bs1_rx_cntvalueout,     
   input                                    rxtx_bs1_rx_en_vtc_in,            
   input                                    rxtx_bs1_rx_inc_in,               
   input                                    rxtx_bs1_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs1_tx_t_in,                 
   output                                   rxtx_bs1_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs1_tx_ce_in,
   input  [8:0]                             rxtx_bs1_tx_cntvaluein,        
   output [8:0]                             rxtx_bs1_tx_cntvalueout,      
   input                                    rxtx_bs1_tx_en_vtc_in,            
   input                                    rxtx_bs1_tx_inc_in,               
   input                                    rxtx_bs1_tx_load_in,              
   
   input  [39:0]                            rxtx_bs1_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs1_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs1_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs1_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice2 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs2_D_data_from_fabric_in,  
   input                                    rxtx_bs2_rx_datain,            
   output                                   rxtx_bs2_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs2_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs2_rx_fifo_empty_out,        
   input                                    rxtx_bs2_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs2_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs2_rx_ce_in,                
   input  [8:0]                             rxtx_bs2_rx_cntvaluein,        
   output [8:0]                             rxtx_bs2_rx_cntvalueout,     
   input                                    rxtx_bs2_rx_en_vtc_in,            
   input                                    rxtx_bs2_rx_inc_in,               
   input                                    rxtx_bs2_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs2_tx_t_in,                 
   output                                   rxtx_bs2_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs2_tx_ce_in,
   input  [8:0]                             rxtx_bs2_tx_cntvaluein,        
   output [8:0]                             rxtx_bs2_tx_cntvalueout,      
   input                                    rxtx_bs2_tx_en_vtc_in,            
   input                                    rxtx_bs2_tx_inc_in,               
   input                                    rxtx_bs2_tx_load_in,              
   
   input  [39:0]                            rxtx_bs2_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs2_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs2_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs2_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice3 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs3_D_data_from_fabric_in,  
   input                                    rxtx_bs3_rx_datain,            
   output                                   rxtx_bs3_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs3_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs3_rx_fifo_empty_out,        
   input                                    rxtx_bs3_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs3_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs3_rx_ce_in,                
   input  [8:0]                             rxtx_bs3_rx_cntvaluein,        
   output [8:0]                             rxtx_bs3_rx_cntvalueout,     
   input                                    rxtx_bs3_rx_en_vtc_in,            
   input                                    rxtx_bs3_rx_inc_in,               
   input                                    rxtx_bs3_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs3_tx_t_in,                 
   output                                   rxtx_bs3_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs3_tx_ce_in,
   input  [8:0]                             rxtx_bs3_tx_cntvaluein,        
   output [8:0]                             rxtx_bs3_tx_cntvalueout,      
   input                                    rxtx_bs3_tx_en_vtc_in,            
   input                                    rxtx_bs3_tx_inc_in,               
   input                                    rxtx_bs3_tx_load_in,              
   
   input  [39:0]                            rxtx_bs3_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs3_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs3_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs3_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice4 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs4_D_data_from_fabric_in,  
   input                                    rxtx_bs4_rx_datain,            
   output                                   rxtx_bs4_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs4_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs4_rx_fifo_empty_out,        
   input                                    rxtx_bs4_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs4_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs4_rx_ce_in,                
   input  [8:0]                             rxtx_bs4_rx_cntvaluein,        
   output [8:0]                             rxtx_bs4_rx_cntvalueout,     
   input                                    rxtx_bs4_rx_en_vtc_in,            
   input                                    rxtx_bs4_rx_inc_in,               
   input                                    rxtx_bs4_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs4_tx_t_in,                 
   output                                   rxtx_bs4_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs4_tx_ce_in,
   input  [8:0]                             rxtx_bs4_tx_cntvaluein,        
   output [8:0]                             rxtx_bs4_tx_cntvalueout,      
   input                                    rxtx_bs4_tx_en_vtc_in,            
   input                                    rxtx_bs4_tx_inc_in,               
   input                                    rxtx_bs4_tx_load_in,              
   
   input  [39:0]                            rxtx_bs4_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs4_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs4_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs4_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice5 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs5_D_data_from_fabric_in,  
   input                                    rxtx_bs5_rx_datain,            
   output                                   rxtx_bs5_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs5_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs5_rx_fifo_empty_out,        
   input                                    rxtx_bs5_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs5_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs5_rx_ce_in,                
   input  [8:0]                             rxtx_bs5_rx_cntvaluein,        
   output [8:0]                             rxtx_bs5_rx_cntvalueout,     
   input                                    rxtx_bs5_rx_en_vtc_in,            
   input                                    rxtx_bs5_rx_inc_in,               
   input                                    rxtx_bs5_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs5_tx_t_in,                 
   output                                   rxtx_bs5_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs5_tx_ce_in,
   input  [8:0]                             rxtx_bs5_tx_cntvaluein,        
   output [8:0]                             rxtx_bs5_tx_cntvalueout,      
   input                                    rxtx_bs5_tx_en_vtc_in,            
   input                                    rxtx_bs5_tx_inc_in,               
   input                                    rxtx_bs5_tx_load_in,              
   
   input  [39:0]                            rxtx_bs5_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs5_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs5_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs5_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice6 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs6_D_data_from_fabric_in,  
   input                                    rxtx_bs6_rx_datain,            
   output                                   rxtx_bs6_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs6_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs6_rx_fifo_empty_out,        
   input                                    rxtx_bs6_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs6_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs6_rx_ce_in,                
   input  [8:0]                             rxtx_bs6_rx_cntvaluein,        
   output [8:0]                             rxtx_bs6_rx_cntvalueout,     
   input                                    rxtx_bs6_rx_en_vtc_in,            
   input                                    rxtx_bs6_rx_inc_in,               
   input                                    rxtx_bs6_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs6_tx_t_in,                 
   output                                   rxtx_bs6_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs6_tx_ce_in,
   input  [8:0]                             rxtx_bs6_tx_cntvaluein,        
   output [8:0]                             rxtx_bs6_tx_cntvalueout,      
   input                                    rxtx_bs6_tx_en_vtc_in,            
   input                                    rxtx_bs6_tx_inc_in,               
   input                                    rxtx_bs6_tx_load_in,              
   
   input  [39:0]                            rxtx_bs6_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs6_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs6_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs6_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice7 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs7_D_data_from_fabric_in,  
   input                                    rxtx_bs7_rx_datain,            
   output                                   rxtx_bs7_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs7_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs7_rx_fifo_empty_out,        
   input                                    rxtx_bs7_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs7_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs7_rx_ce_in,                
   input  [8:0]                             rxtx_bs7_rx_cntvaluein,        
   output [8:0]                             rxtx_bs7_rx_cntvalueout,     
   input                                    rxtx_bs7_rx_en_vtc_in,            
   input                                    rxtx_bs7_rx_inc_in,               
   input                                    rxtx_bs7_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs7_tx_t_in,                 
   output                                   rxtx_bs7_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs7_tx_ce_in,
   input  [8:0]                             rxtx_bs7_tx_cntvaluein,        
   output [8:0]                             rxtx_bs7_tx_cntvalueout,      
   input                                    rxtx_bs7_tx_en_vtc_in,            
   input                                    rxtx_bs7_tx_inc_in,               
   input                                    rxtx_bs7_tx_load_in,              
   
   input  [39:0]                            rxtx_bs7_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs7_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs7_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs7_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice8 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs8_D_data_from_fabric_in,  
   input                                    rxtx_bs8_rx_datain,            
   output                                   rxtx_bs8_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs8_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs8_rx_fifo_empty_out,        
   input                                    rxtx_bs8_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs8_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs8_rx_ce_in,                
   input  [8:0]                             rxtx_bs8_rx_cntvaluein,        
   output [8:0]                             rxtx_bs8_rx_cntvalueout,     
   input                                    rxtx_bs8_rx_en_vtc_in,            
   input                                    rxtx_bs8_rx_inc_in,               
   input                                    rxtx_bs8_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs8_tx_t_in,                 
   output                                   rxtx_bs8_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs8_tx_ce_in,
   input  [8:0]                             rxtx_bs8_tx_cntvaluein,        
   output [8:0]                             rxtx_bs8_tx_cntvalueout,      
   input                                    rxtx_bs8_tx_en_vtc_in,            
   input                                    rxtx_bs8_tx_inc_in,               
   input                                    rxtx_bs8_tx_load_in,              
   
   input  [39:0]                            rxtx_bs8_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs8_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs8_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs8_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice9 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs9_D_data_from_fabric_in,  
   input                                    rxtx_bs9_rx_datain,            
   output                                   rxtx_bs9_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs9_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs9_rx_fifo_empty_out,        
   input                                    rxtx_bs9_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs9_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs9_rx_ce_in,                
   input  [8:0]                             rxtx_bs9_rx_cntvaluein,        
   output [8:0]                             rxtx_bs9_rx_cntvalueout,     
   input                                    rxtx_bs9_rx_en_vtc_in,            
   input                                    rxtx_bs9_rx_inc_in,               
   input                                    rxtx_bs9_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs9_tx_t_in,                 
   output                                   rxtx_bs9_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs9_tx_ce_in,
   input  [8:0]                             rxtx_bs9_tx_cntvaluein,        
   output [8:0]                             rxtx_bs9_tx_cntvalueout,      
   input                                    rxtx_bs9_tx_en_vtc_in,            
   input                                    rxtx_bs9_tx_inc_in,               
   input                                    rxtx_bs9_tx_load_in,              
   
   input  [39:0]                            rxtx_bs9_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs9_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs9_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs9_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice10 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs10_D_data_from_fabric_in,  
   input                                    rxtx_bs10_rx_datain,            
   output                                   rxtx_bs10_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs10_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs10_rx_fifo_empty_out,        
   input                                    rxtx_bs10_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs10_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs10_rx_ce_in,                
   input  [8:0]                             rxtx_bs10_rx_cntvaluein,        
   output [8:0]                             rxtx_bs10_rx_cntvalueout,     
   input                                    rxtx_bs10_rx_en_vtc_in,            
   input                                    rxtx_bs10_rx_inc_in,               
   input                                    rxtx_bs10_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs10_tx_t_in,                 
   output                                   rxtx_bs10_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs10_tx_ce_in,
   input  [8:0]                             rxtx_bs10_tx_cntvaluein,        
   output [8:0]                             rxtx_bs10_tx_cntvalueout,      
   input                                    rxtx_bs10_tx_en_vtc_in,            
   input                                    rxtx_bs10_tx_inc_in,               
   input                                    rxtx_bs10_tx_load_in,              
   
   input  [39:0]                            rxtx_bs10_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs10_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs10_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs10_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice11 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs11_D_data_from_fabric_in,  
   input                                    rxtx_bs11_rx_datain,            
   output                                   rxtx_bs11_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs11_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs11_rx_fifo_empty_out,        
   input                                    rxtx_bs11_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs11_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs11_rx_ce_in,                
   input  [8:0]                             rxtx_bs11_rx_cntvaluein,        
   output [8:0]                             rxtx_bs11_rx_cntvalueout,     
   input                                    rxtx_bs11_rx_en_vtc_in,            
   input                                    rxtx_bs11_rx_inc_in,               
   input                                    rxtx_bs11_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs11_tx_t_in,                 
   output                                   rxtx_bs11_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs11_tx_ce_in,
   input  [8:0]                             rxtx_bs11_tx_cntvaluein,        
   output [8:0]                             rxtx_bs11_tx_cntvalueout,      
   input                                    rxtx_bs11_tx_en_vtc_in,            
   input                                    rxtx_bs11_tx_inc_in,               
   input                                    rxtx_bs11_tx_load_in,              
   
   input  [39:0]                            rxtx_bs11_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs11_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs11_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs11_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice12 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs12_D_data_from_fabric_in,  
   input                                    rxtx_bs12_rx_datain,            
   output                                   rxtx_bs12_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs12_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs12_rx_fifo_empty_out,        
   input                                    rxtx_bs12_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs12_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs12_rx_ce_in,                
   input  [8:0]                             rxtx_bs12_rx_cntvaluein,        
   output [8:0]                             rxtx_bs12_rx_cntvalueout,     
   input                                    rxtx_bs12_rx_en_vtc_in,            
   input                                    rxtx_bs12_rx_inc_in,               
   input                                    rxtx_bs12_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs12_tx_t_in,                 
   output                                   rxtx_bs12_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs12_tx_ce_in,
   input  [8:0]                             rxtx_bs12_tx_cntvaluein,        
   output [8:0]                             rxtx_bs12_tx_cntvalueout,      
   input                                    rxtx_bs12_tx_en_vtc_in,            
   input                                    rxtx_bs12_tx_inc_in,               
   input                                    rxtx_bs12_tx_load_in,              
   
   input  [39:0]                            rxtx_bs12_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs12_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs12_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs12_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice13 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs13_D_data_from_fabric_in,  
   input                                    rxtx_bs13_rx_datain,            
   output                                   rxtx_bs13_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs13_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs13_rx_fifo_empty_out,        
   input                                    rxtx_bs13_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs13_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs13_rx_ce_in,                
   input  [8:0]                             rxtx_bs13_rx_cntvaluein,        
   output [8:0]                             rxtx_bs13_rx_cntvalueout,     
   input                                    rxtx_bs13_rx_en_vtc_in,            
   input                                    rxtx_bs13_rx_inc_in,               
   input                                    rxtx_bs13_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs13_tx_t_in,                 
   output                                   rxtx_bs13_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs13_tx_ce_in,
   input  [8:0]                             rxtx_bs13_tx_cntvaluein,        
   output [8:0]                             rxtx_bs13_tx_cntvalueout,      
   input                                    rxtx_bs13_tx_en_vtc_in,            
   input                                    rxtx_bs13_tx_inc_in,               
   input                                    rxtx_bs13_tx_load_in,              
   
   input  [39:0]                            rxtx_bs13_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs13_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs13_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs13_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice14 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs14_D_data_from_fabric_in,  
   input                                    rxtx_bs14_rx_datain,            
   output                                   rxtx_bs14_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs14_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs14_rx_fifo_empty_out,        
   input                                    rxtx_bs14_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs14_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs14_rx_ce_in,                
   input  [8:0]                             rxtx_bs14_rx_cntvaluein,        
   output [8:0]                             rxtx_bs14_rx_cntvalueout,     
   input                                    rxtx_bs14_rx_en_vtc_in,            
   input                                    rxtx_bs14_rx_inc_in,               
   input                                    rxtx_bs14_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs14_tx_t_in,                 
   output                                   rxtx_bs14_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs14_tx_ce_in,
   input  [8:0]                             rxtx_bs14_tx_cntvaluein,        
   output [8:0]                             rxtx_bs14_tx_cntvalueout,      
   input                                    rxtx_bs14_tx_en_vtc_in,            
   input                                    rxtx_bs14_tx_inc_in,               
   input                                    rxtx_bs14_tx_load_in,              
   
   input  [39:0]                            rxtx_bs14_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs14_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs14_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs14_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice15 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs15_D_data_from_fabric_in,  
   input                                    rxtx_bs15_rx_datain,            
   output                                   rxtx_bs15_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs15_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs15_rx_fifo_empty_out,        
   input                                    rxtx_bs15_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs15_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs15_rx_ce_in,                
   input  [8:0]                             rxtx_bs15_rx_cntvaluein,        
   output [8:0]                             rxtx_bs15_rx_cntvalueout,     
   input                                    rxtx_bs15_rx_en_vtc_in,            
   input                                    rxtx_bs15_rx_inc_in,               
   input                                    rxtx_bs15_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs15_tx_t_in,                 
   output                                   rxtx_bs15_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs15_tx_ce_in,
   input  [8:0]                             rxtx_bs15_tx_cntvaluein,        
   output [8:0]                             rxtx_bs15_tx_cntvalueout,      
   input                                    rxtx_bs15_tx_en_vtc_in,            
   input                                    rxtx_bs15_tx_inc_in,               
   input                                    rxtx_bs15_tx_load_in,              
   
   input  [39:0]                            rxtx_bs15_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs15_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs15_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs15_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice16 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs16_D_data_from_fabric_in,  
   input                                    rxtx_bs16_rx_datain,            
   output                                   rxtx_bs16_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs16_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs16_rx_fifo_empty_out,        
   input                                    rxtx_bs16_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs16_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs16_rx_ce_in,                
   input  [8:0]                             rxtx_bs16_rx_cntvaluein,        
   output [8:0]                             rxtx_bs16_rx_cntvalueout,     
   input                                    rxtx_bs16_rx_en_vtc_in,            
   input                                    rxtx_bs16_rx_inc_in,               
   input                                    rxtx_bs16_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs16_tx_t_in,                 
   output                                   rxtx_bs16_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs16_tx_ce_in,
   input  [8:0]                             rxtx_bs16_tx_cntvaluein,        
   output [8:0]                             rxtx_bs16_tx_cntvalueout,      
   input                                    rxtx_bs16_tx_en_vtc_in,            
   input                                    rxtx_bs16_tx_inc_in,               
   input                                    rxtx_bs16_tx_load_in,              
   
   input  [39:0]                            rxtx_bs16_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs16_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs16_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs16_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice17 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs17_D_data_from_fabric_in,  
   input                                    rxtx_bs17_rx_datain,            
   output                                   rxtx_bs17_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs17_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs17_rx_fifo_empty_out,        
   input                                    rxtx_bs17_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs17_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs17_rx_ce_in,                
   input  [8:0]                             rxtx_bs17_rx_cntvaluein,        
   output [8:0]                             rxtx_bs17_rx_cntvalueout,     
   input                                    rxtx_bs17_rx_en_vtc_in,            
   input                                    rxtx_bs17_rx_inc_in,               
   input                                    rxtx_bs17_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs17_tx_t_in,                 
   output                                   rxtx_bs17_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs17_tx_ce_in,
   input  [8:0]                             rxtx_bs17_tx_cntvaluein,        
   output [8:0]                             rxtx_bs17_tx_cntvalueout,      
   input                                    rxtx_bs17_tx_en_vtc_in,            
   input                                    rxtx_bs17_tx_inc_in,               
   input                                    rxtx_bs17_tx_load_in,              
   
   input  [39:0]                            rxtx_bs17_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs17_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs17_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs17_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice18 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs18_D_data_from_fabric_in,  
   input                                    rxtx_bs18_rx_datain,            
   output                                   rxtx_bs18_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs18_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs18_rx_fifo_empty_out,        
   input                                    rxtx_bs18_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs18_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs18_rx_ce_in,                
   input  [8:0]                             rxtx_bs18_rx_cntvaluein,        
   output [8:0]                             rxtx_bs18_rx_cntvalueout,     
   input                                    rxtx_bs18_rx_en_vtc_in,            
   input                                    rxtx_bs18_rx_inc_in,               
   input                                    rxtx_bs18_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs18_tx_t_in,                 
   output                                   rxtx_bs18_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs18_tx_ce_in,
   input  [8:0]                             rxtx_bs18_tx_cntvaluein,        
   output [8:0]                             rxtx_bs18_tx_cntvalueout,      
   input                                    rxtx_bs18_tx_en_vtc_in,            
   input                                    rxtx_bs18_tx_inc_in,               
   input                                    rxtx_bs18_tx_load_in,              
   
   input  [39:0]                            rxtx_bs18_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs18_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs18_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs18_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice19 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs19_D_data_from_fabric_in,  
   input                                    rxtx_bs19_rx_datain,            
   output                                   rxtx_bs19_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs19_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs19_rx_fifo_empty_out,        
   input                                    rxtx_bs19_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs19_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs19_rx_ce_in,                
   input  [8:0]                             rxtx_bs19_rx_cntvaluein,        
   output [8:0]                             rxtx_bs19_rx_cntvalueout,     
   input                                    rxtx_bs19_rx_en_vtc_in,            
   input                                    rxtx_bs19_rx_inc_in,               
   input                                    rxtx_bs19_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs19_tx_t_in,                 
   output                                   rxtx_bs19_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs19_tx_ce_in,
   input  [8:0]                             rxtx_bs19_tx_cntvaluein,        
   output [8:0]                             rxtx_bs19_tx_cntvalueout,      
   input                                    rxtx_bs19_tx_en_vtc_in,            
   input                                    rxtx_bs19_tx_inc_in,               
   input                                    rxtx_bs19_tx_load_in,              
   
   input  [39:0]                            rxtx_bs19_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs19_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs19_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs19_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice20 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs20_D_data_from_fabric_in,  
   input                                    rxtx_bs20_rx_datain,            
   output                                   rxtx_bs20_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs20_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs20_rx_fifo_empty_out,        
   input                                    rxtx_bs20_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs20_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs20_rx_ce_in,                
   input  [8:0]                             rxtx_bs20_rx_cntvaluein,        
   output [8:0]                             rxtx_bs20_rx_cntvalueout,     
   input                                    rxtx_bs20_rx_en_vtc_in,            
   input                                    rxtx_bs20_rx_inc_in,               
   input                                    rxtx_bs20_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs20_tx_t_in,                 
   output                                   rxtx_bs20_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs20_tx_ce_in,
   input  [8:0]                             rxtx_bs20_tx_cntvaluein,        
   output [8:0]                             rxtx_bs20_tx_cntvalueout,      
   input                                    rxtx_bs20_tx_en_vtc_in,            
   input                                    rxtx_bs20_tx_inc_in,               
   input                                    rxtx_bs20_tx_load_in,              
   
   input  [39:0]                            rxtx_bs20_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs20_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs20_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs20_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice21 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs21_D_data_from_fabric_in,  
   input                                    rxtx_bs21_rx_datain,            
   output                                   rxtx_bs21_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs21_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs21_rx_fifo_empty_out,        
   input                                    rxtx_bs21_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs21_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs21_rx_ce_in,                
   input  [8:0]                             rxtx_bs21_rx_cntvaluein,        
   output [8:0]                             rxtx_bs21_rx_cntvalueout,     
   input                                    rxtx_bs21_rx_en_vtc_in,            
   input                                    rxtx_bs21_rx_inc_in,               
   input                                    rxtx_bs21_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs21_tx_t_in,                 
   output                                   rxtx_bs21_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs21_tx_ce_in,
   input  [8:0]                             rxtx_bs21_tx_cntvaluein,        
   output [8:0]                             rxtx_bs21_tx_cntvalueout,      
   input                                    rxtx_bs21_tx_en_vtc_in,            
   input                                    rxtx_bs21_tx_inc_in,               
   input                                    rxtx_bs21_tx_load_in,              
   
   input  [39:0]                            rxtx_bs21_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs21_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs21_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs21_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice22 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs22_D_data_from_fabric_in,  
   input                                    rxtx_bs22_rx_datain,            
   output                                   rxtx_bs22_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs22_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs22_rx_fifo_empty_out,        
   input                                    rxtx_bs22_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs22_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs22_rx_ce_in,                
   input  [8:0]                             rxtx_bs22_rx_cntvaluein,        
   output [8:0]                             rxtx_bs22_rx_cntvalueout,     
   input                                    rxtx_bs22_rx_en_vtc_in,            
   input                                    rxtx_bs22_rx_inc_in,               
   input                                    rxtx_bs22_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs22_tx_t_in,                 
   output                                   rxtx_bs22_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs22_tx_ce_in,
   input  [8:0]                             rxtx_bs22_tx_cntvaluein,        
   output [8:0]                             rxtx_bs22_tx_cntvalueout,      
   input                                    rxtx_bs22_tx_en_vtc_in,            
   input                                    rxtx_bs22_tx_inc_in,               
   input                                    rxtx_bs22_tx_load_in,              
   
   input  [39:0]                            rxtx_bs22_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs22_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs22_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs22_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice23 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs23_D_data_from_fabric_in,  
   input                                    rxtx_bs23_rx_datain,            
   output                                   rxtx_bs23_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs23_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs23_rx_fifo_empty_out,        
   input                                    rxtx_bs23_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs23_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs23_rx_ce_in,                
   input  [8:0]                             rxtx_bs23_rx_cntvaluein,        
   output [8:0]                             rxtx_bs23_rx_cntvalueout,     
   input                                    rxtx_bs23_rx_en_vtc_in,            
   input                                    rxtx_bs23_rx_inc_in,               
   input                                    rxtx_bs23_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs23_tx_t_in,                 
   output                                   rxtx_bs23_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs23_tx_ce_in,
   input  [8:0]                             rxtx_bs23_tx_cntvaluein,        
   output [8:0]                             rxtx_bs23_tx_cntvalueout,      
   input                                    rxtx_bs23_tx_en_vtc_in,            
   input                                    rxtx_bs23_tx_inc_in,               
   input                                    rxtx_bs23_tx_load_in,              
   
   input  [39:0]                            rxtx_bs23_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs23_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs23_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs23_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice24 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs24_D_data_from_fabric_in,  
   input                                    rxtx_bs24_rx_datain,            
   output                                   rxtx_bs24_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs24_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs24_rx_fifo_empty_out,        
   input                                    rxtx_bs24_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs24_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs24_rx_ce_in,                
   input  [8:0]                             rxtx_bs24_rx_cntvaluein,        
   output [8:0]                             rxtx_bs24_rx_cntvalueout,     
   input                                    rxtx_bs24_rx_en_vtc_in,            
   input                                    rxtx_bs24_rx_inc_in,               
   input                                    rxtx_bs24_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs24_tx_t_in,                 
   output                                   rxtx_bs24_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs24_tx_ce_in,
   input  [8:0]                             rxtx_bs24_tx_cntvaluein,        
   output [8:0]                             rxtx_bs24_tx_cntvalueout,      
   input                                    rxtx_bs24_tx_en_vtc_in,            
   input                                    rxtx_bs24_tx_inc_in,               
   input                                    rxtx_bs24_tx_load_in,              
   
   input  [39:0]                            rxtx_bs24_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs24_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs24_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs24_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice25 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs25_D_data_from_fabric_in,  
   input                                    rxtx_bs25_rx_datain,            
   output                                   rxtx_bs25_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs25_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs25_rx_fifo_empty_out,        
   input                                    rxtx_bs25_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs25_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs25_rx_ce_in,                
   input  [8:0]                             rxtx_bs25_rx_cntvaluein,        
   output [8:0]                             rxtx_bs25_rx_cntvalueout,     
   input                                    rxtx_bs25_rx_en_vtc_in,            
   input                                    rxtx_bs25_rx_inc_in,               
   input                                    rxtx_bs25_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs25_tx_t_in,                 
   output                                   rxtx_bs25_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs25_tx_ce_in,
   input  [8:0]                             rxtx_bs25_tx_cntvaluein,        
   output [8:0]                             rxtx_bs25_tx_cntvalueout,      
   input                                    rxtx_bs25_tx_en_vtc_in,            
   input                                    rxtx_bs25_tx_inc_in,               
   input                                    rxtx_bs25_tx_load_in,              
   
   input  [39:0]                            rxtx_bs25_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs25_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs25_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs25_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice26 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs26_D_data_from_fabric_in,  
   input                                    rxtx_bs26_rx_datain,            
   output                                   rxtx_bs26_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs26_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs26_rx_fifo_empty_out,        
   input                                    rxtx_bs26_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs26_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs26_rx_ce_in,                
   input  [8:0]                             rxtx_bs26_rx_cntvaluein,        
   output [8:0]                             rxtx_bs26_rx_cntvalueout,     
   input                                    rxtx_bs26_rx_en_vtc_in,            
   input                                    rxtx_bs26_rx_inc_in,               
   input                                    rxtx_bs26_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs26_tx_t_in,                 
   output                                   rxtx_bs26_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs26_tx_ce_in,
   input  [8:0]                             rxtx_bs26_tx_cntvaluein,        
   output [8:0]                             rxtx_bs26_tx_cntvalueout,      
   input                                    rxtx_bs26_tx_en_vtc_in,            
   input                                    rxtx_bs26_tx_inc_in,               
   input                                    rxtx_bs26_tx_load_in,              
   
   input  [39:0]                            rxtx_bs26_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs26_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs26_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs26_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice27 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs27_D_data_from_fabric_in,  
   input                                    rxtx_bs27_rx_datain,            
   output                                   rxtx_bs27_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs27_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs27_rx_fifo_empty_out,        
   input                                    rxtx_bs27_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs27_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs27_rx_ce_in,                
   input  [8:0]                             rxtx_bs27_rx_cntvaluein,        
   output [8:0]                             rxtx_bs27_rx_cntvalueout,     
   input                                    rxtx_bs27_rx_en_vtc_in,            
   input                                    rxtx_bs27_rx_inc_in,               
   input                                    rxtx_bs27_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs27_tx_t_in,                 
   output                                   rxtx_bs27_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs27_tx_ce_in,
   input  [8:0]                             rxtx_bs27_tx_cntvaluein,        
   output [8:0]                             rxtx_bs27_tx_cntvalueout,      
   input                                    rxtx_bs27_tx_en_vtc_in,            
   input                                    rxtx_bs27_tx_inc_in,               
   input                                    rxtx_bs27_tx_load_in,              
   
   input  [39:0]                            rxtx_bs27_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs27_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs27_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs27_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice28 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs28_D_data_from_fabric_in,  
   input                                    rxtx_bs28_rx_datain,            
   output                                   rxtx_bs28_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs28_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs28_rx_fifo_empty_out,        
   input                                    rxtx_bs28_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs28_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs28_rx_ce_in,                
   input  [8:0]                             rxtx_bs28_rx_cntvaluein,        
   output [8:0]                             rxtx_bs28_rx_cntvalueout,     
   input                                    rxtx_bs28_rx_en_vtc_in,            
   input                                    rxtx_bs28_rx_inc_in,               
   input                                    rxtx_bs28_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs28_tx_t_in,                 
   output                                   rxtx_bs28_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs28_tx_ce_in,
   input  [8:0]                             rxtx_bs28_tx_cntvaluein,        
   output [8:0]                             rxtx_bs28_tx_cntvalueout,      
   input                                    rxtx_bs28_tx_en_vtc_in,            
   input                                    rxtx_bs28_tx_inc_in,               
   input                                    rxtx_bs28_tx_load_in,              
   
   input  [39:0]                            rxtx_bs28_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs28_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs28_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs28_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice29 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs29_D_data_from_fabric_in,  
   input                                    rxtx_bs29_rx_datain,            
   output                                   rxtx_bs29_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs29_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs29_rx_fifo_empty_out,        
   input                                    rxtx_bs29_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs29_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs29_rx_ce_in,                
   input  [8:0]                             rxtx_bs29_rx_cntvaluein,        
   output [8:0]                             rxtx_bs29_rx_cntvalueout,     
   input                                    rxtx_bs29_rx_en_vtc_in,            
   input                                    rxtx_bs29_rx_inc_in,               
   input                                    rxtx_bs29_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs29_tx_t_in,                 
   output                                   rxtx_bs29_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs29_tx_ce_in,
   input  [8:0]                             rxtx_bs29_tx_cntvaluein,        
   output [8:0]                             rxtx_bs29_tx_cntvalueout,      
   input                                    rxtx_bs29_tx_en_vtc_in,            
   input                                    rxtx_bs29_tx_inc_in,               
   input                                    rxtx_bs29_tx_load_in,              
   
   input  [39:0]                            rxtx_bs29_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs29_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs29_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs29_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice30 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs30_D_data_from_fabric_in,  
   input                                    rxtx_bs30_rx_datain,            
   output                                   rxtx_bs30_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs30_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs30_rx_fifo_empty_out,        
   input                                    rxtx_bs30_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs30_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs30_rx_ce_in,                
   input  [8:0]                             rxtx_bs30_rx_cntvaluein,        
   output [8:0]                             rxtx_bs30_rx_cntvalueout,     
   input                                    rxtx_bs30_rx_en_vtc_in,            
   input                                    rxtx_bs30_rx_inc_in,               
   input                                    rxtx_bs30_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs30_tx_t_in,                 
   output                                   rxtx_bs30_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs30_tx_ce_in,
   input  [8:0]                             rxtx_bs30_tx_cntvaluein,        
   output [8:0]                             rxtx_bs30_tx_cntvalueout,      
   input                                    rxtx_bs30_tx_en_vtc_in,            
   input                                    rxtx_bs30_tx_inc_in,               
   input                                    rxtx_bs30_tx_load_in,              
   
   input  [39:0]                            rxtx_bs30_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs30_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs30_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs30_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice31 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs31_D_data_from_fabric_in,  
   input                                    rxtx_bs31_rx_datain,            
   output                                   rxtx_bs31_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs31_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs31_rx_fifo_empty_out,        
   input                                    rxtx_bs31_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs31_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs31_rx_ce_in,                
   input  [8:0]                             rxtx_bs31_rx_cntvaluein,        
   output [8:0]                             rxtx_bs31_rx_cntvalueout,     
   input                                    rxtx_bs31_rx_en_vtc_in,            
   input                                    rxtx_bs31_rx_inc_in,               
   input                                    rxtx_bs31_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs31_tx_t_in,                 
   output                                   rxtx_bs31_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs31_tx_ce_in,
   input  [8:0]                             rxtx_bs31_tx_cntvaluein,        
   output [8:0]                             rxtx_bs31_tx_cntvalueout,      
   input                                    rxtx_bs31_tx_en_vtc_in,            
   input                                    rxtx_bs31_tx_inc_in,               
   input                                    rxtx_bs31_tx_load_in,              
   
   input  [39:0]                            rxtx_bs31_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs31_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs31_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs31_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice32 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs32_D_data_from_fabric_in,  
   input                                    rxtx_bs32_rx_datain,            
   output                                   rxtx_bs32_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs32_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs32_rx_fifo_empty_out,        
   input                                    rxtx_bs32_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs32_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs32_rx_ce_in,                
   input  [8:0]                             rxtx_bs32_rx_cntvaluein,        
   output [8:0]                             rxtx_bs32_rx_cntvalueout,     
   input                                    rxtx_bs32_rx_en_vtc_in,            
   input                                    rxtx_bs32_rx_inc_in,               
   input                                    rxtx_bs32_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs32_tx_t_in,                 
   output                                   rxtx_bs32_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs32_tx_ce_in,
   input  [8:0]                             rxtx_bs32_tx_cntvaluein,        
   output [8:0]                             rxtx_bs32_tx_cntvalueout,      
   input                                    rxtx_bs32_tx_en_vtc_in,            
   input                                    rxtx_bs32_tx_inc_in,               
   input                                    rxtx_bs32_tx_load_in,              
   
   input  [39:0]                            rxtx_bs32_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs32_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs32_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs32_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice33 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs33_D_data_from_fabric_in,  
   input                                    rxtx_bs33_rx_datain,            
   output                                   rxtx_bs33_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs33_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs33_rx_fifo_empty_out,        
   input                                    rxtx_bs33_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs33_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs33_rx_ce_in,                
   input  [8:0]                             rxtx_bs33_rx_cntvaluein,        
   output [8:0]                             rxtx_bs33_rx_cntvalueout,     
   input                                    rxtx_bs33_rx_en_vtc_in,            
   input                                    rxtx_bs33_rx_inc_in,               
   input                                    rxtx_bs33_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs33_tx_t_in,                 
   output                                   rxtx_bs33_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs33_tx_ce_in,
   input  [8:0]                             rxtx_bs33_tx_cntvaluein,        
   output [8:0]                             rxtx_bs33_tx_cntvalueout,      
   input                                    rxtx_bs33_tx_en_vtc_in,            
   input                                    rxtx_bs33_tx_inc_in,               
   input                                    rxtx_bs33_tx_load_in,              
   
   input  [39:0]                            rxtx_bs33_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs33_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs33_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs33_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice34 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs34_D_data_from_fabric_in,  
   input                                    rxtx_bs34_rx_datain,            
   output                                   rxtx_bs34_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs34_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs34_rx_fifo_empty_out,        
   input                                    rxtx_bs34_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs34_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs34_rx_ce_in,                
   input  [8:0]                             rxtx_bs34_rx_cntvaluein,        
   output [8:0]                             rxtx_bs34_rx_cntvalueout,     
   input                                    rxtx_bs34_rx_en_vtc_in,            
   input                                    rxtx_bs34_rx_inc_in,               
   input                                    rxtx_bs34_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs34_tx_t_in,                 
   output                                   rxtx_bs34_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs34_tx_ce_in,
   input  [8:0]                             rxtx_bs34_tx_cntvaluein,        
   output [8:0]                             rxtx_bs34_tx_cntvalueout,      
   input                                    rxtx_bs34_tx_en_vtc_in,            
   input                                    rxtx_bs34_tx_inc_in,               
   input                                    rxtx_bs34_tx_load_in,              
   
   input  [39:0]                            rxtx_bs34_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs34_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs34_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs34_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice35 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs35_D_data_from_fabric_in,  
   input                                    rxtx_bs35_rx_datain,            
   output                                   rxtx_bs35_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs35_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs35_rx_fifo_empty_out,        
   input                                    rxtx_bs35_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs35_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs35_rx_ce_in,                
   input  [8:0]                             rxtx_bs35_rx_cntvaluein,        
   output [8:0]                             rxtx_bs35_rx_cntvalueout,     
   input                                    rxtx_bs35_rx_en_vtc_in,            
   input                                    rxtx_bs35_rx_inc_in,               
   input                                    rxtx_bs35_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs35_tx_t_in,                 
   output                                   rxtx_bs35_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs35_tx_ce_in,
   input  [8:0]                             rxtx_bs35_tx_cntvaluein,        
   output [8:0]                             rxtx_bs35_tx_cntvalueout,      
   input                                    rxtx_bs35_tx_en_vtc_in,            
   input                                    rxtx_bs35_tx_inc_in,               
   input                                    rxtx_bs35_tx_load_in,              
   
   input  [39:0]                            rxtx_bs35_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs35_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs35_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs35_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice36 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs36_D_data_from_fabric_in,  
   input                                    rxtx_bs36_rx_datain,            
   output                                   rxtx_bs36_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs36_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs36_rx_fifo_empty_out,        
   input                                    rxtx_bs36_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs36_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs36_rx_ce_in,                
   input  [8:0]                             rxtx_bs36_rx_cntvaluein,        
   output [8:0]                             rxtx_bs36_rx_cntvalueout,     
   input                                    rxtx_bs36_rx_en_vtc_in,            
   input                                    rxtx_bs36_rx_inc_in,               
   input                                    rxtx_bs36_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs36_tx_t_in,                 
   output                                   rxtx_bs36_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs36_tx_ce_in,
   input  [8:0]                             rxtx_bs36_tx_cntvaluein,        
   output [8:0]                             rxtx_bs36_tx_cntvalueout,      
   input                                    rxtx_bs36_tx_en_vtc_in,            
   input                                    rxtx_bs36_tx_inc_in,               
   input                                    rxtx_bs36_tx_load_in,              
   
   input  [39:0]                            rxtx_bs36_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs36_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs36_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs36_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice37 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs37_D_data_from_fabric_in,  
   input                                    rxtx_bs37_rx_datain,            
   output                                   rxtx_bs37_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs37_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs37_rx_fifo_empty_out,        
   input                                    rxtx_bs37_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs37_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs37_rx_ce_in,                
   input  [8:0]                             rxtx_bs37_rx_cntvaluein,        
   output [8:0]                             rxtx_bs37_rx_cntvalueout,     
   input                                    rxtx_bs37_rx_en_vtc_in,            
   input                                    rxtx_bs37_rx_inc_in,               
   input                                    rxtx_bs37_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs37_tx_t_in,                 
   output                                   rxtx_bs37_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs37_tx_ce_in,
   input  [8:0]                             rxtx_bs37_tx_cntvaluein,        
   output [8:0]                             rxtx_bs37_tx_cntvalueout,      
   input                                    rxtx_bs37_tx_en_vtc_in,            
   input                                    rxtx_bs37_tx_inc_in,               
   input                                    rxtx_bs37_tx_load_in,              
   
   input  [39:0]                            rxtx_bs37_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs37_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs37_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs37_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice38 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs38_D_data_from_fabric_in,  
   input                                    rxtx_bs38_rx_datain,            
   output                                   rxtx_bs38_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs38_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs38_rx_fifo_empty_out,        
   input                                    rxtx_bs38_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs38_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs38_rx_ce_in,                
   input  [8:0]                             rxtx_bs38_rx_cntvaluein,        
   output [8:0]                             rxtx_bs38_rx_cntvalueout,     
   input                                    rxtx_bs38_rx_en_vtc_in,            
   input                                    rxtx_bs38_rx_inc_in,               
   input                                    rxtx_bs38_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs38_tx_t_in,                 
   output                                   rxtx_bs38_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs38_tx_ce_in,
   input  [8:0]                             rxtx_bs38_tx_cntvaluein,        
   output [8:0]                             rxtx_bs38_tx_cntvalueout,      
   input                                    rxtx_bs38_tx_en_vtc_in,            
   input                                    rxtx_bs38_tx_inc_in,               
   input                                    rxtx_bs38_tx_load_in,              
   
   input  [39:0]                            rxtx_bs38_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs38_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs38_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs38_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice39 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs39_D_data_from_fabric_in,  
   input                                    rxtx_bs39_rx_datain,            
   output                                   rxtx_bs39_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs39_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs39_rx_fifo_empty_out,        
   input                                    rxtx_bs39_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs39_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs39_rx_ce_in,                
   input  [8:0]                             rxtx_bs39_rx_cntvaluein,        
   output [8:0]                             rxtx_bs39_rx_cntvalueout,     
   input                                    rxtx_bs39_rx_en_vtc_in,            
   input                                    rxtx_bs39_rx_inc_in,               
   input                                    rxtx_bs39_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs39_tx_t_in,                 
   output                                   rxtx_bs39_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs39_tx_ce_in,
   input  [8:0]                             rxtx_bs39_tx_cntvaluein,        
   output [8:0]                             rxtx_bs39_tx_cntvalueout,      
   input                                    rxtx_bs39_tx_en_vtc_in,            
   input                                    rxtx_bs39_tx_inc_in,               
   input                                    rxtx_bs39_tx_load_in,              
   
   input  [39:0]                            rxtx_bs39_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs39_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs39_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs39_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice40 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs40_D_data_from_fabric_in,  
   input                                    rxtx_bs40_rx_datain,            
   output                                   rxtx_bs40_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs40_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs40_rx_fifo_empty_out,        
   input                                    rxtx_bs40_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs40_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs40_rx_ce_in,                
   input  [8:0]                             rxtx_bs40_rx_cntvaluein,        
   output [8:0]                             rxtx_bs40_rx_cntvalueout,     
   input                                    rxtx_bs40_rx_en_vtc_in,            
   input                                    rxtx_bs40_rx_inc_in,               
   input                                    rxtx_bs40_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs40_tx_t_in,                 
   output                                   rxtx_bs40_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs40_tx_ce_in,
   input  [8:0]                             rxtx_bs40_tx_cntvaluein,        
   output [8:0]                             rxtx_bs40_tx_cntvalueout,      
   input                                    rxtx_bs40_tx_en_vtc_in,            
   input                                    rxtx_bs40_tx_inc_in,               
   input                                    rxtx_bs40_tx_load_in,              
   
   input  [39:0]                            rxtx_bs40_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs40_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs40_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs40_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice41 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs41_D_data_from_fabric_in,  
   input                                    rxtx_bs41_rx_datain,            
   output                                   rxtx_bs41_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs41_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs41_rx_fifo_empty_out,        
   input                                    rxtx_bs41_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs41_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs41_rx_ce_in,                
   input  [8:0]                             rxtx_bs41_rx_cntvaluein,        
   output [8:0]                             rxtx_bs41_rx_cntvalueout,     
   input                                    rxtx_bs41_rx_en_vtc_in,            
   input                                    rxtx_bs41_rx_inc_in,               
   input                                    rxtx_bs41_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs41_tx_t_in,                 
   output                                   rxtx_bs41_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs41_tx_ce_in,
   input  [8:0]                             rxtx_bs41_tx_cntvaluein,        
   output [8:0]                             rxtx_bs41_tx_cntvalueout,      
   input                                    rxtx_bs41_tx_en_vtc_in,            
   input                                    rxtx_bs41_tx_inc_in,               
   input                                    rxtx_bs41_tx_load_in,              
   
   input  [39:0]                            rxtx_bs41_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs41_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs41_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs41_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice42 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs42_D_data_from_fabric_in,  
   input                                    rxtx_bs42_rx_datain,            
   output                                   rxtx_bs42_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs42_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs42_rx_fifo_empty_out,        
   input                                    rxtx_bs42_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs42_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs42_rx_ce_in,                
   input  [8:0]                             rxtx_bs42_rx_cntvaluein,        
   output [8:0]                             rxtx_bs42_rx_cntvalueout,     
   input                                    rxtx_bs42_rx_en_vtc_in,            
   input                                    rxtx_bs42_rx_inc_in,               
   input                                    rxtx_bs42_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs42_tx_t_in,                 
   output                                   rxtx_bs42_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs42_tx_ce_in,
   input  [8:0]                             rxtx_bs42_tx_cntvaluein,        
   output [8:0]                             rxtx_bs42_tx_cntvalueout,      
   input                                    rxtx_bs42_tx_en_vtc_in,            
   input                                    rxtx_bs42_tx_inc_in,               
   input                                    rxtx_bs42_tx_load_in,              
   
   input  [39:0]                            rxtx_bs42_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs42_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs42_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs42_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice43 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs43_D_data_from_fabric_in,  
   input                                    rxtx_bs43_rx_datain,            
   output                                   rxtx_bs43_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs43_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs43_rx_fifo_empty_out,        
   input                                    rxtx_bs43_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs43_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs43_rx_ce_in,                
   input  [8:0]                             rxtx_bs43_rx_cntvaluein,        
   output [8:0]                             rxtx_bs43_rx_cntvalueout,     
   input                                    rxtx_bs43_rx_en_vtc_in,            
   input                                    rxtx_bs43_rx_inc_in,               
   input                                    rxtx_bs43_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs43_tx_t_in,                 
   output                                   rxtx_bs43_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs43_tx_ce_in,
   input  [8:0]                             rxtx_bs43_tx_cntvaluein,        
   output [8:0]                             rxtx_bs43_tx_cntvalueout,      
   input                                    rxtx_bs43_tx_en_vtc_in,            
   input                                    rxtx_bs43_tx_inc_in,               
   input                                    rxtx_bs43_tx_load_in,              
   
   input  [39:0]                            rxtx_bs43_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs43_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs43_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs43_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice44 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs44_D_data_from_fabric_in,  
   input                                    rxtx_bs44_rx_datain,            
   output                                   rxtx_bs44_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs44_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs44_rx_fifo_empty_out,        
   input                                    rxtx_bs44_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs44_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs44_rx_ce_in,                
   input  [8:0]                             rxtx_bs44_rx_cntvaluein,        
   output [8:0]                             rxtx_bs44_rx_cntvalueout,     
   input                                    rxtx_bs44_rx_en_vtc_in,            
   input                                    rxtx_bs44_rx_inc_in,               
   input                                    rxtx_bs44_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs44_tx_t_in,                 
   output                                   rxtx_bs44_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs44_tx_ce_in,
   input  [8:0]                             rxtx_bs44_tx_cntvaluein,        
   output [8:0]                             rxtx_bs44_tx_cntvalueout,      
   input                                    rxtx_bs44_tx_en_vtc_in,            
   input                                    rxtx_bs44_tx_inc_in,               
   input                                    rxtx_bs44_tx_load_in,              
   
   input  [39:0]                            rxtx_bs44_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs44_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs44_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs44_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice45 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs45_D_data_from_fabric_in,  
   input                                    rxtx_bs45_rx_datain,            
   output                                   rxtx_bs45_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs45_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs45_rx_fifo_empty_out,        
   input                                    rxtx_bs45_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs45_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs45_rx_ce_in,                
   input  [8:0]                             rxtx_bs45_rx_cntvaluein,        
   output [8:0]                             rxtx_bs45_rx_cntvalueout,     
   input                                    rxtx_bs45_rx_en_vtc_in,            
   input                                    rxtx_bs45_rx_inc_in,               
   input                                    rxtx_bs45_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs45_tx_t_in,                 
   output                                   rxtx_bs45_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs45_tx_ce_in,
   input  [8:0]                             rxtx_bs45_tx_cntvaluein,        
   output [8:0]                             rxtx_bs45_tx_cntvalueout,      
   input                                    rxtx_bs45_tx_en_vtc_in,            
   input                                    rxtx_bs45_tx_inc_in,               
   input                                    rxtx_bs45_tx_load_in,              
   
   input  [39:0]                            rxtx_bs45_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs45_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs45_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs45_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice46 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs46_D_data_from_fabric_in,  
   input                                    rxtx_bs46_rx_datain,            
   output                                   rxtx_bs46_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs46_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs46_rx_fifo_empty_out,        
   input                                    rxtx_bs46_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs46_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs46_rx_ce_in,                
   input  [8:0]                             rxtx_bs46_rx_cntvaluein,        
   output [8:0]                             rxtx_bs46_rx_cntvalueout,     
   input                                    rxtx_bs46_rx_en_vtc_in,            
   input                                    rxtx_bs46_rx_inc_in,               
   input                                    rxtx_bs46_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs46_tx_t_in,                 
   output                                   rxtx_bs46_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs46_tx_ce_in,
   input  [8:0]                             rxtx_bs46_tx_cntvaluein,        
   output [8:0]                             rxtx_bs46_tx_cntvalueout,      
   input                                    rxtx_bs46_tx_en_vtc_in,            
   input                                    rxtx_bs46_tx_inc_in,               
   input                                    rxtx_bs46_tx_load_in,              
   
   input  [39:0]                            rxtx_bs46_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs46_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs46_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs46_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice47 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs47_D_data_from_fabric_in,  
   input                                    rxtx_bs47_rx_datain,            
   output                                   rxtx_bs47_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs47_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs47_rx_fifo_empty_out,        
   input                                    rxtx_bs47_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs47_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs47_rx_ce_in,                
   input  [8:0]                             rxtx_bs47_rx_cntvaluein,        
   output [8:0]                             rxtx_bs47_rx_cntvalueout,     
   input                                    rxtx_bs47_rx_en_vtc_in,            
   input                                    rxtx_bs47_rx_inc_in,               
   input                                    rxtx_bs47_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs47_tx_t_in,                 
   output                                   rxtx_bs47_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs47_tx_ce_in,
   input  [8:0]                             rxtx_bs47_tx_cntvaluein,        
   output [8:0]                             rxtx_bs47_tx_cntvalueout,      
   input                                    rxtx_bs47_tx_en_vtc_in,            
   input                                    rxtx_bs47_tx_inc_in,               
   input                                    rxtx_bs47_tx_load_in,              
   
   input  [39:0]                            rxtx_bs47_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs47_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs47_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs47_tx_bit_ctrl_out,      
   
   
   // -----------------------------------------------------------------------
   // Bitslice48 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs48_D_data_from_fabric_in,  
   input                                    rxtx_bs48_rx_datain,            
   output                                   rxtx_bs48_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs48_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs48_rx_fifo_empty_out,        
   input                                    rxtx_bs48_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs48_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs48_rx_ce_in,                
   input  [8:0]                             rxtx_bs48_rx_cntvaluein,        
   output [8:0]                             rxtx_bs48_rx_cntvalueout,     
   input                                    rxtx_bs48_rx_en_vtc_in,            
   input                                    rxtx_bs48_rx_inc_in,               
   input                                    rxtx_bs48_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs48_tx_t_in,                 
   output                                   rxtx_bs48_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs48_tx_ce_in,
   input  [8:0]                             rxtx_bs48_tx_cntvaluein,        
   output [8:0]                             rxtx_bs48_tx_cntvalueout,      
   input                                    rxtx_bs48_tx_en_vtc_in,            
   input                                    rxtx_bs48_tx_inc_in,               
   input                                    rxtx_bs48_tx_load_in,              
   
   input  [39:0]                            rxtx_bs48_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs48_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs48_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs48_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice49 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs49_D_data_from_fabric_in,  
   input                                    rxtx_bs49_rx_datain,            
   output                                   rxtx_bs49_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs49_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs49_rx_fifo_empty_out,        
   input                                    rxtx_bs49_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs49_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs49_rx_ce_in,                
   input  [8:0]                             rxtx_bs49_rx_cntvaluein,        
   output [8:0]                             rxtx_bs49_rx_cntvalueout,     
   input                                    rxtx_bs49_rx_en_vtc_in,            
   input                                    rxtx_bs49_rx_inc_in,               
   input                                    rxtx_bs49_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs49_tx_t_in,                 
   output                                   rxtx_bs49_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs49_tx_ce_in,
   input  [8:0]                             rxtx_bs49_tx_cntvaluein,        
   output [8:0]                             rxtx_bs49_tx_cntvalueout,      
   input                                    rxtx_bs49_tx_en_vtc_in,            
   input                                    rxtx_bs49_tx_inc_in,               
   input                                    rxtx_bs49_tx_load_in,              
   
   input  [39:0]                            rxtx_bs49_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs49_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs49_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs49_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice50 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs50_D_data_from_fabric_in,  
   input                                    rxtx_bs50_rx_datain,            
   output                                   rxtx_bs50_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs50_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs50_rx_fifo_empty_out,        
   input                                    rxtx_bs50_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs50_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs50_rx_ce_in,                
   input  [8:0]                             rxtx_bs50_rx_cntvaluein,        
   output [8:0]                             rxtx_bs50_rx_cntvalueout,     
   input                                    rxtx_bs50_rx_en_vtc_in,            
   input                                    rxtx_bs50_rx_inc_in,               
   input                                    rxtx_bs50_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs50_tx_t_in,                 
   output                                   rxtx_bs50_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs50_tx_ce_in,
   input  [8:0]                             rxtx_bs50_tx_cntvaluein,        
   output [8:0]                             rxtx_bs50_tx_cntvalueout,      
   input                                    rxtx_bs50_tx_en_vtc_in,            
   input                                    rxtx_bs50_tx_inc_in,               
   input                                    rxtx_bs50_tx_load_in,              
   
   input  [39:0]                            rxtx_bs50_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs50_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs50_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs50_tx_bit_ctrl_out,           
   
   // -----------------------------------------------------------------------
   // Bitslice51 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
   input  [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs51_D_data_from_fabric_in,  
   input                                    rxtx_bs51_rx_datain,            
   output                                   rxtx_bs51_O_tx_data_out,           
   output [C_SERIALIZATION_FACTOR -1 : 0]   rxtx_bs51_Q_data_to_fabric_out,    
   
   // Fifo Signals
   output                                   rxtx_bs51_rx_fifo_empty_out,        
   input                                    rxtx_bs51_rx_fifo_rd_clk_in,        
   input                                    rxtx_bs51_rx_fifo_rd_en_in,        
   
   // RX Delay Signals
   input                                    rxtx_bs51_rx_ce_in,                
   input  [8:0]                             rxtx_bs51_rx_cntvaluein,        
   output [8:0]                             rxtx_bs51_rx_cntvalueout,     
   input                                    rxtx_bs51_rx_en_vtc_in,            
   input                                    rxtx_bs51_rx_inc_in,               
   input                                    rxtx_bs51_rx_load_in,              
   
   // Tristate signals
   input                                    rxtx_bs51_tx_t_in,                 
   output                                   rxtx_bs51_tx_t_out,                
   
   // TX Delay Signals
   input                                    rxtx_bs51_tx_ce_in,
   input  [8:0]                             rxtx_bs51_tx_cntvaluein,        
   output [8:0]                             rxtx_bs51_tx_cntvalueout,      
   input                                    rxtx_bs51_tx_en_vtc_in,            
   input                                    rxtx_bs51_tx_inc_in,               
   input                                    rxtx_bs51_tx_load_in,              
   
   input  [39:0]                            rxtx_bs51_rx_bit_ctrl_in,    
   output [39:0]                            rxtx_bs51_rx_bit_ctrl_out,  
   input  [39:0]                            rxtx_bs51_tx_bit_ctrl_in,       
   output [39:0]                            rxtx_bs51_tx_bit_ctrl_out,       
   
   // Fifo write clock signals
   output                                   rxtx_bs0_rx_fifo_wrclk_out,  
   output                                   rxtx_bs6_rx_fifo_wrclk_out,  
   output                                   rxtx_bs13_rx_fifo_wrclk_out, 
   output                                   rxtx_bs19_rx_fifo_wrclk_out, 
   output                                   rxtx_bs26_rx_fifo_wrclk_out, 
   output                                   rxtx_bs32_rx_fifo_wrclk_out, 
   output                                   rxtx_bs39_rx_fifo_wrclk_out, 
   output                                   rxtx_bs45_rx_fifo_wrclk_out, 
   
   
   // Bitslip Error
   output                                           rxtx_bs0_bitslip_error_out,
   output                                           rxtx_bs1_bitslip_error_out, 
   output                                           rxtx_bs2_bitslip_error_out, 
   output                                           rxtx_bs3_bitslip_error_out, 
   output                                           rxtx_bs4_bitslip_error_out, 
   output                                           rxtx_bs5_bitslip_error_out,
   output                                           rxtx_bs6_bitslip_error_out,
   output                                           rxtx_bs7_bitslip_error_out, 
   output                                           rxtx_bs8_bitslip_error_out, 
   output                                           rxtx_bs9_bitslip_error_out, 
   output                                           rxtx_bs10_bitslip_error_out,
   output                                           rxtx_bs11_bitslip_error_out, 
   output                                           rxtx_bs12_bitslip_error_out, 
   output                                           rxtx_bs13_bitslip_error_out, 
   output                                           rxtx_bs14_bitslip_error_out, 
   output                                           rxtx_bs15_bitslip_error_out,
   output                                           rxtx_bs16_bitslip_error_out,
   output                                           rxtx_bs17_bitslip_error_out, 
   output                                           rxtx_bs18_bitslip_error_out, 
   output                                           rxtx_bs19_bitslip_error_out, 
   output                                           rxtx_bs20_bitslip_error_out, 
   output                                           rxtx_bs21_bitslip_error_out, 
   output                                           rxtx_bs22_bitslip_error_out, 
   output                                           rxtx_bs23_bitslip_error_out, 
   output                                           rxtx_bs24_bitslip_error_out, 
   output                                           rxtx_bs25_bitslip_error_out,
   output                                           rxtx_bs26_bitslip_error_out,
   output                                           rxtx_bs27_bitslip_error_out, 
   output                                           rxtx_bs28_bitslip_error_out, 
   output                                           rxtx_bs29_bitslip_error_out, 
   output                                           rxtx_bs30_bitslip_error_out, 
   output                                           rxtx_bs31_bitslip_error_out, 
   output                                           rxtx_bs32_bitslip_error_out, 
   output                                           rxtx_bs33_bitslip_error_out, 
   output                                           rxtx_bs34_bitslip_error_out, 
   output                                           rxtx_bs35_bitslip_error_out,
   output                                           rxtx_bs36_bitslip_error_out,
   output                                           rxtx_bs37_bitslip_error_out, 
   output                                           rxtx_bs38_bitslip_error_out, 
   output                                           rxtx_bs39_bitslip_error_out, 
   output                                           rxtx_bs40_bitslip_error_out,
   output                                           rxtx_bs41_bitslip_error_out, 
   output                                           rxtx_bs42_bitslip_error_out, 
   output                                           rxtx_bs43_bitslip_error_out, 
   output                                           rxtx_bs44_bitslip_error_out, 
   output                                           rxtx_bs45_bitslip_error_out,
   output                                           rxtx_bs46_bitslip_error_out,
   output                                           rxtx_bs47_bitslip_error_out, 
   output                                           rxtx_bs48_bitslip_error_out, 
   output                                           rxtx_bs49_bitslip_error_out, 
   output                                           rxtx_bs50_bitslip_error_out,
   output                                           rxtx_bs51_bitslip_error_out
   
   );
   
   // ----------------------ATTRIBUTES------------------------------------
   // Fifo sync mode
   localparam C_FIFO_MODE = (C_FIFO_SYNC_MODE) ? "TRUE" : "FALSE";
   
   // RX Delay
   // RX DELAY TYPE Parameter --- string type
   localparam [103:0] C_RX_DELAY_TYPE   =  {
                                          C_RX_DELAY_TYPE51,
                                          C_RX_DELAY_TYPE50,
                                          C_RX_DELAY_TYPE49,
                                          C_RX_DELAY_TYPE48,
                                          C_RX_DELAY_TYPE47,
                                          C_RX_DELAY_TYPE46,
                                          C_RX_DELAY_TYPE45,
                                          C_RX_DELAY_TYPE44,
                                          C_RX_DELAY_TYPE43,
                                          C_RX_DELAY_TYPE42,
   				          C_RX_DELAY_TYPE41,
   				          C_RX_DELAY_TYPE40,
                                          C_RX_DELAY_TYPE39,
   				          C_RX_DELAY_TYPE38,
   				          C_RX_DELAY_TYPE37,
                                          C_RX_DELAY_TYPE36,
   				          C_RX_DELAY_TYPE35,
   				          C_RX_DELAY_TYPE34,
                                          C_RX_DELAY_TYPE33,
   				          C_RX_DELAY_TYPE32,
   				          C_RX_DELAY_TYPE31,
                                          C_RX_DELAY_TYPE30,
   				          C_RX_DELAY_TYPE29,
   				          C_RX_DELAY_TYPE28,
                                          C_RX_DELAY_TYPE27,
   				          C_RX_DELAY_TYPE26,
   				          C_RX_DELAY_TYPE25,
                                          C_RX_DELAY_TYPE24,
   				          C_RX_DELAY_TYPE23,
   				          C_RX_DELAY_TYPE22,
                                          C_RX_DELAY_TYPE21,
   				          C_RX_DELAY_TYPE20,
   				          C_RX_DELAY_TYPE19,
                                          C_RX_DELAY_TYPE18,
   				          C_RX_DELAY_TYPE17,
   				          C_RX_DELAY_TYPE16,
                                          C_RX_DELAY_TYPE15,
   				          C_RX_DELAY_TYPE14,
   				          C_RX_DELAY_TYPE13,
                                          C_RX_DELAY_TYPE12,
   				          C_RX_DELAY_TYPE11,
   				          C_RX_DELAY_TYPE10,
   				          C_RX_DELAY_TYPE9,
                                          C_RX_DELAY_TYPE8,
   				          C_RX_DELAY_TYPE7,
   				          C_RX_DELAY_TYPE6,
                                          C_RX_DELAY_TYPE5,
   				          C_RX_DELAY_TYPE4,
   				          C_RX_DELAY_TYPE3,
                                          C_RX_DELAY_TYPE2,
   				          C_RX_DELAY_TYPE1,
   				          C_RX_DELAY_TYPE0
   				     };
   
   
   // RX DELAY VALUE Parameter
   localparam [623:0] C_RX_DELAY_VALUE  =  {
                                          C_RX_DELAY_VALUE51,
                                          C_RX_DELAY_VALUE50,
                                          C_RX_DELAY_VALUE49,
                                          C_RX_DELAY_VALUE48,
                                          C_RX_DELAY_VALUE47,
                                          C_RX_DELAY_VALUE46,
                                          C_RX_DELAY_VALUE45,
                                          C_RX_DELAY_VALUE44,
                                          C_RX_DELAY_VALUE43,
                                          C_RX_DELAY_VALUE42,
   				          C_RX_DELAY_VALUE41,
   				          C_RX_DELAY_VALUE40,
                                          C_RX_DELAY_VALUE39,
   				          C_RX_DELAY_VALUE38,
   				          C_RX_DELAY_VALUE37,
                                          C_RX_DELAY_VALUE36,
   				          C_RX_DELAY_VALUE35,
   				          C_RX_DELAY_VALUE34,
                                          C_RX_DELAY_VALUE33,
   				          C_RX_DELAY_VALUE32,
   				          C_RX_DELAY_VALUE31,
                                          C_RX_DELAY_VALUE30,
   				          C_RX_DELAY_VALUE29,
   				          C_RX_DELAY_VALUE28,
                                          C_RX_DELAY_VALUE27,
   				          C_RX_DELAY_VALUE26,
   				          C_RX_DELAY_VALUE25,
                                          C_RX_DELAY_VALUE24,
   				          C_RX_DELAY_VALUE23,
   				          C_RX_DELAY_VALUE22,
                                          C_RX_DELAY_VALUE21,
   				          C_RX_DELAY_VALUE20,
   				          C_RX_DELAY_VALUE19,
                                          C_RX_DELAY_VALUE18,
   				          C_RX_DELAY_VALUE17,
   				          C_RX_DELAY_VALUE16,
                                          C_RX_DELAY_VALUE15,
   				          C_RX_DELAY_VALUE14,
   				          C_RX_DELAY_VALUE13,
                                          C_RX_DELAY_VALUE12,
   				          C_RX_DELAY_VALUE11,
   				          C_RX_DELAY_VALUE10,
   				          C_RX_DELAY_VALUE9,
                                          C_RX_DELAY_VALUE8,
   				          C_RX_DELAY_VALUE7,
   				          C_RX_DELAY_VALUE6,
                                          C_RX_DELAY_VALUE5,
   				          C_RX_DELAY_VALUE4,
   				          C_RX_DELAY_VALUE3,
                                          C_RX_DELAY_VALUE2,
   				          C_RX_DELAY_VALUE1,
   				          C_RX_DELAY_VALUE0
   				     }; 
      // Delay type
   // TX DELAY TYPE Parameter --- string type
   localparam [103:0] C_TX_DELAY_TYPE  =  {
                                          C_TX_DELAY_TYPE51,
   				          C_TX_DELAY_TYPE50,
   				          C_TX_DELAY_TYPE49,
                                          C_TX_DELAY_TYPE48,
   				          C_TX_DELAY_TYPE47,
   				          C_TX_DELAY_TYPE46,
                                          C_TX_DELAY_TYPE45,
   				          C_TX_DELAY_TYPE44,
   				          C_TX_DELAY_TYPE43,
                                          C_TX_DELAY_TYPE42,
   				          C_TX_DELAY_TYPE41,
   				          C_TX_DELAY_TYPE40,
                                          C_TX_DELAY_TYPE39,
   				          C_TX_DELAY_TYPE38,
   				          C_TX_DELAY_TYPE37,
                                          C_TX_DELAY_TYPE36,
   				          C_TX_DELAY_TYPE35,
   				          C_TX_DELAY_TYPE34,
                                          C_TX_DELAY_TYPE33,
   				          C_TX_DELAY_TYPE32,
   				          C_TX_DELAY_TYPE31,
                                          C_TX_DELAY_TYPE30,
   				          C_TX_DELAY_TYPE29,
   				          C_TX_DELAY_TYPE28,
                                          C_TX_DELAY_TYPE27,
   				          C_TX_DELAY_TYPE26,
   				          C_TX_DELAY_TYPE25,
                                          C_TX_DELAY_TYPE24,
   				          C_TX_DELAY_TYPE23,
   				          C_TX_DELAY_TYPE22,
                                          C_TX_DELAY_TYPE21,
   				          C_TX_DELAY_TYPE20,
   				          C_TX_DELAY_TYPE19,
                                          C_TX_DELAY_TYPE18,
   				          C_TX_DELAY_TYPE17,
   				          C_TX_DELAY_TYPE16,
                                          C_TX_DELAY_TYPE15,
   				          C_TX_DELAY_TYPE14,
   				          C_TX_DELAY_TYPE13,
                                          C_TX_DELAY_TYPE12,
   				          C_TX_DELAY_TYPE11,
   				          C_TX_DELAY_TYPE10,
   				          C_TX_DELAY_TYPE9,
                                          C_TX_DELAY_TYPE8,
   				          C_TX_DELAY_TYPE7,
   				          C_TX_DELAY_TYPE6,
                                          C_TX_DELAY_TYPE5,
   				          C_TX_DELAY_TYPE4,
   				          C_TX_DELAY_TYPE3,
                                          C_TX_DELAY_TYPE2,
   				          C_TX_DELAY_TYPE1,
   				          C_TX_DELAY_TYPE0
   				     };
   localparam [623:0] C_TX_DELAY_VALUE =  {
                                          C_TX_DELAY_VALUE51,
   				          C_TX_DELAY_VALUE50,
   				          C_TX_DELAY_VALUE49,
                                          C_TX_DELAY_VALUE48,
   				          C_TX_DELAY_VALUE47,
   				          C_TX_DELAY_VALUE46,
                                          C_TX_DELAY_VALUE45,
   				          C_TX_DELAY_VALUE44,
   				          C_TX_DELAY_VALUE43,
                                          C_TX_DELAY_VALUE42,
   				          C_TX_DELAY_VALUE41,
   				          C_TX_DELAY_VALUE40,
                                          C_TX_DELAY_VALUE39,
   				          C_TX_DELAY_VALUE38,
   				          C_TX_DELAY_VALUE37,
                                          C_TX_DELAY_VALUE36,
   				          C_TX_DELAY_VALUE35,
   				          C_TX_DELAY_VALUE34,
                                          C_TX_DELAY_VALUE33,
   				          C_TX_DELAY_VALUE32,
   				          C_TX_DELAY_VALUE31,
                                          C_TX_DELAY_VALUE30,
   				          C_TX_DELAY_VALUE29,
   				          C_TX_DELAY_VALUE28,
                                          C_TX_DELAY_VALUE27,
   				          C_TX_DELAY_VALUE26,
   				          C_TX_DELAY_VALUE25,
                                          C_TX_DELAY_VALUE24,
   				          C_TX_DELAY_VALUE23,
   				          C_TX_DELAY_VALUE22,
                                          C_TX_DELAY_VALUE21,
   				          C_TX_DELAY_VALUE20,
   				          C_TX_DELAY_VALUE19,
                                          C_TX_DELAY_VALUE18,
   				          C_TX_DELAY_VALUE17,
   				          C_TX_DELAY_VALUE16,
                                          C_TX_DELAY_VALUE15,
   				          C_TX_DELAY_VALUE14,
   				          C_TX_DELAY_VALUE13,
                                          C_TX_DELAY_VALUE12,
   				          C_TX_DELAY_VALUE11,
   				          C_TX_DELAY_VALUE10,
   				          C_TX_DELAY_VALUE9,
                                          C_TX_DELAY_VALUE8,
   				          C_TX_DELAY_VALUE7,
   				          C_TX_DELAY_VALUE6,
                                          C_TX_DELAY_VALUE5,
   				          C_TX_DELAY_VALUE4,
   				          C_TX_DELAY_VALUE3,
                                          C_TX_DELAY_VALUE2,
   				          C_TX_DELAY_VALUE1,
   				          C_TX_DELAY_VALUE0
   				     };
   
   localparam [51:0] C_TBYTE_CTRL = {
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[15] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[15] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[14] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[14] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[13] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[13] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[12] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[12] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[11] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[11] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[10] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[10] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[9] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[9] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[8] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[8] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[7] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[7] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[6] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[6] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[5] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[5] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[4] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[4] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[3] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[3] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[2] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[2] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[1] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[1] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0),
                                   ((C_RX_STROBE_EN[0] == 1 && C_CLOCK_TRI == 0) ? 1'b1  : (C_RX_STROBE_EN[0] == 1 && C_CLOCK_TRI == 1) ? 1'b0 : (C_DATA_TRI == 0) ? 1'b1 : 1'b0)
   
   			   };
   // Ribbon cable signals
   wire [39:0]  rxtx_bs_tx_bit_ctrl_out[51:0];
   assign rxtx_bs51_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[51];
   assign rxtx_bs50_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[50];
   assign rxtx_bs49_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[49];
   assign rxtx_bs48_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[48];
   assign rxtx_bs47_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[47];
   assign rxtx_bs46_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[46];
   assign rxtx_bs45_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[45];
   assign rxtx_bs44_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[44];
   assign rxtx_bs43_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[43];
   assign rxtx_bs42_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[42];
   assign rxtx_bs41_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[41];
   assign rxtx_bs40_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[40];
   assign rxtx_bs39_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[39];
   assign rxtx_bs38_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[38];
   assign rxtx_bs37_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[37];
   assign rxtx_bs36_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[36];
   assign rxtx_bs35_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[35];
   assign rxtx_bs34_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[34];
   assign rxtx_bs33_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[33];
   assign rxtx_bs32_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[32];
   assign rxtx_bs31_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[31];
   assign rxtx_bs30_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[30];
   assign rxtx_bs29_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[29];
   assign rxtx_bs28_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[28];
   assign rxtx_bs27_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[27];
   assign rxtx_bs26_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[26];
   assign rxtx_bs25_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[25];
   assign rxtx_bs24_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[24];
   assign rxtx_bs23_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[23];
   assign rxtx_bs22_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[22];
   assign rxtx_bs21_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[21];
   assign rxtx_bs20_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[20];
   assign rxtx_bs19_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[19];
   assign rxtx_bs18_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[18];
   assign rxtx_bs17_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[17];
   assign rxtx_bs16_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[16];
   assign rxtx_bs15_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[15];
   assign rxtx_bs14_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[14];
   assign rxtx_bs13_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[13];
   assign rxtx_bs12_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[12];
   assign rxtx_bs11_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[11];
   assign rxtx_bs10_tx_bit_ctrl_out = rxtx_bs_tx_bit_ctrl_out[10];
   assign rxtx_bs9_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[9];
   assign rxtx_bs8_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[8];
   assign rxtx_bs7_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[7];
   assign rxtx_bs6_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[6];
   assign rxtx_bs5_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[5];
   assign rxtx_bs4_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[4];
   assign rxtx_bs3_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[3];
   assign rxtx_bs2_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[2];
   assign rxtx_bs1_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[1];
   assign rxtx_bs0_tx_bit_ctrl_out  = rxtx_bs_tx_bit_ctrl_out[0];
   
   wire [39:0] rxtx_bs_rx_bit_ctrl_out [51:0];
   assign rxtx_bs51_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[51];
   assign rxtx_bs50_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[50];
   assign rxtx_bs49_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[49];
   assign rxtx_bs48_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[48];
   assign rxtx_bs47_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[47];
   assign rxtx_bs46_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[46];
   assign rxtx_bs45_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[45];
   assign rxtx_bs44_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[44];
   assign rxtx_bs43_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[43];
   assign rxtx_bs42_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[42];
   assign rxtx_bs41_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[41];
   assign rxtx_bs40_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[40];
   assign rxtx_bs39_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[39];
   assign rxtx_bs38_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[38];
   assign rxtx_bs37_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[37];
   assign rxtx_bs36_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[36];
   assign rxtx_bs35_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[35];
   assign rxtx_bs34_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[34];
   assign rxtx_bs33_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[33];
   assign rxtx_bs32_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[32];
   assign rxtx_bs31_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[31];
   assign rxtx_bs30_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[30];
   assign rxtx_bs29_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[29];
   assign rxtx_bs28_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[28];
   assign rxtx_bs27_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[27];
   assign rxtx_bs26_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[26];
   assign rxtx_bs25_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[25];
   assign rxtx_bs24_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[24];
   assign rxtx_bs23_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[23];
   assign rxtx_bs22_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[22];
   assign rxtx_bs21_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[21];
   assign rxtx_bs20_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[20];
   assign rxtx_bs19_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[19];
   assign rxtx_bs18_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[18];
   assign rxtx_bs17_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[17];
   assign rxtx_bs16_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[16];
   assign rxtx_bs15_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[15];
   assign rxtx_bs14_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[14];
   assign rxtx_bs13_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[13];
   assign rxtx_bs12_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[12];
   assign rxtx_bs11_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[11];
   assign rxtx_bs10_rx_bit_ctrl_out = rxtx_bs_rx_bit_ctrl_out[10];
   assign rxtx_bs9_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[9];
   assign rxtx_bs8_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[8];
   assign rxtx_bs7_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[7];
   assign rxtx_bs6_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[6];
   assign rxtx_bs5_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[5];
   assign rxtx_bs4_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[4];
   assign rxtx_bs3_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[3];
   assign rxtx_bs2_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[2];
   assign rxtx_bs1_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[1];
   assign rxtx_bs0_rx_bit_ctrl_out  = rxtx_bs_rx_bit_ctrl_out[0];
   
   wire [2079:0] rxtx_bs_tx_bit_ctrl_in  = {
                                                   rxtx_bs51_tx_bit_ctrl_in,
                                                   rxtx_bs50_tx_bit_ctrl_in,
                                                   rxtx_bs49_tx_bit_ctrl_in,
                                                   rxtx_bs48_tx_bit_ctrl_in,
                                                   rxtx_bs47_tx_bit_ctrl_in,
                                                   rxtx_bs46_tx_bit_ctrl_in,
                                                   rxtx_bs45_tx_bit_ctrl_in,
                                                   rxtx_bs44_tx_bit_ctrl_in,
                                                   rxtx_bs43_tx_bit_ctrl_in,                                                
                                                   rxtx_bs42_tx_bit_ctrl_in,
                                                   rxtx_bs41_tx_bit_ctrl_in,
                                                   rxtx_bs40_tx_bit_ctrl_in,
                                                   rxtx_bs39_tx_bit_ctrl_in,
                                                   rxtx_bs38_tx_bit_ctrl_in,
                                                   rxtx_bs37_tx_bit_ctrl_in,
                                                   rxtx_bs36_tx_bit_ctrl_in,
                                                   rxtx_bs35_tx_bit_ctrl_in,
                                                   rxtx_bs34_tx_bit_ctrl_in,
                                                   rxtx_bs33_tx_bit_ctrl_in,
                                                   rxtx_bs32_tx_bit_ctrl_in,
                                                   rxtx_bs31_tx_bit_ctrl_in,
                                                   rxtx_bs30_tx_bit_ctrl_in,
                                                   rxtx_bs29_tx_bit_ctrl_in,
                                                   rxtx_bs28_tx_bit_ctrl_in,
                                                   rxtx_bs27_tx_bit_ctrl_in,
                                                   rxtx_bs26_tx_bit_ctrl_in,
                                                   rxtx_bs25_tx_bit_ctrl_in,
                                                   rxtx_bs24_tx_bit_ctrl_in,
                                                   rxtx_bs23_tx_bit_ctrl_in,
                                                   rxtx_bs22_tx_bit_ctrl_in,
                                                   rxtx_bs21_tx_bit_ctrl_in,
                                                   rxtx_bs20_tx_bit_ctrl_in,
                                                   rxtx_bs19_tx_bit_ctrl_in,
                                                   rxtx_bs18_tx_bit_ctrl_in,
                                                   rxtx_bs17_tx_bit_ctrl_in,
                                                   rxtx_bs16_tx_bit_ctrl_in,
                                                   rxtx_bs15_tx_bit_ctrl_in,
                                                   rxtx_bs14_tx_bit_ctrl_in,
                                                   rxtx_bs13_tx_bit_ctrl_in,
                                                   rxtx_bs12_tx_bit_ctrl_in,
                                                   rxtx_bs11_tx_bit_ctrl_in,
                                                   rxtx_bs10_tx_bit_ctrl_in,
                                                   rxtx_bs9_tx_bit_ctrl_in,
                                                   rxtx_bs8_tx_bit_ctrl_in,
                                                   rxtx_bs7_tx_bit_ctrl_in,
                                                   rxtx_bs6_tx_bit_ctrl_in,
                                                   rxtx_bs5_tx_bit_ctrl_in,
                                                   rxtx_bs4_tx_bit_ctrl_in,
                                                   rxtx_bs3_tx_bit_ctrl_in,
                                                   rxtx_bs2_tx_bit_ctrl_in,
                                                   rxtx_bs1_tx_bit_ctrl_in,
                                                   rxtx_bs0_tx_bit_ctrl_in};	       
   
   wire  [2079:0] rxtx_bs_rx_bit_ctrl_in = {
                                                   rxtx_bs51_rx_bit_ctrl_in,
                                                   rxtx_bs50_rx_bit_ctrl_in,
                                                   rxtx_bs49_rx_bit_ctrl_in,
                                                   rxtx_bs48_rx_bit_ctrl_in,
                                                   rxtx_bs47_rx_bit_ctrl_in,
                                                   rxtx_bs46_rx_bit_ctrl_in,
                                                   rxtx_bs45_rx_bit_ctrl_in,
                                                   rxtx_bs44_rx_bit_ctrl_in,
                                                   rxtx_bs43_rx_bit_ctrl_in,                                                
                                                   rxtx_bs42_rx_bit_ctrl_in,
                                                   rxtx_bs41_rx_bit_ctrl_in,
                                                   rxtx_bs40_rx_bit_ctrl_in,
                                                   rxtx_bs39_rx_bit_ctrl_in,
                                                   rxtx_bs38_rx_bit_ctrl_in,
                                                   rxtx_bs37_rx_bit_ctrl_in,
                                                   rxtx_bs36_rx_bit_ctrl_in,
                                                   rxtx_bs35_rx_bit_ctrl_in,
                                                   rxtx_bs34_rx_bit_ctrl_in,
                                                   rxtx_bs33_rx_bit_ctrl_in,
                                                   rxtx_bs32_rx_bit_ctrl_in,
                                                   rxtx_bs31_rx_bit_ctrl_in,
                                                   rxtx_bs30_rx_bit_ctrl_in,
                                                   rxtx_bs29_rx_bit_ctrl_in,
                                                   rxtx_bs28_rx_bit_ctrl_in,
                                                   rxtx_bs27_rx_bit_ctrl_in,
                                                   rxtx_bs26_rx_bit_ctrl_in,
                                                   rxtx_bs25_rx_bit_ctrl_in,
                                                   rxtx_bs24_rx_bit_ctrl_in,
                                                   rxtx_bs23_rx_bit_ctrl_in,
                                                   rxtx_bs22_rx_bit_ctrl_in,
                                                   rxtx_bs21_rx_bit_ctrl_in,
                                                   rxtx_bs20_rx_bit_ctrl_in,
                                                   rxtx_bs19_rx_bit_ctrl_in,
                                                   rxtx_bs18_rx_bit_ctrl_in,
                                                   rxtx_bs17_rx_bit_ctrl_in,
                                                   rxtx_bs16_rx_bit_ctrl_in,
                                                   rxtx_bs15_rx_bit_ctrl_in,
                                                   rxtx_bs14_rx_bit_ctrl_in,
                                                   rxtx_bs13_rx_bit_ctrl_in,
                                                   rxtx_bs12_rx_bit_ctrl_in,
                                                   rxtx_bs11_rx_bit_ctrl_in,
                                                   rxtx_bs10_rx_bit_ctrl_in,
                                                   rxtx_bs9_rx_bit_ctrl_in,
                                                   rxtx_bs8_rx_bit_ctrl_in,
                                                   rxtx_bs7_rx_bit_ctrl_in,
                                                   rxtx_bs6_rx_bit_ctrl_in,
                                                   rxtx_bs5_rx_bit_ctrl_in,
                                                   rxtx_bs4_rx_bit_ctrl_in,
                                                   rxtx_bs3_rx_bit_ctrl_in,
                                                   rxtx_bs2_rx_bit_ctrl_in,
                                                   rxtx_bs1_rx_bit_ctrl_in,
                                                   rxtx_bs0_rx_bit_ctrl_in};
      
   // RX Delay Type is being used multiple times. Creating temp wire for use
   wire [51:0] w_delay_type;
   assign w_delay_type[0] 	  = (C_RX_DELAY_TYPE0 == 2'b01 || C_RX_DELAY_TYPE0  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[1] 	  = (C_RX_DELAY_TYPE1 == 2'b01 || C_RX_DELAY_TYPE1  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[2] 	  = (C_RX_DELAY_TYPE2 == 2'b01 || C_RX_DELAY_TYPE2  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[3] 	  = (C_RX_DELAY_TYPE3 == 2'b01 || C_RX_DELAY_TYPE3  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[4] 	  = (C_RX_DELAY_TYPE4 == 2'b01 || C_RX_DELAY_TYPE4  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[5] 	  = (C_RX_DELAY_TYPE5 == 2'b01 || C_RX_DELAY_TYPE5  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[6] 	  = (C_RX_DELAY_TYPE6 == 2'b01 || C_RX_DELAY_TYPE6  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[7] 	  = (C_RX_DELAY_TYPE7 == 2'b01 || C_RX_DELAY_TYPE7  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[8] 	  = (C_RX_DELAY_TYPE8 == 2'b01 || C_RX_DELAY_TYPE8  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[9] 	  = (C_RX_DELAY_TYPE9 == 2'b01 || C_RX_DELAY_TYPE9  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[10]   = (C_RX_DELAY_TYPE10 == 2'b01 || C_RX_DELAY_TYPE10 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[11]   = (C_RX_DELAY_TYPE11 == 2'b01 || C_RX_DELAY_TYPE11 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[12]   = (C_RX_DELAY_TYPE12 == 2'b01 || C_RX_DELAY_TYPE12 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[13]   = (C_RX_DELAY_TYPE13 == 2'b01 || C_RX_DELAY_TYPE13 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[14]   = (C_RX_DELAY_TYPE14 == 2'b01 || C_RX_DELAY_TYPE14 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[15]   = (C_RX_DELAY_TYPE15 == 2'b01 || C_RX_DELAY_TYPE15 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[16]   = (C_RX_DELAY_TYPE16 == 2'b01 || C_RX_DELAY_TYPE16 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[17]   = (C_RX_DELAY_TYPE17 == 2'b01 || C_RX_DELAY_TYPE17 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[18]   = (C_RX_DELAY_TYPE18 == 2'b01 || C_RX_DELAY_TYPE18 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[19]   = (C_RX_DELAY_TYPE19 == 2'b01 || C_RX_DELAY_TYPE19 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[20]   = (C_RX_DELAY_TYPE20 == 2'b01 || C_RX_DELAY_TYPE20 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[21]   = (C_RX_DELAY_TYPE21 == 2'b01 || C_RX_DELAY_TYPE21 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[22]   = (C_RX_DELAY_TYPE22 == 2'b01 || C_RX_DELAY_TYPE22 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[23]   = (C_RX_DELAY_TYPE23 == 2'b01 || C_RX_DELAY_TYPE23 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[24]   = (C_RX_DELAY_TYPE24 == 2'b01 || C_RX_DELAY_TYPE24 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[25]   = (C_RX_DELAY_TYPE25 == 2'b01 || C_RX_DELAY_TYPE25 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[26]   = (C_RX_DELAY_TYPE26 == 2'b01 || C_RX_DELAY_TYPE26 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[27]   = (C_RX_DELAY_TYPE27 == 2'b01 || C_RX_DELAY_TYPE27 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[28]   = (C_RX_DELAY_TYPE28 == 2'b01 || C_RX_DELAY_TYPE28 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[29]   = (C_RX_DELAY_TYPE29 == 2'b01 || C_RX_DELAY_TYPE29 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[30]   = (C_RX_DELAY_TYPE30 == 2'b01 || C_RX_DELAY_TYPE30 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[31]   = (C_RX_DELAY_TYPE31 == 2'b01 || C_RX_DELAY_TYPE31 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[32]   = (C_RX_DELAY_TYPE32 == 2'b01 || C_RX_DELAY_TYPE32 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[33]   = (C_RX_DELAY_TYPE33 == 2'b01 || C_RX_DELAY_TYPE33 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[34]   = (C_RX_DELAY_TYPE34 == 2'b01 || C_RX_DELAY_TYPE34 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[35]   = (C_RX_DELAY_TYPE35 == 2'b01 || C_RX_DELAY_TYPE35 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[36]   = (C_RX_DELAY_TYPE36 == 2'b01 || C_RX_DELAY_TYPE36 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[37]   = (C_RX_DELAY_TYPE37 == 2'b01 || C_RX_DELAY_TYPE37 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[38]   = (C_RX_DELAY_TYPE38 == 2'b01 || C_RX_DELAY_TYPE38 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[39]   = (C_RX_DELAY_TYPE39 == 2'b01 || C_RX_DELAY_TYPE39 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[40]   = (C_RX_DELAY_TYPE40 == 2'b01 || C_RX_DELAY_TYPE40 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[41]   = (C_RX_DELAY_TYPE41 == 2'b01 || C_RX_DELAY_TYPE41 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[42]   = (C_RX_DELAY_TYPE42 == 2'b01 || C_RX_DELAY_TYPE42 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[43]   = (C_RX_DELAY_TYPE43 == 2'b01 || C_RX_DELAY_TYPE43 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[44]   = (C_RX_DELAY_TYPE44 == 2'b01 || C_RX_DELAY_TYPE44 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[45]   = (C_RX_DELAY_TYPE45 == 2'b01 || C_RX_DELAY_TYPE45 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[46]   = (C_RX_DELAY_TYPE46 == 2'b01 || C_RX_DELAY_TYPE46 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[47]   = (C_RX_DELAY_TYPE47 == 2'b01 || C_RX_DELAY_TYPE47 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[48]   = (C_RX_DELAY_TYPE48 == 2'b01 || C_RX_DELAY_TYPE48 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[49]   = (C_RX_DELAY_TYPE49 == 2'b01 || C_RX_DELAY_TYPE49 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[50]   = (C_RX_DELAY_TYPE50 == 2'b01 || C_RX_DELAY_TYPE50 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[51]   = (C_RX_DELAY_TYPE51 == 2'b01 || C_RX_DELAY_TYPE51 == 2'b10) ? 1'b1:1'b0;
   
   // vectorising EN_VTC, for VAR_LOAD and VARIABLE, rx_bs<num>_en_vtc is used
   // and for FIXED assigned to 1'b1 or VCC
    wire [51:0] w_rxtx_rx_en_vtc_in; 
    assign w_rxtx_rx_en_vtc_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type[0]) ? rxtx_bs0_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type[1]) ? rxtx_bs1_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type[2]) ? rxtx_bs2_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type[3]) ? rxtx_bs3_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type[4]) ? rxtx_bs4_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type[5]) ? rxtx_bs5_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type[6]) ? rxtx_bs6_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type[7]) ? rxtx_bs7_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[8]  = !rst_seq_done ? 1'b1 : (w_delay_type[8]) ? rxtx_bs8_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[9]  = !rst_seq_done ? 1'b1 : (w_delay_type[9]) ? rxtx_bs9_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[10] = !rst_seq_done ? 1'b1 : (w_delay_type[10]) ? rxtx_bs10_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[11] = !rst_seq_done ? 1'b1 : (w_delay_type[11]) ? rxtx_bs11_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[12] = !rst_seq_done ? 1'b1 : (w_delay_type[12]) ? rxtx_bs12_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[13] = !rst_seq_done ? 1'b1 : (w_delay_type[13]) ? rxtx_bs13_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[14] = !rst_seq_done ? 1'b1 : (w_delay_type[14]) ? rxtx_bs14_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[15] = !rst_seq_done ? 1'b1 : (w_delay_type[15]) ? rxtx_bs15_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[16] = !rst_seq_done ? 1'b1 : (w_delay_type[16]) ? rxtx_bs16_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[17] = !rst_seq_done ? 1'b1 : (w_delay_type[17]) ? rxtx_bs17_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[18] = !rst_seq_done ? 1'b1 : (w_delay_type[18]) ? rxtx_bs18_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[19] = !rst_seq_done ? 1'b1 : (w_delay_type[19]) ? rxtx_bs19_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[20] = !rst_seq_done ? 1'b1 : (w_delay_type[20]) ? rxtx_bs20_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[21] = !rst_seq_done ? 1'b1 : (w_delay_type[21]) ? rxtx_bs21_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[22] = !rst_seq_done ? 1'b1 : (w_delay_type[22]) ? rxtx_bs22_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[23] = !rst_seq_done ? 1'b1 : (w_delay_type[23]) ? rxtx_bs23_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[24] = !rst_seq_done ? 1'b1 : (w_delay_type[24]) ? rxtx_bs24_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[25] = !rst_seq_done ? 1'b1 : (w_delay_type[25]) ? rxtx_bs25_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[26] = !rst_seq_done ? 1'b1 : (w_delay_type[26]) ? rxtx_bs26_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[27] = !rst_seq_done ? 1'b1 : (w_delay_type[27]) ? rxtx_bs27_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[28] = !rst_seq_done ? 1'b1 : (w_delay_type[28]) ? rxtx_bs28_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[29] = !rst_seq_done ? 1'b1 : (w_delay_type[29]) ? rxtx_bs29_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[30] = !rst_seq_done ? 1'b1 : (w_delay_type[30]) ? rxtx_bs30_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[31] = !rst_seq_done ? 1'b1 : (w_delay_type[31]) ? rxtx_bs31_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[32] = !rst_seq_done ? 1'b1 : (w_delay_type[32]) ? rxtx_bs32_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[33] = !rst_seq_done ? 1'b1 : (w_delay_type[33]) ? rxtx_bs33_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[34] = !rst_seq_done ? 1'b1 : (w_delay_type[34]) ? rxtx_bs34_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[35] = !rst_seq_done ? 1'b1 : (w_delay_type[35]) ? rxtx_bs35_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[36] = !rst_seq_done ? 1'b1 : (w_delay_type[36]) ? rxtx_bs36_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[37] = !rst_seq_done ? 1'b1 : (w_delay_type[37]) ? rxtx_bs37_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[38] = !rst_seq_done ? 1'b1 : (w_delay_type[38]) ? rxtx_bs38_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[39] = !rst_seq_done ? 1'b1 : (w_delay_type[39]) ? rxtx_bs39_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[40] = !rst_seq_done ? 1'b1 : (w_delay_type[40]) ? rxtx_bs40_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[41] = !rst_seq_done ? 1'b1 : (w_delay_type[41]) ? rxtx_bs41_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[42] = !rst_seq_done ? 1'b1 : (w_delay_type[42]) ? rxtx_bs42_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[43] = !rst_seq_done ? 1'b1 : (w_delay_type[43]) ? rxtx_bs43_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[44] = !rst_seq_done ? 1'b1 : (w_delay_type[44]) ? rxtx_bs44_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[45] = !rst_seq_done ? 1'b1 : (w_delay_type[45]) ? rxtx_bs45_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[46] = !rst_seq_done ? 1'b1 : (w_delay_type[46]) ? rxtx_bs46_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[47] = !rst_seq_done ? 1'b1 : (w_delay_type[47]) ? rxtx_bs47_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[48] = !rst_seq_done ? 1'b1 : (w_delay_type[48]) ? rxtx_bs48_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[49] = !rst_seq_done ? 1'b1 : (w_delay_type[49]) ? rxtx_bs49_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[50] = !rst_seq_done ? 1'b1 : (w_delay_type[50]) ? rxtx_bs50_rx_en_vtc_in:1'b1;
    assign w_rxtx_rx_en_vtc_in[51] = !rst_seq_done ? 1'b1 : (w_delay_type[51]) ? rxtx_bs51_rx_en_vtc_in:1'b1;
   
    // Increment count value for the delays, available only for VARIABLE or
   // VAR_LOAD					   
    wire [51:0] w_rxtx_rx_inc_in;
    assign w_rxtx_rx_inc_in[0]  = (w_delay_type[0]) ? rxtx_bs0_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[1]  = (w_delay_type[1]) ? rxtx_bs1_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[2]  = (w_delay_type[2]) ? rxtx_bs2_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[3]  = (w_delay_type[3]) ? rxtx_bs3_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[4]  = (w_delay_type[4]) ? rxtx_bs4_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[5]  = (w_delay_type[5]) ? rxtx_bs5_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[6]  = (w_delay_type[6]) ? rxtx_bs6_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[7]  = (w_delay_type[7]) ? rxtx_bs7_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[8]  = (w_delay_type[8]) ? rxtx_bs8_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[9]  = (w_delay_type[9]) ? rxtx_bs9_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[10] = (w_delay_type[10]) ? rxtx_bs10_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[11] = (w_delay_type[11]) ? rxtx_bs11_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[12] = (w_delay_type[12]) ? rxtx_bs12_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[13] = (w_delay_type[13]) ? rxtx_bs13_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[14] = (w_delay_type[14]) ? rxtx_bs14_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[15] = (w_delay_type[15]) ? rxtx_bs15_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[16] = (w_delay_type[16]) ? rxtx_bs16_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[17] = (w_delay_type[17]) ? rxtx_bs17_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[18] = (w_delay_type[18]) ? rxtx_bs18_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[19] = (w_delay_type[19]) ? rxtx_bs19_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[20] = (w_delay_type[20]) ? rxtx_bs20_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[21] = (w_delay_type[21]) ? rxtx_bs21_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[22] = (w_delay_type[22]) ? rxtx_bs22_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[23] = (w_delay_type[23]) ? rxtx_bs23_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[24] = (w_delay_type[24]) ? rxtx_bs24_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[25] = (w_delay_type[25]) ? rxtx_bs25_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[26] = (w_delay_type[26]) ? rxtx_bs26_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[27] = (w_delay_type[27]) ? rxtx_bs27_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[28] = (w_delay_type[28]) ? rxtx_bs28_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[29] = (w_delay_type[29]) ? rxtx_bs29_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[30] = (w_delay_type[30]) ? rxtx_bs30_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[31] = (w_delay_type[31]) ? rxtx_bs31_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[32] = (w_delay_type[32]) ? rxtx_bs32_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[33] = (w_delay_type[33]) ? rxtx_bs33_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[34] = (w_delay_type[34]) ? rxtx_bs34_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[35] = (w_delay_type[35]) ? rxtx_bs35_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[36] = (w_delay_type[36]) ? rxtx_bs36_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[37] = (w_delay_type[37]) ? rxtx_bs37_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[38] = (w_delay_type[38]) ? rxtx_bs38_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[39] = (w_delay_type[39]) ? rxtx_bs39_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[40] = (w_delay_type[40]) ? rxtx_bs40_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[41] = (w_delay_type[41]) ? rxtx_bs41_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[42] = (w_delay_type[42]) ? rxtx_bs42_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[43] = (w_delay_type[43]) ? rxtx_bs43_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[44] = (w_delay_type[44]) ? rxtx_bs44_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[45] = (w_delay_type[45]) ? rxtx_bs45_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[46] = (w_delay_type[46]) ? rxtx_bs46_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[47] = (w_delay_type[47]) ? rxtx_bs47_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[48] = (w_delay_type[48]) ? rxtx_bs48_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[49] = (w_delay_type[49]) ? rxtx_bs49_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[50] = (w_delay_type[50]) ? rxtx_bs50_rx_inc_in:1'b1;
    assign w_rxtx_rx_inc_in[51] = (w_delay_type[51]) ? rxtx_bs51_rx_inc_in:1'b1;
   
    // Load value for the delay, Applicable only when DELAY_TYPE is VARIABLE or
    // VARLOAD
    wire [51:0] w_rxtx_rx_load_in;
    assign w_rxtx_rx_load_in[0]  = (w_delay_type[0]) ? rxtx_bs0_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[1]  = (w_delay_type[1]) ? rxtx_bs1_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[2]  = (w_delay_type[2]) ? rxtx_bs2_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[3]  = (w_delay_type[3]) ? rxtx_bs3_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[4]  = (w_delay_type[4]) ? rxtx_bs4_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[5]  = (w_delay_type[5]) ? rxtx_bs5_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[6]  = (w_delay_type[6]) ? rxtx_bs6_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[7]  = (w_delay_type[7]) ? rxtx_bs7_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[8]  = (w_delay_type[8]) ? rxtx_bs8_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[9]  = (w_delay_type[9]) ? rxtx_bs9_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[10] = (w_delay_type[10]) ? rxtx_bs10_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[11] = (w_delay_type[11]) ? rxtx_bs11_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[12] = (w_delay_type[12]) ? rxtx_bs12_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[13] = (w_delay_type[13]) ? rxtx_bs13_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[14] = (w_delay_type[14]) ? rxtx_bs14_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[15] = (w_delay_type[15]) ? rxtx_bs15_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[16] = (w_delay_type[16]) ? rxtx_bs16_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[17] = (w_delay_type[17]) ? rxtx_bs17_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[18] = (w_delay_type[18]) ? rxtx_bs18_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[19] = (w_delay_type[19]) ? rxtx_bs19_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[20] = (w_delay_type[20]) ? rxtx_bs20_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[21] = (w_delay_type[21]) ? rxtx_bs21_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[22] = (w_delay_type[22]) ? rxtx_bs22_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[23] = (w_delay_type[23]) ? rxtx_bs23_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[24] = (w_delay_type[24]) ? rxtx_bs24_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[25] = (w_delay_type[25]) ? rxtx_bs25_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[26] = (w_delay_type[26]) ? rxtx_bs26_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[27] = (w_delay_type[27]) ? rxtx_bs27_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[28] = (w_delay_type[28]) ? rxtx_bs28_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[29] = (w_delay_type[29]) ? rxtx_bs29_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[30] = (w_delay_type[30]) ? rxtx_bs30_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[31] = (w_delay_type[31]) ? rxtx_bs31_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[32] = (w_delay_type[32]) ? rxtx_bs32_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[33] = (w_delay_type[33]) ? rxtx_bs33_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[34] = (w_delay_type[34]) ? rxtx_bs34_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[35] = (w_delay_type[35]) ? rxtx_bs35_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[36] = (w_delay_type[36]) ? rxtx_bs36_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[37] = (w_delay_type[37]) ? rxtx_bs37_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[38] = (w_delay_type[38]) ? rxtx_bs38_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[39] = (w_delay_type[39]) ? rxtx_bs39_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[40] = (w_delay_type[40]) ? rxtx_bs40_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[41] = (w_delay_type[41]) ? rxtx_bs41_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[42] = (w_delay_type[42]) ? rxtx_bs42_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[43] = (w_delay_type[43]) ? rxtx_bs43_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[44] = (w_delay_type[44]) ? rxtx_bs44_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[45] = (w_delay_type[45]) ? rxtx_bs45_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[46] = (w_delay_type[46]) ? rxtx_bs46_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[47] = (w_delay_type[47]) ? rxtx_bs47_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[48] = (w_delay_type[48]) ? rxtx_bs48_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[49] = (w_delay_type[49]) ? rxtx_bs49_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[50] = (w_delay_type[50]) ? rxtx_bs50_rx_load_in:1'b1;
    assign w_rxtx_rx_load_in[51] = (w_delay_type[51]) ? rxtx_bs51_rx_load_in:1'b1;
    // CE
    wire [51:0] w_rxtx_rx_ce_in; 
    assign w_rxtx_rx_ce_in[0]  = (w_delay_type[0]) ? rxtx_bs0_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[1]  = (w_delay_type[1]) ? rxtx_bs1_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[2]  = (w_delay_type[2]) ? rxtx_bs2_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[3]  = (w_delay_type[3]) ? rxtx_bs3_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[4]  = (w_delay_type[4]) ? rxtx_bs4_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[5]  = (w_delay_type[5]) ? rxtx_bs5_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[6]  = (w_delay_type[6]) ? rxtx_bs6_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[7]  = (w_delay_type[7]) ? rxtx_bs7_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[8]  = (w_delay_type[8]) ? rxtx_bs8_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[9]  = (w_delay_type[9]) ? rxtx_bs9_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[10] = (w_delay_type[10]) ? rxtx_bs10_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[11] = (w_delay_type[11]) ? rxtx_bs11_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[12] = (w_delay_type[12]) ? rxtx_bs12_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[13] = (w_delay_type[13]) ? rxtx_bs13_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[14] = (w_delay_type[14]) ? rxtx_bs14_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[15] = (w_delay_type[15]) ? rxtx_bs15_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[16] = (w_delay_type[16]) ? rxtx_bs16_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[17] = (w_delay_type[17]) ? rxtx_bs17_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[18] = (w_delay_type[18]) ? rxtx_bs18_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[19] = (w_delay_type[19]) ? rxtx_bs19_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[20] = (w_delay_type[20]) ? rxtx_bs20_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[21] = (w_delay_type[21]) ? rxtx_bs21_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[22] = (w_delay_type[22]) ? rxtx_bs22_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[23] = (w_delay_type[23]) ? rxtx_bs23_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[24] = (w_delay_type[24]) ? rxtx_bs24_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[25] = (w_delay_type[25]) ? rxtx_bs25_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[26] = (w_delay_type[26]) ? rxtx_bs26_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[27] = (w_delay_type[27]) ? rxtx_bs27_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[28] = (w_delay_type[28]) ? rxtx_bs28_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[29] = (w_delay_type[29]) ? rxtx_bs29_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[30] = (w_delay_type[30]) ? rxtx_bs30_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[31] = (w_delay_type[31]) ? rxtx_bs31_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[32] = (w_delay_type[32]) ? rxtx_bs32_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[33] = (w_delay_type[33]) ? rxtx_bs33_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[34] = (w_delay_type[34]) ? rxtx_bs34_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[35] = (w_delay_type[35]) ? rxtx_bs35_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[36] = (w_delay_type[36]) ? rxtx_bs36_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[37] = (w_delay_type[37]) ? rxtx_bs37_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[38] = (w_delay_type[38]) ? rxtx_bs38_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[39] = (w_delay_type[39]) ? rxtx_bs39_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[40] = (w_delay_type[40]) ? rxtx_bs40_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[41] = (w_delay_type[41]) ? rxtx_bs41_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[42] = (w_delay_type[42]) ? rxtx_bs42_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[43] = (w_delay_type[43]) ? rxtx_bs43_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[44] = (w_delay_type[44]) ? rxtx_bs44_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[45] = (w_delay_type[45]) ? rxtx_bs45_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[46] = (w_delay_type[46]) ? rxtx_bs46_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[47] = (w_delay_type[47]) ? rxtx_bs47_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[48] = (w_delay_type[48]) ? rxtx_bs48_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[49] = (w_delay_type[49]) ? rxtx_bs49_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[50] = (w_delay_type[50]) ? rxtx_bs50_rx_ce_in:1'b1;
    assign w_rxtx_rx_ce_in[51] = (w_delay_type[51]) ? rxtx_bs51_rx_ce_in:1'b1;
   
    // Cntvalue in
    wire [8:0] w_rxtx_rx_cntvaluein [51:0];
    assign w_rxtx_rx_cntvaluein[0]  = (C_RX_DELAY_TYPE0 == 2'b10) ? rxtx_bs0_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[1]  = (C_RX_DELAY_TYPE1 == 2'b10) ? rxtx_bs1_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[2]  = (C_RX_DELAY_TYPE2 == 2'b10) ? rxtx_bs2_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[3]  = (C_RX_DELAY_TYPE3 == 2'b10) ? rxtx_bs3_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[4]  = (C_RX_DELAY_TYPE4 == 2'b10) ? rxtx_bs4_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[5]  = (C_RX_DELAY_TYPE5 == 2'b10) ? rxtx_bs5_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[6]  = (C_RX_DELAY_TYPE6 == 2'b10) ? rxtx_bs6_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[7]  = (C_RX_DELAY_TYPE7 == 2'b10) ? rxtx_bs7_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[8]  = (C_RX_DELAY_TYPE8 == 2'b10) ? rxtx_bs8_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[9]  = (C_RX_DELAY_TYPE9 == 2'b10) ? rxtx_bs9_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[10] = (C_RX_DELAY_TYPE10 == 2'b10) ? rxtx_bs10_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[11] = (C_RX_DELAY_TYPE11 == 2'b10) ? rxtx_bs11_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[12] = (C_RX_DELAY_TYPE12 == 2'b10) ? rxtx_bs12_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[13] = (C_RX_DELAY_TYPE13 == 2'b10) ? rxtx_bs13_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[14] = (C_RX_DELAY_TYPE14 == 2'b10) ? rxtx_bs14_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[15] = (C_RX_DELAY_TYPE15 == 2'b10) ? rxtx_bs15_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[16] = (C_RX_DELAY_TYPE16 == 2'b10) ? rxtx_bs16_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[17] = (C_RX_DELAY_TYPE17 == 2'b10) ? rxtx_bs17_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[18] = (C_RX_DELAY_TYPE18 == 2'b10) ? rxtx_bs18_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[19] = (C_RX_DELAY_TYPE19 == 2'b10) ? rxtx_bs19_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[20] = (C_RX_DELAY_TYPE20 == 2'b10) ? rxtx_bs20_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[21] = (C_RX_DELAY_TYPE21 == 2'b10) ? rxtx_bs21_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[22] = (C_RX_DELAY_TYPE22 == 2'b10) ? rxtx_bs22_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[23] = (C_RX_DELAY_TYPE23 == 2'b10) ? rxtx_bs23_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[24] = (C_RX_DELAY_TYPE24 == 2'b10) ? rxtx_bs24_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[25] = (C_RX_DELAY_TYPE25 == 2'b10) ? rxtx_bs25_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[26] = (C_RX_DELAY_TYPE26 == 2'b10) ? rxtx_bs26_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[27] = (C_RX_DELAY_TYPE27 == 2'b10) ? rxtx_bs27_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[28] = (C_RX_DELAY_TYPE28 == 2'b10) ? rxtx_bs28_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[29] = (C_RX_DELAY_TYPE29 == 2'b10) ? rxtx_bs29_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[30] = (C_RX_DELAY_TYPE30 == 2'b10) ? rxtx_bs30_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[31] = (C_RX_DELAY_TYPE31 == 2'b10) ? rxtx_bs31_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[32] = (C_RX_DELAY_TYPE32 == 2'b10) ? rxtx_bs32_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[33] = (C_RX_DELAY_TYPE33 == 2'b10) ? rxtx_bs33_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[34] = (C_RX_DELAY_TYPE34 == 2'b10) ? rxtx_bs34_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[35] = (C_RX_DELAY_TYPE35 == 2'b10) ? rxtx_bs35_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[36] = (C_RX_DELAY_TYPE36 == 2'b10) ? rxtx_bs36_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[37] = (C_RX_DELAY_TYPE37 == 2'b10) ? rxtx_bs37_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[38] = (C_RX_DELAY_TYPE38 == 2'b10) ? rxtx_bs38_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[39] = (C_RX_DELAY_TYPE39 == 2'b10) ? rxtx_bs39_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[40] = (C_RX_DELAY_TYPE40 == 2'b10) ? rxtx_bs40_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[41] = (C_RX_DELAY_TYPE41 == 2'b10) ? rxtx_bs41_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[42] = (C_RX_DELAY_TYPE42 == 2'b10) ? rxtx_bs42_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[43] = (C_RX_DELAY_TYPE43 == 2'b10) ? rxtx_bs43_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[44] = (C_RX_DELAY_TYPE44 == 2'b10) ? rxtx_bs44_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[45] = (C_RX_DELAY_TYPE45 == 2'b10) ? rxtx_bs45_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[46] = (C_RX_DELAY_TYPE46 == 2'b10) ? rxtx_bs46_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[47] = (C_RX_DELAY_TYPE47 == 2'b10) ? rxtx_bs47_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[48] = (C_RX_DELAY_TYPE48 == 2'b10) ? rxtx_bs48_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[49] = (C_RX_DELAY_TYPE49 == 2'b10) ? rxtx_bs49_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[50] = (C_RX_DELAY_TYPE50 == 2'b10) ? rxtx_bs50_rx_cntvaluein:9'b0;
    assign w_rxtx_rx_cntvaluein[51] = (C_RX_DELAY_TYPE51 == 2'b10) ? rxtx_bs51_rx_cntvaluein:9'b0;
   
    // Cnt value out
    wire [8:0] w_rxtx_rx_cntvalueout [51:0];
    assign rxtx_bs0_rx_cntvalueout   = (C_RX_DELAY_TYPE0 == 2'b10) ? w_rxtx_rx_cntvalueout[0]:9'b0;   
    assign rxtx_bs1_rx_cntvalueout   = (C_RX_DELAY_TYPE1 == 2'b10) ? w_rxtx_rx_cntvalueout[1]:9'b0;
    assign rxtx_bs2_rx_cntvalueout   = (C_RX_DELAY_TYPE2 == 2'b10) ? w_rxtx_rx_cntvalueout[2]:9'b0;
    assign rxtx_bs3_rx_cntvalueout   = (C_RX_DELAY_TYPE3 == 2'b10) ? w_rxtx_rx_cntvalueout[3]:9'b0;
    assign rxtx_bs4_rx_cntvalueout   = (C_RX_DELAY_TYPE4 == 2'b10) ? w_rxtx_rx_cntvalueout[4]:9'b0;
    assign rxtx_bs5_rx_cntvalueout   = (C_RX_DELAY_TYPE5 == 2'b10) ? w_rxtx_rx_cntvalueout[5]:9'b0;
    assign rxtx_bs6_rx_cntvalueout   = (C_RX_DELAY_TYPE6 == 2'b10) ? w_rxtx_rx_cntvalueout[6]:9'b0;
    assign rxtx_bs7_rx_cntvalueout   = (C_RX_DELAY_TYPE7 == 2'b10) ? w_rxtx_rx_cntvalueout[7]:9'b0;
    assign rxtx_bs8_rx_cntvalueout   = (C_RX_DELAY_TYPE8 == 2'b10) ? w_rxtx_rx_cntvalueout[8]:9'b0;
    assign rxtx_bs9_rx_cntvalueout   = (C_RX_DELAY_TYPE9 == 2'b10) ? w_rxtx_rx_cntvalueout[9]:9'b0;
    assign rxtx_bs10_rx_cntvalueout  = (C_RX_DELAY_TYPE10 == 2'b10) ? w_rxtx_rx_cntvalueout[10]:9'b0;
    assign rxtx_bs11_rx_cntvalueout  = (C_RX_DELAY_TYPE11 == 2'b10) ? w_rxtx_rx_cntvalueout[11]:9'b0;
    assign rxtx_bs12_rx_cntvalueout  = (C_RX_DELAY_TYPE12 == 2'b10) ? w_rxtx_rx_cntvalueout[12]:9'b0;
    assign rxtx_bs13_rx_cntvalueout  = (C_RX_DELAY_TYPE13 == 2'b10) ? w_rxtx_rx_cntvalueout[13]:9'b0;
    assign rxtx_bs14_rx_cntvalueout  = (C_RX_DELAY_TYPE14 == 2'b10) ? w_rxtx_rx_cntvalueout[14]:9'b0;
    assign rxtx_bs15_rx_cntvalueout  = (C_RX_DELAY_TYPE15 == 2'b10) ? w_rxtx_rx_cntvalueout[15]:9'b0;
    assign rxtx_bs16_rx_cntvalueout  = (C_RX_DELAY_TYPE16 == 2'b10) ? w_rxtx_rx_cntvalueout[16]:9'b0;
    assign rxtx_bs17_rx_cntvalueout  = (C_RX_DELAY_TYPE17 == 2'b10) ? w_rxtx_rx_cntvalueout[17]:9'b0;
    assign rxtx_bs18_rx_cntvalueout  = (C_RX_DELAY_TYPE18 == 2'b10) ? w_rxtx_rx_cntvalueout[18]:9'b0;
    assign rxtx_bs19_rx_cntvalueout  = (C_RX_DELAY_TYPE19 == 2'b10) ? w_rxtx_rx_cntvalueout[19]:9'b0;
    assign rxtx_bs20_rx_cntvalueout  = (C_RX_DELAY_TYPE20 == 2'b10) ? w_rxtx_rx_cntvalueout[20]:9'b0;
    assign rxtx_bs21_rx_cntvalueout  = (C_RX_DELAY_TYPE21 == 2'b10) ? w_rxtx_rx_cntvalueout[21]:9'b0;
    assign rxtx_bs22_rx_cntvalueout  = (C_RX_DELAY_TYPE22 == 2'b10) ? w_rxtx_rx_cntvalueout[22]:9'b0;
    assign rxtx_bs23_rx_cntvalueout  = (C_RX_DELAY_TYPE23 == 2'b10) ? w_rxtx_rx_cntvalueout[23]:9'b0;
    assign rxtx_bs24_rx_cntvalueout  = (C_RX_DELAY_TYPE24 == 2'b10) ? w_rxtx_rx_cntvalueout[24]:9'b0;
    assign rxtx_bs25_rx_cntvalueout  = (C_RX_DELAY_TYPE25 == 2'b10) ? w_rxtx_rx_cntvalueout[25]:9'b0;
    assign rxtx_bs26_rx_cntvalueout  = (C_RX_DELAY_TYPE26 == 2'b10) ? w_rxtx_rx_cntvalueout[26]:9'b0;
    assign rxtx_bs27_rx_cntvalueout  = (C_RX_DELAY_TYPE27 == 2'b10) ? w_rxtx_rx_cntvalueout[27]:9'b0;
    assign rxtx_bs28_rx_cntvalueout  = (C_RX_DELAY_TYPE28 == 2'b10) ? w_rxtx_rx_cntvalueout[28]:9'b0;
    assign rxtx_bs29_rx_cntvalueout  = (C_RX_DELAY_TYPE29 == 2'b10) ? w_rxtx_rx_cntvalueout[29]:9'b0;
    assign rxtx_bs30_rx_cntvalueout  = (C_RX_DELAY_TYPE30 == 2'b10) ? w_rxtx_rx_cntvalueout[30]:9'b0;
    assign rxtx_bs31_rx_cntvalueout  = (C_RX_DELAY_TYPE31 == 2'b10) ? w_rxtx_rx_cntvalueout[31]:9'b0;
    assign rxtx_bs32_rx_cntvalueout  = (C_RX_DELAY_TYPE32 == 2'b10) ? w_rxtx_rx_cntvalueout[32]:9'b0;
    assign rxtx_bs33_rx_cntvalueout  = (C_RX_DELAY_TYPE33 == 2'b10) ? w_rxtx_rx_cntvalueout[33]:9'b0;
    assign rxtx_bs34_rx_cntvalueout  = (C_RX_DELAY_TYPE34 == 2'b10) ? w_rxtx_rx_cntvalueout[34]:9'b0;
    assign rxtx_bs35_rx_cntvalueout  = (C_RX_DELAY_TYPE35 == 2'b10) ? w_rxtx_rx_cntvalueout[35]:9'b0;
    assign rxtx_bs36_rx_cntvalueout  = (C_RX_DELAY_TYPE36 == 2'b10) ? w_rxtx_rx_cntvalueout[36]:9'b0;
    assign rxtx_bs37_rx_cntvalueout  = (C_RX_DELAY_TYPE37 == 2'b10) ? w_rxtx_rx_cntvalueout[37]:9'b0;
    assign rxtx_bs38_rx_cntvalueout  = (C_RX_DELAY_TYPE38 == 2'b10) ? w_rxtx_rx_cntvalueout[38]:9'b0;
    assign rxtx_bs39_rx_cntvalueout  = (C_RX_DELAY_TYPE39 == 2'b10) ? w_rxtx_rx_cntvalueout[39]:9'b0;
    assign rxtx_bs40_rx_cntvalueout  = (C_RX_DELAY_TYPE40 == 2'b10) ? w_rxtx_rx_cntvalueout[40]:9'b0;
    assign rxtx_bs41_rx_cntvalueout  = (C_RX_DELAY_TYPE41 == 2'b10) ? w_rxtx_rx_cntvalueout[41]:9'b0;
    assign rxtx_bs42_rx_cntvalueout  = (C_RX_DELAY_TYPE42 == 2'b10) ? w_rxtx_rx_cntvalueout[42]:9'b0;
    assign rxtx_bs43_rx_cntvalueout  = (C_RX_DELAY_TYPE43 == 2'b10) ? w_rxtx_rx_cntvalueout[43]:9'b0;
    assign rxtx_bs44_rx_cntvalueout  = (C_RX_DELAY_TYPE44 == 2'b10) ? w_rxtx_rx_cntvalueout[44]:9'b0;
    assign rxtx_bs45_rx_cntvalueout  = (C_RX_DELAY_TYPE45 == 2'b10) ? w_rxtx_rx_cntvalueout[45]:9'b0;
    assign rxtx_bs46_rx_cntvalueout  = (C_RX_DELAY_TYPE46 == 2'b10) ? w_rxtx_rx_cntvalueout[46]:9'b0;
    assign rxtx_bs47_rx_cntvalueout  = (C_RX_DELAY_TYPE47 == 2'b10) ? w_rxtx_rx_cntvalueout[47]:9'b0;
    assign rxtx_bs48_rx_cntvalueout  = (C_RX_DELAY_TYPE48 == 2'b10) ? w_rxtx_rx_cntvalueout[48]:9'b0;
    assign rxtx_bs49_rx_cntvalueout  = (C_RX_DELAY_TYPE49 == 2'b10) ? w_rxtx_rx_cntvalueout[49]:9'b0;
    assign rxtx_bs50_rx_cntvalueout  = (C_RX_DELAY_TYPE50 == 2'b10) ? w_rxtx_rx_cntvalueout[50]:9'b0;
    assign rxtx_bs51_rx_cntvalueout  = (C_RX_DELAY_TYPE51 == 2'b10) ? w_rxtx_rx_cntvalueout[51]:9'b0;
   
      // Fifo Read Clock
   
   wire [51:0] w_rxtx_rx_fifo_rd_clk_in;
   assign w_rxtx_rx_fifo_rd_clk_in = { 
                               rxtx_bs51_rx_fifo_rd_clk_in,
                               rxtx_bs50_rx_fifo_rd_clk_in,
                               rxtx_bs49_rx_fifo_rd_clk_in,
                               rxtx_bs48_rx_fifo_rd_clk_in,
                               rxtx_bs47_rx_fifo_rd_clk_in,
                               rxtx_bs46_rx_fifo_rd_clk_in,
                               rxtx_bs45_rx_fifo_rd_clk_in,
                               rxtx_bs44_rx_fifo_rd_clk_in,
                               rxtx_bs43_rx_fifo_rd_clk_in,
                               rxtx_bs42_rx_fifo_rd_clk_in,
                               rxtx_bs41_rx_fifo_rd_clk_in,
                               rxtx_bs40_rx_fifo_rd_clk_in,
                               rxtx_bs39_rx_fifo_rd_clk_in,
                               rxtx_bs38_rx_fifo_rd_clk_in,
                               rxtx_bs37_rx_fifo_rd_clk_in,
                               rxtx_bs36_rx_fifo_rd_clk_in,
                               rxtx_bs35_rx_fifo_rd_clk_in,
                               rxtx_bs34_rx_fifo_rd_clk_in,
                               rxtx_bs33_rx_fifo_rd_clk_in,
                               rxtx_bs32_rx_fifo_rd_clk_in,
                               rxtx_bs31_rx_fifo_rd_clk_in,
                               rxtx_bs30_rx_fifo_rd_clk_in,
                               rxtx_bs29_rx_fifo_rd_clk_in,
                               rxtx_bs28_rx_fifo_rd_clk_in,
                               rxtx_bs27_rx_fifo_rd_clk_in,
                               rxtx_bs26_rx_fifo_rd_clk_in,
                               rxtx_bs25_rx_fifo_rd_clk_in,
                               rxtx_bs24_rx_fifo_rd_clk_in,
                               rxtx_bs23_rx_fifo_rd_clk_in,
                               rxtx_bs22_rx_fifo_rd_clk_in,
                               rxtx_bs21_rx_fifo_rd_clk_in,
                               rxtx_bs20_rx_fifo_rd_clk_in,
                               rxtx_bs19_rx_fifo_rd_clk_in,
                               rxtx_bs18_rx_fifo_rd_clk_in,
                               rxtx_bs17_rx_fifo_rd_clk_in,
                               rxtx_bs16_rx_fifo_rd_clk_in,
                               rxtx_bs15_rx_fifo_rd_clk_in,
                               rxtx_bs14_rx_fifo_rd_clk_in,
                               rxtx_bs13_rx_fifo_rd_clk_in,
                               rxtx_bs12_rx_fifo_rd_clk_in,
                               rxtx_bs11_rx_fifo_rd_clk_in,
                               rxtx_bs10_rx_fifo_rd_clk_in,
                               rxtx_bs9_rx_fifo_rd_clk_in,
                               rxtx_bs8_rx_fifo_rd_clk_in,
                               rxtx_bs7_rx_fifo_rd_clk_in,
                               rxtx_bs6_rx_fifo_rd_clk_in,
                               rxtx_bs5_rx_fifo_rd_clk_in,
                               rxtx_bs4_rx_fifo_rd_clk_in,
                               rxtx_bs3_rx_fifo_rd_clk_in,
                               rxtx_bs2_rx_fifo_rd_clk_in,
                               rxtx_bs1_rx_fifo_rd_clk_in,
                               rxtx_bs0_rx_fifo_rd_clk_in
                              };
   //
   wire [51:0] w_rxtx_rx_fifo_rd_en_in;
   assign w_rxtx_rx_fifo_rd_en_in = { 
                               rxtx_bs51_rx_fifo_rd_en_in,
                               rxtx_bs50_rx_fifo_rd_en_in,
                               rxtx_bs49_rx_fifo_rd_en_in,
                               rxtx_bs48_rx_fifo_rd_en_in,
                               rxtx_bs47_rx_fifo_rd_en_in,
                               rxtx_bs46_rx_fifo_rd_en_in,
                               rxtx_bs45_rx_fifo_rd_en_in,
                               rxtx_bs44_rx_fifo_rd_en_in,
                               rxtx_bs43_rx_fifo_rd_en_in,
                               rxtx_bs42_rx_fifo_rd_en_in,
                               rxtx_bs41_rx_fifo_rd_en_in,
                               rxtx_bs40_rx_fifo_rd_en_in,
                               rxtx_bs39_rx_fifo_rd_en_in,
                               rxtx_bs38_rx_fifo_rd_en_in,
                               rxtx_bs37_rx_fifo_rd_en_in,
                               rxtx_bs36_rx_fifo_rd_en_in,
                               rxtx_bs35_rx_fifo_rd_en_in,
                               rxtx_bs34_rx_fifo_rd_en_in,
                               rxtx_bs33_rx_fifo_rd_en_in,
                               rxtx_bs32_rx_fifo_rd_en_in,
                               rxtx_bs31_rx_fifo_rd_en_in,
                               rxtx_bs30_rx_fifo_rd_en_in,
                               rxtx_bs29_rx_fifo_rd_en_in,
                               rxtx_bs28_rx_fifo_rd_en_in,
                               rxtx_bs27_rx_fifo_rd_en_in,
                               rxtx_bs26_rx_fifo_rd_en_in,
                               rxtx_bs25_rx_fifo_rd_en_in,
                               rxtx_bs24_rx_fifo_rd_en_in,
                               rxtx_bs23_rx_fifo_rd_en_in,
                               rxtx_bs22_rx_fifo_rd_en_in,
                               rxtx_bs21_rx_fifo_rd_en_in,
                               rxtx_bs20_rx_fifo_rd_en_in,
                               rxtx_bs19_rx_fifo_rd_en_in,
                               rxtx_bs18_rx_fifo_rd_en_in,
                               rxtx_bs17_rx_fifo_rd_en_in,
                               rxtx_bs16_rx_fifo_rd_en_in,
                               rxtx_bs15_rx_fifo_rd_en_in,
                               rxtx_bs14_rx_fifo_rd_en_in,
                               rxtx_bs13_rx_fifo_rd_en_in,
                               rxtx_bs12_rx_fifo_rd_en_in,
                               rxtx_bs11_rx_fifo_rd_en_in,
                               rxtx_bs10_rx_fifo_rd_en_in,
                               rxtx_bs9_rx_fifo_rd_en_in,
                               rxtx_bs8_rx_fifo_rd_en_in,
                               rxtx_bs7_rx_fifo_rd_en_in,
                               rxtx_bs6_rx_fifo_rd_en_in,
                               rxtx_bs5_rx_fifo_rd_en_in,
                               rxtx_bs4_rx_fifo_rd_en_in,
                               rxtx_bs3_rx_fifo_rd_en_in,
                               rxtx_bs2_rx_fifo_rd_en_in,
                               rxtx_bs1_rx_fifo_rd_en_in,
                               rxtx_bs0_rx_fifo_rd_en_in
                              };
   // 
   wire [51:0] w_rxtx_rx_datain;
   assign w_rxtx_rx_datain = { 
                               rxtx_bs51_rx_datain,
                               rxtx_bs50_rx_datain,
                               rxtx_bs49_rx_datain,
                               rxtx_bs48_rx_datain,
                               rxtx_bs47_rx_datain,
                               rxtx_bs46_rx_datain,
                               rxtx_bs45_rx_datain,
                               rxtx_bs44_rx_datain,
                               rxtx_bs43_rx_datain,
                               rxtx_bs42_rx_datain,
                               rxtx_bs41_rx_datain,
                               rxtx_bs40_rx_datain,
                               rxtx_bs39_rx_datain,
                               rxtx_bs38_rx_datain,
                               rxtx_bs37_rx_datain,
                               rxtx_bs36_rx_datain,
                               rxtx_bs35_rx_datain,
                               rxtx_bs34_rx_datain,
                               rxtx_bs33_rx_datain,
                               rxtx_bs32_rx_datain,
                               rxtx_bs31_rx_datain,
                               rxtx_bs30_rx_datain,
                               rxtx_bs29_rx_datain,
                               rxtx_bs28_rx_datain,
                               rxtx_bs27_rx_datain,
                               rxtx_bs26_rx_datain,
                               rxtx_bs25_rx_datain,
                               rxtx_bs24_rx_datain,
                               rxtx_bs23_rx_datain,
                               rxtx_bs22_rx_datain,
                               rxtx_bs21_rx_datain,
                               rxtx_bs20_rx_datain,
                               rxtx_bs19_rx_datain,
                               rxtx_bs18_rx_datain,
                               rxtx_bs17_rx_datain,
                               rxtx_bs16_rx_datain,
                               rxtx_bs15_rx_datain,
                               rxtx_bs14_rx_datain,
                               rxtx_bs13_rx_datain,
                               rxtx_bs12_rx_datain,
                               rxtx_bs11_rx_datain,
                               rxtx_bs10_rx_datain,
                               rxtx_bs9_rx_datain,
                               rxtx_bs8_rx_datain,
                               rxtx_bs7_rx_datain,
                               rxtx_bs6_rx_datain,
                               rxtx_bs5_rx_datain,
                               rxtx_bs4_rx_datain,
                               rxtx_bs3_rx_datain,
                               rxtx_bs2_rx_datain,
                               rxtx_bs1_rx_datain,
                               rxtx_bs0_rx_datain };
   
   wire [51:0] w_rxtx_rx_fifo_empty_out;
   assign rxtx_bs51_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[51];
   assign rxtx_bs50_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[50];
   assign rxtx_bs49_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[49];
   assign rxtx_bs48_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[48];
   assign rxtx_bs47_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[47];
   assign rxtx_bs46_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[46];
   assign rxtx_bs45_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[45];
   assign rxtx_bs44_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[44];
   assign rxtx_bs43_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[43];
   assign rxtx_bs42_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[42];
   assign rxtx_bs41_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[41];
   assign rxtx_bs40_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[40];
   assign rxtx_bs39_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[39];
   assign rxtx_bs38_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[38];
   assign rxtx_bs37_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[37];
   assign rxtx_bs36_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[36];
   assign rxtx_bs35_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[35];
   assign rxtx_bs34_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[34];
   assign rxtx_bs33_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[33];
   assign rxtx_bs32_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[32];
   assign rxtx_bs31_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[31];
   assign rxtx_bs30_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[30];
   assign rxtx_bs29_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[29];
   assign rxtx_bs28_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[28];
   assign rxtx_bs27_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[27];
   assign rxtx_bs26_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[26];
   assign rxtx_bs25_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[25];
   assign rxtx_bs24_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[24];
   assign rxtx_bs23_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[23];
   assign rxtx_bs22_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[22];
   assign rxtx_bs21_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[21];
   assign rxtx_bs20_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[20];
   assign rxtx_bs19_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[19];
   assign rxtx_bs18_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[18];
   assign rxtx_bs17_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[17];
   assign rxtx_bs16_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[16];
   assign rxtx_bs15_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[15];
   assign rxtx_bs14_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[14];
   assign rxtx_bs13_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[13];
   assign rxtx_bs12_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[12];
   assign rxtx_bs11_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[11];
   assign rxtx_bs10_rx_fifo_empty_out = w_rxtx_rx_fifo_empty_out[10];
   assign rxtx_bs9_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[9];
   assign rxtx_bs8_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[8];
   assign rxtx_bs7_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[7];
   assign rxtx_bs6_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[6];
   assign rxtx_bs5_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[5];
   assign rxtx_bs4_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[4];
   assign rxtx_bs3_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[3];
   assign rxtx_bs2_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[2];
   assign rxtx_bs1_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[1];
   assign rxtx_bs0_rx_fifo_empty_out  = w_rxtx_rx_fifo_empty_out[0];
   
   // Fifo Write Clock Signals
   wire [51:0] w_rxtx_rx_fifo_wrclk_out;
   assign rxtx_bs0_rx_fifo_wrclk_out  = (C_RX_STROBE_EN[0]  && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[0]:1'b0;
   assign rxtx_bs6_rx_fifo_wrclk_out  = (C_RX_STROBE_EN[2]  && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[6]:1'b0; 
   assign rxtx_bs13_rx_fifo_wrclk_out = (C_RX_STROBE_EN[4]  && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[13]:1'b0;
   assign rxtx_bs19_rx_fifo_wrclk_out = (C_RX_STROBE_EN[6]  && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[19]:1'b0; 
   assign rxtx_bs26_rx_fifo_wrclk_out = (C_RX_STROBE_EN[8]  && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[26]:1'b0;
   assign rxtx_bs32_rx_fifo_wrclk_out = (C_RX_STROBE_EN[10] && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[32]:1'b0;
   assign rxtx_bs39_rx_fifo_wrclk_out = (C_RX_STROBE_EN[12] && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[39]:1'b0;
   assign rxtx_bs45_rx_fifo_wrclk_out = (C_RX_STROBE_EN[14] && C_FIFO_WR_CLK_EN)? w_rxtx_rx_fifo_wrclk_out[45]:1'b0;
   
   // RX Bitslice data output
   wire [7:0] w_rxtx_q_int[51:0];   // Data output to bitslip, if not this gets mapped to rxtx_q
   wire [C_SERIALIZATION_FACTOR -1 : 0] w_rxtx_q [51:0];
   assign rxtx_bs0_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[0][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[0][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs1_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[1][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[1][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs2_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[2][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[2][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs3_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[3][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[3][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs4_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[4][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[4][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs5_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[5][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[5][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs6_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[6][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[6][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs7_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[7][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[7][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs8_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[8][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[8][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs9_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rxtx_q[9][C_SERIALIZATION_FACTOR -1 :0] : w_rxtx_q_int[9][C_SERIALIZATION_FACTOR -1 :0];
   assign rxtx_bs10_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[10][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[10][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs11_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[11][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[11][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs12_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[12][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[12][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs13_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[13][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[13][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs14_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[14][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[14][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs15_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[15][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[15][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs16_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[16][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[16][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs17_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[17][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[17][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs18_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[18][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[18][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs19_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[19][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[19][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs20_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[20][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[20][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs21_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[21][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[21][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs22_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[22][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[22][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs23_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[23][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[23][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs24_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[24][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[24][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs25_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[25][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[25][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs26_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[26][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[26][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs27_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[27][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[27][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs28_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[28][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[28][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs29_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[29][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[29][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs30_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[30][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[30][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs31_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[31][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[31][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs32_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[32][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[32][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs33_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[33][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[33][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs34_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[34][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[34][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs35_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[35][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[35][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs36_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[36][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[36][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs37_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[37][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[37][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs38_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[38][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[38][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs39_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[39][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[39][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs40_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[40][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[40][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs41_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[41][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[41][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs42_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[42][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[42][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs43_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[43][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[43][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs44_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[44][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[44][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs45_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[45][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[45][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs46_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[46][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[46][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs47_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[47][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[47][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs48_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[48][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[48][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs49_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[49][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[49][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs50_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[50][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[50][C_SERIALIZATION_FACTOR -1 :0]; 
   assign rxtx_bs51_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rxtx_q[51][C_SERIALIZATION_FACTOR -1:0]: w_rxtx_q_int[51][C_SERIALIZATION_FACTOR -1 :0]; 
   
   // Data outpt from RX bbitslice
   
   
      // Bitslip
   // Actual bitslip mode  
   localparam C_BITSLIP_MODE_ACT = (C_BITSLIP_MODE == "SLIP_PER_BIT") ? "Slip" : (C_BITSLIP_MODE == "SLIP_BY_VAL") ? "Nmbr" : (C_BITSLIP_MODE == "SLIP_BY_COMP") ? "Comp" : "Fstc";
   // Actual bitslip val   
   localparam [2:0] C_BITSLIP_VAL_ACT  = (C_BITSLIP_MODE == "SLIP_BY_VAL") ? C_BITSLIP_VAL[2:0] : 3'b001;
   // Actual bitslip comp val
   localparam [C_SERIALIZATION_FACTOR -1 :0] C_BITSLIP_COMP_VAL_ACT = (C_SERIALIZATION_FACTOR == 8) ? C_BITSLIP_VAL : C_BITSLIP_VAL[3:0];
   
   
   // Bitslip error
   wire [51:0] 			     w_rxtx_bitslip_error_out;
   assign rxtx_bs51_bitslip_error_out  =  w_rxtx_bitslip_error_out[51];
   assign rxtx_bs50_bitslip_error_out  =  w_rxtx_bitslip_error_out[50];
   assign rxtx_bs49_bitslip_error_out  =  w_rxtx_bitslip_error_out[49];
   assign rxtx_bs48_bitslip_error_out  =  w_rxtx_bitslip_error_out[48];
   assign rxtx_bs47_bitslip_error_out  =  w_rxtx_bitslip_error_out[47];
   assign rxtx_bs46_bitslip_error_out  =  w_rxtx_bitslip_error_out[46];
   assign rxtx_bs45_bitslip_error_out  =  w_rxtx_bitslip_error_out[45];
   assign rxtx_bs44_bitslip_error_out  =  w_rxtx_bitslip_error_out[44];
   assign rxtx_bs43_bitslip_error_out  =  w_rxtx_bitslip_error_out[43];
   assign rxtx_bs42_bitslip_error_out  =  w_rxtx_bitslip_error_out[42];
   assign rxtx_bs41_bitslip_error_out  =  w_rxtx_bitslip_error_out[41];
   assign rxtx_bs40_bitslip_error_out  =  w_rxtx_bitslip_error_out[40];
   assign rxtx_bs39_bitslip_error_out  =  w_rxtx_bitslip_error_out[39];
   assign rxtx_bs38_bitslip_error_out  =  w_rxtx_bitslip_error_out[38];
   assign rxtx_bs37_bitslip_error_out  =  w_rxtx_bitslip_error_out[37];
   assign rxtx_bs36_bitslip_error_out  =  w_rxtx_bitslip_error_out[36];
   assign rxtx_bs35_bitslip_error_out  =  w_rxtx_bitslip_error_out[35];
   assign rxtx_bs34_bitslip_error_out  =  w_rxtx_bitslip_error_out[34];
   assign rxtx_bs33_bitslip_error_out  =  w_rxtx_bitslip_error_out[33];
   assign rxtx_bs32_bitslip_error_out  =  w_rxtx_bitslip_error_out[32];
   assign rxtx_bs31_bitslip_error_out  =  w_rxtx_bitslip_error_out[31];
   assign rxtx_bs30_bitslip_error_out  =  w_rxtx_bitslip_error_out[30];      
   assign rxtx_bs29_bitslip_error_out  =  w_rxtx_bitslip_error_out[29];
   assign rxtx_bs28_bitslip_error_out  =  w_rxtx_bitslip_error_out[28];
   assign rxtx_bs27_bitslip_error_out  =  w_rxtx_bitslip_error_out[27];
   assign rxtx_bs26_bitslip_error_out  =  w_rxtx_bitslip_error_out[26];
   assign rxtx_bs25_bitslip_error_out  =  w_rxtx_bitslip_error_out[25];
   assign rxtx_bs24_bitslip_error_out  =  w_rxtx_bitslip_error_out[24];
   assign rxtx_bs23_bitslip_error_out  =  w_rxtx_bitslip_error_out[23];
   assign rxtx_bs22_bitslip_error_out  =  w_rxtx_bitslip_error_out[22];
   assign rxtx_bs21_bitslip_error_out  =  w_rxtx_bitslip_error_out[21];
   assign rxtx_bs20_bitslip_error_out  =  w_rxtx_bitslip_error_out[20];      
   assign rxtx_bs19_bitslip_error_out  =  w_rxtx_bitslip_error_out[19];
   assign rxtx_bs18_bitslip_error_out  =  w_rxtx_bitslip_error_out[18];
   assign rxtx_bs17_bitslip_error_out  =  w_rxtx_bitslip_error_out[17];
   assign rxtx_bs16_bitslip_error_out  =  w_rxtx_bitslip_error_out[16];
   assign rxtx_bs15_bitslip_error_out  =  w_rxtx_bitslip_error_out[15];
   assign rxtx_bs14_bitslip_error_out  =  w_rxtx_bitslip_error_out[14];
   assign rxtx_bs13_bitslip_error_out  =  w_rxtx_bitslip_error_out[13];
   assign rxtx_bs12_bitslip_error_out  =  w_rxtx_bitslip_error_out[12];
   assign rxtx_bs11_bitslip_error_out  =  w_rxtx_bitslip_error_out[11];
   assign rxtx_bs10_bitslip_error_out  =  w_rxtx_bitslip_error_out[10];      
   assign rxtx_bs9_bitslip_error_out  =  w_rxtx_bitslip_error_out[9];
   assign rxtx_bs8_bitslip_error_out  =  w_rxtx_bitslip_error_out[8];
   assign rxtx_bs7_bitslip_error_out  =  w_rxtx_bitslip_error_out[7];
   assign rxtx_bs6_bitslip_error_out  =  w_rxtx_bitslip_error_out[6];
   assign rxtx_bs5_bitslip_error_out  =  w_rxtx_bitslip_error_out[5];
   assign rxtx_bs4_bitslip_error_out  =  w_rxtx_bitslip_error_out[4];
   assign rxtx_bs3_bitslip_error_out  =  w_rxtx_bitslip_error_out[3];
   assign rxtx_bs2_bitslip_error_out  =  w_rxtx_bitslip_error_out[2];
   assign rxtx_bs1_bitslip_error_out  =  w_rxtx_bitslip_error_out[1];
   assign rxtx_bs0_bitslip_error_out  =  w_rxtx_bitslip_error_out[0];         
   
      
    
   // Delay type
   wire [51:0] w_delay_type1;
   assign w_delay_type1[0]    = (C_TX_DELAY_TYPE0 == 1 || C_TX_DELAY_TYPE0  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[1]	   = (C_TX_DELAY_TYPE1 == 1 || C_TX_DELAY_TYPE1  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[2]	   = (C_TX_DELAY_TYPE2 == 1 || C_TX_DELAY_TYPE2  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[3]	   = (C_TX_DELAY_TYPE3 == 1 || C_TX_DELAY_TYPE3  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[4]	   = (C_TX_DELAY_TYPE4 == 1 || C_TX_DELAY_TYPE4  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[5]	   = (C_TX_DELAY_TYPE5 == 1 || C_TX_DELAY_TYPE5  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[6]	   = (C_TX_DELAY_TYPE6 == 1 || C_TX_DELAY_TYPE6  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[7]	   = (C_TX_DELAY_TYPE7 == 1 || C_TX_DELAY_TYPE7  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[8]	   = (C_TX_DELAY_TYPE8 == 1 || C_TX_DELAY_TYPE8  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[9]	   = (C_TX_DELAY_TYPE9 == 1 || C_TX_DELAY_TYPE9  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[10]   = (C_TX_DELAY_TYPE10 == 1 || C_TX_DELAY_TYPE10 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[11]   = (C_TX_DELAY_TYPE11 == 1 || C_TX_DELAY_TYPE11 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[12]   = (C_TX_DELAY_TYPE12 == 1 || C_TX_DELAY_TYPE12 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[13]   = (C_TX_DELAY_TYPE13 == 1 || C_TX_DELAY_TYPE13 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[14]   = (C_TX_DELAY_TYPE14 == 1 || C_TX_DELAY_TYPE14 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[15]   = (C_TX_DELAY_TYPE15 == 1 || C_TX_DELAY_TYPE15 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[16]   = (C_TX_DELAY_TYPE16 == 1 || C_TX_DELAY_TYPE16 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[17]   = (C_TX_DELAY_TYPE17 == 1 || C_TX_DELAY_TYPE17 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[18]   = (C_TX_DELAY_TYPE18 == 1 || C_TX_DELAY_TYPE18 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[19]   = (C_TX_DELAY_TYPE19 == 1 || C_TX_DELAY_TYPE19 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[20]   = (C_TX_DELAY_TYPE20 == 1 || C_TX_DELAY_TYPE20 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[21]   = (C_TX_DELAY_TYPE21 == 1 || C_TX_DELAY_TYPE21 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[22]   = (C_TX_DELAY_TYPE22 == 1 || C_TX_DELAY_TYPE22 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[23]   = (C_TX_DELAY_TYPE23 == 1 || C_TX_DELAY_TYPE23 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[24]   = (C_TX_DELAY_TYPE24 == 1 || C_TX_DELAY_TYPE24 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[25]   = (C_TX_DELAY_TYPE25 == 1 || C_TX_DELAY_TYPE25 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[26]   = (C_TX_DELAY_TYPE26 == 1 || C_TX_DELAY_TYPE26 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[27]   = (C_TX_DELAY_TYPE27 == 1 || C_TX_DELAY_TYPE27 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[28]   = (C_TX_DELAY_TYPE28 == 1 || C_TX_DELAY_TYPE28 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[29]   = (C_TX_DELAY_TYPE29 == 1 || C_TX_DELAY_TYPE29 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[30]   = (C_TX_DELAY_TYPE30 == 1 || C_TX_DELAY_TYPE30 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[31]   = (C_TX_DELAY_TYPE31 == 1 || C_TX_DELAY_TYPE31 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[32]   = (C_TX_DELAY_TYPE32 == 1 || C_TX_DELAY_TYPE32 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[33]   = (C_TX_DELAY_TYPE33 == 1 || C_TX_DELAY_TYPE33 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[34]   = (C_TX_DELAY_TYPE34 == 1 || C_TX_DELAY_TYPE34 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[35]   = (C_TX_DELAY_TYPE35 == 1 || C_TX_DELAY_TYPE35 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[36]   = (C_TX_DELAY_TYPE36 == 1 || C_TX_DELAY_TYPE36 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[37]   = (C_TX_DELAY_TYPE37 == 1 || C_TX_DELAY_TYPE37 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[38]   = (C_TX_DELAY_TYPE38 == 1 || C_TX_DELAY_TYPE38 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[39]   = (C_TX_DELAY_TYPE39 == 1 || C_TX_DELAY_TYPE39 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[40]   = (C_TX_DELAY_TYPE40 == 1 || C_TX_DELAY_TYPE40 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[41]   = (C_TX_DELAY_TYPE41 == 1 || C_TX_DELAY_TYPE41 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[42]   = (C_TX_DELAY_TYPE42 == 1 || C_TX_DELAY_TYPE42 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[43]   = (C_TX_DELAY_TYPE43 == 1 || C_TX_DELAY_TYPE43 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[44]   = (C_TX_DELAY_TYPE44 == 1 || C_TX_DELAY_TYPE44 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[45]   = (C_TX_DELAY_TYPE45 == 1 || C_TX_DELAY_TYPE45 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[46]   = (C_TX_DELAY_TYPE46 == 1 || C_TX_DELAY_TYPE46 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[47]   = (C_TX_DELAY_TYPE47 == 1 || C_TX_DELAY_TYPE47 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[48]   = (C_TX_DELAY_TYPE48 == 1 || C_TX_DELAY_TYPE48 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[49]   = (C_TX_DELAY_TYPE49 == 1 || C_TX_DELAY_TYPE49 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[50]   = (C_TX_DELAY_TYPE50 == 1 || C_TX_DELAY_TYPE50 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type1[51]   = (C_TX_DELAY_TYPE51 == 1 || C_TX_DELAY_TYPE51 == 2'b10) ? 1'b1:1'b0;
   
   // vectorising EN_VTC, for VAR_LOAD and VARIABLE, tx_bs<num>_en_vtc is used and for FIXED assigned to 1'b1 or VCC
   wire [51:0] w_rxtx_tx_en_vtc_in; 
   assign w_rxtx_tx_en_vtc_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type1[0]) ? rxtx_bs0_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type1[1]) ? rxtx_bs1_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type1[2]) ? rxtx_bs2_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type1[3]) ? rxtx_bs3_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type1[4]) ? rxtx_bs4_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type1[5]) ? rxtx_bs5_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type1[6]) ? rxtx_bs6_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type1[7]) ? rxtx_bs7_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[8]  = !rst_seq_done ? 1'b1 : (w_delay_type1[8]) ? rxtx_bs8_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[9]  = !rst_seq_done ? 1'b1 : (w_delay_type1[9]) ? rxtx_bs9_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[10] = !rst_seq_done ? 1'b1 : (w_delay_type1[10]) ? rxtx_bs10_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[11] = !rst_seq_done ? 1'b1 : (w_delay_type1[11]) ? rxtx_bs11_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[12] = !rst_seq_done ? 1'b1 : (w_delay_type1[12]) ? rxtx_bs12_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[13] = !rst_seq_done ? 1'b1 : (w_delay_type1[13]) ? rxtx_bs13_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[14] = !rst_seq_done ? 1'b1 : (w_delay_type1[14]) ? rxtx_bs14_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[15] = !rst_seq_done ? 1'b1 : (w_delay_type1[15]) ? rxtx_bs15_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[16] = !rst_seq_done ? 1'b1 : (w_delay_type1[16]) ? rxtx_bs16_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[17] = !rst_seq_done ? 1'b1 : (w_delay_type1[17]) ? rxtx_bs17_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[18] = !rst_seq_done ? 1'b1 : (w_delay_type1[18]) ? rxtx_bs18_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[19] = !rst_seq_done ? 1'b1 : (w_delay_type1[19]) ? rxtx_bs19_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[20] = !rst_seq_done ? 1'b1 : (w_delay_type1[20]) ? rxtx_bs20_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[21] = !rst_seq_done ? 1'b1 : (w_delay_type1[21]) ? rxtx_bs21_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[22] = !rst_seq_done ? 1'b1 : (w_delay_type1[22]) ? rxtx_bs22_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[23] = !rst_seq_done ? 1'b1 : (w_delay_type1[23]) ? rxtx_bs23_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[24] = !rst_seq_done ? 1'b1 : (w_delay_type1[24]) ? rxtx_bs24_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[25] = !rst_seq_done ? 1'b1 : (w_delay_type1[25]) ? rxtx_bs25_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[26] = !rst_seq_done ? 1'b1 : (w_delay_type1[26]) ? rxtx_bs26_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[27] = !rst_seq_done ? 1'b1 : (w_delay_type1[27]) ? rxtx_bs27_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[28] = !rst_seq_done ? 1'b1 : (w_delay_type1[28]) ? rxtx_bs28_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[29] = !rst_seq_done ? 1'b1 : (w_delay_type1[29]) ? rxtx_bs29_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[30] = !rst_seq_done ? 1'b1 : (w_delay_type1[30]) ? rxtx_bs30_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[31] = !rst_seq_done ? 1'b1 : (w_delay_type1[31]) ? rxtx_bs31_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[32] = !rst_seq_done ? 1'b1 : (w_delay_type1[32]) ? rxtx_bs32_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[33] = !rst_seq_done ? 1'b1 : (w_delay_type1[33]) ? rxtx_bs33_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[34] = !rst_seq_done ? 1'b1 : (w_delay_type1[34]) ? rxtx_bs34_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[35] = !rst_seq_done ? 1'b1 : (w_delay_type1[35]) ? rxtx_bs35_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[36] = !rst_seq_done ? 1'b1 : (w_delay_type1[36]) ? rxtx_bs36_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[37] = !rst_seq_done ? 1'b1 : (w_delay_type1[37]) ? rxtx_bs37_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[38] = !rst_seq_done ? 1'b1 : (w_delay_type1[38]) ? rxtx_bs38_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[39] = !rst_seq_done ? 1'b1 : (w_delay_type1[39]) ? rxtx_bs39_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[40] = !rst_seq_done ? 1'b1 : (w_delay_type1[40]) ? rxtx_bs40_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[41] = !rst_seq_done ? 1'b1 : (w_delay_type1[41]) ? rxtx_bs41_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[42] = !rst_seq_done ? 1'b1 : (w_delay_type1[42]) ? rxtx_bs42_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[43] = !rst_seq_done ? 1'b1 : (w_delay_type1[43]) ? rxtx_bs43_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[44] = !rst_seq_done ? 1'b1 : (w_delay_type1[44]) ? rxtx_bs44_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[45] = !rst_seq_done ? 1'b1 : (w_delay_type1[45]) ? rxtx_bs45_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[46] = !rst_seq_done ? 1'b1 : (w_delay_type1[46]) ? rxtx_bs46_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[47] = !rst_seq_done ? 1'b1 : (w_delay_type1[47]) ? rxtx_bs47_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[48] = !rst_seq_done ? 1'b1 : (w_delay_type1[48]) ? rxtx_bs48_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[49] = !rst_seq_done ? 1'b1 : (w_delay_type1[49]) ? rxtx_bs49_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[50] = !rst_seq_done ? 1'b1 : (w_delay_type1[50]) ? rxtx_bs50_tx_en_vtc_in:1'b1;
   assign w_rxtx_tx_en_vtc_in[51] = !rst_seq_done ? 1'b1 : (w_delay_type1[51]) ? rxtx_bs51_tx_en_vtc_in:1'b1;
   
   // Increment count value for the delays, available only for VARIABLE or  VAR_LOAD					   
   wire [51:0] w_rxtx_tx_inc_in;
   assign w_rxtx_tx_inc_in[0]  = (w_delay_type1[0]) ? rxtx_bs0_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[1]  = (w_delay_type1[1]) ? rxtx_bs1_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[2]  = (w_delay_type1[2]) ? rxtx_bs2_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[3]  = (w_delay_type1[3]) ? rxtx_bs3_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[4]  = (w_delay_type1[4]) ? rxtx_bs4_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[5]  = (w_delay_type1[5]) ? rxtx_bs5_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[6]  = (w_delay_type1[6]) ? rxtx_bs6_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[7]  = (w_delay_type1[7]) ? rxtx_bs7_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[8]  = (w_delay_type1[8]) ? rxtx_bs8_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[9]  = (w_delay_type1[9]) ? rxtx_bs9_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[10] = (w_delay_type1[10]) ? rxtx_bs10_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[11] = (w_delay_type1[11]) ? rxtx_bs11_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[12] = (w_delay_type1[12]) ? rxtx_bs12_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[13] = (w_delay_type1[13]) ? rxtx_bs13_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[14] = (w_delay_type1[14]) ? rxtx_bs14_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[15] = (w_delay_type1[15]) ? rxtx_bs15_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[16] = (w_delay_type1[16]) ? rxtx_bs16_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[17] = (w_delay_type1[17]) ? rxtx_bs17_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[18] = (w_delay_type1[18]) ? rxtx_bs18_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[19] = (w_delay_type1[19]) ? rxtx_bs19_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[20] = (w_delay_type1[20]) ? rxtx_bs20_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[21] = (w_delay_type1[21]) ? rxtx_bs21_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[22] = (w_delay_type1[22]) ? rxtx_bs22_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[23] = (w_delay_type1[23]) ? rxtx_bs23_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[24] = (w_delay_type1[24]) ? rxtx_bs24_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[25] = (w_delay_type1[25]) ? rxtx_bs25_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[26] = (w_delay_type1[26]) ? rxtx_bs26_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[27] = (w_delay_type1[27]) ? rxtx_bs27_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[28] = (w_delay_type1[28]) ? rxtx_bs28_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[29] = (w_delay_type1[29]) ? rxtx_bs29_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[30] = (w_delay_type1[30]) ? rxtx_bs30_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[31] = (w_delay_type1[31]) ? rxtx_bs31_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[32] = (w_delay_type1[32]) ? rxtx_bs32_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[33] = (w_delay_type1[33]) ? rxtx_bs33_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[34] = (w_delay_type1[34]) ? rxtx_bs34_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[35] = (w_delay_type1[35]) ? rxtx_bs35_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[36] = (w_delay_type1[36]) ? rxtx_bs36_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[37] = (w_delay_type1[37]) ? rxtx_bs37_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[38] = (w_delay_type1[38]) ? rxtx_bs38_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[39] = (w_delay_type1[39]) ? rxtx_bs39_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[40] = (w_delay_type1[40]) ? rxtx_bs40_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[41] = (w_delay_type1[41]) ? rxtx_bs41_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[42] = (w_delay_type1[42]) ? rxtx_bs42_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[43] = (w_delay_type1[43]) ? rxtx_bs43_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[44] = (w_delay_type1[44]) ? rxtx_bs44_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[45] = (w_delay_type1[45]) ? rxtx_bs45_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[46] = (w_delay_type1[46]) ? rxtx_bs46_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[47] = (w_delay_type1[47]) ? rxtx_bs47_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[48] = (w_delay_type1[48]) ? rxtx_bs48_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[49] = (w_delay_type1[49]) ? rxtx_bs49_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[50] = (w_delay_type1[50]) ? rxtx_bs50_tx_inc_in:1'b0;
   assign w_rxtx_tx_inc_in[51] = (w_delay_type1[51]) ? rxtx_bs51_tx_inc_in:1'b0;
   
   // Load value for the delay, Applicable only when DELAY_TYPE is VARIABLE or  VARLOAD
   wire [51:0] w_rxtx_tx_load_in;
   assign w_rxtx_tx_load_in[0]  = (w_delay_type1[0]) ? rxtx_bs0_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[1]  = (w_delay_type1[1]) ? rxtx_bs1_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[2]  = (w_delay_type1[2]) ? rxtx_bs2_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[3]  = (w_delay_type1[3]) ? rxtx_bs3_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[4]  = (w_delay_type1[4]) ? rxtx_bs4_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[5]  = (w_delay_type1[5]) ? rxtx_bs5_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[6]  = (w_delay_type1[6]) ? rxtx_bs6_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[7]  = (w_delay_type1[7]) ? rxtx_bs7_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[8]  = (w_delay_type1[8]) ? rxtx_bs8_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[9]  = (w_delay_type1[9]) ? rxtx_bs9_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[10] = (w_delay_type1[10]) ? rxtx_bs10_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[11] = (w_delay_type1[11]) ? rxtx_bs11_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[12] = (w_delay_type1[12]) ? rxtx_bs12_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[13] = (w_delay_type1[13]) ? rxtx_bs13_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[14] = (w_delay_type1[14]) ? rxtx_bs14_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[15] = (w_delay_type1[15]) ? rxtx_bs15_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[16] = (w_delay_type1[16]) ? rxtx_bs16_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[17] = (w_delay_type1[17]) ? rxtx_bs17_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[18] = (w_delay_type1[18]) ? rxtx_bs18_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[19] = (w_delay_type1[19]) ? rxtx_bs19_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[20] = (w_delay_type1[20]) ? rxtx_bs20_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[21] = (w_delay_type1[21]) ? rxtx_bs21_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[22] = (w_delay_type1[22]) ? rxtx_bs22_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[23] = (w_delay_type1[23]) ? rxtx_bs23_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[24] = (w_delay_type1[24]) ? rxtx_bs24_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[25] = (w_delay_type1[25]) ? rxtx_bs25_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[26] = (w_delay_type1[26]) ? rxtx_bs26_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[27] = (w_delay_type1[27]) ? rxtx_bs27_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[28] = (w_delay_type1[28]) ? rxtx_bs28_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[29] = (w_delay_type1[29]) ? rxtx_bs29_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[30] = (w_delay_type1[30]) ? rxtx_bs30_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[31] = (w_delay_type1[31]) ? rxtx_bs31_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[32] = (w_delay_type1[32]) ? rxtx_bs32_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[33] = (w_delay_type1[33]) ? rxtx_bs33_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[34] = (w_delay_type1[34]) ? rxtx_bs34_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[35] = (w_delay_type1[35]) ? rxtx_bs35_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[36] = (w_delay_type1[36]) ? rxtx_bs36_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[37] = (w_delay_type1[37]) ? rxtx_bs37_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[38] = (w_delay_type1[38]) ? rxtx_bs38_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[39] = (w_delay_type1[39]) ? rxtx_bs39_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[40] = (w_delay_type1[40]) ? rxtx_bs40_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[41] = (w_delay_type1[41]) ? rxtx_bs41_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[42] = (w_delay_type1[42]) ? rxtx_bs42_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[43] = (w_delay_type1[43]) ? rxtx_bs43_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[44] = (w_delay_type1[44]) ? rxtx_bs44_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[45] = (w_delay_type1[45]) ? rxtx_bs45_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[46] = (w_delay_type1[46]) ? rxtx_bs46_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[47] = (w_delay_type1[47]) ? rxtx_bs47_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[48] = (w_delay_type1[48]) ? rxtx_bs48_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[49] = (w_delay_type1[49]) ? rxtx_bs49_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[50] = (w_delay_type1[50]) ? rxtx_bs50_tx_load_in:1'b0;
   assign w_rxtx_tx_load_in[51] = (w_delay_type1[51]) ? rxtx_bs51_tx_load_in:1'b0;
   // CE
   wire [51:0] w_rxtx_tx_ce_in; 
   assign w_rxtx_tx_ce_in[0]  = (w_delay_type1[0]) ? rxtx_bs0_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[1]  = (w_delay_type1[1]) ? rxtx_bs1_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[2]  = (w_delay_type1[2]) ? rxtx_bs2_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[3]  = (w_delay_type1[3]) ? rxtx_bs3_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[4]  = (w_delay_type1[4]) ? rxtx_bs4_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[5]  = (w_delay_type1[5]) ? rxtx_bs5_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[6]  = (w_delay_type1[6]) ? rxtx_bs6_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[7]  = (w_delay_type1[7]) ? rxtx_bs7_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[8]  = (w_delay_type1[8]) ? rxtx_bs8_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[9]  = (w_delay_type1[9]) ? rxtx_bs9_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[10] = (w_delay_type1[10]) ? rxtx_bs10_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[11] = (w_delay_type1[11]) ? rxtx_bs11_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[12] = (w_delay_type1[12]) ? rxtx_bs12_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[13] = (w_delay_type1[13]) ? rxtx_bs13_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[14] = (w_delay_type1[14]) ? rxtx_bs14_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[15] = (w_delay_type1[15]) ? rxtx_bs15_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[16] = (w_delay_type1[16]) ? rxtx_bs16_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[17] = (w_delay_type1[17]) ? rxtx_bs17_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[18] = (w_delay_type1[18]) ? rxtx_bs18_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[19] = (w_delay_type1[19]) ? rxtx_bs19_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[20] = (w_delay_type1[20]) ? rxtx_bs20_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[21] = (w_delay_type1[21]) ? rxtx_bs21_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[22] = (w_delay_type1[22]) ? rxtx_bs22_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[23] = (w_delay_type1[23]) ? rxtx_bs23_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[24] = (w_delay_type1[24]) ? rxtx_bs24_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[25] = (w_delay_type1[25]) ? rxtx_bs25_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[26] = (w_delay_type1[26]) ? rxtx_bs26_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[27] = (w_delay_type1[27]) ? rxtx_bs27_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[28] = (w_delay_type1[28]) ? rxtx_bs28_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[29] = (w_delay_type1[29]) ? rxtx_bs29_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[30] = (w_delay_type1[30]) ? rxtx_bs30_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[31] = (w_delay_type1[31]) ? rxtx_bs31_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[32] = (w_delay_type1[32]) ? rxtx_bs32_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[33] = (w_delay_type1[33]) ? rxtx_bs33_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[34] = (w_delay_type1[34]) ? rxtx_bs34_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[35] = (w_delay_type1[35]) ? rxtx_bs35_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[36] = (w_delay_type1[36]) ? rxtx_bs36_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[37] = (w_delay_type1[37]) ? rxtx_bs37_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[38] = (w_delay_type1[38]) ? rxtx_bs38_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[39] = (w_delay_type1[39]) ? rxtx_bs39_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[40] = (w_delay_type1[40]) ? rxtx_bs40_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[41] = (w_delay_type1[41]) ? rxtx_bs41_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[42] = (w_delay_type1[42]) ? rxtx_bs42_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[43] = (w_delay_type1[43]) ? rxtx_bs43_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[44] = (w_delay_type1[44]) ? rxtx_bs44_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[45] = (w_delay_type1[45]) ? rxtx_bs45_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[46] = (w_delay_type1[46]) ? rxtx_bs46_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[47] = (w_delay_type1[47]) ? rxtx_bs47_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[48] = (w_delay_type1[48]) ? rxtx_bs48_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[49] = (w_delay_type1[49]) ? rxtx_bs49_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[50] = (w_delay_type1[50]) ? rxtx_bs50_tx_ce_in:1'b0;
   assign w_rxtx_tx_ce_in[51] = (w_delay_type1[51]) ? rxtx_bs51_tx_ce_in:1'b0;
   
   // Cntvalue in
   wire [8:0] w_rxtx_tx_cntvaluein [51:0];
   assign w_rxtx_tx_cntvaluein[0]  = (C_TX_DELAY_TYPE0 == 2'b10) ? rxtx_bs0_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[1]  = (C_TX_DELAY_TYPE1 == 2'b10) ? rxtx_bs1_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[2]  = (C_TX_DELAY_TYPE2 == 2'b10) ? rxtx_bs2_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[3]  = (C_TX_DELAY_TYPE3 == 2'b10) ? rxtx_bs3_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[4]  = (C_TX_DELAY_TYPE4 == 2'b10) ? rxtx_bs4_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[5]  = (C_TX_DELAY_TYPE5 == 2'b10) ? rxtx_bs5_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[6]  = (C_TX_DELAY_TYPE6 == 2'b10) ? rxtx_bs6_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[7]  = (C_TX_DELAY_TYPE7 == 2'b10) ? rxtx_bs7_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[8]  = (C_TX_DELAY_TYPE8 == 2'b10) ? rxtx_bs8_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[9]  = (C_TX_DELAY_TYPE9 == 2'b10) ? rxtx_bs9_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[10] = (C_TX_DELAY_TYPE10 == 2'b10) ? rxtx_bs10_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[11] = (C_TX_DELAY_TYPE11 == 2'b10) ? rxtx_bs11_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[12] = (C_TX_DELAY_TYPE12 == 2'b10) ? rxtx_bs12_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[13] = (C_TX_DELAY_TYPE13 == 2'b10) ? rxtx_bs13_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[14] = (C_TX_DELAY_TYPE14 == 2'b10) ? rxtx_bs14_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[15] = (C_TX_DELAY_TYPE15 == 2'b10) ? rxtx_bs15_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[16] = (C_TX_DELAY_TYPE16 == 2'b10) ? rxtx_bs16_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[17] = (C_TX_DELAY_TYPE17 == 2'b10) ? rxtx_bs17_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[18] = (C_TX_DELAY_TYPE18 == 2'b10) ? rxtx_bs18_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[19] = (C_TX_DELAY_TYPE19 == 2'b10) ? rxtx_bs19_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[20] = (C_TX_DELAY_TYPE20 == 2'b10) ? rxtx_bs20_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[21] = (C_TX_DELAY_TYPE21 == 2'b10) ? rxtx_bs21_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[22] = (C_TX_DELAY_TYPE22 == 2'b10) ? rxtx_bs22_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[23] = (C_TX_DELAY_TYPE23 == 2'b10) ? rxtx_bs23_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[24] = (C_TX_DELAY_TYPE24 == 2'b10) ? rxtx_bs24_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[25] = (C_TX_DELAY_TYPE25 == 2'b10) ? rxtx_bs25_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[26] = (C_TX_DELAY_TYPE26 == 2'b10) ? rxtx_bs26_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[27] = (C_TX_DELAY_TYPE27 == 2'b10) ? rxtx_bs27_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[28] = (C_TX_DELAY_TYPE28 == 2'b10) ? rxtx_bs28_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[29] = (C_TX_DELAY_TYPE29 == 2'b10) ? rxtx_bs29_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[30] = (C_TX_DELAY_TYPE30 == 2'b10) ? rxtx_bs30_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[31] = (C_TX_DELAY_TYPE31 == 2'b10) ? rxtx_bs31_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[32] = (C_TX_DELAY_TYPE32 == 2'b10) ? rxtx_bs32_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[33] = (C_TX_DELAY_TYPE33 == 2'b10) ? rxtx_bs33_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[34] = (C_TX_DELAY_TYPE34 == 2'b10) ? rxtx_bs34_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[35] = (C_TX_DELAY_TYPE35 == 2'b10) ? rxtx_bs35_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[36] = (C_TX_DELAY_TYPE36 == 2'b10) ? rxtx_bs36_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[37] = (C_TX_DELAY_TYPE37 == 2'b10) ? rxtx_bs37_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[38] = (C_TX_DELAY_TYPE38 == 2'b10) ? rxtx_bs38_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[39] = (C_TX_DELAY_TYPE39 == 2'b10) ? rxtx_bs39_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[40] = (C_TX_DELAY_TYPE40 == 2'b10) ? rxtx_bs40_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[41] = (C_TX_DELAY_TYPE41 == 2'b10) ? rxtx_bs41_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[42] = (C_TX_DELAY_TYPE42 == 2'b10) ? rxtx_bs42_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[43] = (C_TX_DELAY_TYPE43 == 2'b10) ? rxtx_bs43_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[44] = (C_TX_DELAY_TYPE44 == 2'b10) ? rxtx_bs44_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[45] = (C_TX_DELAY_TYPE45 == 2'b10) ? rxtx_bs45_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[46] = (C_TX_DELAY_TYPE46 == 2'b10) ? rxtx_bs46_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[47] = (C_TX_DELAY_TYPE47 == 2'b10) ? rxtx_bs47_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[48] = (C_TX_DELAY_TYPE48 == 2'b10) ? rxtx_bs48_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[49] = (C_TX_DELAY_TYPE49 == 2'b10) ? rxtx_bs49_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[50] = (C_TX_DELAY_TYPE50 == 2'b10) ? rxtx_bs50_tx_cntvaluein:9'b0;
   assign w_rxtx_tx_cntvaluein[51] = (C_TX_DELAY_TYPE51 == 2'b10) ? rxtx_bs51_tx_cntvaluein:9'b0;
   
   // Cnt value out
   wire [8:0] w_rxtx_tx_cntvalueout [51:0];
   assign rxtx_bs0_tx_cntvalueout   = (C_TX_DELAY_TYPE0 == 2'b10) ? w_rxtx_tx_cntvalueout[0]:9'b0;   
   assign rxtx_bs1_tx_cntvalueout   = (C_TX_DELAY_TYPE1 == 2'b10) ? w_rxtx_tx_cntvalueout[1]:9'b0;
   assign rxtx_bs2_tx_cntvalueout   = (C_TX_DELAY_TYPE2 == 2'b10) ? w_rxtx_tx_cntvalueout[2]:9'b0;
   assign rxtx_bs3_tx_cntvalueout   = (C_TX_DELAY_TYPE3 == 2'b10) ? w_rxtx_tx_cntvalueout[3]:9'b0;
   assign rxtx_bs4_tx_cntvalueout   = (C_TX_DELAY_TYPE4 == 2'b10) ? w_rxtx_tx_cntvalueout[4]:9'b0;
   assign rxtx_bs5_tx_cntvalueout   = (C_TX_DELAY_TYPE5 == 2'b10) ? w_rxtx_tx_cntvalueout[5]:9'b0;
   assign rxtx_bs6_tx_cntvalueout   = (C_TX_DELAY_TYPE6 == 2'b10) ? w_rxtx_tx_cntvalueout[6]:9'b0;
   assign rxtx_bs7_tx_cntvalueout   = (C_TX_DELAY_TYPE7 == 2'b10) ? w_rxtx_tx_cntvalueout[7]:9'b0;
   assign rxtx_bs8_tx_cntvalueout   = (C_TX_DELAY_TYPE8 == 2'b10) ? w_rxtx_tx_cntvalueout[8]:9'b0;
   assign rxtx_bs9_tx_cntvalueout   = (C_TX_DELAY_TYPE9 == 2'b10) ? w_rxtx_tx_cntvalueout[9]:9'b0;
   assign rxtx_bs10_tx_cntvalueout  = (C_TX_DELAY_TYPE10 == 2'b10) ? w_rxtx_tx_cntvalueout[10]:9'b0;
   assign rxtx_bs11_tx_cntvalueout  = (C_TX_DELAY_TYPE11 == 2'b10) ? w_rxtx_tx_cntvalueout[11]:9'b0;
   assign rxtx_bs12_tx_cntvalueout  = (C_TX_DELAY_TYPE12 == 2'b10) ? w_rxtx_tx_cntvalueout[12]:9'b0;
   assign rxtx_bs13_tx_cntvalueout  = (C_TX_DELAY_TYPE13 == 2'b10) ? w_rxtx_tx_cntvalueout[13]:9'b0;
   assign rxtx_bs14_tx_cntvalueout  = (C_TX_DELAY_TYPE14 == 2'b10) ? w_rxtx_tx_cntvalueout[14]:9'b0;
   assign rxtx_bs15_tx_cntvalueout  = (C_TX_DELAY_TYPE15 == 2'b10) ? w_rxtx_tx_cntvalueout[15]:9'b0;
   assign rxtx_bs16_tx_cntvalueout  = (C_TX_DELAY_TYPE16 == 2'b10) ? w_rxtx_tx_cntvalueout[16]:9'b0;
   assign rxtx_bs17_tx_cntvalueout  = (C_TX_DELAY_TYPE17 == 2'b10) ? w_rxtx_tx_cntvalueout[17]:9'b0;
   assign rxtx_bs18_tx_cntvalueout  = (C_TX_DELAY_TYPE18 == 2'b10) ? w_rxtx_tx_cntvalueout[18]:9'b0;
   assign rxtx_bs19_tx_cntvalueout  = (C_TX_DELAY_TYPE19 == 2'b10) ? w_rxtx_tx_cntvalueout[19]:9'b0;
   assign rxtx_bs20_tx_cntvalueout  = (C_TX_DELAY_TYPE20 == 2'b10) ? w_rxtx_tx_cntvalueout[20]:9'b0;
   assign rxtx_bs21_tx_cntvalueout  = (C_TX_DELAY_TYPE21 == 2'b10) ? w_rxtx_tx_cntvalueout[21]:9'b0;
   assign rxtx_bs22_tx_cntvalueout  = (C_TX_DELAY_TYPE22 == 2'b10) ? w_rxtx_tx_cntvalueout[22]:9'b0;
   assign rxtx_bs23_tx_cntvalueout  = (C_TX_DELAY_TYPE23 == 2'b10) ? w_rxtx_tx_cntvalueout[23]:9'b0;
   assign rxtx_bs24_tx_cntvalueout  = (C_TX_DELAY_TYPE24 == 2'b10) ? w_rxtx_tx_cntvalueout[24]:9'b0;
   assign rxtx_bs25_tx_cntvalueout  = (C_TX_DELAY_TYPE25 == 2'b10) ? w_rxtx_tx_cntvalueout[25]:9'b0;
   assign rxtx_bs26_tx_cntvalueout  = (C_TX_DELAY_TYPE26 == 2'b10) ? w_rxtx_tx_cntvalueout[26]:9'b0;
   assign rxtx_bs27_tx_cntvalueout  = (C_TX_DELAY_TYPE27 == 2'b10) ? w_rxtx_tx_cntvalueout[27]:9'b0;
   assign rxtx_bs28_tx_cntvalueout  = (C_TX_DELAY_TYPE28 == 2'b10) ? w_rxtx_tx_cntvalueout[28]:9'b0;
   assign rxtx_bs29_tx_cntvalueout  = (C_TX_DELAY_TYPE29 == 2'b10) ? w_rxtx_tx_cntvalueout[29]:9'b0;
   assign rxtx_bs30_tx_cntvalueout  = (C_TX_DELAY_TYPE30 == 2'b10) ? w_rxtx_tx_cntvalueout[30]:9'b0;
   assign rxtx_bs31_tx_cntvalueout  = (C_TX_DELAY_TYPE31 == 2'b10) ? w_rxtx_tx_cntvalueout[31]:9'b0;
   assign rxtx_bs32_tx_cntvalueout  = (C_TX_DELAY_TYPE32 == 2'b10) ? w_rxtx_tx_cntvalueout[32]:9'b0;
   assign rxtx_bs33_tx_cntvalueout  = (C_TX_DELAY_TYPE33 == 2'b10) ? w_rxtx_tx_cntvalueout[33]:9'b0;
   assign rxtx_bs34_tx_cntvalueout  = (C_TX_DELAY_TYPE34 == 2'b10) ? w_rxtx_tx_cntvalueout[34]:9'b0;
   assign rxtx_bs35_tx_cntvalueout  = (C_TX_DELAY_TYPE35 == 2'b10) ? w_rxtx_tx_cntvalueout[35]:9'b0;
   assign rxtx_bs36_tx_cntvalueout  = (C_TX_DELAY_TYPE36 == 2'b10) ? w_rxtx_tx_cntvalueout[36]:9'b0;
   assign rxtx_bs37_tx_cntvalueout  = (C_TX_DELAY_TYPE37 == 2'b10) ? w_rxtx_tx_cntvalueout[37]:9'b0;
   assign rxtx_bs38_tx_cntvalueout  = (C_TX_DELAY_TYPE38 == 2'b10) ? w_rxtx_tx_cntvalueout[38]:9'b0;
   assign rxtx_bs39_tx_cntvalueout  = (C_TX_DELAY_TYPE39 == 2'b10) ? w_rxtx_tx_cntvalueout[39]:9'b0;
   assign rxtx_bs40_tx_cntvalueout  = (C_TX_DELAY_TYPE40 == 2'b10) ? w_rxtx_tx_cntvalueout[40]:9'b0;
   assign rxtx_bs41_tx_cntvalueout  = (C_TX_DELAY_TYPE41 == 2'b10) ? w_rxtx_tx_cntvalueout[41]:9'b0;
   assign rxtx_bs42_tx_cntvalueout  = (C_TX_DELAY_TYPE42 == 2'b10) ? w_rxtx_tx_cntvalueout[42]:9'b0;
   assign rxtx_bs43_tx_cntvalueout  = (C_TX_DELAY_TYPE43 == 2'b10) ? w_rxtx_tx_cntvalueout[43]:9'b0;
   assign rxtx_bs44_tx_cntvalueout  = (C_TX_DELAY_TYPE44 == 2'b10) ? w_rxtx_tx_cntvalueout[44]:9'b0;
   assign rxtx_bs45_tx_cntvalueout  = (C_TX_DELAY_TYPE45 == 2'b10) ? w_rxtx_tx_cntvalueout[45]:9'b0;
   assign rxtx_bs46_tx_cntvalueout  = (C_TX_DELAY_TYPE46 == 2'b10) ? w_rxtx_tx_cntvalueout[46]:9'b0;
   assign rxtx_bs47_tx_cntvalueout  = (C_TX_DELAY_TYPE47 == 2'b10) ? w_rxtx_tx_cntvalueout[47]:9'b0;
   assign rxtx_bs48_tx_cntvalueout  = (C_TX_DELAY_TYPE48 == 2'b10) ? w_rxtx_tx_cntvalueout[48]:9'b0;
   assign rxtx_bs49_tx_cntvalueout  = (C_TX_DELAY_TYPE49 == 2'b10) ? w_rxtx_tx_cntvalueout[49]:9'b0;
   assign rxtx_bs50_tx_cntvalueout  = (C_TX_DELAY_TYPE50 == 2'b10) ? w_rxtx_tx_cntvalueout[50]:9'b0;
   assign rxtx_bs51_tx_cntvalueout  = (C_TX_DELAY_TYPE51 == 2'b10) ? w_rxtx_tx_cntvalueout[51]:9'b0;
   
   // Vectorizing individual data from fabric signals	       
   wire    [C_SERIALIZATION_FACTOR -1 :0]  rxtx_bs_D_data_from_fabric_in [51:0];
   assign  rxtx_bs_D_data_from_fabric_in[0]  = rxtx_bs0_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[1]  = rxtx_bs1_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[2]  = rxtx_bs2_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[3]  = rxtx_bs3_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[4]  = rxtx_bs4_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[5]  = rxtx_bs5_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[6]  = rxtx_bs6_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[7]  = rxtx_bs7_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[8]  = rxtx_bs8_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[9]  = rxtx_bs9_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[10] = rxtx_bs10_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[11] = rxtx_bs11_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[12] = rxtx_bs12_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[13] = rxtx_bs13_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[14] = rxtx_bs14_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[15] = rxtx_bs15_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[16] = rxtx_bs16_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[17] = rxtx_bs17_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[18] = rxtx_bs18_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[19] = rxtx_bs19_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[20] = rxtx_bs20_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[21] = rxtx_bs21_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[22] = rxtx_bs22_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[23] = rxtx_bs23_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[24] = rxtx_bs24_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[25] = rxtx_bs25_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[26] = rxtx_bs26_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[27] = rxtx_bs27_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[28] = rxtx_bs28_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[29] = rxtx_bs29_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[30] = rxtx_bs30_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[31] = rxtx_bs31_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[32] = rxtx_bs32_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[33] = rxtx_bs33_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[34] = rxtx_bs34_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[35] = rxtx_bs35_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[36] = rxtx_bs36_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[37] = rxtx_bs37_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[38] = rxtx_bs38_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[39] = rxtx_bs39_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[40] = rxtx_bs40_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[41] = rxtx_bs41_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[42] = rxtx_bs42_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[43] = rxtx_bs43_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[44] = rxtx_bs44_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[45] = rxtx_bs45_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[46] = rxtx_bs46_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[47] = rxtx_bs47_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[48] = rxtx_bs48_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[49] = rxtx_bs49_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[50] = rxtx_bs50_D_data_from_fabric_in;
   assign  rxtx_bs_D_data_from_fabric_in[51] = rxtx_bs51_D_data_from_fabric_in;
   
   wire [7:0]  w_rxtx_D_data_from_fabric_in [51:0];
   
   // Output data
   wire [51:0] w_rxtx_O_data_out;
   
   assign rxtx_bs0_O_tx_data_out = w_rxtx_O_data_out[0];
   assign rxtx_bs1_O_tx_data_out = w_rxtx_O_data_out[1];
   assign rxtx_bs2_O_tx_data_out = w_rxtx_O_data_out[2];
   assign rxtx_bs3_O_tx_data_out = w_rxtx_O_data_out[3];
   assign rxtx_bs4_O_tx_data_out = w_rxtx_O_data_out[4];
   assign rxtx_bs5_O_tx_data_out = w_rxtx_O_data_out[5];
   assign rxtx_bs6_O_tx_data_out = w_rxtx_O_data_out[6];
   assign rxtx_bs7_O_tx_data_out = w_rxtx_O_data_out[7];
   assign rxtx_bs8_O_tx_data_out = w_rxtx_O_data_out[8];
   assign rxtx_bs9_O_tx_data_out = w_rxtx_O_data_out[9];
   assign rxtx_bs10_O_tx_data_out = w_rxtx_O_data_out[10];
   assign rxtx_bs11_O_tx_data_out = w_rxtx_O_data_out[11];
   assign rxtx_bs12_O_tx_data_out = w_rxtx_O_data_out[12];
   assign rxtx_bs13_O_tx_data_out = w_rxtx_O_data_out[13];
   assign rxtx_bs14_O_tx_data_out = w_rxtx_O_data_out[14];
   assign rxtx_bs15_O_tx_data_out = w_rxtx_O_data_out[15];
   assign rxtx_bs16_O_tx_data_out = w_rxtx_O_data_out[16];
   assign rxtx_bs17_O_tx_data_out = w_rxtx_O_data_out[17];
   assign rxtx_bs18_O_tx_data_out = w_rxtx_O_data_out[18];
   assign rxtx_bs19_O_tx_data_out = w_rxtx_O_data_out[19];
   assign rxtx_bs20_O_tx_data_out = w_rxtx_O_data_out[20];
   assign rxtx_bs21_O_tx_data_out = w_rxtx_O_data_out[21];
   assign rxtx_bs22_O_tx_data_out = w_rxtx_O_data_out[22];
   assign rxtx_bs23_O_tx_data_out = w_rxtx_O_data_out[23];
   assign rxtx_bs24_O_tx_data_out = w_rxtx_O_data_out[24];
   assign rxtx_bs25_O_tx_data_out = w_rxtx_O_data_out[25];
   assign rxtx_bs26_O_tx_data_out = w_rxtx_O_data_out[26];
   assign rxtx_bs27_O_tx_data_out = w_rxtx_O_data_out[27];
   assign rxtx_bs28_O_tx_data_out = w_rxtx_O_data_out[28];
   assign rxtx_bs29_O_tx_data_out = w_rxtx_O_data_out[29];
   assign rxtx_bs30_O_tx_data_out = w_rxtx_O_data_out[30];
   assign rxtx_bs31_O_tx_data_out = w_rxtx_O_data_out[31];
   assign rxtx_bs32_O_tx_data_out = w_rxtx_O_data_out[32];
   assign rxtx_bs33_O_tx_data_out = w_rxtx_O_data_out[33];
   assign rxtx_bs34_O_tx_data_out = w_rxtx_O_data_out[34];
   assign rxtx_bs35_O_tx_data_out = w_rxtx_O_data_out[35];
   assign rxtx_bs36_O_tx_data_out = w_rxtx_O_data_out[36];
   assign rxtx_bs37_O_tx_data_out = w_rxtx_O_data_out[37];
   assign rxtx_bs38_O_tx_data_out = w_rxtx_O_data_out[38];
   assign rxtx_bs39_O_tx_data_out = w_rxtx_O_data_out[39];
   assign rxtx_bs40_O_tx_data_out = w_rxtx_O_data_out[40];
   assign rxtx_bs41_O_tx_data_out = w_rxtx_O_data_out[41];
   assign rxtx_bs42_O_tx_data_out = w_rxtx_O_data_out[42];
   assign rxtx_bs43_O_tx_data_out = w_rxtx_O_data_out[43];
   assign rxtx_bs44_O_tx_data_out = w_rxtx_O_data_out[44];
   assign rxtx_bs45_O_tx_data_out = w_rxtx_O_data_out[45];
   assign rxtx_bs46_O_tx_data_out = w_rxtx_O_data_out[46];
   assign rxtx_bs47_O_tx_data_out = w_rxtx_O_data_out[47];
   assign rxtx_bs48_O_tx_data_out = w_rxtx_O_data_out[48];
   assign rxtx_bs49_O_tx_data_out = w_rxtx_O_data_out[49];
   assign rxtx_bs50_O_tx_data_out = w_rxtx_O_data_out[50];
   assign rxtx_bs51_O_tx_data_out = w_rxtx_O_data_out[51];
   
   //-------------------
   
   wire [51:0] w_rxtx_tx_t_in = {
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs51_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs50_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs49_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs48_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs47_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[15] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[15]==0)) ? rxtx_bs46_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[14] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[14]==0)) ? rxtx_bs45_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs44_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs43_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs42_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs41_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[13] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[13]==0)) ? rxtx_bs40_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[12] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[12]==0)) ? rxtx_bs39_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs38_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs37_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs36_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs35_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs34_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[11] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[11]==0)) ? rxtx_bs33_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[10] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[10]==0)) ? rxtx_bs32_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs31_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs30_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs29_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs28_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[9] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[9]==0)) ? rxtx_bs27_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[8] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[8]==0)) ? rxtx_bs26_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs25_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs24_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs23_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs22_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs21_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[7] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[7] == 0)) ? rxtx_bs20_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[6] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[6] == 0)) ? rxtx_bs19_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs18_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs17_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs16_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs15_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[5] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[5] == 0)) ? rxtx_bs14_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[4] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[4] == 0)) ? rxtx_bs13_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs12_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs11_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs10_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs9_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs8_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[3] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[3] == 0)) ? rxtx_bs7_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[2] == 1 && C_CLOCK_TRI == 1) || (C_DATA_TRI == 1 && C_RX_STROBE_EN[2] == 0)) ? rxtx_bs6_tx_t_in : 1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs5_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs4_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs3_tx_t_in):1'b0,
                                   ((C_DATA_TRI == 1)) ? (rxtx_bs2_tx_t_in):1'b0,
                                   ((C_RX_STROBE_EN[1] == 1 && C_CLOCK_TRI == 1) ||  (C_DATA_TRI == 1 && C_RX_STROBE_EN[1] == 0)) ? rxtx_bs1_tx_t_in : 1'b0,
                                   ((C_RX_STROBE_EN[0] == 1 && C_CLOCK_TRI == 1) ||  (C_DATA_TRI == 1 && C_RX_STROBE_EN[0] == 0)) ? rxtx_bs0_tx_t_in : 1'b0
                                };
   
   wire [51:0] w_tbyte_in = {
                                   ((C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[15] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib7_tx_tbyte_in: 1'b0),
                                   (((C_RX_STROBE_EN[14] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0)? rxtx_nib7_tx_tbyte_in: 1'b0 ),
                                   ((C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[13] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0 ),
                                   (((C_RX_STROBE_EN[12] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib6_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[11] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0)? rxtx_nib5_tx_tbyte_in : 1'b0 ),
                                   (((C_RX_STROBE_EN[10] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib5_tx_tbyte_in : 1'b0 ),
                                   ((C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[9] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0 ),
                                   (((C_RX_STROBE_EN[8] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib4_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[7] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in : 1'b0 ),
                                   (((C_RX_STROBE_EN[6] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib3_tx_tbyte_in  :  1'b0 ),
                                   ((C_DATA_TRI == 0) ? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[5] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0)? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[4] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0)? rxtx_nib2_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[3] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib1_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[2] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0)? rxtx_nib1_tx_tbyte_in  : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0),
                                   ((C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0),
                                   (((C_RX_STROBE_EN[1] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0 ),
                                   (((C_RX_STROBE_EN[0] == 1 && C_CLOCK_TRI == 0) || C_DATA_TRI == 0) ? rxtx_nib0_tx_tbyte_in : 1'b0)
   			   };
   
   wire [51:0] w_rxtx_tx_t_out;
   assign rxtx_bs0_tx_t_out  = w_rxtx_tx_t_out[0];
   assign rxtx_bs1_tx_t_out  = w_rxtx_tx_t_out[1];
   assign rxtx_bs2_tx_t_out  = w_rxtx_tx_t_out[2];
   assign rxtx_bs3_tx_t_out  = w_rxtx_tx_t_out[3];
   assign rxtx_bs4_tx_t_out  = w_rxtx_tx_t_out[4];
   assign rxtx_bs5_tx_t_out  = w_rxtx_tx_t_out[5];
   assign rxtx_bs6_tx_t_out  = w_rxtx_tx_t_out[6];
   assign rxtx_bs7_tx_t_out  = w_rxtx_tx_t_out[7];
   assign rxtx_bs8_tx_t_out  = w_rxtx_tx_t_out[8];
   assign rxtx_bs9_tx_t_out  = w_rxtx_tx_t_out[9];
   assign rxtx_bs10_tx_t_out  = w_rxtx_tx_t_out[10];
   assign rxtx_bs11_tx_t_out  = w_rxtx_tx_t_out[11];
   assign rxtx_bs12_tx_t_out  = w_rxtx_tx_t_out[12];
   assign rxtx_bs13_tx_t_out  = w_rxtx_tx_t_out[13];
   assign rxtx_bs14_tx_t_out  = w_rxtx_tx_t_out[14];
   assign rxtx_bs15_tx_t_out  = w_rxtx_tx_t_out[15];
   assign rxtx_bs16_tx_t_out  = w_rxtx_tx_t_out[16];
   assign rxtx_bs17_tx_t_out  = w_rxtx_tx_t_out[17];
   assign rxtx_bs18_tx_t_out  = w_rxtx_tx_t_out[18];
   assign rxtx_bs19_tx_t_out  = w_rxtx_tx_t_out[19];
   assign rxtx_bs20_tx_t_out  = w_rxtx_tx_t_out[20];
   assign rxtx_bs21_tx_t_out  = w_rxtx_tx_t_out[21];
   assign rxtx_bs22_tx_t_out  = w_rxtx_tx_t_out[22];
   assign rxtx_bs23_tx_t_out  = w_rxtx_tx_t_out[23];
   assign rxtx_bs24_tx_t_out  = w_rxtx_tx_t_out[24];
   assign rxtx_bs25_tx_t_out  = w_rxtx_tx_t_out[25];
   assign rxtx_bs26_tx_t_out  = w_rxtx_tx_t_out[26];
   assign rxtx_bs27_tx_t_out  = w_rxtx_tx_t_out[27];
   assign rxtx_bs28_tx_t_out  = w_rxtx_tx_t_out[28];
   assign rxtx_bs29_tx_t_out  = w_rxtx_tx_t_out[29];
   assign rxtx_bs30_tx_t_out  = w_rxtx_tx_t_out[30];
   assign rxtx_bs31_tx_t_out  = w_rxtx_tx_t_out[31];
   assign rxtx_bs32_tx_t_out  = w_rxtx_tx_t_out[32];
   assign rxtx_bs33_tx_t_out  = w_rxtx_tx_t_out[33];
   assign rxtx_bs34_tx_t_out  = w_rxtx_tx_t_out[34];
   assign rxtx_bs35_tx_t_out  = w_rxtx_tx_t_out[35];
   assign rxtx_bs36_tx_t_out  = w_rxtx_tx_t_out[36];
   assign rxtx_bs37_tx_t_out  = w_rxtx_tx_t_out[37];
   assign rxtx_bs38_tx_t_out  = w_rxtx_tx_t_out[38];
   assign rxtx_bs39_tx_t_out  = w_rxtx_tx_t_out[39];
   assign rxtx_bs40_tx_t_out  = w_rxtx_tx_t_out[40];
   assign rxtx_bs41_tx_t_out  = w_rxtx_tx_t_out[41];
   assign rxtx_bs42_tx_t_out  = w_rxtx_tx_t_out[42];
   assign rxtx_bs43_tx_t_out  = w_rxtx_tx_t_out[43];
   assign rxtx_bs44_tx_t_out  = w_rxtx_tx_t_out[44];
   assign rxtx_bs45_tx_t_out  = w_rxtx_tx_t_out[45];
   assign rxtx_bs46_tx_t_out  = w_rxtx_tx_t_out[46];
   assign rxtx_bs47_tx_t_out  = w_rxtx_tx_t_out[47];
   assign rxtx_bs48_tx_t_out  = w_rxtx_tx_t_out[48];
   assign rxtx_bs49_tx_t_out  = w_rxtx_tx_t_out[49];
   assign rxtx_bs50_tx_t_out  = w_rxtx_tx_t_out[50];
   assign rxtx_bs51_tx_t_out  = w_rxtx_tx_t_out[51];
   
   
   localparam [51:0] C_STROBE_EN_SET = {
                                         6'b0,
                                         (C_RX_STROBE_EN[14] == 1'b1)  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         5'b0, 
                                         (C_RX_STROBE_EN[12] == 1'b1)  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         6'b0,
                                         (C_RX_STROBE_EN[10] == 1'b1)  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         5'b0, 
                                         (C_RX_STROBE_EN[8]  == 1'b1)  ? 1'b1 : 1'b0,   // 4th Nibble 
                                         6'b0,
                                         (C_RX_STROBE_EN[6]  == 1'b1)  ? 1'b1 : 1'b0,   // 3rd Nibble 
                                         5'b0,
                                         (C_RX_STROBE_EN[4]  == 1'b1)  ? 1'b1 : 1'b0,   // 2nd Nibble
                                         6'b0, 
                                         (C_RX_STROBE_EN[2]  == 1'b1)  ? 1'b1 : 1'b0,   // 1st Nibble
                                         5'b0, 
                                         (C_RX_STROBE_EN[0]  == 1'b1)  ? 1'b1 : 1'b0    // 0th Nibble
   		                   };
  
   localparam [51:0] C_STROBE_BS = {
   		                         5'b0,
                                         (C_RX_STROBE_EN[15] == 1'b1 )  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         (C_RX_STROBE_EN[14] == 1'b1 )  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         4'b0, 
                                         (C_RX_STROBE_EN[13] == 1'b1 )  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         (C_RX_STROBE_EN[12] == 1'b1 )  ? 1'b1 : 1'b0,   // 5th Nibble 
   		                         5'b0,
                                         (C_RX_STROBE_EN[11]  == 1'b1)  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         (C_RX_STROBE_EN[10]  == 1'b1)  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         4'b0, 
                                         (C_RX_STROBE_EN[9]  == 1'b1) ? 1'b1 : 1'b0,     // 4th Nibble 
                                         (C_RX_STROBE_EN[8]  == 1'b1) ? 1'b1 : 1'b0,     // 4th Nibble 
   		                         5'b0,
                                         (C_RX_STROBE_EN[7]  == 1'b1) ? 1'b1 : 1'b0,     // 3rd Nibble 
                                         (C_RX_STROBE_EN[6]  == 1'b1) ? 1'b1 : 1'b0,     // 3rd Nibble 
                                         4'b0,
                                         (C_RX_STROBE_EN[5]  == 1'b1) ? 1'b1 : 1'b0,     // 2nd Nibble
                                         (C_RX_STROBE_EN[4]  == 1'b1) ? 1'b1 : 1'b0,     // 2nd Nibble
   		                         5'b0,
                                         (C_RX_STROBE_EN[3]  == 1'b1) ? 1'b1 : 1'b0,     // 1st Nibble
                                         (C_RX_STROBE_EN[2]  == 1'b1) ? 1'b1 : 1'b0,     // 1st Nibble
                                         4'b0, 
   		                         (C_RX_STROBE_EN[1]  == 1'b1) ? 1'b1 : 1'b0,     // 0th Nibble
   		                         (C_RX_STROBE_EN[0]  == 1'b1) ? 1'b1 : 1'b0      // 0th Nibble
                                       };

 
   wire [C_SERIALIZATION_FACTOR -1 :0] w_rxtx_q_out[51:0];   // Data output to bitslip, if not this gets mapped to rxtx_q
   wire [C_SERIALIZATION_FACTOR -1 :0] w_rxtx_bs_q[51:0];
   
   wire  [51:0] w_rxtx_bs_tx_rst_in;
   wire  [51:0] w_rxtx_bs_rx_rst_in;
   wire  [51:0] w_rxtx_bs_rx_rst_dly_in;
   wire  [51:0] w_rxtx_bs_tx_rst_dly_in;

   wire [3:0]   bitslip_val_4b;
   wire [3:0]   inv_bitslip_val_4b;
   wire [7:0]   inv_bitslip_val;
   reg  [51:0]  sync_done_r;
   wire [51:0]  sync_done;
   reg  [51:0]  bitslip;
   reg  [3:0]   bs_cnt [51:0];
   wire [51:0]  is_N_pin;
   wire [51:0]  core_rdy_sync;
   wire         rst_to_bitslip;

   assign rst_to_bitslip = !start_bitslip;

   assign bitslip_val_4b = C_BITSLIP_VAL[3:0];
   assign inv_bitslip_val_4b = ~bitslip_val_4b;
   assign inv_bitslip_val = ~C_BITSLIP_VAL;


   generate 
   genvar bs;
       for (bs = 0; bs <= 51; bs=bs+1) 
       begin : RXTX_BS
       
   assign  w_rxtx_bs_tx_rst_in[bs]     =  rxtx_bs_tx_rst_in[bs];
   assign  w_rxtx_bs_rx_rst_in[bs]     = rxtx_bs_rx_rst_in[bs];
   assign  w_rxtx_bs_rx_rst_dly_in[bs] = rxtx_bs_rx_rst_dly_in[bs];
   assign  w_rxtx_bs_tx_rst_dly_in[bs] = rxtx_bs_tx_rst_dly_in[bs];
   
   assign w_rxtx_D_data_from_fabric_in[bs]  =  (C_SERIALIZATION_FACTOR == 8) ? rxtx_bs_D_data_from_fabric_in[bs] : {4'b0,rxtx_bs_D_data_from_fabric_in[bs]};
   assign w_rxtx_bs_q[bs] = ((C_SERIALIZATION_FACTOR == 8) ? w_rxtx_q_int[bs][7:0] : w_rxtx_q_int[bs][3:0]); //[C_DataWidth-1 :0];	
   
       if (C_BIDIR_BITSLICE_EN[bs] == 1) begin
         RXTX_BITSLICE #(                             
   	   .ENABLE_PRE_EMPHASIS    (((C_DIFF_EN[bs] == 1'b1 && (C_TX_PREEMPHASIS_D == "RDRV_240" || C_TX_PREEMPHASIS_D == "TRUE")) || (C_DIFF_EN[bs] == 1'b0 && C_TX_PREEMPHASIS_S == "RDRV_240")) ? "TRUE" : "FALSE"),
           .FIFO_SYNC_MODE         (C_BIDIR_FIFO_SYNC_MODE),
           .RX_DATA_TYPE           (C_STROBE_EN_SET[bs] ? "DATA_AND_CLOCK" : "DATA"),
           .RX_DATA_WIDTH          (C_SERIALIZATION_FACTOR),
           .RX_DELAY_FORMAT        (C_BIDIR_RX_DELAY_FORMAT),
           .RX_DELAY_TYPE          ((C_RX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b00) ? "FIXED" : (C_RX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b01) ? "VARIABLE" : "VAR_LOAD"),
           //.RX_DELAY_VALUE         (C_RX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .RX_DELAY_VALUE         ((C_STROBE_EN_SET[bs] && C_PLL0_RX_EXTERNAL_CLK_TO_DATA == 4) ? 'd0 : C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .RX_REFCLK_FREQUENCY    (C_RX_REFCLK_FREQ),
           .RX_UPDATE_MODE         ("ASYNC"),
           .TX_DATA_WIDTH          (C_SERIALIZATION_FACTOR),
           .TX_DELAY_FORMAT        (C_BIDIR_TX_DELAY_FORMAT),
           .INIT                   (C_BS_INIT_VAL[bs]),
   	   .IS_RX_CLK_INVERTED     (C_BIDIR_IS_RX_CLK_INVERTED),           // Default value for the attribute
   	   .IS_RX_RST_DLY_INVERTED (C_BIDIR_IS_RX_RST_DLY_INVERTED),       // Default value for the attribute
     	   .IS_RX_RST_INVERTED     (C_BIDIR_IS_RX_RST_INVERTED),           // Default value for the attribute
   	   .IS_TX_CLK_INVERTED     (C_BIDIR_IS_TX_CLK_INVERTED),           // Default value for the attribute
   	   .IS_TX_RST_DLY_INVERTED (C_BIDIR_IS_TX_RST_DLY_INVERTED),       // Default value for the attribute
   	   .IS_TX_RST_INVERTED     (C_BIDIR_IS_TX_RST_INVERTED),           // Default value for the attribute
           .TX_DELAY_TYPE          ((C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] ==2'b00) ? "FIXED" : (C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b01) ? "VARIABLE" : "VAR_LOAD"),
           //.TX_DELAY_VALUE         (C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .TX_DELAY_VALUE         ((C_STROBE_EN_SET[bs] && C_PLL0_RX_EXTERNAL_CLK_TO_DATA == 4) ? 'd0 : C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .TX_OUTPUT_PHASE_90     ((C_STROBE_EN_SET[bs] && C_PLL0_RX_EXTERNAL_CLK_TO_DATA == 4) ? "TRUE" : "FALSE"),
           .TX_REFCLK_FREQUENCY    (C_TX_REFCLK_FREQ),
   	   .SIM_DEVICE             (C_SIM_DEVICE),
   	   .SIM_VERSION            (C_SIM_VERSION),
           .TBYTE_CTL              ((C_TBYTE_CTRL[bs]) ? "TBYTE_IN"  :  "T"),
           .TX_UPDATE_MODE         ("ASYNC")
        )
        rxtx_bitslice_if_bs
        (
           .RX_BIT_CTRL_OUT(rxtx_bs_rx_bit_ctrl_out[bs]),
           .RX_BIT_CTRL_IN(rxtx_bs_rx_bit_ctrl_in[(bs+1)*40 -1 : bs*40]),
           .RX_CE(w_rxtx_rx_ce_in[bs]),
           .RX_CLK(rxtx_bs_rx_clk_in),
           .RX_INC(w_rxtx_rx_inc_in[bs]),
           .RX_LOAD(w_rxtx_rx_load_in[bs]),
           .RX_RST_DLY(w_rxtx_bs_rx_rst_dly_in[bs]),
           .RX_CNTVALUEOUT(w_rxtx_rx_cntvalueout[bs]),
           .RX_CNTVALUEIN(w_rxtx_rx_cntvaluein[bs]),
           .FIFO_EMPTY(w_rxtx_rx_fifo_empty_out[bs]),
           .FIFO_WRCLK_OUT(w_rxtx_rx_fifo_wrclk_out[bs]),
           .FIFO_RD_CLK(w_rxtx_rx_fifo_rd_clk_in[bs]),
           .FIFO_RD_EN(w_rxtx_rx_fifo_rd_en_in[bs]),
           .Q(w_rxtx_q_int[bs]),
           .DATAIN(w_rxtx_rx_datain[bs]),
           .RX_EN_VTC(w_rxtx_rx_en_vtc_in[bs]),
           .RX_RST(w_rxtx_bs_rx_rst_in[bs]),
           .TX_BIT_CTRL_OUT(rxtx_bs_tx_bit_ctrl_out[bs]),
           .TX_BIT_CTRL_IN(rxtx_bs_tx_bit_ctrl_in[(bs+1)*40 -1 : bs*40]),
           .O(w_rxtx_O_data_out[bs]),
           .T_OUT(w_rxtx_tx_t_out[bs]),
           .D(w_rxtx_D_data_from_fabric_in[bs]),
           .TX_INC(w_rxtx_tx_inc_in[bs]),
           .TX_LOAD(w_rxtx_tx_load_in[bs]),
           .TX_RST_DLY(w_rxtx_bs_tx_rst_dly_in[bs]),
           .TX_CE(w_rxtx_tx_ce_in[bs]),
           .TX_CLK(rxtx_bs_tx_clk_in),
           .TX_CNTVALUEOUT(w_rxtx_tx_cntvalueout[bs]),
           .TX_CNTVALUEIN(w_rxtx_tx_cntvaluein[bs]),
           .TX_EN_VTC(w_rxtx_tx_en_vtc_in[bs]),
           .TX_RST(w_rxtx_bs_tx_rst_in[bs]),
           .TBYTE_IN(w_tbyte_in[bs]),
           .T (w_rxtx_tx_t_in[bs])
        );


        if (C_ENABLE_BITSLIP == 1'b1 && (C_BIDIR_BITSLICE_EN[bs] == 1'b1)) begin 
   
        (* keep_hierarchy = "yes" *) 
         high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_Toplevel #(
        // .C_Function     (C_BITSLIP_MODE_ACT),     // : string    := "Comp";  -- Slip, Nmbr, Comp, FstC
           .C_DataWidth    (C_SERIALIZATION_FACTOR), // : integer   := 8;       -- 8, 4
           .C_PulsedSlip   (1),                      // : integer   := 1;       -- 1 = bitslip is reduced to a clock period.
                                                     //                         -- Leave this at '1', unless you are sure that
                                                     //                         -- a bitslip given by an application is longer
                                                     //                         -- than one Clk_pin cycle.
           .C_ErrOut       (1),                      // : integer   := 1;       -- 1 = ErrOut pin available.
   	   .C_BITSLIP_MODE (C_BITSLIP_MODE),
           .C_InputReg     (0)                       // : integer   := 0        -- 0, No, 1 = Yes
         )
         bitslip_inst_bs
        (
           .DataIn_pin     (w_rxtx_bs_q[bs]),
           .Bitslip_pin    (bitslip[bs]),                  //: in ;
           .SlipVal_pin    (C_BITSLIP_VAL_ACT),            //: in [2 :0];
           .CompVal_pin    (C_BITSLIP_COMP_VAL_ACT),       //: in [C_DataWidth-1 :0];
           .Ena_pin        (1'b1),                         //: in ;
           .Rst_pin        (rst_to_bitslip),               //: in ;
           .Clk_pin        (w_rxtx_rx_fifo_rd_clk_in[bs]), //: in ;
           .DataOut_pin    (w_rxtx_q[bs]),                 //: out [C_DataWidth-1 :0];
           .ErrOut_pin     (w_rxtx_bitslip_error_out[bs])  //: out 
       );

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(100)) 
    sync_cell_core_rdy_fifo_rd_inst1       (.src_data(core_rdy[bs]), .dest_clk(w_rxtx_rx_fifo_rd_clk_in[bs]), .dest_data(core_rdy_sync[bs]));


 assign sync_done[bs] =     start_bitslip && 
                           (( C_SERIALIZATION_FACTOR == 8 && w_rxtx_bs_q[bs] == C_BITSLIP_VAL )  ||
                            ( C_SERIALIZATION_FACTOR == 8 && w_rxtx_q[bs]    == C_BITSLIP_VAL )  || 
                            ( C_SERIALIZATION_FACTOR == 4 && w_rxtx_bs_q[bs] == bitslip_val_4b ) ||
                            ( C_SERIALIZATION_FACTOR == 4 && w_rxtx_q[bs]    == bitslip_val_4b ) ) ? 1'b1 : sync_done_r[bs];

   always @ ( posedge rst_to_bitslip or posedge w_rxtx_rx_fifo_rd_clk_in[bs] )
   begin
      if ( rst_to_bitslip )
      begin
         bs_cnt[bs]       <= 4'h0;
         bitslip[bs]      <= 1'b0;
         sync_done_r[bs]  <= 1'b0; 
      end
      else
      begin
         if (core_rdy_sync[bs])
         begin
            if ( sync_done[bs]  == 1'b0 )
                bs_cnt[bs] <= bs_cnt[bs] + 1'b1;

            if ( (!C_STROBE_BS[bs] && C_SERIALIZATION_FACTOR == 8 && w_rxtx_q[bs] != C_BITSLIP_VAL   &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0) || 
                 (!C_STROBE_BS[bs] && C_SERIALIZATION_FACTOR == 4 && w_rxtx_q[bs] != bitslip_val_4b  &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0) 
               )
                   bitslip[bs] <= 1'b1;
            else   bitslip[bs] <= 1'b0;

                   sync_done_r[bs] <= sync_done[bs];
        end
      end
   end //always



       end //ENABLE_BITSLIP
       end //BIDIR_BITSLICE_EN
       end // for (bs=0, bs <= 51, bs=bs+1)
   endgenerate

     wire [51:0] w_sync_done;

   generate
   genvar bs1;
     for (bs1 = 0; bs1 <= 51; bs1 = bs1 + 1)
     begin: RXTX_INT_BITSLIP_GEN 
   
        assign w_sync_done[bs1] =  (C_ENABLE_BITSLIP == 1'b1 && (C_BIDIR_BITSLICE_EN[bs1] == 1'b1) && !C_STROBE_BS[bs1]) ? sync_done_r[bs1] : 1'b1;
     end
   endgenerate
    
   assign rxtx_bitslip_sync_done = &w_sync_done;
 
   
   endmodule


   // (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
   // 
   // This file contains confidential and proprietary information
   // of Xilinx, Inc. and is protected under U.S. and
   // international copyright and other intellectual property
   // laws.
   // 
   // DISCLAIMER
   // This disclaimer is not a license and does not grant any
   // rights to the materials distributed herewith. Except as
   // otherwise provided in a valid license issued to you by
   // Xilinx, and to the maximum extent permitted by applicable
   // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
   // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
   // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
   // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
   // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
   // (2) Xilinx shall not be liable (whether in contract or tort,
   // including negligence, or under any other theory of
   // liability) for any loss or damage of any kind or nature
   // related to, arising under or in connection with these
   // materials, including for any direct, or any indirect,
   // special, incidental, or consequential loss or damage
   // (including loss of data, profits, goodwill, or any type of
   // loss or damage suffered as a result of any action brought
   // by a third party) even if such damage or loss was
   // reasonably foreseeable or Xilinx had been advised of the
   // possibility of the same.
   // 
   // CRITICAL APPLICATIONS
   // Xilinx products are not designed or intended to be fail-
   // safe, or for use in any application requiring fail-safe
   // performance, such as life-support or safety devices or
   // systems, Class III medical devices, nuclear facilities,
   // applications related to the deployment of airbags, or any
   // other applications that could lead to death, personal
   // injury, or severe property or environmental damage
   // (individually and collectively, "Critical
   // Applications"). Customer assumes the sole risk and
   // liability of any use of Xilinx products in Critical
   // Applications, subject only to applicable laws and
   // regulations governing limitations on product liability.
   // 
   // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
   // PART OF THIS FILE AT ALL TIMES.
   
   `timescale 1ps/1ps
   module high_speed_selectio_wiz_v3_5_1_tx_bs_tri # (
   parameter            C_SERIALIZATION_FACTOR  =  4,		    
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE0    =  2'b00,  // TX delay type
   parameter            C_SIM_DEVICE            =  "ULTRASCALE", 
   parameter            C_SIM_VERSION           =  1.0,
   parameter            C_TX_TRI_DELAY_FORMAT   =  "TIME",
   parameter            C_TX_TRI_INIT           =  1'b1,
   parameter            C_TX_TRI_IS_CLK_INVERTED        =  1'b0,
   parameter            C_TX_TRI_IS_RST_DLY_INVERTED    =  1'b0,
   parameter            C_TX_TRI_IS_RST_INVERTED        =  1'b0,
   //parameter            C_TX_TRI_UPDATE_MODE            =  "ASYNC",
   parameter            C_TX_TRI_NATIVE_ODELAY_BYPASS   = "FALSE",
   parameter            C_TX_TRI_OUTPUT_PHASE_90        =  "FALSE",
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE1    =  2'b00,  // TX delay type
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE2    =  2'b00,  // TX delay type
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE3    =  2'b00,  // TX delay type
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE4    =  2'b00,  // TX delay type
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE5    =  2'b00,  // TX delay type		    
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE6    =  2'b00,  // TX delay type
   parameter  [1:0]     C_TX_TRI_DELAY_TYPE7    =  2'b00,  // TX delay type		    
   parameter  [7:0]     TX_BITSLICE_TRI_EN      =  8'd0,   // Bitslice tri state enablement
   
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE0   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE1   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE2   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE3   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE4   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE5   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE6   =    'd0,  // TX delay value
   parameter  [11:0]    C_TX_TRI_DELAY_VALUE7   =    'd0,  // TX delay value
   parameter            C_TX_REFCLK_FREQ        =    200   // TX clock frequency		    
   )
   		 
   (
   input                                  rst_seq_done,
   
     // Common Signals
   input                                  tx_bs_tri_clk_in,               
   input                                  tx_bs_tri_rst_dly_in,          
   input                                  tx_bs_tri_rst_in,             
   
   // -----------------------------------------------------------
   // Nibble0 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib0_ce_in,        
   input  [8:0]                           tx_bs_tri_nib0_cntvaluein,  
   output [8:0]                           tx_bs_tri_nib0_cntvalueout,
   input                                  tx_bs_tri_nib0_en_vtc_in,     
   input                                  tx_bs_tri_nib0_inc_in,       
   input                                  tx_bs_tri_nib0_load_in,     
   
   // Tristate Signals
   output                                 tx_bs_tri_nib0_t_out,      
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib0_bit_ctrl_in,     
   output [39:0]                          tx_bs_tri_nib0_bit_ctrl_out,   
   
   
   // -----------------------------------------------------------
   // Nibble1 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib1_ce_in,         
   input  [8:0]                           tx_bs_tri_nib1_cntvaluein,   
   output [8:0]                           tx_bs_tri_nib1_cntvalueout, 
   input                                  tx_bs_tri_nib1_en_vtc_in,  
   input                                  tx_bs_tri_nib1_inc_in,    
   input                                  tx_bs_tri_nib1_load_in,  
   
   // Tristate Signals
   output                                 tx_bs_tri_nib1_t_out,   
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib1_bit_ctrl_in,    
   output [39:0]                          tx_bs_tri_nib1_bit_ctrl_out,  
   
   
   // -----------------------------------------------------------
   // Nibble2 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib2_ce_in,        
   input  [8:0]                           tx_bs_tri_nib2_cntvaluein,  
   output [8:0]                           tx_bs_tri_nib2_cntvalueout,
   input                                  tx_bs_tri_nib2_en_vtc_in,      
   input                                  tx_bs_tri_nib2_inc_in,        
   input                                  tx_bs_tri_nib2_load_in,      
   
   // Tristate Signals
   output                                 tx_bs_tri_nib2_t_out,       
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib2_bit_ctrl_in,   
   output [39:0]                          tx_bs_tri_nib2_bit_ctrl_out, 
   
   
   // -----------------------------------------------------------
   // Nibble3 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib3_ce_in,       
   input  [8:0]                           tx_bs_tri_nib3_cntvaluein, 
   output [8:0]                           tx_bs_tri_nib3_cntvalueout,   
   input                                  tx_bs_tri_nib3_en_vtc_in,    
   input                                  tx_bs_tri_nib3_inc_in,      
   input                                  tx_bs_tri_nib3_load_in,    
   
   // Tristate Signals
   output                                 tx_bs_tri_nib3_t_out,     
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib3_bit_ctrl_in,   
   output [39:0]                          tx_bs_tri_nib3_bit_ctrl_out, 
   
   // -----------------------------------------------------------
   // Nibble4 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib4_ce_in,       
   input  [8:0]                           tx_bs_tri_nib4_cntvaluein, 
   output [8:0]                           tx_bs_tri_nib4_cntvalueout,   
   input                                  tx_bs_tri_nib4_en_vtc_in,    
   input                                  tx_bs_tri_nib4_inc_in,      
   input                                  tx_bs_tri_nib4_load_in,    
   
   // Tristate Signals
   output                                 tx_bs_tri_nib4_t_out,     
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib4_bit_ctrl_in,   
   output [39:0]                          tx_bs_tri_nib4_bit_ctrl_out, 
   
   // -----------------------------------------------------------
   // Nibble5 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib5_ce_in,       
   input  [8:0]                           tx_bs_tri_nib5_cntvaluein,     
   output [8:0]                           tx_bs_tri_nib5_cntvalueout,   
   input                                  tx_bs_tri_nib5_en_vtc_in,    
   input                                  tx_bs_tri_nib5_inc_in,      
   input                                  tx_bs_tri_nib5_load_in,    
   
   // Tristate Signals
   output                                 tx_bs_tri_nib5_t_out,     
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib5_bit_ctrl_in,   
   output [39:0]                          tx_bs_tri_nib5_bit_ctrl_out, 
   
   
   // -----------------------------------------------------------
   // Nibble6 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib6_ce_in,       
   input  [8:0]                           tx_bs_tri_nib6_cntvaluein, 
   output [8:0]                           tx_bs_tri_nib6_cntvalueout,   
   input                                  tx_bs_tri_nib6_en_vtc_in,    
   input                                  tx_bs_tri_nib6_inc_in,      
   input                                  tx_bs_tri_nib6_load_in,    
   
   // Tristate Signals
   output                                 tx_bs_tri_nib6_t_out,     
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib6_bit_ctrl_in,   
   output [39:0]                          tx_bs_tri_nib6_bit_ctrl_out, 
   
   
   // -----------------------------------------------------------
   // Nibble7 Signals
   // -----------------------------------------------------------
   // Delay Signals
   input                                  tx_bs_tri_nib7_ce_in,       
   input  [8:0]                           tx_bs_tri_nib7_cntvaluein, 
   output [8:0]                           tx_bs_tri_nib7_cntvalueout,  
   input                                  tx_bs_tri_nib7_en_vtc_in,   
   input                                  tx_bs_tri_nib7_inc_in,     
   input                                  tx_bs_tri_nib7_load_in,   
   
   // Tristate Signals
   output                                 tx_bs_tri_nib7_t_out,    
   
   // Ribbon Cable Signals
   input  [39:0]                          tx_bs_tri_nib7_bit_ctrl_in,  
   output [39:0]                          tx_bs_tri_nib7_bit_ctrl_out 
   
   );
   
   // TX Delay Type
   localparam [15:0] C_TX_DELAY_TYPE   =  {
                                          C_TX_TRI_DELAY_TYPE7,
   				          C_TX_TRI_DELAY_TYPE6,
   				          C_TX_TRI_DELAY_TYPE5,
                                          C_TX_TRI_DELAY_TYPE4,
   				          C_TX_TRI_DELAY_TYPE3,
   				          C_TX_TRI_DELAY_TYPE2,
                                          C_TX_TRI_DELAY_TYPE1,
                                          C_TX_TRI_DELAY_TYPE0
                                        };
   localparam [95:0] C_TX_DELAY_VALUE  =  {
                                          C_TX_TRI_DELAY_VALUE7,
                                          C_TX_TRI_DELAY_VALUE6,
                                          C_TX_TRI_DELAY_VALUE5,
                                          C_TX_TRI_DELAY_VALUE4,
                                          C_TX_TRI_DELAY_VALUE3,
                                          C_TX_TRI_DELAY_VALUE2,
                                          C_TX_TRI_DELAY_VALUE1,
                                          C_TX_TRI_DELAY_VALUE0	     	     
                                        };   
   wire [7:0]   w_delay_type;
   assign w_delay_type[0] 	  = (C_TX_TRI_DELAY_TYPE0 == 2'b01 || C_TX_TRI_DELAY_TYPE0  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[1] 	  = (C_TX_TRI_DELAY_TYPE1 == 2'b01 || C_TX_TRI_DELAY_TYPE1  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[2] 	  = (C_TX_TRI_DELAY_TYPE2 == 2'b01 || C_TX_TRI_DELAY_TYPE2  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[3] 	  = (C_TX_TRI_DELAY_TYPE3 == 2'b01 || C_TX_TRI_DELAY_TYPE3  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[4] 	  = (C_TX_TRI_DELAY_TYPE4 == 2'b01 || C_TX_TRI_DELAY_TYPE4  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[5] 	  = (C_TX_TRI_DELAY_TYPE5 == 2'b01 || C_TX_TRI_DELAY_TYPE5  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[6] 	  = (C_TX_TRI_DELAY_TYPE6 == 2'b01 || C_TX_TRI_DELAY_TYPE6  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[7] 	  = (C_TX_TRI_DELAY_TYPE7 == 2'b01 || C_TX_TRI_DELAY_TYPE7  == 2'b10) ? 1'b1:1'b0;
       
   wire [7:0]  w_tx_tri_en_vtc_in; 
   assign w_tx_tri_en_vtc_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type[0]) ? tx_bs_tri_nib0_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type[1]) ? tx_bs_tri_nib1_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type[2]) ? tx_bs_tri_nib2_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type[3]) ? tx_bs_tri_nib3_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type[4]) ? tx_bs_tri_nib4_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type[5]) ? tx_bs_tri_nib5_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type[6]) ? tx_bs_tri_nib6_en_vtc_in:1'b1;
   assign w_tx_tri_en_vtc_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type[7]) ? tx_bs_tri_nib7_en_vtc_in:1'b1;
      
   wire [7:0]  w_tx_tri_load_in; 
   assign w_tx_tri_load_in[0]  = (w_delay_type[0]) ? tx_bs_tri_nib0_load_in:1'b0;
   assign w_tx_tri_load_in[1]  = (w_delay_type[1]) ? tx_bs_tri_nib1_load_in:1'b0;
   assign w_tx_tri_load_in[2]  = (w_delay_type[2]) ? tx_bs_tri_nib2_load_in:1'b0;
   assign w_tx_tri_load_in[3]  = (w_delay_type[3]) ? tx_bs_tri_nib3_load_in:1'b0;
   assign w_tx_tri_load_in[4]  = (w_delay_type[4]) ? tx_bs_tri_nib4_load_in:1'b0;
   assign w_tx_tri_load_in[5]  = (w_delay_type[5]) ? tx_bs_tri_nib5_load_in:1'b0;
   assign w_tx_tri_load_in[6]  = (w_delay_type[6]) ? tx_bs_tri_nib6_load_in:1'b0;
   assign w_tx_tri_load_in[7]  = (w_delay_type[7]) ? tx_bs_tri_nib7_load_in:1'b0;
   
   wire [8:0]  w_tx_tri_cntvaluein[7:0]; 
   assign w_tx_tri_cntvaluein[0]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib0_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[1]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib1_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[2]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib2_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[3]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib3_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[4]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib4_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[5]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib5_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[6]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib6_cntvaluein:9'b0;
   assign w_tx_tri_cntvaluein[7]  = (C_TX_TRI_DELAY_TYPE0  == 2'b10) ? tx_bs_tri_nib7_cntvaluein:9'b0;
   
   wire [7:0]  w_tx_tri_ce_in; 
   assign w_tx_tri_ce_in[0]  = (w_delay_type[0]) ? tx_bs_tri_nib0_ce_in:1'b0;
   assign w_tx_tri_ce_in[1]  = (w_delay_type[1]) ? tx_bs_tri_nib1_ce_in:1'b0;
   assign w_tx_tri_ce_in[2]  = (w_delay_type[2]) ? tx_bs_tri_nib2_ce_in:1'b0;
   assign w_tx_tri_ce_in[3]  = (w_delay_type[3]) ? tx_bs_tri_nib3_ce_in:1'b0;
   assign w_tx_tri_ce_in[4]  = (w_delay_type[4]) ? tx_bs_tri_nib4_ce_in:1'b0;
   assign w_tx_tri_ce_in[5]  = (w_delay_type[5]) ? tx_bs_tri_nib5_ce_in:1'b0;
   assign w_tx_tri_ce_in[6]  = (w_delay_type[6]) ? tx_bs_tri_nib6_ce_in:1'b0;
   assign w_tx_tri_ce_in[7]  = (w_delay_type[7]) ? tx_bs_tri_nib7_ce_in:1'b0;
   
   wire [7:0]  w_tx_tri_inc_in; 
   assign w_tx_tri_inc_in[0]  = (w_delay_type[0]) ? tx_bs_tri_nib0_inc_in:1'b0;
   assign w_tx_tri_inc_in[1]  = (w_delay_type[1]) ? tx_bs_tri_nib1_inc_in:1'b0;
   assign w_tx_tri_inc_in[2]  = (w_delay_type[2]) ? tx_bs_tri_nib2_inc_in:1'b0;
   assign w_tx_tri_inc_in[3]  = (w_delay_type[3]) ? tx_bs_tri_nib3_inc_in:1'b0;
   assign w_tx_tri_inc_in[4]  = (w_delay_type[4]) ? tx_bs_tri_nib4_inc_in:1'b0;
   assign w_tx_tri_inc_in[5]  = (w_delay_type[5]) ? tx_bs_tri_nib5_inc_in:1'b0;
   assign w_tx_tri_inc_in[6]  = (w_delay_type[6]) ? tx_bs_tri_nib6_inc_in:1'b0;
   assign w_tx_tri_inc_in[7]  = (w_delay_type[7]) ? tx_bs_tri_nib7_inc_in:1'b0;
   
   wire [8:0] w_tx_tri_cntvalueout [7:0];
   assign tx_bs_tri_nib0_cntvalueout[0]   = (C_TX_TRI_DELAY_TYPE0 == 2'b10) ? w_tx_tri_cntvalueout[0]:1'b0;   
   assign tx_bs_tri_nib1_cntvalueout[1]   = (C_TX_TRI_DELAY_TYPE1 == 2'b10) ? w_tx_tri_cntvalueout[1]:1'b0;
   assign tx_bs_tri_nib2_cntvalueout[2]   = (C_TX_TRI_DELAY_TYPE2 == 2'b10) ? w_tx_tri_cntvalueout[2]:1'b0;   
   assign tx_bs_tri_nib3_cntvalueout[3]   = (C_TX_TRI_DELAY_TYPE3 == 2'b10) ? w_tx_tri_cntvalueout[3]:1'b0;
   assign tx_bs_tri_nib4_cntvalueout[4]   = (C_TX_TRI_DELAY_TYPE4 == 2'b10) ? w_tx_tri_cntvalueout[4]:1'b0;
   assign tx_bs_tri_nib5_cntvalueout[5]   = (C_TX_TRI_DELAY_TYPE5 == 2'b10) ? w_tx_tri_cntvalueout[5]:1'b0;
   assign tx_bs_tri_nib6_cntvalueout[6]   = (C_TX_TRI_DELAY_TYPE6 == 2'b10) ? w_tx_tri_cntvalueout[6]:1'b0;
   assign tx_bs_tri_nib7_cntvalueout[7]   = (C_TX_TRI_DELAY_TYPE7 == 2'b10) ? w_tx_tri_cntvalueout[7]:1'b0;
   
   wire  [319:0] w_tx_bs_tri_bit_ctrl_in = {
                                           tx_bs_tri_nib7_bit_ctrl_in,
   		                           tx_bs_tri_nib6_bit_ctrl_in,
   					   tx_bs_tri_nib5_bit_ctrl_in, 
   					   tx_bs_tri_nib4_bit_ctrl_in,
   					   tx_bs_tri_nib3_bit_ctrl_in,
   					   tx_bs_tri_nib2_bit_ctrl_in,
   					   tx_bs_tri_nib1_bit_ctrl_in,
   					   tx_bs_tri_nib0_bit_ctrl_in };
   
   
   wire [39:0] w_tx_bs_tri_bit_ctrl_out [7:0];
   assign tx_bs_tri_nib0_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[0];
   assign tx_bs_tri_nib1_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[1];
   assign tx_bs_tri_nib2_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[2];
   assign tx_bs_tri_nib3_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[3];
   assign tx_bs_tri_nib4_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[4];
   assign tx_bs_tri_nib5_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[5];
   assign tx_bs_tri_nib6_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[6];
   assign tx_bs_tri_nib7_bit_ctrl_out = w_tx_bs_tri_bit_ctrl_out[7];
   
   wire [7:0] w_tx_bs_tri_out;
   assign tx_bs_tri_nib0_t_out = w_tx_bs_tri_out[0];
   assign tx_bs_tri_nib1_t_out = w_tx_bs_tri_out[1];
   assign tx_bs_tri_nib2_t_out = w_tx_bs_tri_out[2];
   assign tx_bs_tri_nib3_t_out = w_tx_bs_tri_out[3];
   assign tx_bs_tri_nib4_t_out = w_tx_bs_tri_out[4];
   assign tx_bs_tri_nib5_t_out = w_tx_bs_tri_out[5];
   assign tx_bs_tri_nib6_t_out = w_tx_bs_tri_out[6];
   assign tx_bs_tri_nib7_t_out = w_tx_bs_tri_out[7];
   generate 
   genvar bs;
       for (bs = 0; bs <= 7; bs=bs+1) 
       begin : TX_BS_TRI
         if (TX_BITSLICE_TRI_EN[bs] == 1)  begin
         TX_BITSLICE_TRI #(                             
           .DATA_WIDTH           (C_SERIALIZATION_FACTOR),
           .DELAY_FORMAT         (C_TX_TRI_DELAY_FORMAT),
           .DELAY_TYPE           ((C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b00) ? "FIXED" : (C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b01) ? "VARIABLE" : "VAR_LOAD"),
           .DELAY_VALUE          (C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .INIT                 (C_TX_TRI_INIT),                 // Default value for the attribute
   	   .IS_CLK_INVERTED      (C_TX_TRI_IS_CLK_INVERTED),      // Default value for the attribute
           .IS_RST_DLY_INVERTED  (C_TX_TRI_IS_RST_DLY_INVERTED),  // Default value for the attribute
   	   .IS_RST_INVERTED      (C_TX_TRI_IS_RST_INVERTED),      // Default value for the attribute
           .OUTPUT_PHASE_90      (C_TX_TRI_OUTPUT_PHASE_90),      // Only for Clock forward delay format is used
           .REFCLK_FREQUENCY     (C_TX_REFCLK_FREQ),
      	   .SIM_DEVICE           (C_SIM_DEVICE),
   	   .SIM_VERSION          (C_SIM_VERSION),
           .NATIVE_ODELAY_BYPASS (C_TX_TRI_NATIVE_ODELAY_BYPASS),
           .UPDATE_MODE          ("ASYNC")
        )
        u_tx_bitslice_tri_if_bs
        (
           .BIT_CTRL_IN(w_tx_bs_tri_bit_ctrl_in[((bs+1)*40 -1):bs*40]),
           .BIT_CTRL_OUT(w_tx_bs_tri_bit_ctrl_out[bs]),
           .CE(w_tx_tri_ce_in[bs]),
           .CLK(tx_bs_tri_clk_in),
           .CNTVALUEOUT(w_tx_tri_cntvalueout[bs]),
           .CNTVALUEIN(w_tx_tri_cntvaluein[bs]),
           .EN_VTC(w_tx_tri_en_vtc_in[bs]),
           .INC(w_tx_tri_inc_in[bs]),
           .LOAD(w_tx_tri_load_in[bs]),
           .RST(tx_bs_tri_rst_in),
           .RST_DLY(tx_bs_tri_rst_dly_in),
           .TRI_OUT(w_tx_bs_tri_out[bs])
        );
   
       end // for (bs=0, bs <= 51, bs=bs+1)
     end
   endgenerate   
   endmodule


   // (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
   // 
   // This file contains confidential and proprietary information
   // of Xilinx, Inc. and is protected under U.S. and
   // international copyright and other intellectual property
   // laws.
   // 
   // DISCLAIMER
   // This disclaimer is not a license and does not grant any
   // rights to the materials distributed herewith. Except as
   // otherwise provided in a valid license issued to you by
   // Xilinx, and to the maximum extent permitted by applicable
   // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
   // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
   // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
   // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
   // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
   // (2) Xilinx shall not be liable (whether in contract or tort,
   // including negligence, or under any other theory of
   // liability) for any loss or damage of any kind or nature
   // related to, arising under or in connection with these
   // materials, including for any direct, or any indirect,
   // special, incidental, or consequential loss or damage
   // (including loss of data, profits, goodwill, or any type of
   // loss or damage suffered as a result of any action brought
   // by a third party) even if such damage or loss was
   // reasonably foreseeable or Xilinx had been advised of the
   // possibility of the same.
   // 
   // CRITICAL APPLICATIONS
   // Xilinx products are not designed or intended to be fail-
   // safe, or for use in any application requiring fail-safe
   // performance, such as life-support or safety devices or
   // systems, Class III medical devices, nuclear facilities,
   // applications related to the deployment of airbags, or any
   // other applications that could lead to death, personal
   // injury, or severe property or environmental damage
   // (individually and collectively, "Critical
   // Applications"). Customer assumes the sole risk and
   // liability of any use of Xilinx products in Critical
   // Applications, subject only to applicable laws and
   // regulations governing limitations on product liability.
   // 
   // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
   // PART OF THIS FILE AT ALL TIMES.
   
   `timescale 1ps/1ps
   module high_speed_selectio_wiz_v3_5_1_rx_bs  #(
      parameter            C_ENABLE_N_PINS              =  1,      
      parameter  [51:0]    C_RX_PIN_EN                  =  52'd0,
      parameter            C_SERIALIZATION_FACTOR       =  4,            // Serialization Factor
      parameter            C_TEMPLATE                   =  0,
      parameter            C_SIM_DEVICE                 =  "ULTRASCALE", // SIM Device Attribute
      parameter            C_SIM_VERSION                =  1.0,          // SIM version Attribute
      parameter            C_SERIAL_MODE                =  "FALSE",      // Serial mode
      parameter   [51:0]   C_RX_BITSLICE_EN             =  52'b0,
      parameter   [51:0]   C_DIFF_EN                    =  52'd0, // Indicates whether the pin is differential or single ended
      parameter   [15:0]   C_RX_STROBE_EN               =  16'b0, // Strobe Enable
      parameter            C_RX_DELAY_FORMAT            = "TIME",
      parameter            C_RX_FIFO_SYNC_MODE          = "FALSE",
      parameter            C_RX_IS_CLK_INVERTED         =  1'b0,
      parameter            C_RX_IS_CLK_EXT_INVERTED     =  1'b0,
      parameter            C_RX_IS_RST_DLY_EXT_INVERTED = 1'b0,
      parameter            C_RX_IS_RST_DLY_INVERTED     = 1'b0,
      parameter            C_RX_IS_RST_INVERTED         = 1'b0,
      //parameter            C_RX_UPDATE_MODE             = "ASYNC",
      //parameter            C_RX_UPDATE_MODE_EXT         = "ASYNC",
      parameter            C_RX_DELAY_CASCADE      =  1'b0,  // Cascased RX delay enablement  
      parameter   [1:0]    C_RX_DELAY_TYPE0        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE1        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE2        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE3        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE4        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE5        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE6        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE7        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE8        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE9        =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE10       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE11       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE12       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE13       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE14       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE15       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE16       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE17       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE18       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE19       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE20       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE21       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE22       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE23       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE24       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE25       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE26       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE27       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE28       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE29       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE30       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE31       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE32       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE33       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE34       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE35       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE36       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE37       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE38       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE39       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE40       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE41       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE42       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE43       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE44       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE45       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE46       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE47       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE48       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE49       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE50       =  2'b00, // RX delay type
      parameter   [1:0]    C_RX_DELAY_TYPE51       =  2'b00, // RX delay type
      parameter   [11:0]   C_RX_DELAY_VALUE0       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE1       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE2       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE3       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE4       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE5       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE6       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE7       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE8       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE9       =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE10      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE11      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE12      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE13      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE14      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE15      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE16      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE17      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE18      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE19      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE20      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE21      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE22      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE23      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE24      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE25      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE26      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE27      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE28      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE29      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE30      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE31      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE32      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE33      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE34      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE35      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE36      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE37      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE38      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE39      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE40      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE41      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE42      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE43      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE44      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE45      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE46      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE47      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE48      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE49      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE50      =    'd0,  // RX delay value
      parameter   [11:0]   C_RX_DELAY_VALUE51      =    'd0,  // RX delay value
      
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT0     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT1     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT2     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT3     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT4     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT5     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT6     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT7     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT8     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT9     =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT10    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT11    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT12    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT13    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT14    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT15    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT16    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT17    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT18    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT19    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT20    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT21    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT22    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT23    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT24    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT25    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT26    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT27    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT28    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT29    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT30    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT31    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT32    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT33    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT34    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT35    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT36    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT37    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT38    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT39    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT40    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT41    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT42    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT43    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT44    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT45    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT46    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT47    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT48    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT49    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT50    =    'd0,  // RX extended delay value
      parameter   [11:0]   C_RX_DELAY_VALUE_EXT51    =    'd0,  // RX extended delay value
      parameter        C_RX_REFCLK_FREQ              =    200,  // RX clock frequency
      parameter        C_FIFO_SYNC_MODE              =   1'b0,  // RX clock frequency
      parameter        C_FIFO_WR_CLK_EN              =   1'b1,  // Fifo Write Clock
      parameter        C_ENABLE_BITSLIP              =   1'b0,  // Enable Bitslip
      parameter        C_ENABLE_DATA_BITSLIP         =   1'b0,  
      parameter        C_BITSLIP_MODE                =   "SLIP_PER_BIT",  // Bitslip Mode
      parameter [7:0]  C_BITSLIP_VAL                 =   8'h00,           // Bitslip value
      parameter [7:0]  C_RX_BITSLICE0_EN             =   8'b0,
      parameter        C_NIB5_EN_CLK_TO_EXT_NORTH    =   1'b0,   // 6th Nibble 
      parameter        C_NIB5_EN_CLK_TO_EXT_SOUTH    =   1'b0,   // 3rd Nibble 
      parameter        C_NIB4_EN_CLK_TO_EXT_NORTH    =   1'b0,   // 5th Nibble 
      parameter        C_NIB4_EN_CLK_TO_EXT_SOUTH    =   1'b0,   // 2nd Nibble
      parameter        C_NIB3_EN_CLK_TO_EXT_NORTH    =   1'b0,   // 5th Nibble 
      parameter        C_NIB3_EN_CLK_TO_EXT_SOUTH    =   1'b0,   // 1st Nibble
      parameter        C_NIB2_EN_CLK_TO_EXT_NORTH    =   1'b0,   // 4th Nibble 
      parameter        C_NIB2_EN_CLK_TO_EXT_SOUTH    =   1'b0    // 0th Nibble
   
   )
   
   (
   // Common signals
   input                                            rst_in,
   input                                            rst_seq_done,
   input                                            rx_bs_clk_in,              
   input                                            rx_bs_clk_ext_in,         
   input     [51:0]                                 rx_bs_rst_in,            
   input     [51:0]                                 rx_bs_rst_dly_in,       
   input     [51:0]                                 rx_bs_rst_dly_ext_in,  
   input                                            div_clk_to_fabric,
   input                                            start_bitslip,
   input     [51:0]                                 core_rdy,
   output                                           rx_bitslip_sync_done,
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs0_ce_in,         
   input  [8:0]                                     rx_bs0_cntvaluein,   
   output [8:0]                                     rx_bs0_cntvalueout, 
   input                                            rx_bs0_en_vtc_in,  
   input                                            rx_bs0_inc_in,    
   input                                            rx_bs0_load_in,  
    
   // Extended Delay Signals
   input                                            rx_bs0_ce_ext_in,       
   
   input  [8:0]                                     rx_bs0_cntvaluein_ext_in,  
   output [8:0]                                     rx_bs0_cntvalueout_ext_out, 
   input                                            rx_bs0_en_vtc_ext_in,      
   input                                            rx_bs0_inc_ext_in,        
   input                                            rx_bs0_load_ext_in,      
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs0_Q_data_to_fabric_out, 
   input                                            rx_bs0_datain,              
   
   // Fifo Signals
   output                                           rx_bs0_fifo_empty_out,     
   input                                            rx_bs0_fifo_rd_clk_in,    
   input                                            rx_bs0_fifo_rd_en_in,    
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs0_rx_bit_ctrl_in,  
   output  [39:0]                                   rx_bs0_rx_bit_ctrl_out,
   input   [39:0]                                   rx_bs0_tx_bit_ctrl_in,   
   output  [39:0]                                   rx_bs0_tx_bit_ctrl_out,     
    
   
   // --------------------------------------------------------
   // Bitslice1 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs1_ce_in,                    
   input  [8:0]                                     rx_bs1_cntvaluein,            
   output [8:0]                                     rx_bs1_cntvalueout,          
   input                                            rx_bs1_en_vtc_in,                
   input                                            rx_bs1_inc_in,                   
   input                                            rx_bs1_load_in,                  
    
   // Extended Delay Signals
   input                                            rx_bs1_ce_ext_in,               
   
   input  [8:0]                                     rx_bs1_cntvaluein_ext_in,       
   output [8:0]                                     rx_bs1_cntvalueout_ext_out,     
   input                                            rx_bs1_en_vtc_ext_in,           
   input                                            rx_bs1_inc_ext_in,              
   input                                            rx_bs1_load_ext_in,             
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs1_Q_data_to_fabric_out,    
   input                                            rx_bs1_datain,               
   
   // Fifo Signals
   output                                           rx_bs1_fifo_empty_out,           
   input                                            rx_bs1_fifo_rd_clk_in,          
   input                                            rx_bs1_fifo_rd_en_in,           
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs1_rx_bit_ctrl_in,       
   output  [39:0]                                   rx_bs1_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs1_tx_bit_ctrl_in,       
   output  [39:0]                                   rx_bs1_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice2 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs2_ce_in,                    
   input  [8:0]                                     rx_bs2_cntvaluein,            
   output [8:0]                                     rx_bs2_cntvalueout,          
   input                                            rx_bs2_en_vtc_in,                
   input                                            rx_bs2_inc_in,                   
   input                                            rx_bs2_load_in,                  
    
   // Extended Delay Signals
   input                                            rx_bs2_ce_ext_in,               
   
   input  [8:0]                                     rx_bs2_cntvaluein_ext_in,       
   output [8:0]                                     rx_bs2_cntvalueout_ext_out,     
   input                                            rx_bs2_en_vtc_ext_in,           
   input                                            rx_bs2_inc_ext_in,              
   input                                            rx_bs2_load_ext_in,             
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs2_Q_data_to_fabric_out,    
   input                                            rx_bs2_datain,               
   
   // Fifo Signals
   output                                           rx_bs2_fifo_empty_out,           
   input                                            rx_bs2_fifo_rd_clk_in,          
   input                                            rx_bs2_fifo_rd_en_in,           
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs2_rx_bit_ctrl_in,       
   output  [39:0]                                   rx_bs2_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs2_tx_bit_ctrl_in,       
   output  [39:0]                                   rx_bs2_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice3 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs3_ce_in,                   
   input  [8:0]                                     rx_bs3_cntvaluein,           
   output [8:0]                                     rx_bs3_cntvalueout,         
   input                                            rx_bs3_en_vtc_in,          
   input                                            rx_bs3_inc_in,            
   input                                            rx_bs3_load_in,          
    
   // Extended Delay Signals
   input                                            rx_bs3_ce_ext_in,             
   
   input  [8:0]                                     rx_bs3_cntvaluein_ext_in,    
   output [8:0]                                     rx_bs3_cntvalueout_ext_out, 
   input                                            rx_bs3_en_vtc_ext_in,          
   input                                            rx_bs3_inc_ext_in,            
   input                                            rx_bs3_load_ext_in,          
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs3_Q_data_to_fabric_out,   
   input                                            rx_bs3_datain,              
   
   // Fifo Signals
   output                                           rx_bs3_fifo_empty_out,     
   input                                            rx_bs3_fifo_rd_clk_in,    
   input                                            rx_bs3_fifo_rd_en_in,    
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs3_rx_bit_ctrl_in,  
   output  [39:0]                                   rx_bs3_rx_bit_ctrl_out,   
   input   [39:0]                                   rx_bs3_tx_bit_ctrl_in,   
   output  [39:0]                                   rx_bs3_tx_bit_ctrl_out, 
   
   
   // --------------------------------------------------------
   // Bitslice4 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs4_ce_in,              
   input  [8:0]                                     rx_bs4_cntvaluein,      
   output [8:0]                                     rx_bs4_cntvalueout,    
   input                                            rx_bs4_en_vtc_in,          
   input                                            rx_bs4_inc_in,             
   input                                            rx_bs4_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs4_ce_ext_in,         
   
   input  [8:0]                                     rx_bs4_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs4_cntvalueout_ext_out,  
   input                                            rx_bs4_en_vtc_ext_in,     
   input                                            rx_bs4_inc_ext_in,        
   input                                            rx_bs4_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs4_Q_data_to_fabric_out,
   input                                            rx_bs4_datain,         
   
   // Fifo Signals
   output                                           rx_bs4_fifo_empty_out,     
   input                                            rx_bs4_fifo_rd_clk_in,    
   input                                            rx_bs4_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs4_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs4_rx_bit_ctrl_out,    
   input   [39:0]                                   rx_bs4_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs4_tx_bit_ctrl_out,   
   
   
   // --------------------------------------------------------
   // Bitslice5 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs5_ce_in,              
   input  [8:0]                                     rx_bs5_cntvaluein,      
   output [8:0]                                     rx_bs5_cntvalueout,    
   input                                            rx_bs5_en_vtc_in,          
   input                                            rx_bs5_inc_in,             
   input                                            rx_bs5_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs5_ce_ext_in,         
   
   input  [8:0]                                     rx_bs5_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs5_cntvalueout_ext_out,  
   input                                            rx_bs5_en_vtc_ext_in,     
   input                                            rx_bs5_inc_ext_in,        
   input                                            rx_bs5_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs5_Q_data_to_fabric_out,  
   input                                            rx_bs5_datain,         
   
   // Fifo Signals
   output                                           rx_bs5_fifo_empty_out,     
   input                                            rx_bs5_fifo_rd_clk_in,    
   input                                            rx_bs5_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs5_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs5_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs5_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs5_tx_bit_ctrl_out,    
   
   // --------------------------------------------------------
   // Bitslice6 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs6_ce_in,              
   input  [8:0]                                     rx_bs6_cntvaluein,      
   output [8:0]                                     rx_bs6_cntvalueout,    
   input                                            rx_bs6_en_vtc_in,          
   input                                            rx_bs6_inc_in,             
   input                                            rx_bs6_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs6_ce_ext_in,         
   
   input  [8:0]                                     rx_bs6_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs6_cntvalueout_ext_out,  
   input                                            rx_bs6_en_vtc_ext_in,     
   input                                            rx_bs6_inc_ext_in,        
   input                                            rx_bs6_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs6_Q_data_to_fabric_out,
   input                                            rx_bs6_datain,         
   
   // Fifo Signals
   output                                           rx_bs6_fifo_empty_out,     
   input                                            rx_bs6_fifo_rd_clk_in,    
   input                                            rx_bs6_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs6_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs6_rx_bit_ctrl_out,    
   input   [39:0]                                   rx_bs6_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs6_tx_bit_ctrl_out,   
   
   
   // --------------------------------------------------------
   // Bitslice7 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs7_ce_in,              
   input  [8:0]                                     rx_bs7_cntvaluein,      
   output [8:0]                                     rx_bs7_cntvalueout,    
   input                                            rx_bs7_en_vtc_in,          
   input                                            rx_bs7_inc_in,             
   input                                            rx_bs7_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs7_ce_ext_in,         
   
   input  [8:0]                                     rx_bs7_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs7_cntvalueout_ext_out,  
   input                                            rx_bs7_en_vtc_ext_in,     
   input                                            rx_bs7_inc_ext_in,        
   input                                            rx_bs7_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs7_Q_data_to_fabric_out,  
   input                                            rx_bs7_datain,         
   
   // Fifo Signals
   output                                           rx_bs7_fifo_empty_out,     
   input                                            rx_bs7_fifo_rd_clk_in,    
   input                                            rx_bs7_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs7_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs7_rx_bit_ctrl_out,    
   input   [39:0]                                   rx_bs7_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs7_tx_bit_ctrl_out,   
   
   
   // --------------------------------------------------------
   // Bitslice8 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs8_ce_in,              
   input  [8:0]                                     rx_bs8_cntvaluein,      
   output [8:0]                                     rx_bs8_cntvalueout,    
   input                                            rx_bs8_en_vtc_in,          
   input                                            rx_bs8_inc_in,             
   input                                            rx_bs8_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs8_ce_ext_in,         
   
   input  [8:0]                                     rx_bs8_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs8_cntvalueout_ext_out,  
   input                                            rx_bs8_en_vtc_ext_in,     
   input                                            rx_bs8_inc_ext_in,        
   input                                            rx_bs8_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs8_Q_data_to_fabric_out, 
   input                                            rx_bs8_datain,         
   
   // Fifo Signals
   output                                           rx_bs8_fifo_empty_out,     
   input                                            rx_bs8_fifo_rd_clk_in,    
   input                                            rx_bs8_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs8_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs8_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs8_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs8_tx_bit_ctrl_out,    
   
   
   // --------------------------------------------------------
   // Bitslice9 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs9_ce_in,              
   input  [8:0]                                     rx_bs9_cntvaluein,      
   output [8:0]                                     rx_bs9_cntvalueout,    
   input                                            rx_bs9_en_vtc_in,          
   input                                            rx_bs9_inc_in,             
   input                                            rx_bs9_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs9_ce_ext_in,         
   
   input  [8:0]                                     rx_bs9_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs9_cntvalueout_ext_out,
   input                                            rx_bs9_en_vtc_ext_in,     
   input                                            rx_bs9_inc_ext_in,        
   input                                            rx_bs9_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs9_Q_data_to_fabric_out, 
   input                                            rx_bs9_datain,         
   
   // Fifo Signals
   output                                           rx_bs9_fifo_empty_out,     
   input                                            rx_bs9_fifo_rd_clk_in,    
   input                                            rx_bs9_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs9_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs9_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs9_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs9_tx_bit_ctrl_out,    
   
   
   // --------------------------------------------------------
   // Bitslice10 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs10_ce_in,              
   input  [8:0]                                     rx_bs10_cntvaluein,      
   output [8:0]                                     rx_bs10_cntvalueout,    
   input                                            rx_bs10_en_vtc_in,          
   input                                            rx_bs10_inc_in,             
   input                                            rx_bs10_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs10_ce_ext_in,         
   
   input  [8:0]                                     rx_bs10_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs10_cntvalueout_ext_out,     
   input                                            rx_bs10_en_vtc_ext_in,     
   input                                            rx_bs10_inc_ext_in,        
   input                                            rx_bs10_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs10_Q_data_to_fabric_out,    
   input                                            rx_bs10_datain,         
   
   // Fifo Signals
   output                                           rx_bs10_fifo_empty_out,     
   input                                            rx_bs10_fifo_rd_clk_in,    
   input                                            rx_bs10_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs10_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs10_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs10_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs10_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice11 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs11_ce_in,              
   input  [8:0]                                     rx_bs11_cntvaluein,      
   output [8:0]                                     rx_bs11_cntvalueout,    
   input                                            rx_bs11_en_vtc_in,          
   input                                            rx_bs11_inc_in,             
   input                                            rx_bs11_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs11_ce_ext_in,         
   
   input  [8:0]                                     rx_bs11_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs11_cntvalueout_ext_out,     
   input                                            rx_bs11_en_vtc_ext_in,     
   input                                            rx_bs11_inc_ext_in,        
   input                                            rx_bs11_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs11_Q_data_to_fabric_out,    
   input                                            rx_bs11_datain,         
   
   // Fifo Signals
   output                                           rx_bs11_fifo_empty_out,     
   input                                            rx_bs11_fifo_rd_clk_in,    
   input                                            rx_bs11_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs11_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs11_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs11_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs11_tx_bit_ctrl_out,     
    
   
   // --------------------------------------------------------
   // Bitslice12 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs12_ce_in,              
   input  [8:0]                                     rx_bs12_cntvaluein,      
   output [8:0]                                     rx_bs12_cntvalueout,    
   input                                            rx_bs12_en_vtc_in,          
   input                                            rx_bs12_inc_in,             
   input                                            rx_bs12_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs12_ce_ext_in,         
   
   input  [8:0]                                     rx_bs12_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs12_cntvalueout_ext_out,     
   input                                            rx_bs12_en_vtc_ext_in,     
   input                                            rx_bs12_inc_ext_in,        
   input                                            rx_bs12_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs12_Q_data_to_fabric_out,    
   input                                            rx_bs12_datain,         
   
   // Fifo Signals
   output                                           rx_bs12_fifo_empty_out,     
   input                                            rx_bs12_fifo_rd_clk_in,    
   input                                            rx_bs12_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs12_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs12_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs12_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs12_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice13 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs13_ce_in,              
   input  [8:0]                                     rx_bs13_cntvaluein,      
   output [8:0]                                     rx_bs13_cntvalueout,    
   input                                            rx_bs13_en_vtc_in,          
   input                                            rx_bs13_inc_in,             
   input                                            rx_bs13_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs13_ce_ext_in,         
   
   input  [8:0]                                     rx_bs13_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs13_cntvalueout_ext_out,     
   input                                            rx_bs13_en_vtc_ext_in,     
   input                                            rx_bs13_inc_ext_in,        
   input                                            rx_bs13_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs13_Q_data_to_fabric_out,    
   input                                            rx_bs13_datain,         
   
   // Fifo Signals
   output                                           rx_bs13_fifo_empty_out,     
   input                                            rx_bs13_fifo_rd_clk_in,    
   input                                            rx_bs13_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs13_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs13_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs13_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs13_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice14 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs14_ce_in,              
   input  [8:0]                                     rx_bs14_cntvaluein,      
   output [8:0]                                     rx_bs14_cntvalueout,    
   input                                            rx_bs14_en_vtc_in,          
   input                                            rx_bs14_inc_in,             
   input                                            rx_bs14_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs14_ce_ext_in,         
   
   input  [8:0]                                     rx_bs14_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs14_cntvalueout_ext_out,     
   input                                            rx_bs14_en_vtc_ext_in,     
   input                                            rx_bs14_inc_ext_in,        
   input                                            rx_bs14_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs14_Q_data_to_fabric_out,    
   input                                            rx_bs14_datain,         
   
   // Fifo Signals
   output                                           rx_bs14_fifo_empty_out,     
   input                                            rx_bs14_fifo_rd_clk_in,    
   input                                            rx_bs14_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs14_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs14_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs14_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs14_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice15 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs15_ce_in,              
   input  [8:0]                                     rx_bs15_cntvaluein,      
   output [8:0]                                     rx_bs15_cntvalueout,    
   input                                            rx_bs15_en_vtc_in,          
   input                                            rx_bs15_inc_in,             
   input                                            rx_bs15_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs15_ce_ext_in,         
   
   input  [8:0]                                     rx_bs15_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs15_cntvalueout_ext_out,     
   input                                            rx_bs15_en_vtc_ext_in,     
   input                                            rx_bs15_inc_ext_in,        
   input                                            rx_bs15_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs15_Q_data_to_fabric_out,    
   input                                            rx_bs15_datain,         
   
   // Fifo Signals
   output                                           rx_bs15_fifo_empty_out,     
   input                                            rx_bs15_fifo_rd_clk_in,    
   input                                            rx_bs15_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs15_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs15_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs15_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs15_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs16_ce_in,              
   input  [8:0]                                     rx_bs16_cntvaluein,      
   output [8:0]                                     rx_bs16_cntvalueout,    
   input                                            rx_bs16_en_vtc_in,          
   input                                            rx_bs16_inc_in,             
   input                                            rx_bs16_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs16_ce_ext_in,         
   
   input  [8:0]                                     rx_bs16_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs16_cntvalueout_ext_out,     
   input                                            rx_bs16_en_vtc_ext_in,     
   input                                            rx_bs16_inc_ext_in,        
   input                                            rx_bs16_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs16_Q_data_to_fabric_out,    
   input                                            rx_bs16_datain,         
   
   // Fifo Signals
   output                                           rx_bs16_fifo_empty_out,     
   input                                            rx_bs16_fifo_rd_clk_in,    
   input                                            rx_bs16_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs16_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs16_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs16_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs16_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice17 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs17_ce_in,              
   input  [8:0]                                     rx_bs17_cntvaluein,      
   output [8:0]                                     rx_bs17_cntvalueout,    
   input                                            rx_bs17_en_vtc_in,          
   input                                            rx_bs17_inc_in,             
   input                                            rx_bs17_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs17_ce_ext_in,         
   
   input  [8:0]                                     rx_bs17_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs17_cntvalueout_ext_out,     
   input                                            rx_bs17_en_vtc_ext_in,     
   input                                            rx_bs17_inc_ext_in,        
   input                                            rx_bs17_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs17_Q_data_to_fabric_out,    
   input                                            rx_bs17_datain,         
   
   // Fifo Signals
   output                                           rx_bs17_fifo_empty_out,     
   input                                            rx_bs17_fifo_rd_clk_in,    
   input                                            rx_bs17_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs17_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs17_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs17_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs17_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs18_ce_in,              
   input  [8:0]                                     rx_bs18_cntvaluein,      
   output [8:0]                                     rx_bs18_cntvalueout,    
   input                                            rx_bs18_en_vtc_in,          
   input                                            rx_bs18_inc_in,             
   input                                            rx_bs18_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs18_ce_ext_in,         
   
   input  [8:0]                                     rx_bs18_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs18_cntvalueout_ext_out,     
   input                                            rx_bs18_en_vtc_ext_in,     
   input                                            rx_bs18_inc_ext_in,        
   input                                            rx_bs18_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs18_Q_data_to_fabric_out,    
   input                                            rx_bs18_datain,         
   
   // Fifo Signals
   output                                           rx_bs18_fifo_empty_out,     
   input                                            rx_bs18_fifo_rd_clk_in,    
   input                                            rx_bs18_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs18_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs18_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs18_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs18_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice19 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs19_ce_in,              
   input  [8:0]                                     rx_bs19_cntvaluein,      
   output [8:0]                                     rx_bs19_cntvalueout,    
   input                                            rx_bs19_en_vtc_in,          
   input                                            rx_bs19_inc_in,             
   input                                            rx_bs19_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs19_ce_ext_in,         
   
   input  [8:0]                                     rx_bs19_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs19_cntvalueout_ext_out,     
   input                                            rx_bs19_en_vtc_ext_in,     
   input                                            rx_bs19_inc_ext_in,        
   input                                            rx_bs19_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs19_Q_data_to_fabric_out,    
   input                                            rx_bs19_datain,         
   
   // Fifo Signals
   output                                           rx_bs19_fifo_empty_out,     
   input                                            rx_bs19_fifo_rd_clk_in,    
   input                                            rx_bs19_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs19_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs19_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs19_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs19_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice20 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs20_ce_in,              
   input  [8:0]                                     rx_bs20_cntvaluein,      
   output [8:0]                                     rx_bs20_cntvalueout,    
   input                                            rx_bs20_en_vtc_in,          
   input                                            rx_bs20_inc_in,             
   input                                            rx_bs20_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs20_ce_ext_in,         
   
   input  [8:0]                                     rx_bs20_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs20_cntvalueout_ext_out,     
   input                                            rx_bs20_en_vtc_ext_in,     
   input                                            rx_bs20_inc_ext_in,        
   input                                            rx_bs20_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs20_Q_data_to_fabric_out,    
   input                                            rx_bs20_datain,         
   
   // Fifo Signals
   output                                           rx_bs20_fifo_empty_out,     
   input                                            rx_bs20_fifo_rd_clk_in,    
   input                                            rx_bs20_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs20_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs20_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs20_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs20_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice21 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs21_ce_in,              
   input  [8:0]                                     rx_bs21_cntvaluein,      
   output [8:0]                                     rx_bs21_cntvalueout,    
   input                                            rx_bs21_en_vtc_in,          
   input                                            rx_bs21_inc_in,             
   input                                            rx_bs21_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs21_ce_ext_in,         
   
   input  [8:0]                                     rx_bs21_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs21_cntvalueout_ext_out,     
   input                                            rx_bs21_en_vtc_ext_in,     
   input                                            rx_bs21_inc_ext_in,        
   input                                            rx_bs21_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs21_Q_data_to_fabric_out,    
   input                                            rx_bs21_datain,         
   
   // Fifo Signals
   output                                           rx_bs21_fifo_empty_out,     
   input                                            rx_bs21_fifo_rd_clk_in,    
   input                                            rx_bs21_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs21_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs21_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs21_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs21_tx_bit_ctrl_out,     
    
   
   // --------------------------------------------------------
   // Bitslice22 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs22_ce_in,              
   input  [8:0]                                     rx_bs22_cntvaluein,      
   output [8:0]                                     rx_bs22_cntvalueout,    
   input                                            rx_bs22_en_vtc_in,          
   input                                            rx_bs22_inc_in,             
   input                                            rx_bs22_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs22_ce_ext_in,         
   
   input  [8:0]                                     rx_bs22_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs22_cntvalueout_ext_out,     
   input                                            rx_bs22_en_vtc_ext_in,     
   input                                            rx_bs22_inc_ext_in,        
   input                                            rx_bs22_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs22_Q_data_to_fabric_out,    
   input                                            rx_bs22_datain,         
   
   // Fifo Signals
   output                                           rx_bs22_fifo_empty_out,     
   input                                            rx_bs22_fifo_rd_clk_in,    
   input                                            rx_bs22_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs22_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs22_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs22_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs22_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice23 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs23_ce_in,              
   input  [8:0]                                     rx_bs23_cntvaluein,      
   output [8:0]                                     rx_bs23_cntvalueout,    
   input                                            rx_bs23_en_vtc_in,          
   input                                            rx_bs23_inc_in,             
   input                                            rx_bs23_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs23_ce_ext_in,         
   
   input  [8:0]                                     rx_bs23_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs23_cntvalueout_ext_out,     
   input                                            rx_bs23_en_vtc_ext_in,     
   input                                            rx_bs23_inc_ext_in,        
   input                                            rx_bs23_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs23_Q_data_to_fabric_out,    
   input                                            rx_bs23_datain,         
   
   // Fifo Signals
   output                                           rx_bs23_fifo_empty_out,     
   input                                            rx_bs23_fifo_rd_clk_in,    
   input                                            rx_bs23_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs23_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs23_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs23_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs23_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice24 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs24_ce_in,              
   input  [8:0]                                     rx_bs24_cntvaluein,      
   output [8:0]                                     rx_bs24_cntvalueout,    
   input                                            rx_bs24_en_vtc_in,          
   input                                            rx_bs24_inc_in,             
   input                                            rx_bs24_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs24_ce_ext_in,         
   
   input  [8:0]                                     rx_bs24_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs24_cntvalueout_ext_out,     
   input                                            rx_bs24_en_vtc_ext_in,     
   input                                            rx_bs24_inc_ext_in,        
   input                                            rx_bs24_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs24_Q_data_to_fabric_out,    
   input                                            rx_bs24_datain,         
   
   // Fifo Signals
   output                                           rx_bs24_fifo_empty_out,     
   input                                            rx_bs24_fifo_rd_clk_in,    
   input                                            rx_bs24_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs24_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs24_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs24_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs24_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice25 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs25_ce_in,              
   input  [8:0]                                     rx_bs25_cntvaluein,      
   output [8:0]                                     rx_bs25_cntvalueout,    
   input                                            rx_bs25_en_vtc_in,          
   input                                            rx_bs25_inc_in,             
   input                                            rx_bs25_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs25_ce_ext_in,         
   
   input  [8:0]                                     rx_bs25_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs25_cntvalueout_ext_out,     
   input                                            rx_bs25_en_vtc_ext_in,     
   input                                            rx_bs25_inc_ext_in,        
   input                                            rx_bs25_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs25_Q_data_to_fabric_out,    
   input                                            rx_bs25_datain,         
   
   // Fifo Signals
   output                                           rx_bs25_fifo_empty_out,     
   input                                            rx_bs25_fifo_rd_clk_in,    
   input                                            rx_bs25_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs25_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs25_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs25_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs25_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice26 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs26_ce_in,              
   input  [8:0]                                     rx_bs26_cntvaluein,      
   output [8:0]                                     rx_bs26_cntvalueout,    
   input                                            rx_bs26_en_vtc_in,          
   input                                            rx_bs26_inc_in,             
   input                                            rx_bs26_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs26_ce_ext_in,         
   
   input  [8:0]                                     rx_bs26_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs26_cntvalueout_ext_out,     
   input                                            rx_bs26_en_vtc_ext_in,     
   input                                            rx_bs26_inc_ext_in,        
   input                                            rx_bs26_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs26_Q_data_to_fabric_out,    
   input                                            rx_bs26_datain,         
   
   // Fifo Signals
   output                                           rx_bs26_fifo_empty_out,     
   input                                            rx_bs26_fifo_rd_clk_in,    
   input                                            rx_bs26_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs26_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs26_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs26_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs26_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice27 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs27_ce_in,              
   input  [8:0]                                     rx_bs27_cntvaluein,      
   output [8:0]                                     rx_bs27_cntvalueout,    
   input                                            rx_bs27_en_vtc_in,          
   input                                            rx_bs27_inc_in,             
   input                                            rx_bs27_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs27_ce_ext_in,         
   
   input  [8:0]                                     rx_bs27_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs27_cntvalueout_ext_out,     
   input                                            rx_bs27_en_vtc_ext_in,     
   input                                            rx_bs27_inc_ext_in,        
   input                                            rx_bs27_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs27_Q_data_to_fabric_out,    
   input                                            rx_bs27_datain,         
   
   // Fifo Signals
   output                                           rx_bs27_fifo_empty_out,     
   input                                            rx_bs27_fifo_rd_clk_in,    
   input                                            rx_bs27_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs27_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs27_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs27_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs27_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice28 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs28_ce_in,              
   input  [8:0]                                     rx_bs28_cntvaluein,      
   output [8:0]                                     rx_bs28_cntvalueout,    
   input                                            rx_bs28_en_vtc_in,          
   input                                            rx_bs28_inc_in,             
   input                                            rx_bs28_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs28_ce_ext_in,         
   
   input  [8:0]                                     rx_bs28_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs28_cntvalueout_ext_out,     
   input                                            rx_bs28_en_vtc_ext_in,     
   input                                            rx_bs28_inc_ext_in,        
   input                                            rx_bs28_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs28_Q_data_to_fabric_out,    
   input                                            rx_bs28_datain,         
   
   // Fifo Signals
   output                                           rx_bs28_fifo_empty_out,     
   input                                            rx_bs28_fifo_rd_clk_in,    
   input                                            rx_bs28_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs28_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs28_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs28_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs28_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice29 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs29_ce_in,              
   input  [8:0]                                     rx_bs29_cntvaluein,      
   output [8:0]                                     rx_bs29_cntvalueout,    
   input                                            rx_bs29_en_vtc_in,          
   input                                            rx_bs29_inc_in,             
   input                                            rx_bs29_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs29_ce_ext_in,         
   
   input  [8:0]                                     rx_bs29_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs29_cntvalueout_ext_out,     
   input                                            rx_bs29_en_vtc_ext_in,     
   input                                            rx_bs29_inc_ext_in,        
   input                                            rx_bs29_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs29_Q_data_to_fabric_out,    
   input                                            rx_bs29_datain,         
   
   // Fifo Signals
   output                                           rx_bs29_fifo_empty_out,     
   input                                            rx_bs29_fifo_rd_clk_in,    
   input                                            rx_bs29_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs29_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs29_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs29_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs29_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice30 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs30_ce_in,              
   input  [8:0]                                     rx_bs30_cntvaluein,      
   output [8:0]                                     rx_bs30_cntvalueout,    
   input                                            rx_bs30_en_vtc_in,          
   input                                            rx_bs30_inc_in,             
   input                                            rx_bs30_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs30_ce_ext_in,         
   
   input  [8:0]                                     rx_bs30_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs30_cntvalueout_ext_out,     
   input                                            rx_bs30_en_vtc_ext_in,     
   input                                            rx_bs30_inc_ext_in,        
   input                                            rx_bs30_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs30_Q_data_to_fabric_out,    
   input                                            rx_bs30_datain,         
   
   // Fifo Signals
   output                                           rx_bs30_fifo_empty_out,     
   input                                            rx_bs30_fifo_rd_clk_in,    
   input                                            rx_bs30_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs30_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs30_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs30_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs30_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs31_ce_in,              
   input  [8:0]                                     rx_bs31_cntvaluein,      
   output [8:0]                                     rx_bs31_cntvalueout,    
   input                                            rx_bs31_en_vtc_in,          
   input                                            rx_bs31_inc_in,             
   input                                            rx_bs31_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs31_ce_ext_in,         
   
   input  [8:0]                                     rx_bs31_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs31_cntvalueout_ext_out,     
   input                                            rx_bs31_en_vtc_ext_in,     
   input                                            rx_bs31_inc_ext_in,        
   input                                            rx_bs31_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs31_Q_data_to_fabric_out,    
   input                                            rx_bs31_datain,         
   
   // Fifo Signals
   output                                           rx_bs31_fifo_empty_out,     
   input                                            rx_bs31_fifo_rd_clk_in,    
   input                                            rx_bs31_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs31_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs31_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs31_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs31_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice32 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs32_ce_in,              
   input  [8:0]                                     rx_bs32_cntvaluein,      
   output [8:0]                                     rx_bs32_cntvalueout,    
   input                                            rx_bs32_en_vtc_in,          
   input                                            rx_bs32_inc_in,             
   input                                            rx_bs32_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs32_ce_ext_in,         
   
   input  [8:0]                                     rx_bs32_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs32_cntvalueout_ext_out,     
   input                                            rx_bs32_en_vtc_ext_in,     
   input                                            rx_bs32_inc_ext_in,        
   input                                            rx_bs32_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs32_Q_data_to_fabric_out,    
   input                                            rx_bs32_datain,         
   
   // Fifo Signals
   output                                           rx_bs32_fifo_empty_out,     
   input                                            rx_bs32_fifo_rd_clk_in,    
   input                                            rx_bs32_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs32_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs32_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs32_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs32_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice33 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs33_ce_in,              
   input  [8:0]                                     rx_bs33_cntvaluein,      
   output [8:0]                                     rx_bs33_cntvalueout,    
   input                                            rx_bs33_en_vtc_in,          
   input                                            rx_bs33_inc_in,             
   input                                            rx_bs33_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs33_ce_ext_in,         
   
   input  [8:0]                                     rx_bs33_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs33_cntvalueout_ext_out,     
   input                                            rx_bs33_en_vtc_ext_in,     
   input                                            rx_bs33_inc_ext_in,        
   input                                            rx_bs33_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs33_Q_data_to_fabric_out,    
   input                                            rx_bs33_datain,         
   
   // Fifo Signals
   output                                           rx_bs33_fifo_empty_out,     
   input                                            rx_bs33_fifo_rd_clk_in,    
   input                                            rx_bs33_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs33_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs33_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs33_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs33_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice33 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs34_ce_in,              
   input  [8:0]                                     rx_bs34_cntvaluein,      
   output [8:0]                                     rx_bs34_cntvalueout,    
   input                                            rx_bs34_en_vtc_in,          
   input                                            rx_bs34_inc_in,             
   input                                            rx_bs34_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs34_ce_ext_in,         
   
   input  [8:0]                                     rx_bs34_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs34_cntvalueout_ext_out,     
   input                                            rx_bs34_en_vtc_ext_in,     
   input                                            rx_bs34_inc_ext_in,        
   input                                            rx_bs34_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs34_Q_data_to_fabric_out,    
   input                                            rx_bs34_datain,         
   
   // Fifo Signals
   output                                           rx_bs34_fifo_empty_out,     
   input                                            rx_bs34_fifo_rd_clk_in,    
   input                                            rx_bs34_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs34_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs34_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs34_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs34_tx_bit_ctrl_out,     
    
   
   // --------------------------------------------------------
   // Bitslice35 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs35_ce_in,              
   input  [8:0]                                     rx_bs35_cntvaluein,      
   output [8:0]                                     rx_bs35_cntvalueout,    
   input                                            rx_bs35_en_vtc_in,          
   input                                            rx_bs35_inc_in,             
   input                                            rx_bs35_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs35_ce_ext_in,         
   
   input  [8:0]                                     rx_bs35_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs35_cntvalueout_ext_out,     
   input                                            rx_bs35_en_vtc_ext_in,     
   input                                            rx_bs35_inc_ext_in,        
   input                                            rx_bs35_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs35_Q_data_to_fabric_out,    
   input                                            rx_bs35_datain,         
   
   // Fifo Signals
   output                                           rx_bs35_fifo_empty_out,     
   input                                            rx_bs35_fifo_rd_clk_in,    
   input                                            rx_bs35_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs35_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs35_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs35_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs35_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice36 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs36_ce_in,              
   input  [8:0]                                     rx_bs36_cntvaluein,      
   output [8:0]                                     rx_bs36_cntvalueout,    
   input                                            rx_bs36_en_vtc_in,          
   input                                            rx_bs36_inc_in,             
   input                                            rx_bs36_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs36_ce_ext_in,         
   
   input  [8:0]                                     rx_bs36_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs36_cntvalueout_ext_out,     
   input                                            rx_bs36_en_vtc_ext_in,     
   input                                            rx_bs36_inc_ext_in,        
   input                                            rx_bs36_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs36_Q_data_to_fabric_out,    
   input                                            rx_bs36_datain,         
   
   // Fifo Signals
   output                                           rx_bs36_fifo_empty_out,     
   input                                            rx_bs36_fifo_rd_clk_in,    
   input                                            rx_bs36_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs36_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs36_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs36_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs36_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice37 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs37_ce_in,              
   input  [8:0]                                     rx_bs37_cntvaluein,      
   output [8:0]                                     rx_bs37_cntvalueout,    
   input                                            rx_bs37_en_vtc_in,          
   input                                            rx_bs37_inc_in,             
   input                                            rx_bs37_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs37_ce_ext_in,         
   
   input  [8:0]                                     rx_bs37_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs37_cntvalueout_ext_out,     
   input                                            rx_bs37_en_vtc_ext_in,     
   input                                            rx_bs37_inc_ext_in,        
   input                                            rx_bs37_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs37_Q_data_to_fabric_out,    
   input                                            rx_bs37_datain,         
   
   // Fifo Signals
   output                                           rx_bs37_fifo_empty_out,     
   input                                            rx_bs37_fifo_rd_clk_in,    
   input                                            rx_bs37_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs37_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs37_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs37_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs37_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice38 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs38_ce_in,              
   input  [8:0]                                     rx_bs38_cntvaluein,      
   output [8:0]                                     rx_bs38_cntvalueout,    
   input                                            rx_bs38_en_vtc_in,          
   input                                            rx_bs38_inc_in,             
   input                                            rx_bs38_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs38_ce_ext_in,         
   
   input  [8:0]                                     rx_bs38_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs38_cntvalueout_ext_out,     
   input                                            rx_bs38_en_vtc_ext_in,     
   input                                            rx_bs38_inc_ext_in,        
   input                                            rx_bs38_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs38_Q_data_to_fabric_out,    
   input                                            rx_bs38_datain,         
   
   // Fifo Signals
   output                                           rx_bs38_fifo_empty_out,     
   input                                            rx_bs38_fifo_rd_clk_in,    
   input                                            rx_bs38_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs38_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs38_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs38_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs38_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs39_ce_in,              
   input  [8:0]                                     rx_bs39_cntvaluein,      
   output [8:0]                                     rx_bs39_cntvalueout,    
   input                                            rx_bs39_en_vtc_in,          
   input                                            rx_bs39_inc_in,             
   input                                            rx_bs39_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs39_ce_ext_in,         
   
   input  [8:0]                                     rx_bs39_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs39_cntvalueout_ext_out,     
   input                                            rx_bs39_en_vtc_ext_in,     
   input                                            rx_bs39_inc_ext_in,        
   input                                            rx_bs39_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs39_Q_data_to_fabric_out,    
   input                                            rx_bs39_datain,         
   
   // Fifo Signals
   output                                           rx_bs39_fifo_empty_out,     
   input                                            rx_bs39_fifo_rd_clk_in,    
   input                                            rx_bs39_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs39_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs39_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs39_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs39_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice40 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs40_ce_in,              
   input  [8:0]                                     rx_bs40_cntvaluein,      
   output [8:0]                                     rx_bs40_cntvalueout,    
   input                                            rx_bs40_en_vtc_in,          
   input                                            rx_bs40_inc_in,             
   input                                            rx_bs40_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs40_ce_ext_in,         
   
   input  [8:0]                                     rx_bs40_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs40_cntvalueout_ext_out,     
   input                                            rx_bs40_en_vtc_ext_in,     
   input                                            rx_bs40_inc_ext_in,        
   input                                            rx_bs40_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs40_Q_data_to_fabric_out,    
   input                                            rx_bs40_datain,         
   
   // Fifo Signals
   output                                           rx_bs40_fifo_empty_out,     
   input                                            rx_bs40_fifo_rd_clk_in,    
   input                                            rx_bs40_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs40_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs40_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs40_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs40_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs41_ce_in,              
   input  [8:0]                                     rx_bs41_cntvaluein,      
   output [8:0]                                     rx_bs41_cntvalueout,    
   input                                            rx_bs41_en_vtc_in,          
   input                                            rx_bs41_inc_in,             
   input                                            rx_bs41_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs41_ce_ext_in,         
   
   input  [8:0]                                     rx_bs41_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs41_cntvalueout_ext_out,     
   input                                            rx_bs41_en_vtc_ext_in,     
   input                                            rx_bs41_inc_ext_in,        
   input                                            rx_bs41_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs41_Q_data_to_fabric_out,    
   input                                            rx_bs41_datain,         
   
   // Fifo Signals
   output                                           rx_bs41_fifo_empty_out,     
   input                                            rx_bs41_fifo_rd_clk_in,    
   input                                            rx_bs41_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs41_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs41_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs41_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs41_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice42 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs42_ce_in,              
   input  [8:0]                                     rx_bs42_cntvaluein,      
   output [8:0]                                     rx_bs42_cntvalueout,    
   input                                            rx_bs42_en_vtc_in,          
   input                                            rx_bs42_inc_in,             
   input                                            rx_bs42_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs42_ce_ext_in,         
   
   input  [8:0]                                     rx_bs42_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs42_cntvalueout_ext_out,     
   input                                            rx_bs42_en_vtc_ext_in,     
   input                                            rx_bs42_inc_ext_in,        
   input                                            rx_bs42_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs42_Q_data_to_fabric_out,    
   input                                            rx_bs42_datain,         
   
   // Fifo Signals
   output                                           rx_bs42_fifo_empty_out,     
   input                                            rx_bs42_fifo_rd_clk_in,    
   input                                            rx_bs42_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs42_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs42_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs42_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs42_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice43 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs43_ce_in,              
   input  [8:0]                                     rx_bs43_cntvaluein,      
   output [8:0]                                     rx_bs43_cntvalueout,    
   input                                            rx_bs43_en_vtc_in,          
   input                                            rx_bs43_inc_in,             
   input                                            rx_bs43_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs43_ce_ext_in,         
   
   input  [8:0]                                     rx_bs43_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs43_cntvalueout_ext_out,     
   input                                            rx_bs43_en_vtc_ext_in,     
   input                                            rx_bs43_inc_ext_in,        
   input                                            rx_bs43_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs43_Q_data_to_fabric_out,    
   input                                            rx_bs43_datain,         
   
   // Fifo Signals
   output                                           rx_bs43_fifo_empty_out,     
   input                                            rx_bs43_fifo_rd_clk_in,    
   input                                            rx_bs43_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs43_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs43_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs43_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs43_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice44 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs44_ce_in,              
   input  [8:0]                                     rx_bs44_cntvaluein,      
   output [8:0]                                     rx_bs44_cntvalueout,    
   input                                            rx_bs44_en_vtc_in,          
   input                                            rx_bs44_inc_in,             
   input                                            rx_bs44_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs44_ce_ext_in,         
   
   input  [8:0]                                     rx_bs44_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs44_cntvalueout_ext_out,     
   input                                            rx_bs44_en_vtc_ext_in,     
   input                                            rx_bs44_inc_ext_in,        
   input                                            rx_bs44_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs44_Q_data_to_fabric_out,    
   input                                            rx_bs44_datain,         
   
   // Fifo Signals
   output                                           rx_bs44_fifo_empty_out,     
   input                                            rx_bs44_fifo_rd_clk_in,    
   input                                            rx_bs44_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs44_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs44_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs44_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs44_tx_bit_ctrl_out,     
    
   
   // --------------------------------------------------------
   // Bitslice45 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs45_ce_in,              
   input  [8:0]                                     rx_bs45_cntvaluein,      
   output [8:0]                                     rx_bs45_cntvalueout,    
   input                                            rx_bs45_en_vtc_in,          
   input                                            rx_bs45_inc_in,             
   input                                            rx_bs45_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs45_ce_ext_in,         
   
   input  [8:0]                                     rx_bs45_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs45_cntvalueout_ext_out,     
   input                                            rx_bs45_en_vtc_ext_in,     
   input                                            rx_bs45_inc_ext_in,        
   input                                            rx_bs45_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs45_Q_data_to_fabric_out,    
   input                                            rx_bs45_datain,         
   
   // Fifo Signals
   output                                           rx_bs45_fifo_empty_out,     
   input                                            rx_bs45_fifo_rd_clk_in,    
   input                                            rx_bs45_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs45_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs45_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs45_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs45_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice46 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs46_ce_in,              
   input  [8:0]                                     rx_bs46_cntvaluein,      
   output [8:0]                                     rx_bs46_cntvalueout,    
   input                                            rx_bs46_en_vtc_in,          
   input                                            rx_bs46_inc_in,             
   input                                            rx_bs46_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs46_ce_ext_in,         
   
   input  [8:0]                                     rx_bs46_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs46_cntvalueout_ext_out,     
   input                                            rx_bs46_en_vtc_ext_in,     
   input                                            rx_bs46_inc_ext_in,        
   input                                            rx_bs46_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs46_Q_data_to_fabric_out,    
   input                                            rx_bs46_datain,         
   
   // Fifo Signals
   output                                           rx_bs46_fifo_empty_out,     
   input                                            rx_bs46_fifo_rd_clk_in,    
   input                                            rx_bs46_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs46_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs46_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs46_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs46_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice47 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs47_ce_in,              
   input  [8:0]                                     rx_bs47_cntvaluein,      
   output [8:0]                                     rx_bs47_cntvalueout,    
   input                                            rx_bs47_en_vtc_in,          
   input                                            rx_bs47_inc_in,             
   input                                            rx_bs47_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs47_ce_ext_in,         
   
   input  [8:0]                                     rx_bs47_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs47_cntvalueout_ext_out,     
   input                                            rx_bs47_en_vtc_ext_in,     
   input                                            rx_bs47_inc_ext_in,        
   input                                            rx_bs47_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs47_Q_data_to_fabric_out,    
   input                                            rx_bs47_datain,         
   
   // Fifo Signals
   output                                           rx_bs47_fifo_empty_out,     
   input                                            rx_bs47_fifo_rd_clk_in,    
   input                                            rx_bs47_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs47_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs47_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs47_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs47_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice48 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs48_ce_in,              
   input  [8:0]                                     rx_bs48_cntvaluein,      
   output [8:0]                                     rx_bs48_cntvalueout,    
   input                                            rx_bs48_en_vtc_in,          
   input                                            rx_bs48_inc_in,             
   input                                            rx_bs48_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs48_ce_ext_in,         
   
   input  [8:0]                                     rx_bs48_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs48_cntvalueout_ext_out,     
   input                                            rx_bs48_en_vtc_ext_in,     
   input                                            rx_bs48_inc_ext_in,        
   input                                            rx_bs48_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs48_Q_data_to_fabric_out,    
   input                                            rx_bs48_datain,         
   
   // Fifo Signals
   output                                           rx_bs48_fifo_empty_out,     
   input                                            rx_bs48_fifo_rd_clk_in,    
   input                                            rx_bs48_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs48_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs48_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs48_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs48_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice49 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs49_ce_in,              
   input  [8:0]                                     rx_bs49_cntvaluein,      
   output [8:0]                                     rx_bs49_cntvalueout,    
   input                                            rx_bs49_en_vtc_in,          
   input                                            rx_bs49_inc_in,             
   input                                            rx_bs49_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs49_ce_ext_in,         
   
   input  [8:0]                                     rx_bs49_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs49_cntvalueout_ext_out,     
   input                                            rx_bs49_en_vtc_ext_in,     
   input                                            rx_bs49_inc_ext_in,        
   input                                            rx_bs49_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs49_Q_data_to_fabric_out,    
   input                                            rx_bs49_datain,         
   
   // Fifo Signals
   output                                           rx_bs49_fifo_empty_out,     
   input                                            rx_bs49_fifo_rd_clk_in,    
   input                                            rx_bs49_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs49_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs49_rx_bit_ctrl_out,     
   input   [39:0]                                   rx_bs49_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs49_tx_bit_ctrl_out,     
   
   // --------------------------------------------------------
   // Bitslice50 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs50_ce_in,              
   input  [8:0]                                     rx_bs50_cntvaluein,      
   output [8:0]                                     rx_bs50_cntvalueout,    
   input                                            rx_bs50_en_vtc_in,          
   input                                            rx_bs50_inc_in,             
   input                                            rx_bs50_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs50_ce_ext_in,         
   
   input  [8:0]                                     rx_bs50_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs50_cntvalueout_ext_out,  
   input                                            rx_bs50_en_vtc_ext_in,     
   input                                            rx_bs50_inc_ext_in,        
   input                                            rx_bs50_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs50_Q_data_to_fabric_out,  
   input                                            rx_bs50_datain,         
   
   // Fifo Signals
   output                                           rx_bs50_fifo_empty_out,     
   input                                            rx_bs50_fifo_rd_clk_in,    
   input                                            rx_bs50_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs50_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs50_rx_bit_ctrl_out,    
   input   [39:0]                                   rx_bs50_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs50_tx_bit_ctrl_out,     
   
   
   // --------------------------------------------------------
   // Bitslice51 signals  
   // --------------------------------------------------------
   // Delay Signals
   input                                            rx_bs51_ce_in,              
   input  [8:0]                                     rx_bs51_cntvaluein,      
   output [8:0]                                     rx_bs51_cntvalueout,    
   input                                            rx_bs51_en_vtc_in,          
   input                                            rx_bs51_inc_in,             
   input                                            rx_bs51_load_in,            
    
   // Extended Delay Signals
   input                                            rx_bs51_ce_ext_in,         
   
   input  [8:0]                                     rx_bs51_cntvaluein_ext_in, 
   output [8:0]                                     rx_bs51_cntvalueout_ext_out,  
   input                                            rx_bs51_en_vtc_ext_in,     
   input                                            rx_bs51_inc_ext_in,        
   input                                            rx_bs51_load_ext_in,       
    
   // Data Signals
   output   [C_SERIALIZATION_FACTOR -1 :0]          rx_bs51_Q_data_to_fabric_out,  
   input                                            rx_bs51_datain,         
   
   // Fifo Signals
   output                                           rx_bs51_fifo_empty_out,     
   input                                            rx_bs51_fifo_rd_clk_in,    
   input                                            rx_bs51_fifo_rd_en_in,     
    
   // Ribbon Signals
   input   [39:0]                                   rx_bs51_rx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs51_rx_bit_ctrl_out,   
   input   [39:0]                                   rx_bs51_tx_bit_ctrl_in, 
   output  [39:0]                                   rx_bs51_tx_bit_ctrl_out,    
   
   
   // Fifo Write Clock Signals
   output                                           rx_bs0_nib0_fifo_wrclk_out, 
   output                                           rx_bs6_nib1_fifo_wrclk_out, 
   output                                           rx_bs13_nib2_fifo_wrclk_out, 
   output                                           rx_bs19_nib3_fifo_wrclk_out, 
   output                                           rx_bs26_nib4_fifo_wrclk_out, 
   output                                           rx_bs32_nib5_fifo_wrclk_out, 
   output                                           rx_bs39_nib6_fifo_wrclk_out, 
   output                                           rx_bs45_nib7_fifo_wrclk_out, 
   
   
   // Bitslip Error
   output                                           rx_bs0_bitslip_error_out,
   output                                           rx_bs1_bitslip_error_out, 
   output                                           rx_bs2_bitslip_error_out, 
   output                                           rx_bs3_bitslip_error_out, 
   output                                           rx_bs4_bitslip_error_out, 
   output                                           rx_bs5_bitslip_error_out,
   output                                           rx_bs6_bitslip_error_out,
   output                                           rx_bs7_bitslip_error_out, 
   output                                           rx_bs8_bitslip_error_out, 
   output                                           rx_bs9_bitslip_error_out, 
   output                                           rx_bs10_bitslip_error_out,
   output                                           rx_bs11_bitslip_error_out, 
   output                                           rx_bs12_bitslip_error_out, 
   output                                           rx_bs13_bitslip_error_out, 
   output                                           rx_bs14_bitslip_error_out, 
   output                                           rx_bs15_bitslip_error_out,
   output                                           rx_bs16_bitslip_error_out,
   output                                           rx_bs17_bitslip_error_out, 
   output                                           rx_bs18_bitslip_error_out, 
   output                                           rx_bs19_bitslip_error_out, 
   output                                           rx_bs20_bitslip_error_out, 
   output                                           rx_bs21_bitslip_error_out, 
   output                                           rx_bs22_bitslip_error_out, 
   output                                           rx_bs23_bitslip_error_out, 
   output                                           rx_bs24_bitslip_error_out, 
   output                                           rx_bs25_bitslip_error_out,
   output                                           rx_bs26_bitslip_error_out,
   output                                           rx_bs27_bitslip_error_out, 
   output                                           rx_bs28_bitslip_error_out, 
   output                                           rx_bs29_bitslip_error_out, 
   output                                           rx_bs30_bitslip_error_out, 
   output                                           rx_bs31_bitslip_error_out, 
   output                                           rx_bs32_bitslip_error_out, 
   output                                           rx_bs33_bitslip_error_out, 
   output                                           rx_bs34_bitslip_error_out, 
   output                                           rx_bs35_bitslip_error_out,
   output                                           rx_bs36_bitslip_error_out,
   output                                           rx_bs37_bitslip_error_out, 
   output                                           rx_bs38_bitslip_error_out, 
   output                                           rx_bs39_bitslip_error_out, 
   output                                           rx_bs40_bitslip_error_out,
   output                                           rx_bs41_bitslip_error_out, 
   output                                           rx_bs42_bitslip_error_out, 
   output                                           rx_bs43_bitslip_error_out, 
   output                                           rx_bs44_bitslip_error_out, 
   output                                           rx_bs45_bitslip_error_out,
   output                                           rx_bs46_bitslip_error_out,
   output                                           rx_bs47_bitslip_error_out, 
   output                                           rx_bs48_bitslip_error_out, 
   output                                           rx_bs49_bitslip_error_out, 
   output                                           rx_bs50_bitslip_error_out,
   output                                           rx_bs51_bitslip_error_out
    );
   
   wire [51:0] w_rx_bs_rst;
   wire [51:0] w_rx_bs_rst_dly;
   wire [51:0]  start_bitslip_sync;

   // Cascade value for enabling extended delays, attribute is set with this
   // value		   
   localparam C_CASCADE               = (C_RX_DELAY_CASCADE) ? "TRUE" : "FALSE";
                                            
   localparam [51:0] EN_N_PINS_M      = {
                                         C_RX_BITSLICE_EN[51],
                                         C_DIFF_EN[50] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[50],
                                         C_RX_BITSLICE_EN[49],
                                         C_DIFF_EN[48] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[48],
                                         C_RX_BITSLICE_EN[47],
                                         C_DIFF_EN[46] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[46],
                                         C_RX_BITSLICE_EN[45],
                                         C_DIFF_EN[44] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[44],
                                         C_RX_BITSLICE_EN[43],
                                         C_DIFF_EN[42] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[42],
                                         C_RX_BITSLICE_EN[41],
                                         C_DIFF_EN[40] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[40],
                                         C_RX_BITSLICE_EN[39],
                                         C_RX_BITSLICE_EN[38],
                                         C_DIFF_EN[37] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[37],
                                         C_RX_BITSLICE_EN[36],
                                         C_DIFF_EN[35] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[35],
                                         C_RX_BITSLICE_EN[34],
                                         C_DIFF_EN[33] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[33],
                                         C_RX_BITSLICE_EN[32],
                                         C_DIFF_EN[31] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[31],
                                         C_RX_BITSLICE_EN[30],
                                         C_DIFF_EN[29] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[29],
                                         C_RX_BITSLICE_EN[28],
                                         C_DIFF_EN[27] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[27],
                                         C_RX_BITSLICE_EN[26],
                                         C_RX_BITSLICE_EN[25],
                                         C_DIFF_EN[24] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[24],
                                         C_RX_BITSLICE_EN[23],
                                         C_DIFF_EN[22] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[22],
                                         C_RX_BITSLICE_EN[21],
                                         C_DIFF_EN[20] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[20],
                                         C_RX_BITSLICE_EN[19],
                                         C_DIFF_EN[18] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[18],
                                         C_RX_BITSLICE_EN[17],
                                         C_DIFF_EN[16] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[16],
                                         C_RX_BITSLICE_EN[15],
                                         C_DIFF_EN[14] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[14],
                                         C_RX_BITSLICE_EN[13],
                                         C_RX_BITSLICE_EN[12],
                                         C_DIFF_EN[11] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[11],
                                         C_RX_BITSLICE_EN[10],
                                         C_DIFF_EN[9] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[9],
                                         C_RX_BITSLICE_EN[8],
                                         C_DIFF_EN[7] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[7],
                                         C_RX_BITSLICE_EN[6],
                                         C_DIFF_EN[5] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[5],
                                         C_RX_BITSLICE_EN[4],
                                         C_DIFF_EN[3] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[3],
                                         C_RX_BITSLICE_EN[2],
                                         C_DIFF_EN[1] == 1'b1 ? 1'b0 : C_RX_BITSLICE_EN[1],
                                         C_RX_BITSLICE_EN[0]
                                        };
   //RX bitslice instantiations based on template
   localparam [51:0] C_RX_BS_INST = (C_TEMPLATE != 0) ? C_RX_PIN_EN : ((C_ENABLE_N_PINS == 0) ? EN_N_PINS_M : C_RX_BITSLICE_EN);
   // RX DELAY TYPE Parameter --- string type
   localparam [103:0]  C_RX_DELAY_TYPE  =  {
                                          C_RX_DELAY_TYPE51,
                                          C_RX_DELAY_TYPE50,
                                          C_RX_DELAY_TYPE49,
                                          C_RX_DELAY_TYPE48,
                                          C_RX_DELAY_TYPE47,
                                          C_RX_DELAY_TYPE46,
                                          C_RX_DELAY_TYPE45,
                                          C_RX_DELAY_TYPE44,
                                          C_RX_DELAY_TYPE43,
                                          C_RX_DELAY_TYPE42,
   				          C_RX_DELAY_TYPE41,
   				          C_RX_DELAY_TYPE40,
                                          C_RX_DELAY_TYPE39,
   				          C_RX_DELAY_TYPE38,
   				          C_RX_DELAY_TYPE37,
                                          C_RX_DELAY_TYPE36,
   				          C_RX_DELAY_TYPE35,
   				          C_RX_DELAY_TYPE34,
                                          C_RX_DELAY_TYPE33,
   				          C_RX_DELAY_TYPE32,
   				          C_RX_DELAY_TYPE31,
                                          C_RX_DELAY_TYPE30,
   				          C_RX_DELAY_TYPE29,
   				          C_RX_DELAY_TYPE28,
                                          C_RX_DELAY_TYPE27,
   				          C_RX_DELAY_TYPE26,
   				          C_RX_DELAY_TYPE25,
                                          C_RX_DELAY_TYPE24,
   				          C_RX_DELAY_TYPE23,
   				          C_RX_DELAY_TYPE22,
                                          C_RX_DELAY_TYPE21,
   				          C_RX_DELAY_TYPE20,
   				          C_RX_DELAY_TYPE19,
                                          C_RX_DELAY_TYPE18,
   				          C_RX_DELAY_TYPE17,
   				          C_RX_DELAY_TYPE16,
                                          C_RX_DELAY_TYPE15,
   				          C_RX_DELAY_TYPE14,
   				          C_RX_DELAY_TYPE13,
                                          C_RX_DELAY_TYPE12,
   				          C_RX_DELAY_TYPE11,
   				          C_RX_DELAY_TYPE10,
   				          C_RX_DELAY_TYPE9,
                                          C_RX_DELAY_TYPE8,
   				          C_RX_DELAY_TYPE7,
   				          C_RX_DELAY_TYPE6,
                                          C_RX_DELAY_TYPE5,
   				          C_RX_DELAY_TYPE4,
   				          C_RX_DELAY_TYPE3,
                                          C_RX_DELAY_TYPE2,
   				          C_RX_DELAY_TYPE1,
   				          C_RX_DELAY_TYPE0
   				     };
   
   
   // RX DELAY VALUE Parameter
   localparam [623:0] C_RX_DELAY_VALUE =  {
                                          C_RX_DELAY_VALUE51,
                                          C_RX_DELAY_VALUE50,
                                          C_RX_DELAY_VALUE49,
                                          C_RX_DELAY_VALUE48,
                                          C_RX_DELAY_VALUE47,
                                          C_RX_DELAY_VALUE46,
                                          C_RX_DELAY_VALUE45,
                                          C_RX_DELAY_VALUE44,
                                          C_RX_DELAY_VALUE43,
                                          C_RX_DELAY_VALUE42,
   				          C_RX_DELAY_VALUE41,
   				          C_RX_DELAY_VALUE40,
                                          C_RX_DELAY_VALUE39,
   				          C_RX_DELAY_VALUE38,
   				          C_RX_DELAY_VALUE37,
                                          C_RX_DELAY_VALUE36,
   				          C_RX_DELAY_VALUE35,
   				          C_RX_DELAY_VALUE34,
                                          C_RX_DELAY_VALUE33,
   				          C_RX_DELAY_VALUE32,
   				          C_RX_DELAY_VALUE31,
                                          C_RX_DELAY_VALUE30,
   				          C_RX_DELAY_VALUE29,
   				          C_RX_DELAY_VALUE28,
                                          C_RX_DELAY_VALUE27,
   				          C_RX_DELAY_VALUE26,
   				          C_RX_DELAY_VALUE25,
                                          C_RX_DELAY_VALUE24,
   				          C_RX_DELAY_VALUE23,
   				          C_RX_DELAY_VALUE22,
                                          C_RX_DELAY_VALUE21,
   				          C_RX_DELAY_VALUE20,
   				          C_RX_DELAY_VALUE19,
                                          C_RX_DELAY_VALUE18,
   				          C_RX_DELAY_VALUE17,
   				          C_RX_DELAY_VALUE16,
                                          C_RX_DELAY_VALUE15,
   				          C_RX_DELAY_VALUE14,
   				          C_RX_DELAY_VALUE13,
                                          C_RX_DELAY_VALUE12,
   				          C_RX_DELAY_VALUE11,
   				          C_RX_DELAY_VALUE10,
   				          C_RX_DELAY_VALUE9,
                                          C_RX_DELAY_VALUE8,
   				          C_RX_DELAY_VALUE7,
   				          C_RX_DELAY_VALUE6,
                                          C_RX_DELAY_VALUE5,
   				          C_RX_DELAY_VALUE4,
   				          C_RX_DELAY_VALUE3,
                                          C_RX_DELAY_VALUE2,
   				          C_RX_DELAY_VALUE1,
   				          C_RX_DELAY_VALUE0
   				     }; 
   
   
   localparam [623:0] C_RX_DELAY_VALUE_EXT  =  {
                                          C_RX_DELAY_VALUE_EXT51,
                                          C_RX_DELAY_VALUE_EXT50,
                                          C_RX_DELAY_VALUE_EXT49,
                                          C_RX_DELAY_VALUE_EXT48,
                                          C_RX_DELAY_VALUE_EXT47,
                                          C_RX_DELAY_VALUE_EXT46,
                                          C_RX_DELAY_VALUE_EXT45,
                                          C_RX_DELAY_VALUE_EXT44,
                                          C_RX_DELAY_VALUE_EXT43,
                                          C_RX_DELAY_VALUE_EXT42,
   				          C_RX_DELAY_VALUE_EXT41,
   				          C_RX_DELAY_VALUE_EXT40,
                                          C_RX_DELAY_VALUE_EXT39,
   				          C_RX_DELAY_VALUE_EXT38,
   				          C_RX_DELAY_VALUE_EXT37,
                                          C_RX_DELAY_VALUE_EXT36,
   				          C_RX_DELAY_VALUE_EXT35,
   				          C_RX_DELAY_VALUE_EXT34,
                                          C_RX_DELAY_VALUE_EXT33,
   				          C_RX_DELAY_VALUE_EXT32,
   				          C_RX_DELAY_VALUE_EXT31,
                                          C_RX_DELAY_VALUE_EXT30,
   				          C_RX_DELAY_VALUE_EXT29,
   				          C_RX_DELAY_VALUE_EXT28,
                                          C_RX_DELAY_VALUE_EXT27,
   				          C_RX_DELAY_VALUE_EXT26,
   				          C_RX_DELAY_VALUE_EXT25,
                                          C_RX_DELAY_VALUE_EXT24,
   				          C_RX_DELAY_VALUE_EXT23,
   				          C_RX_DELAY_VALUE_EXT22,
                                          C_RX_DELAY_VALUE_EXT21,
   				          C_RX_DELAY_VALUE_EXT20,
   				          C_RX_DELAY_VALUE_EXT19,
                                          C_RX_DELAY_VALUE_EXT18,
   				          C_RX_DELAY_VALUE_EXT17,
   				          C_RX_DELAY_VALUE_EXT16,
                                          C_RX_DELAY_VALUE_EXT15,
   				          C_RX_DELAY_VALUE_EXT14,
   				          C_RX_DELAY_VALUE_EXT13,
                                          C_RX_DELAY_VALUE_EXT12,
   				          C_RX_DELAY_VALUE_EXT11,
   				          C_RX_DELAY_VALUE_EXT10,
   				          C_RX_DELAY_VALUE_EXT9,
                                          C_RX_DELAY_VALUE_EXT8,
   				          C_RX_DELAY_VALUE_EXT7,
   				          C_RX_DELAY_VALUE_EXT6,
                                          C_RX_DELAY_VALUE_EXT5,
   				          C_RX_DELAY_VALUE_EXT4,
   				          C_RX_DELAY_VALUE_EXT3,
                                          C_RX_DELAY_VALUE_EXT2,
   				          C_RX_DELAY_VALUE_EXT1,
   				          C_RX_DELAY_VALUE_EXT0
   				     }; 
   // Fifo sync mode
   localparam C_FIFO_MODE = (C_FIFO_SYNC_MODE) ? "TRUE" : "FALSE";
   
   // RX Ribbon cable signals
   // Ribbon cable signals
   wire [39:0] rx_bs_tx_bit_ctrl_out [51:0];
   
   assign rx_bs51_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[51];
   assign rx_bs50_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[50];
   assign rx_bs49_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[49];
   assign rx_bs48_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[48];
   assign rx_bs47_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[47];
   assign rx_bs46_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[46];
   assign rx_bs45_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[45];
   assign rx_bs44_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[44];
   assign rx_bs43_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[43];
   assign rx_bs42_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[42];
   assign rx_bs41_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[41];
   assign rx_bs40_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[40];
   assign rx_bs39_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[39];
   assign rx_bs38_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[38];
   assign rx_bs37_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[37];
   assign rx_bs36_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[36];
   assign rx_bs35_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[35];
   assign rx_bs34_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[34];
   assign rx_bs33_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[33];
   assign rx_bs32_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[32];
   assign rx_bs31_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[31];
   assign rx_bs30_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[30];
   assign rx_bs29_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[29];
   assign rx_bs28_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[28];
   assign rx_bs27_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[27];
   assign rx_bs26_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[26];
   assign rx_bs25_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[25];
   assign rx_bs24_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[24];
   assign rx_bs23_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[23];
   assign rx_bs22_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[22];
   assign rx_bs21_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[21];
   assign rx_bs20_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[20];
   assign rx_bs19_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[19];
   assign rx_bs18_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[18];
   assign rx_bs17_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[17];
   assign rx_bs16_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[16];
   assign rx_bs15_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[15];
   assign rx_bs14_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[14];
   assign rx_bs13_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[13];
   assign rx_bs12_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[12];
   assign rx_bs11_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[11];
   assign rx_bs10_tx_bit_ctrl_out = rx_bs_tx_bit_ctrl_out[10];
   assign rx_bs9_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[9];
   assign rx_bs8_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[8];
   assign rx_bs7_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[7];
   assign rx_bs6_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[6];
   assign rx_bs5_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[5];
   assign rx_bs4_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[4];
   assign rx_bs3_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[3];
   assign rx_bs2_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[2];
   assign rx_bs1_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[1];
   assign rx_bs0_tx_bit_ctrl_out  = rx_bs_tx_bit_ctrl_out[0];
   
   wire [39:0] rx_bs_rx_bit_ctrl_out [51:0];
   assign rx_bs51_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[51];
   assign rx_bs50_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[50];
   assign rx_bs49_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[49];
   assign rx_bs48_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[48];
   assign rx_bs47_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[47];
   assign rx_bs46_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[46];
   assign rx_bs45_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[45];
   assign rx_bs44_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[44];
   assign rx_bs43_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[43];
   assign rx_bs42_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[42];
   assign rx_bs41_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[41];
   assign rx_bs40_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[40];
   assign rx_bs39_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[39];
   assign rx_bs38_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[38];
   assign rx_bs37_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[37];
   assign rx_bs36_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[36];
   assign rx_bs35_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[35];
   assign rx_bs34_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[34];
   assign rx_bs33_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[33];
   assign rx_bs32_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[32];
   assign rx_bs31_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[31];
   assign rx_bs30_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[30];
   assign rx_bs29_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[29];
   assign rx_bs28_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[28];
   assign rx_bs27_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[27];
   assign rx_bs26_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[26];
   assign rx_bs25_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[25];
   assign rx_bs24_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[24];
   assign rx_bs23_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[23];
   assign rx_bs22_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[22];
   assign rx_bs21_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[21];
   assign rx_bs20_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[20];
   assign rx_bs19_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[19];
   assign rx_bs18_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[18];
   assign rx_bs17_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[17];
   assign rx_bs16_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[16];
   assign rx_bs15_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[15];
   assign rx_bs14_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[14];
   assign rx_bs13_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[13];
   assign rx_bs12_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[12];
   assign rx_bs11_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[11];
   assign rx_bs10_rx_bit_ctrl_out = rx_bs_rx_bit_ctrl_out[10];
   assign rx_bs9_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[9];
   assign rx_bs8_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[8];
   assign rx_bs7_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[7];
   assign rx_bs6_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[6];
   assign rx_bs5_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[5];
   assign rx_bs4_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[4];
   assign rx_bs3_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[3];
   assign rx_bs2_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[2];
   assign rx_bs1_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[1];
   assign rx_bs0_rx_bit_ctrl_out  = rx_bs_rx_bit_ctrl_out[0];
   
   wire [2079:0] rx_bs_tx_bit_ctrl_in  = {
                                                   rx_bs51_tx_bit_ctrl_in,
                                                   rx_bs50_tx_bit_ctrl_in,
                                                   rx_bs49_tx_bit_ctrl_in,
                                                   rx_bs48_tx_bit_ctrl_in,
                                                   rx_bs47_tx_bit_ctrl_in,
                                                   rx_bs46_tx_bit_ctrl_in,
                                                   rx_bs45_tx_bit_ctrl_in,
                                                   rx_bs44_tx_bit_ctrl_in,
                                                   rx_bs43_tx_bit_ctrl_in,                                                
                                                   rx_bs42_tx_bit_ctrl_in,
                                                   rx_bs41_tx_bit_ctrl_in,
                                                   rx_bs40_tx_bit_ctrl_in,
                                                   rx_bs39_tx_bit_ctrl_in,
                                                   rx_bs38_tx_bit_ctrl_in,
                                                   rx_bs37_tx_bit_ctrl_in,
                                                   rx_bs36_tx_bit_ctrl_in,
                                                   rx_bs35_tx_bit_ctrl_in,
                                                   rx_bs34_tx_bit_ctrl_in,
                                                   rx_bs33_tx_bit_ctrl_in,
                                                   rx_bs32_tx_bit_ctrl_in,
                                                   rx_bs31_tx_bit_ctrl_in,
                                                   rx_bs30_tx_bit_ctrl_in,
                                                   rx_bs29_tx_bit_ctrl_in,
                                                   rx_bs28_tx_bit_ctrl_in,
                                                   rx_bs27_tx_bit_ctrl_in,
                                                   rx_bs26_tx_bit_ctrl_in,
                                                   rx_bs25_tx_bit_ctrl_in,
                                                   rx_bs24_tx_bit_ctrl_in,
                                                   rx_bs23_tx_bit_ctrl_in,
                                                   rx_bs22_tx_bit_ctrl_in,
                                                   rx_bs21_tx_bit_ctrl_in,
                                                   rx_bs20_tx_bit_ctrl_in,
                                                   rx_bs19_tx_bit_ctrl_in,
                                                   rx_bs18_tx_bit_ctrl_in,
                                                   rx_bs17_tx_bit_ctrl_in,
                                                   rx_bs16_tx_bit_ctrl_in,
                                                   rx_bs15_tx_bit_ctrl_in,
                                                   rx_bs14_tx_bit_ctrl_in,
                                                   rx_bs13_tx_bit_ctrl_in,
                                                   rx_bs12_tx_bit_ctrl_in,
                                                   rx_bs11_tx_bit_ctrl_in,
                                                   rx_bs10_tx_bit_ctrl_in,
                                                   rx_bs9_tx_bit_ctrl_in,
                                                   rx_bs8_tx_bit_ctrl_in,
                                                   rx_bs7_tx_bit_ctrl_in,
                                                   rx_bs6_tx_bit_ctrl_in,
                                                   rx_bs5_tx_bit_ctrl_in,
                                                   rx_bs4_tx_bit_ctrl_in,
                                                   rx_bs3_tx_bit_ctrl_in,
                                                   rx_bs2_tx_bit_ctrl_in,
                                                   rx_bs1_tx_bit_ctrl_in,
                                                   rx_bs0_tx_bit_ctrl_in};	       
   
   wire  [2079:0] rx_bs_rx_bit_ctrl_in = {
                                                   rx_bs51_rx_bit_ctrl_in,
                                                   rx_bs50_rx_bit_ctrl_in,
                                                   rx_bs49_rx_bit_ctrl_in,
                                                   rx_bs48_rx_bit_ctrl_in,
                                                   rx_bs47_rx_bit_ctrl_in,
                                                   rx_bs46_rx_bit_ctrl_in,
                                                   rx_bs45_rx_bit_ctrl_in,
                                                   rx_bs44_rx_bit_ctrl_in,
                                                   rx_bs43_rx_bit_ctrl_in,                                                
                                                   rx_bs42_rx_bit_ctrl_in,
                                                   rx_bs41_rx_bit_ctrl_in,
                                                   rx_bs40_rx_bit_ctrl_in,
                                                   rx_bs39_rx_bit_ctrl_in,
                                                   rx_bs38_rx_bit_ctrl_in,
                                                   rx_bs37_rx_bit_ctrl_in,
                                                   rx_bs36_rx_bit_ctrl_in,
                                                   rx_bs35_rx_bit_ctrl_in,
                                                   rx_bs34_rx_bit_ctrl_in,
                                                   rx_bs33_rx_bit_ctrl_in,
                                                   rx_bs32_rx_bit_ctrl_in,
                                                   rx_bs31_rx_bit_ctrl_in,
                                                   rx_bs30_rx_bit_ctrl_in,
                                                   rx_bs29_rx_bit_ctrl_in,
                                                   rx_bs28_rx_bit_ctrl_in,
                                                   rx_bs27_rx_bit_ctrl_in,
                                                   rx_bs26_rx_bit_ctrl_in,
                                                   rx_bs25_rx_bit_ctrl_in,
                                                   rx_bs24_rx_bit_ctrl_in,
                                                   rx_bs23_rx_bit_ctrl_in,
                                                   rx_bs22_rx_bit_ctrl_in,
                                                   rx_bs21_rx_bit_ctrl_in,
                                                   rx_bs20_rx_bit_ctrl_in,
                                                   rx_bs19_rx_bit_ctrl_in,
                                                   rx_bs18_rx_bit_ctrl_in,
                                                   rx_bs17_rx_bit_ctrl_in,
                                                   rx_bs16_rx_bit_ctrl_in,
                                                   rx_bs15_rx_bit_ctrl_in,
                                                   rx_bs14_rx_bit_ctrl_in,
                                                   rx_bs13_rx_bit_ctrl_in,
                                                   rx_bs12_rx_bit_ctrl_in,
                                                   rx_bs11_rx_bit_ctrl_in,
                                                   rx_bs10_rx_bit_ctrl_in,
                                                   rx_bs9_rx_bit_ctrl_in,
                                                   rx_bs8_rx_bit_ctrl_in,
                                                   rx_bs7_rx_bit_ctrl_in,
                                                   rx_bs6_rx_bit_ctrl_in,
                                                   rx_bs5_rx_bit_ctrl_in,
                                                   rx_bs4_rx_bit_ctrl_in,
                                                   rx_bs3_rx_bit_ctrl_in,
                                                   rx_bs2_rx_bit_ctrl_in,
                                                   rx_bs1_rx_bit_ctrl_in,
                                                   rx_bs0_rx_bit_ctrl_in};
      
   // TX Delay Type is being used multiple times. Creating temp wire for use
   wire [51:0] w_delay_type;
   assign w_delay_type[0]    = (C_RX_DELAY_TYPE0 == 2'b01 || C_RX_DELAY_TYPE0  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[1]    = (C_RX_DELAY_TYPE1 == 2'b01 || C_RX_DELAY_TYPE1  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[2]    = (C_RX_DELAY_TYPE2 == 2'b01 || C_RX_DELAY_TYPE2  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[3]    = (C_RX_DELAY_TYPE3 == 2'b01 || C_RX_DELAY_TYPE3  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[4]    = (C_RX_DELAY_TYPE4 == 2'b01 || C_RX_DELAY_TYPE4  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[5]    = (C_RX_DELAY_TYPE5 == 2'b01 || C_RX_DELAY_TYPE5  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[6]    = (C_RX_DELAY_TYPE6 == 2'b01 || C_RX_DELAY_TYPE6  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[7]    = (C_RX_DELAY_TYPE7 == 2'b01 || C_RX_DELAY_TYPE7  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[8]    = (C_RX_DELAY_TYPE8 == 2'b01 || C_RX_DELAY_TYPE8  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[9]    = (C_RX_DELAY_TYPE9 == 2'b01 || C_RX_DELAY_TYPE9  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[10]   = (C_RX_DELAY_TYPE10 == 2'b01 || C_RX_DELAY_TYPE10 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[11]   = (C_RX_DELAY_TYPE11 == 2'b01 || C_RX_DELAY_TYPE11 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[12]   = (C_RX_DELAY_TYPE12 == 2'b01 || C_RX_DELAY_TYPE12 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[13]   = (C_RX_DELAY_TYPE13 == 2'b01 || C_RX_DELAY_TYPE13 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[14]   = (C_RX_DELAY_TYPE14 == 2'b01 || C_RX_DELAY_TYPE14 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[15]   = (C_RX_DELAY_TYPE15 == 2'b01 || C_RX_DELAY_TYPE15 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[16]   = (C_RX_DELAY_TYPE16 == 2'b01 || C_RX_DELAY_TYPE16 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[17]   = (C_RX_DELAY_TYPE17 == 2'b01 || C_RX_DELAY_TYPE17 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[18]   = (C_RX_DELAY_TYPE18 == 2'b01 || C_RX_DELAY_TYPE18 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[19]   = (C_RX_DELAY_TYPE19 == 2'b01 || C_RX_DELAY_TYPE19 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[20]   = (C_RX_DELAY_TYPE20 == 2'b01 || C_RX_DELAY_TYPE20 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[21]   = (C_RX_DELAY_TYPE21 == 2'b01 || C_RX_DELAY_TYPE21 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[22]   = (C_RX_DELAY_TYPE22 == 2'b01 || C_RX_DELAY_TYPE22 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[23]   = (C_RX_DELAY_TYPE23 == 2'b01 || C_RX_DELAY_TYPE23 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[24]   = (C_RX_DELAY_TYPE24 == 2'b01 || C_RX_DELAY_TYPE24 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[25]   = (C_RX_DELAY_TYPE25 == 2'b01 || C_RX_DELAY_TYPE25 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[26]   = (C_RX_DELAY_TYPE26 == 2'b01 || C_RX_DELAY_TYPE26 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[27]   = (C_RX_DELAY_TYPE27 == 2'b01 || C_RX_DELAY_TYPE27 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[28]   = (C_RX_DELAY_TYPE28 == 2'b01 || C_RX_DELAY_TYPE28 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[29]   = (C_RX_DELAY_TYPE29 == 2'b01 || C_RX_DELAY_TYPE29 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[30]   = (C_RX_DELAY_TYPE30 == 2'b01 || C_RX_DELAY_TYPE30 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[31]   = (C_RX_DELAY_TYPE31 == 2'b01 || C_RX_DELAY_TYPE31 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[32]   = (C_RX_DELAY_TYPE32 == 2'b01 || C_RX_DELAY_TYPE32 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[33]   = (C_RX_DELAY_TYPE33 == 2'b01 || C_RX_DELAY_TYPE33 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[34]   = (C_RX_DELAY_TYPE34 == 2'b01 || C_RX_DELAY_TYPE34 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[35]   = (C_RX_DELAY_TYPE35 == 2'b01 || C_RX_DELAY_TYPE35 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[36]   = (C_RX_DELAY_TYPE36 == 2'b01 || C_RX_DELAY_TYPE36 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[37]   = (C_RX_DELAY_TYPE37 == 2'b01 || C_RX_DELAY_TYPE37 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[38]   = (C_RX_DELAY_TYPE38 == 2'b01 || C_RX_DELAY_TYPE38 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[39]   = (C_RX_DELAY_TYPE39 == 2'b01 || C_RX_DELAY_TYPE39 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[40]   = (C_RX_DELAY_TYPE40 == 2'b01 || C_RX_DELAY_TYPE40 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[41]   = (C_RX_DELAY_TYPE41 == 2'b01 || C_RX_DELAY_TYPE41 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[42]   = (C_RX_DELAY_TYPE42 == 2'b01 || C_RX_DELAY_TYPE42 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[43]   = (C_RX_DELAY_TYPE43 == 2'b01 || C_RX_DELAY_TYPE43 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[44]   = (C_RX_DELAY_TYPE44 == 2'b01 || C_RX_DELAY_TYPE44 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[45]   = (C_RX_DELAY_TYPE45 == 2'b01 || C_RX_DELAY_TYPE45 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[46]   = (C_RX_DELAY_TYPE46 == 2'b01 || C_RX_DELAY_TYPE46 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[47]   = (C_RX_DELAY_TYPE47 == 2'b01 || C_RX_DELAY_TYPE47 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[48]   = (C_RX_DELAY_TYPE48 == 2'b01 || C_RX_DELAY_TYPE48 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[49]   = (C_RX_DELAY_TYPE49 == 2'b01 || C_RX_DELAY_TYPE49 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[50]   = (C_RX_DELAY_TYPE50 == 2'b01 || C_RX_DELAY_TYPE50 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[51]   = (C_RX_DELAY_TYPE51 == 2'b01 || C_RX_DELAY_TYPE51 == 2'b10) ? 1'b1:1'b0;
   
   // vectorising EN_VTC, for VAR_LOAD and VARIABLE, rx_bs<num>_en_vtc is used
   // and for FIXED assigned to 1'b1 or VCC
    wire [51:0] w_rx_en_vtc_in; 
    assign w_rx_en_vtc_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type[0])  ? rx_bs0_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type[1])  ? rx_bs1_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type[2])  ? rx_bs2_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type[3])  ? rx_bs3_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type[4])  ? rx_bs4_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type[5])  ? rx_bs5_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type[6])  ? rx_bs6_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type[7])  ? rx_bs7_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[8]  = !rst_seq_done ? 1'b1 : (w_delay_type[8])  ? rx_bs8_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[9]  = !rst_seq_done ? 1'b1 : (w_delay_type[9])  ? rx_bs9_en_vtc_in :((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[10] = !rst_seq_done ? 1'b1 : (w_delay_type[10]) ? rx_bs10_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[11] = !rst_seq_done ? 1'b1 : (w_delay_type[11]) ? rx_bs11_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[12] = !rst_seq_done ? 1'b1 : (w_delay_type[12]) ? rx_bs12_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[13] = !rst_seq_done ? 1'b1 : (w_delay_type[13]) ? rx_bs13_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[14] = !rst_seq_done ? 1'b1 : (w_delay_type[14]) ? rx_bs14_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[15] = !rst_seq_done ? 1'b1 : (w_delay_type[15]) ? rx_bs15_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[16] = !rst_seq_done ? 1'b1 : (w_delay_type[16]) ? rx_bs16_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[17] = !rst_seq_done ? 1'b1 : (w_delay_type[17]) ? rx_bs17_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[18] = !rst_seq_done ? 1'b1 : (w_delay_type[18]) ? rx_bs18_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[19] = !rst_seq_done ? 1'b1 : (w_delay_type[19]) ? rx_bs19_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[20] = !rst_seq_done ? 1'b1 : (w_delay_type[20]) ? rx_bs20_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[21] = !rst_seq_done ? 1'b1 : (w_delay_type[21]) ? rx_bs21_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[22] = !rst_seq_done ? 1'b1 : (w_delay_type[22]) ? rx_bs22_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[23] = !rst_seq_done ? 1'b1 : (w_delay_type[23]) ? rx_bs23_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[24] = !rst_seq_done ? 1'b1 : (w_delay_type[24]) ? rx_bs24_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[25] = !rst_seq_done ? 1'b1 : (w_delay_type[25]) ? rx_bs25_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[26] = !rst_seq_done ? 1'b1 : (w_delay_type[26]) ? rx_bs26_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[27] = !rst_seq_done ? 1'b1 : (w_delay_type[27]) ? rx_bs27_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[28] = !rst_seq_done ? 1'b1 : (w_delay_type[28]) ? rx_bs28_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[29] = !rst_seq_done ? 1'b1 : (w_delay_type[29]) ? rx_bs29_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[30] = !rst_seq_done ? 1'b1 : (w_delay_type[30]) ? rx_bs30_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[31] = !rst_seq_done ? 1'b1 : (w_delay_type[31]) ? rx_bs31_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[32] = !rst_seq_done ? 1'b1 : (w_delay_type[32]) ? rx_bs32_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[33] = !rst_seq_done ? 1'b1 : (w_delay_type[33]) ? rx_bs33_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[34] = !rst_seq_done ? 1'b1 : (w_delay_type[34]) ? rx_bs34_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[35] = !rst_seq_done ? 1'b1 : (w_delay_type[35]) ? rx_bs35_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[36] = !rst_seq_done ? 1'b1 : (w_delay_type[36]) ? rx_bs36_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[37] = !rst_seq_done ? 1'b1 : (w_delay_type[37]) ? rx_bs37_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[38] = !rst_seq_done ? 1'b1 : (w_delay_type[38]) ? rx_bs38_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[39] = !rst_seq_done ? 1'b1 : (w_delay_type[39]) ? rx_bs39_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[40] = !rst_seq_done ? 1'b1 : (w_delay_type[40]) ? rx_bs40_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[41] = !rst_seq_done ? 1'b1 : (w_delay_type[41]) ? rx_bs41_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[42] = !rst_seq_done ? 1'b1 : (w_delay_type[42]) ? rx_bs42_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[43] = !rst_seq_done ? 1'b1 : (w_delay_type[43]) ? rx_bs43_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[44] = !rst_seq_done ? 1'b1 : (w_delay_type[44]) ? rx_bs44_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[45] = !rst_seq_done ? 1'b1 : (w_delay_type[45]) ? rx_bs45_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[46] = !rst_seq_done ? 1'b1 : (w_delay_type[46]) ? rx_bs46_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[47] = !rst_seq_done ? 1'b1 : (w_delay_type[47]) ? rx_bs47_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[48] = !rst_seq_done ? 1'b1 : (w_delay_type[48]) ? rx_bs48_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[49] = !rst_seq_done ? 1'b1 : (w_delay_type[49]) ? rx_bs49_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[50] = !rst_seq_done ? 1'b1 : (w_delay_type[50]) ? rx_bs50_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
    assign w_rx_en_vtc_in[51] = !rst_seq_done ? 1'b1 : (w_delay_type[51]) ? rx_bs51_en_vtc_in:((C_RX_DELAY_FORMAT=="COUNT") ? 1'b0 : 1'b1);
   
    // Increment count value for the delays, available only for VARIABLE or
   // VAR_LOAD					   
    wire [51:0] w_rx_inc_in;
    assign w_rx_inc_in[0]  = (w_delay_type[0]) ? rx_bs0_inc_in:1'b0;
    assign w_rx_inc_in[1]  = (w_delay_type[1]) ? rx_bs1_inc_in:1'b0;
    assign w_rx_inc_in[2]  = (w_delay_type[2]) ? rx_bs2_inc_in:1'b0;
    assign w_rx_inc_in[3]  = (w_delay_type[3]) ? rx_bs3_inc_in:1'b0;
    assign w_rx_inc_in[4]  = (w_delay_type[4]) ? rx_bs4_inc_in:1'b0;
    assign w_rx_inc_in[5]  = (w_delay_type[5]) ? rx_bs5_inc_in:1'b0;
    assign w_rx_inc_in[6]  = (w_delay_type[6]) ? rx_bs6_inc_in:1'b0;
    assign w_rx_inc_in[7]  = (w_delay_type[7]) ? rx_bs7_inc_in:1'b0;
    assign w_rx_inc_in[8]  = (w_delay_type[8]) ? rx_bs8_inc_in:1'b0;
    assign w_rx_inc_in[9]  = (w_delay_type[9]) ? rx_bs9_inc_in:1'b0;
    assign w_rx_inc_in[10] = (w_delay_type[10]) ? rx_bs10_inc_in:1'b0;
    assign w_rx_inc_in[11] = (w_delay_type[11]) ? rx_bs11_inc_in:1'b0;
    assign w_rx_inc_in[12] = (w_delay_type[12]) ? rx_bs12_inc_in:1'b0;
    assign w_rx_inc_in[13] = (w_delay_type[13]) ? rx_bs13_inc_in:1'b0;
    assign w_rx_inc_in[14] = (w_delay_type[14]) ? rx_bs14_inc_in:1'b0;
    assign w_rx_inc_in[15] = (w_delay_type[15]) ? rx_bs15_inc_in:1'b0;
    assign w_rx_inc_in[16] = (w_delay_type[16]) ? rx_bs16_inc_in:1'b0;
    assign w_rx_inc_in[17] = (w_delay_type[17]) ? rx_bs17_inc_in:1'b0;
    assign w_rx_inc_in[18] = (w_delay_type[18]) ? rx_bs18_inc_in:1'b0;
    assign w_rx_inc_in[19] = (w_delay_type[19]) ? rx_bs19_inc_in:1'b0;
    assign w_rx_inc_in[20] = (w_delay_type[20]) ? rx_bs20_inc_in:1'b0;
    assign w_rx_inc_in[21] = (w_delay_type[21]) ? rx_bs21_inc_in:1'b0;
    assign w_rx_inc_in[22] = (w_delay_type[22]) ? rx_bs22_inc_in:1'b0;
    assign w_rx_inc_in[23] = (w_delay_type[23]) ? rx_bs23_inc_in:1'b0;
    assign w_rx_inc_in[24] = (w_delay_type[24]) ? rx_bs24_inc_in:1'b0;
    assign w_rx_inc_in[25] = (w_delay_type[25]) ? rx_bs25_inc_in:1'b0;
    assign w_rx_inc_in[26] = (w_delay_type[26]) ? rx_bs26_inc_in:1'b0;
    assign w_rx_inc_in[27] = (w_delay_type[27]) ? rx_bs27_inc_in:1'b0;
    assign w_rx_inc_in[28] = (w_delay_type[28]) ? rx_bs28_inc_in:1'b0;
    assign w_rx_inc_in[29] = (w_delay_type[29]) ? rx_bs29_inc_in:1'b0;
    assign w_rx_inc_in[30] = (w_delay_type[30]) ? rx_bs30_inc_in:1'b0;
    assign w_rx_inc_in[31] = (w_delay_type[31]) ? rx_bs31_inc_in:1'b0;
    assign w_rx_inc_in[32] = (w_delay_type[32]) ? rx_bs32_inc_in:1'b0;
    assign w_rx_inc_in[33] = (w_delay_type[33]) ? rx_bs33_inc_in:1'b0;
    assign w_rx_inc_in[34] = (w_delay_type[34]) ? rx_bs34_inc_in:1'b0;
    assign w_rx_inc_in[35] = (w_delay_type[35]) ? rx_bs35_inc_in:1'b0;
    assign w_rx_inc_in[36] = (w_delay_type[36]) ? rx_bs36_inc_in:1'b0;
    assign w_rx_inc_in[37] = (w_delay_type[37]) ? rx_bs37_inc_in:1'b0;
    assign w_rx_inc_in[38] = (w_delay_type[38]) ? rx_bs38_inc_in:1'b0;
    assign w_rx_inc_in[39] = (w_delay_type[39]) ? rx_bs39_inc_in:1'b0;
    assign w_rx_inc_in[40] = (w_delay_type[40]) ? rx_bs40_inc_in:1'b0;
    assign w_rx_inc_in[41] = (w_delay_type[41]) ? rx_bs41_inc_in:1'b0;
    assign w_rx_inc_in[42] = (w_delay_type[42]) ? rx_bs42_inc_in:1'b0;
    assign w_rx_inc_in[43] = (w_delay_type[43]) ? rx_bs43_inc_in:1'b0;
    assign w_rx_inc_in[44] = (w_delay_type[44]) ? rx_bs44_inc_in:1'b0;
    assign w_rx_inc_in[45] = (w_delay_type[45]) ? rx_bs45_inc_in:1'b0;
    assign w_rx_inc_in[46] = (w_delay_type[46]) ? rx_bs46_inc_in:1'b0;
    assign w_rx_inc_in[47] = (w_delay_type[47]) ? rx_bs47_inc_in:1'b0;
    assign w_rx_inc_in[48] = (w_delay_type[48]) ? rx_bs48_inc_in:1'b0;
    assign w_rx_inc_in[49] = (w_delay_type[49]) ? rx_bs49_inc_in:1'b0;
    assign w_rx_inc_in[50] = (w_delay_type[50]) ? rx_bs50_inc_in:1'b0;
    assign w_rx_inc_in[51] = (w_delay_type[51]) ? rx_bs51_inc_in:1'b0;
   
    // Load value for the delay, Applicable only when DELAY_TYPE is VARIABLE or
    // VARLOAD
    wire [51:0] w_rx_load_in;
    assign w_rx_load_in[0]  = (w_delay_type[0]) ? rx_bs0_load_in:1'b0;
    assign w_rx_load_in[1]  = (w_delay_type[1]) ? rx_bs1_load_in:1'b0;
    assign w_rx_load_in[2]  = (w_delay_type[2]) ? rx_bs2_load_in:1'b0;
    assign w_rx_load_in[3]  = (w_delay_type[3]) ? rx_bs3_load_in:1'b0;
    assign w_rx_load_in[4]  = (w_delay_type[4]) ? rx_bs4_load_in:1'b0;
    assign w_rx_load_in[5]  = (w_delay_type[5]) ? rx_bs5_load_in:1'b0;
    assign w_rx_load_in[6]  = (w_delay_type[6]) ? rx_bs6_load_in:1'b0;
    assign w_rx_load_in[7]  = (w_delay_type[7]) ? rx_bs7_load_in:1'b0;
    assign w_rx_load_in[8]  = (w_delay_type[8]) ? rx_bs8_load_in:1'b0;
    assign w_rx_load_in[9]  = (w_delay_type[9]) ? rx_bs9_load_in:1'b0;
    assign w_rx_load_in[10] = (w_delay_type[10]) ? rx_bs10_load_in:1'b0;
    assign w_rx_load_in[11] = (w_delay_type[11]) ? rx_bs11_load_in:1'b0;
    assign w_rx_load_in[12] = (w_delay_type[12]) ? rx_bs12_load_in:1'b0;
    assign w_rx_load_in[13] = (w_delay_type[13]) ? rx_bs13_load_in:1'b0;
    assign w_rx_load_in[14] = (w_delay_type[14]) ? rx_bs14_load_in:1'b0;
    assign w_rx_load_in[15] = (w_delay_type[15]) ? rx_bs15_load_in:1'b0;
    assign w_rx_load_in[16] = (w_delay_type[16]) ? rx_bs16_load_in:1'b0;
    assign w_rx_load_in[17] = (w_delay_type[17]) ? rx_bs17_load_in:1'b0;
    assign w_rx_load_in[18] = (w_delay_type[18]) ? rx_bs18_load_in:1'b0;
    assign w_rx_load_in[19] = (w_delay_type[19]) ? rx_bs19_load_in:1'b0;
    assign w_rx_load_in[20] = (w_delay_type[20]) ? rx_bs20_load_in:1'b0;
    assign w_rx_load_in[21] = (w_delay_type[21]) ? rx_bs21_load_in:1'b0;
    assign w_rx_load_in[22] = (w_delay_type[22]) ? rx_bs22_load_in:1'b0;
    assign w_rx_load_in[23] = (w_delay_type[23]) ? rx_bs23_load_in:1'b0;
    assign w_rx_load_in[24] = (w_delay_type[24]) ? rx_bs24_load_in:1'b0;
    assign w_rx_load_in[25] = (w_delay_type[25]) ? rx_bs25_load_in:1'b0;
    assign w_rx_load_in[26] = (w_delay_type[26]) ? rx_bs26_load_in:1'b0;
    assign w_rx_load_in[27] = (w_delay_type[27]) ? rx_bs27_load_in:1'b0;
    assign w_rx_load_in[28] = (w_delay_type[28]) ? rx_bs28_load_in:1'b0;
    assign w_rx_load_in[29] = (w_delay_type[29]) ? rx_bs29_load_in:1'b0;
    assign w_rx_load_in[30] = (w_delay_type[30]) ? rx_bs30_load_in:1'b0;
    assign w_rx_load_in[31] = (w_delay_type[31]) ? rx_bs31_load_in:1'b0;
    assign w_rx_load_in[32] = (w_delay_type[32]) ? rx_bs32_load_in:1'b0;
    assign w_rx_load_in[33] = (w_delay_type[33]) ? rx_bs33_load_in:1'b0;
    assign w_rx_load_in[34] = (w_delay_type[34]) ? rx_bs34_load_in:1'b0;
    assign w_rx_load_in[35] = (w_delay_type[35]) ? rx_bs35_load_in:1'b0;
    assign w_rx_load_in[36] = (w_delay_type[36]) ? rx_bs36_load_in:1'b0;
    assign w_rx_load_in[37] = (w_delay_type[37]) ? rx_bs37_load_in:1'b0;
    assign w_rx_load_in[38] = (w_delay_type[38]) ? rx_bs38_load_in:1'b0;
    assign w_rx_load_in[39] = (w_delay_type[39]) ? rx_bs39_load_in:1'b0;
    assign w_rx_load_in[40] = (w_delay_type[40]) ? rx_bs40_load_in:1'b0;
    assign w_rx_load_in[41] = (w_delay_type[41]) ? rx_bs41_load_in:1'b0;
    assign w_rx_load_in[42] = (w_delay_type[42]) ? rx_bs42_load_in:1'b0;
    assign w_rx_load_in[43] = (w_delay_type[43]) ? rx_bs43_load_in:1'b0;
    assign w_rx_load_in[44] = (w_delay_type[44]) ? rx_bs44_load_in:1'b0;
    assign w_rx_load_in[45] = (w_delay_type[45]) ? rx_bs45_load_in:1'b0;
    assign w_rx_load_in[46] = (w_delay_type[46]) ? rx_bs46_load_in:1'b0;
    assign w_rx_load_in[47] = (w_delay_type[47]) ? rx_bs47_load_in:1'b0;
    assign w_rx_load_in[48] = (w_delay_type[48]) ? rx_bs48_load_in:1'b0;
    assign w_rx_load_in[49] = (w_delay_type[49]) ? rx_bs49_load_in:1'b0;
    assign w_rx_load_in[50] = (w_delay_type[50]) ? rx_bs50_load_in:1'b0;
    assign w_rx_load_in[51] = (w_delay_type[51]) ? rx_bs51_load_in:1'b0;
    // CE
    wire [51:0] w_rx_ce_in; 
    assign w_rx_ce_in[0]  = (w_delay_type[0]) ? rx_bs0_ce_in:1'b0;
    assign w_rx_ce_in[1]  = (w_delay_type[1]) ? rx_bs1_ce_in:1'b0;
    assign w_rx_ce_in[2]  = (w_delay_type[2]) ? rx_bs2_ce_in:1'b0;
    assign w_rx_ce_in[3]  = (w_delay_type[3]) ? rx_bs3_ce_in:1'b0;
    assign w_rx_ce_in[4]  = (w_delay_type[4]) ? rx_bs4_ce_in:1'b0;
    assign w_rx_ce_in[5]  = (w_delay_type[5]) ? rx_bs5_ce_in:1'b0;
    assign w_rx_ce_in[6]  = (w_delay_type[6]) ? rx_bs6_ce_in:1'b0;
    assign w_rx_ce_in[7]  = (w_delay_type[7]) ? rx_bs7_ce_in:1'b0;
    assign w_rx_ce_in[8]  = (w_delay_type[8]) ? rx_bs8_ce_in:1'b0;
    assign w_rx_ce_in[9]  = (w_delay_type[9]) ? rx_bs9_ce_in:1'b0;
    assign w_rx_ce_in[10] = (w_delay_type[10]) ? rx_bs10_ce_in:1'b0;
    assign w_rx_ce_in[11] = (w_delay_type[11]) ? rx_bs11_ce_in:1'b0;
    assign w_rx_ce_in[12] = (w_delay_type[12]) ? rx_bs12_ce_in:1'b0;
    assign w_rx_ce_in[13] = (w_delay_type[13]) ? rx_bs13_ce_in:1'b0;
    assign w_rx_ce_in[14] = (w_delay_type[14]) ? rx_bs14_ce_in:1'b0;
    assign w_rx_ce_in[15] = (w_delay_type[15]) ? rx_bs15_ce_in:1'b0;
    assign w_rx_ce_in[16] = (w_delay_type[16]) ? rx_bs16_ce_in:1'b0;
    assign w_rx_ce_in[17] = (w_delay_type[17]) ? rx_bs17_ce_in:1'b0;
    assign w_rx_ce_in[18] = (w_delay_type[18]) ? rx_bs18_ce_in:1'b0;
    assign w_rx_ce_in[19] = (w_delay_type[19]) ? rx_bs19_ce_in:1'b0;
    assign w_rx_ce_in[20] = (w_delay_type[20]) ? rx_bs20_ce_in:1'b0;
    assign w_rx_ce_in[21] = (w_delay_type[21]) ? rx_bs21_ce_in:1'b0;
    assign w_rx_ce_in[22] = (w_delay_type[22]) ? rx_bs22_ce_in:1'b0;
    assign w_rx_ce_in[23] = (w_delay_type[23]) ? rx_bs23_ce_in:1'b0;
    assign w_rx_ce_in[24] = (w_delay_type[24]) ? rx_bs24_ce_in:1'b0;
    assign w_rx_ce_in[25] = (w_delay_type[25]) ? rx_bs25_ce_in:1'b0;
    assign w_rx_ce_in[26] = (w_delay_type[26]) ? rx_bs26_ce_in:1'b0;
    assign w_rx_ce_in[27] = (w_delay_type[27]) ? rx_bs27_ce_in:1'b0;
    assign w_rx_ce_in[28] = (w_delay_type[28]) ? rx_bs28_ce_in:1'b0;
    assign w_rx_ce_in[29] = (w_delay_type[29]) ? rx_bs29_ce_in:1'b0;
    assign w_rx_ce_in[30] = (w_delay_type[30]) ? rx_bs30_ce_in:1'b0;
    assign w_rx_ce_in[31] = (w_delay_type[31]) ? rx_bs31_ce_in:1'b0;
    assign w_rx_ce_in[32] = (w_delay_type[32]) ? rx_bs32_ce_in:1'b0;
    assign w_rx_ce_in[33] = (w_delay_type[33]) ? rx_bs33_ce_in:1'b0;
    assign w_rx_ce_in[34] = (w_delay_type[34]) ? rx_bs34_ce_in:1'b0;
    assign w_rx_ce_in[35] = (w_delay_type[35]) ? rx_bs35_ce_in:1'b0;
    assign w_rx_ce_in[36] = (w_delay_type[36]) ? rx_bs36_ce_in:1'b0;
    assign w_rx_ce_in[37] = (w_delay_type[37]) ? rx_bs37_ce_in:1'b0;
    assign w_rx_ce_in[38] = (w_delay_type[38]) ? rx_bs38_ce_in:1'b0;
    assign w_rx_ce_in[39] = (w_delay_type[39]) ? rx_bs39_ce_in:1'b0;
    assign w_rx_ce_in[40] = (w_delay_type[40]) ? rx_bs40_ce_in:1'b0;
    assign w_rx_ce_in[41] = (w_delay_type[41]) ? rx_bs41_ce_in:1'b0;
    assign w_rx_ce_in[42] = (w_delay_type[42]) ? rx_bs42_ce_in:1'b0;
    assign w_rx_ce_in[43] = (w_delay_type[43]) ? rx_bs43_ce_in:1'b0;
    assign w_rx_ce_in[44] = (w_delay_type[44]) ? rx_bs44_ce_in:1'b0;
    assign w_rx_ce_in[45] = (w_delay_type[45]) ? rx_bs45_ce_in:1'b0;
    assign w_rx_ce_in[46] = (w_delay_type[46]) ? rx_bs46_ce_in:1'b0;
    assign w_rx_ce_in[47] = (w_delay_type[47]) ? rx_bs47_ce_in:1'b0;
    assign w_rx_ce_in[48] = (w_delay_type[48]) ? rx_bs48_ce_in:1'b0;
    assign w_rx_ce_in[49] = (w_delay_type[49]) ? rx_bs49_ce_in:1'b0;
    assign w_rx_ce_in[50] = (w_delay_type[50]) ? rx_bs50_ce_in:1'b0;
    assign w_rx_ce_in[51] = (w_delay_type[51]) ? rx_bs51_ce_in:1'b0;
   
    // Cntvalue in
    wire [8:0] w_rx_cntvaluein [51:0];
    assign w_rx_cntvaluein[0]  = (C_RX_DELAY_TYPE0 == 2'b10) ? rx_bs0_cntvaluein:9'b0;
    assign w_rx_cntvaluein[1]  = (C_RX_DELAY_TYPE1 == 2'b10) ? rx_bs1_cntvaluein:9'b0;
    assign w_rx_cntvaluein[2]  = (C_RX_DELAY_TYPE2 == 2'b10) ? rx_bs2_cntvaluein:9'b0;
    assign w_rx_cntvaluein[3]  = (C_RX_DELAY_TYPE3 == 2'b10) ? rx_bs3_cntvaluein:9'b0;
    assign w_rx_cntvaluein[4]  = (C_RX_DELAY_TYPE4 == 2'b10) ? rx_bs4_cntvaluein:9'b0;
    assign w_rx_cntvaluein[5]  = (C_RX_DELAY_TYPE5 == 2'b10) ? rx_bs5_cntvaluein:9'b0;
    assign w_rx_cntvaluein[6]  = (C_RX_DELAY_TYPE6 == 2'b10) ? rx_bs6_cntvaluein:9'b0;
    assign w_rx_cntvaluein[7]  = (C_RX_DELAY_TYPE7 == 2'b10) ? rx_bs7_cntvaluein:9'b0;
    assign w_rx_cntvaluein[8]  = (C_RX_DELAY_TYPE8 == 2'b10) ? rx_bs8_cntvaluein:9'b0;
    assign w_rx_cntvaluein[9]  = (C_RX_DELAY_TYPE9 == 2'b10) ? rx_bs9_cntvaluein:9'b0;
    assign w_rx_cntvaluein[10] = (C_RX_DELAY_TYPE10 == 2'b10) ? rx_bs10_cntvaluein:9'b0;
    assign w_rx_cntvaluein[11] = (C_RX_DELAY_TYPE11 == 2'b10) ? rx_bs11_cntvaluein:9'b0;
    assign w_rx_cntvaluein[12] = (C_RX_DELAY_TYPE12 == 2'b10) ? rx_bs12_cntvaluein:9'b0;
    assign w_rx_cntvaluein[13] = (C_RX_DELAY_TYPE13 == 2'b10) ? rx_bs13_cntvaluein:9'b0;
    assign w_rx_cntvaluein[14] = (C_RX_DELAY_TYPE14 == 2'b10) ? rx_bs14_cntvaluein:9'b0;
    assign w_rx_cntvaluein[15] = (C_RX_DELAY_TYPE15 == 2'b10) ? rx_bs15_cntvaluein:9'b0;
    assign w_rx_cntvaluein[16] = (C_RX_DELAY_TYPE16 == 2'b10) ? rx_bs16_cntvaluein:9'b0;
    assign w_rx_cntvaluein[17] = (C_RX_DELAY_TYPE17 == 2'b10) ? rx_bs17_cntvaluein:9'b0;
    assign w_rx_cntvaluein[18] = (C_RX_DELAY_TYPE18 == 2'b10) ? rx_bs18_cntvaluein:9'b0;
    assign w_rx_cntvaluein[19] = (C_RX_DELAY_TYPE19 == 2'b10) ? rx_bs19_cntvaluein:9'b0;
    assign w_rx_cntvaluein[20] = (C_RX_DELAY_TYPE20 == 2'b10) ? rx_bs20_cntvaluein:9'b0;
    assign w_rx_cntvaluein[21] = (C_RX_DELAY_TYPE21 == 2'b10) ? rx_bs21_cntvaluein:9'b0;
    assign w_rx_cntvaluein[22] = (C_RX_DELAY_TYPE22 == 2'b10) ? rx_bs22_cntvaluein:9'b0;
    assign w_rx_cntvaluein[23] = (C_RX_DELAY_TYPE23 == 2'b10) ? rx_bs23_cntvaluein:9'b0;
    assign w_rx_cntvaluein[24] = (C_RX_DELAY_TYPE24 == 2'b10) ? rx_bs24_cntvaluein:9'b0;
    assign w_rx_cntvaluein[25] = (C_RX_DELAY_TYPE25 == 2'b10) ? rx_bs25_cntvaluein:9'b0;
    assign w_rx_cntvaluein[26] = (C_RX_DELAY_TYPE26 == 2'b10) ? rx_bs26_cntvaluein:9'b0;
    assign w_rx_cntvaluein[27] = (C_RX_DELAY_TYPE27 == 2'b10) ? rx_bs27_cntvaluein:9'b0;
    assign w_rx_cntvaluein[28] = (C_RX_DELAY_TYPE28 == 2'b10) ? rx_bs28_cntvaluein:9'b0;
    assign w_rx_cntvaluein[29] = (C_RX_DELAY_TYPE29 == 2'b10) ? rx_bs29_cntvaluein:9'b0;
    assign w_rx_cntvaluein[30] = (C_RX_DELAY_TYPE30 == 2'b10) ? rx_bs30_cntvaluein:9'b0;
    assign w_rx_cntvaluein[31] = (C_RX_DELAY_TYPE31 == 2'b10) ? rx_bs31_cntvaluein:9'b0;
    assign w_rx_cntvaluein[32] = (C_RX_DELAY_TYPE32 == 2'b10) ? rx_bs32_cntvaluein:9'b0;
    assign w_rx_cntvaluein[33] = (C_RX_DELAY_TYPE33 == 2'b10) ? rx_bs33_cntvaluein:9'b0;
    assign w_rx_cntvaluein[34] = (C_RX_DELAY_TYPE34 == 2'b10) ? rx_bs34_cntvaluein:9'b0;
    assign w_rx_cntvaluein[35] = (C_RX_DELAY_TYPE35 == 2'b10) ? rx_bs35_cntvaluein:9'b0;
    assign w_rx_cntvaluein[36] = (C_RX_DELAY_TYPE36 == 2'b10) ? rx_bs36_cntvaluein:9'b0;
    assign w_rx_cntvaluein[37] = (C_RX_DELAY_TYPE37 == 2'b10) ? rx_bs37_cntvaluein:9'b0;
    assign w_rx_cntvaluein[38] = (C_RX_DELAY_TYPE38 == 2'b10) ? rx_bs38_cntvaluein:9'b0;
    assign w_rx_cntvaluein[39] = (C_RX_DELAY_TYPE39 == 2'b10) ? rx_bs39_cntvaluein:9'b0;
    assign w_rx_cntvaluein[40] = (C_RX_DELAY_TYPE40 == 2'b10) ? rx_bs40_cntvaluein:9'b0;
    assign w_rx_cntvaluein[41] = (C_RX_DELAY_TYPE41 == 2'b10) ? rx_bs41_cntvaluein:9'b0;
    assign w_rx_cntvaluein[42] = (C_RX_DELAY_TYPE42 == 2'b10) ? rx_bs42_cntvaluein:9'b0;
    assign w_rx_cntvaluein[43] = (C_RX_DELAY_TYPE43 == 2'b10) ? rx_bs43_cntvaluein:9'b0;
    assign w_rx_cntvaluein[44] = (C_RX_DELAY_TYPE44 == 2'b10) ? rx_bs44_cntvaluein:9'b0;
    assign w_rx_cntvaluein[45] = (C_RX_DELAY_TYPE45 == 2'b10) ? rx_bs45_cntvaluein:9'b0;
    assign w_rx_cntvaluein[46] = (C_RX_DELAY_TYPE46 == 2'b10) ? rx_bs46_cntvaluein:9'b0;
    assign w_rx_cntvaluein[47] = (C_RX_DELAY_TYPE47 == 2'b10) ? rx_bs47_cntvaluein:9'b0;
    assign w_rx_cntvaluein[48] = (C_RX_DELAY_TYPE48 == 2'b10) ? rx_bs48_cntvaluein:9'b0;
    assign w_rx_cntvaluein[49] = (C_RX_DELAY_TYPE49 == 2'b10) ? rx_bs49_cntvaluein:9'b0;
    assign w_rx_cntvaluein[50] = (C_RX_DELAY_TYPE50 == 2'b10) ? rx_bs50_cntvaluein:9'b0;
    assign w_rx_cntvaluein[51] = (C_RX_DELAY_TYPE51 == 2'b10) ? rx_bs51_cntvaluein:9'b0;
   
    // Cnt value out
    wire [8:0] w_rx_cntvalueout [51:0];
    assign rx_bs0_cntvalueout   = (C_RX_DELAY_TYPE0 == 2'b10) ? w_rx_cntvalueout[0]:9'b0;   
    assign rx_bs1_cntvalueout   = (C_RX_DELAY_TYPE1 == 2'b10) ? w_rx_cntvalueout[1]:9'b0;
    assign rx_bs2_cntvalueout   = (C_RX_DELAY_TYPE2 == 2'b10) ? w_rx_cntvalueout[2]:9'b0;
    assign rx_bs3_cntvalueout   = (C_RX_DELAY_TYPE3 == 2'b10) ? w_rx_cntvalueout[3]:9'b0;
    assign rx_bs4_cntvalueout   = (C_RX_DELAY_TYPE4 == 2'b10) ? w_rx_cntvalueout[4]:9'b0;
    assign rx_bs5_cntvalueout   = (C_RX_DELAY_TYPE5 == 2'b10) ? w_rx_cntvalueout[5]:9'b0;
    assign rx_bs6_cntvalueout   = (C_RX_DELAY_TYPE6 == 2'b10) ? w_rx_cntvalueout[6]:9'b0;
    assign rx_bs7_cntvalueout   = (C_RX_DELAY_TYPE7 == 2'b10) ? w_rx_cntvalueout[7]:9'b0;
    assign rx_bs8_cntvalueout   = (C_RX_DELAY_TYPE8 == 2'b10) ? w_rx_cntvalueout[8]:9'b0;
    assign rx_bs9_cntvalueout   = (C_RX_DELAY_TYPE9 == 2'b10) ? w_rx_cntvalueout[9]:9'b0;
    assign rx_bs10_cntvalueout  = (C_RX_DELAY_TYPE10 == 2'b10) ? w_rx_cntvalueout[10]:9'b0;
    assign rx_bs11_cntvalueout  = (C_RX_DELAY_TYPE11 == 2'b10) ? w_rx_cntvalueout[11]:9'b0;
    assign rx_bs12_cntvalueout  = (C_RX_DELAY_TYPE12 == 2'b10) ? w_rx_cntvalueout[12]:9'b0;
    assign rx_bs13_cntvalueout  = (C_RX_DELAY_TYPE13 == 2'b10) ? w_rx_cntvalueout[13]:9'b0;
    assign rx_bs14_cntvalueout  = (C_RX_DELAY_TYPE14 == 2'b10) ? w_rx_cntvalueout[14]:9'b0;
    assign rx_bs15_cntvalueout  = (C_RX_DELAY_TYPE15 == 2'b10) ? w_rx_cntvalueout[15]:9'b0;
    assign rx_bs16_cntvalueout  = (C_RX_DELAY_TYPE16 == 2'b10) ? w_rx_cntvalueout[16]:9'b0;
    assign rx_bs17_cntvalueout  = (C_RX_DELAY_TYPE17 == 2'b10) ? w_rx_cntvalueout[17]:9'b0;
    assign rx_bs18_cntvalueout  = (C_RX_DELAY_TYPE18 == 2'b10) ? w_rx_cntvalueout[18]:9'b0;
    assign rx_bs19_cntvalueout  = (C_RX_DELAY_TYPE19 == 2'b10) ? w_rx_cntvalueout[19]:9'b0;
    assign rx_bs20_cntvalueout  = (C_RX_DELAY_TYPE20 == 2'b10) ? w_rx_cntvalueout[20]:9'b0;
    assign rx_bs21_cntvalueout  = (C_RX_DELAY_TYPE21 == 2'b10) ? w_rx_cntvalueout[21]:9'b0;
    assign rx_bs22_cntvalueout  = (C_RX_DELAY_TYPE22 == 2'b10) ? w_rx_cntvalueout[22]:9'b0;
    assign rx_bs23_cntvalueout  = (C_RX_DELAY_TYPE23 == 2'b10) ? w_rx_cntvalueout[23]:9'b0;
    assign rx_bs24_cntvalueout  = (C_RX_DELAY_TYPE24 == 2'b10) ? w_rx_cntvalueout[24]:9'b0;
    assign rx_bs25_cntvalueout  = (C_RX_DELAY_TYPE25 == 2'b10) ? w_rx_cntvalueout[25]:9'b0;
    assign rx_bs26_cntvalueout  = (C_RX_DELAY_TYPE26 == 2'b10) ? w_rx_cntvalueout[26]:9'b0;
    assign rx_bs27_cntvalueout  = (C_RX_DELAY_TYPE27 == 2'b10) ? w_rx_cntvalueout[27]:9'b0;
    assign rx_bs28_cntvalueout  = (C_RX_DELAY_TYPE28 == 2'b10) ? w_rx_cntvalueout[28]:9'b0;
    assign rx_bs29_cntvalueout  = (C_RX_DELAY_TYPE29 == 2'b10) ? w_rx_cntvalueout[29]:9'b0;
    assign rx_bs30_cntvalueout  = (C_RX_DELAY_TYPE30 == 2'b10) ? w_rx_cntvalueout[30]:9'b0;
    assign rx_bs31_cntvalueout  = (C_RX_DELAY_TYPE31 == 2'b10) ? w_rx_cntvalueout[31]:9'b0;
    assign rx_bs32_cntvalueout  = (C_RX_DELAY_TYPE32 == 2'b10) ? w_rx_cntvalueout[32]:9'b0;
    assign rx_bs33_cntvalueout  = (C_RX_DELAY_TYPE33 == 2'b10) ? w_rx_cntvalueout[33]:9'b0;
    assign rx_bs34_cntvalueout  = (C_RX_DELAY_TYPE34 == 2'b10) ? w_rx_cntvalueout[34]:9'b0;
    assign rx_bs35_cntvalueout  = (C_RX_DELAY_TYPE35 == 2'b10) ? w_rx_cntvalueout[35]:9'b0;
    assign rx_bs36_cntvalueout  = (C_RX_DELAY_TYPE36 == 2'b10) ? w_rx_cntvalueout[36]:9'b0;
    assign rx_bs37_cntvalueout  = (C_RX_DELAY_TYPE37 == 2'b10) ? w_rx_cntvalueout[37]:9'b0;
    assign rx_bs38_cntvalueout  = (C_RX_DELAY_TYPE38 == 2'b10) ? w_rx_cntvalueout[38]:9'b0;
    assign rx_bs39_cntvalueout  = (C_RX_DELAY_TYPE39 == 2'b10) ? w_rx_cntvalueout[39]:9'b0;
    assign rx_bs40_cntvalueout  = (C_RX_DELAY_TYPE40 == 2'b10) ? w_rx_cntvalueout[40]:9'b0;
    assign rx_bs41_cntvalueout  = (C_RX_DELAY_TYPE41 == 2'b10) ? w_rx_cntvalueout[41]:9'b0;
    assign rx_bs42_cntvalueout  = (C_RX_DELAY_TYPE42 == 2'b10) ? w_rx_cntvalueout[42]:9'b0;
    assign rx_bs43_cntvalueout  = (C_RX_DELAY_TYPE43 == 2'b10) ? w_rx_cntvalueout[43]:9'b0;
    assign rx_bs44_cntvalueout  = (C_RX_DELAY_TYPE44 == 2'b10) ? w_rx_cntvalueout[44]:9'b0;
    assign rx_bs45_cntvalueout  = (C_RX_DELAY_TYPE45 == 2'b10) ? w_rx_cntvalueout[45]:9'b0;
    assign rx_bs46_cntvalueout  = (C_RX_DELAY_TYPE46 == 2'b10) ? w_rx_cntvalueout[46]:9'b0;
    assign rx_bs47_cntvalueout  = (C_RX_DELAY_TYPE47 == 2'b10) ? w_rx_cntvalueout[47]:9'b0;
    assign rx_bs48_cntvalueout  = (C_RX_DELAY_TYPE48 == 2'b10) ? w_rx_cntvalueout[48]:9'b0;
    assign rx_bs49_cntvalueout  = (C_RX_DELAY_TYPE49 == 2'b10) ? w_rx_cntvalueout[49]:9'b0;
    assign rx_bs50_cntvalueout  = (C_RX_DELAY_TYPE50 == 2'b10) ? w_rx_cntvalueout[50]:9'b0;
    assign rx_bs51_cntvalueout  = (C_RX_DELAY_TYPE51 == 2'b10) ? w_rx_cntvalueout[51]:9'b0;
    
   // vectorising EN_VTC, for VAR_LOAD and VARIABLE, rx_bs<num>_en_vtc is used
   // and for FIXED assigned to 1'b1 or VCC
    wire [51:0] w_rx_en_vtc_ext_in; 
    assign w_rx_en_vtc_ext_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type[0]) ? rx_bs0_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type[1]) ? rx_bs1_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type[2]) ? rx_bs2_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type[3]) ? rx_bs3_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type[4]) ? rx_bs4_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type[5]) ? rx_bs5_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type[6]) ? rx_bs6_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type[7]) ? rx_bs7_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[8]  = !rst_seq_done ? 1'b1 : (w_delay_type[8]) ? rx_bs8_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[9]  = !rst_seq_done ? 1'b1 : (w_delay_type[9]) ? rx_bs9_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[10] = !rst_seq_done ? 1'b1 : (w_delay_type[10]) ? rx_bs10_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[11] = !rst_seq_done ? 1'b1 : (w_delay_type[11]) ? rx_bs11_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[12] = !rst_seq_done ? 1'b1 : (w_delay_type[12]) ? rx_bs12_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[13] = !rst_seq_done ? 1'b1 : (w_delay_type[13]) ? rx_bs13_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[14] = !rst_seq_done ? 1'b1 : (w_delay_type[14]) ? rx_bs14_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[15] = !rst_seq_done ? 1'b1 : (w_delay_type[15]) ? rx_bs15_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[16] = !rst_seq_done ? 1'b1 : (w_delay_type[16]) ? rx_bs16_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[17] = !rst_seq_done ? 1'b1 : (w_delay_type[17]) ? rx_bs17_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[18] = !rst_seq_done ? 1'b1 : (w_delay_type[18]) ? rx_bs18_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[19] = !rst_seq_done ? 1'b1 : (w_delay_type[19]) ? rx_bs19_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[20] = !rst_seq_done ? 1'b1 : (w_delay_type[20]) ? rx_bs20_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[21] = !rst_seq_done ? 1'b1 : (w_delay_type[21]) ? rx_bs21_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[22] = !rst_seq_done ? 1'b1 : (w_delay_type[22]) ? rx_bs22_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[23] = !rst_seq_done ? 1'b1 : (w_delay_type[23]) ? rx_bs23_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[24] = !rst_seq_done ? 1'b1 : (w_delay_type[24]) ? rx_bs24_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[25] = !rst_seq_done ? 1'b1 : (w_delay_type[25]) ? rx_bs25_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[26] = !rst_seq_done ? 1'b1 : (w_delay_type[26]) ? rx_bs26_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[27] = !rst_seq_done ? 1'b1 : (w_delay_type[27]) ? rx_bs27_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[28] = !rst_seq_done ? 1'b1 : (w_delay_type[28]) ? rx_bs28_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[29] = !rst_seq_done ? 1'b1 : (w_delay_type[29]) ? rx_bs29_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[30] = !rst_seq_done ? 1'b1 : (w_delay_type[30]) ? rx_bs30_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[31] = !rst_seq_done ? 1'b1 : (w_delay_type[31]) ? rx_bs31_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[32] = !rst_seq_done ? 1'b1 : (w_delay_type[32]) ? rx_bs32_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[33] = !rst_seq_done ? 1'b1 : (w_delay_type[33]) ? rx_bs33_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[34] = !rst_seq_done ? 1'b1 : (w_delay_type[34]) ? rx_bs34_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[35] = !rst_seq_done ? 1'b1 : (w_delay_type[35]) ? rx_bs35_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[36] = !rst_seq_done ? 1'b1 : (w_delay_type[36]) ? rx_bs36_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[37] = !rst_seq_done ? 1'b1 : (w_delay_type[37]) ? rx_bs37_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[38] = !rst_seq_done ? 1'b1 : (w_delay_type[38]) ? rx_bs38_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[39] = !rst_seq_done ? 1'b1 : (w_delay_type[39]) ? rx_bs39_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[40] = !rst_seq_done ? 1'b1 : (w_delay_type[40]) ? rx_bs40_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[41] = !rst_seq_done ? 1'b1 : (w_delay_type[41]) ? rx_bs41_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[42] = !rst_seq_done ? 1'b1 : (w_delay_type[42]) ? rx_bs42_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[43] = !rst_seq_done ? 1'b1 : (w_delay_type[43]) ? rx_bs43_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[44] = !rst_seq_done ? 1'b1 : (w_delay_type[44]) ? rx_bs44_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[45] = !rst_seq_done ? 1'b1 : (w_delay_type[45]) ? rx_bs45_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[46] = !rst_seq_done ? 1'b1 : (w_delay_type[46]) ? rx_bs46_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[47] = !rst_seq_done ? 1'b1 : (w_delay_type[47]) ? rx_bs47_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[48] = !rst_seq_done ? 1'b1 : (w_delay_type[48]) ? rx_bs48_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[49] = !rst_seq_done ? 1'b1 : (w_delay_type[49]) ? rx_bs49_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[50] = !rst_seq_done ? 1'b1 : (w_delay_type[50]) ? rx_bs50_en_vtc_ext_in:1'b1;
    assign w_rx_en_vtc_ext_in[51] = !rst_seq_done ? 1'b1 : (w_delay_type[51]) ? rx_bs51_en_vtc_ext_in:1'b1;
   
    // Increment count value for the delays, available only for VARIABLE or
   // VAR_LOAD					   
    wire [51:0] w_rx_inc_ext_in;
    assign w_rx_inc_ext_in[0]  = (w_delay_type[0]) ? rx_bs0_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[1]  = (w_delay_type[1]) ? rx_bs1_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[2]  = (w_delay_type[2]) ? rx_bs2_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[3]  = (w_delay_type[3]) ? rx_bs3_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[4]  = (w_delay_type[4]) ? rx_bs4_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[5]  = (w_delay_type[5]) ? rx_bs5_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[6]  = (w_delay_type[6]) ? rx_bs6_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[7]  = (w_delay_type[7]) ? rx_bs7_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[8]  = (w_delay_type[8]) ? rx_bs8_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[9]  = (w_delay_type[9]) ? rx_bs9_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[10] = (w_delay_type[10]) ? rx_bs10_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[11] = (w_delay_type[11]) ? rx_bs11_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[12] = (w_delay_type[12]) ? rx_bs12_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[13] = (w_delay_type[13]) ? rx_bs13_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[14] = (w_delay_type[14]) ? rx_bs14_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[15] = (w_delay_type[15]) ? rx_bs15_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[16] = (w_delay_type[16]) ? rx_bs16_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[17] = (w_delay_type[17]) ? rx_bs17_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[18] = (w_delay_type[18]) ? rx_bs18_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[19] = (w_delay_type[19]) ? rx_bs19_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[20] = (w_delay_type[20]) ? rx_bs20_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[21] = (w_delay_type[21]) ? rx_bs21_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[22] = (w_delay_type[22]) ? rx_bs22_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[23] = (w_delay_type[23]) ? rx_bs23_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[24] = (w_delay_type[24]) ? rx_bs24_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[25] = (w_delay_type[25]) ? rx_bs25_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[26] = (w_delay_type[26]) ? rx_bs26_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[27] = (w_delay_type[27]) ? rx_bs27_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[28] = (w_delay_type[28]) ? rx_bs28_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[29] = (w_delay_type[29]) ? rx_bs29_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[30] = (w_delay_type[30]) ? rx_bs30_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[31] = (w_delay_type[31]) ? rx_bs31_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[32] = (w_delay_type[32]) ? rx_bs32_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[33] = (w_delay_type[33]) ? rx_bs33_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[34] = (w_delay_type[34]) ? rx_bs34_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[35] = (w_delay_type[35]) ? rx_bs35_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[36] = (w_delay_type[36]) ? rx_bs36_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[37] = (w_delay_type[37]) ? rx_bs37_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[38] = (w_delay_type[38]) ? rx_bs38_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[39] = (w_delay_type[39]) ? rx_bs39_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[40] = (w_delay_type[40]) ? rx_bs40_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[41] = (w_delay_type[41]) ? rx_bs41_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[42] = (w_delay_type[42]) ? rx_bs42_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[43] = (w_delay_type[43]) ? rx_bs43_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[44] = (w_delay_type[44]) ? rx_bs44_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[45] = (w_delay_type[45]) ? rx_bs45_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[46] = (w_delay_type[46]) ? rx_bs46_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[47] = (w_delay_type[47]) ? rx_bs47_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[48] = (w_delay_type[48]) ? rx_bs48_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[49] = (w_delay_type[49]) ? rx_bs49_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[50] = (w_delay_type[50]) ? rx_bs50_inc_ext_in:1'b0;
    assign w_rx_inc_ext_in[51] = (w_delay_type[51]) ? rx_bs51_inc_ext_in:1'b0;
   
    // Load value for the delay, Applicable only when DELAY_TYPE is VARIABLE or
    // VARLOAD
    wire [51:0] w_rx_load_ext_in;
    assign w_rx_load_ext_in[0]  = (w_delay_type[0]) ? rx_bs0_load_ext_in:1'b0;
    assign w_rx_load_ext_in[1]  = (w_delay_type[1]) ? rx_bs1_load_ext_in:1'b0;
    assign w_rx_load_ext_in[2]  = (w_delay_type[2]) ? rx_bs2_load_ext_in:1'b0;
    assign w_rx_load_ext_in[3]  = (w_delay_type[3]) ? rx_bs3_load_ext_in:1'b0;
    assign w_rx_load_ext_in[4]  = (w_delay_type[4]) ? rx_bs4_load_ext_in:1'b0;
    assign w_rx_load_ext_in[5]  = (w_delay_type[5]) ? rx_bs5_load_ext_in:1'b0;
    assign w_rx_load_ext_in[6]  = (w_delay_type[6]) ? rx_bs6_load_ext_in:1'b0;
    assign w_rx_load_ext_in[7]  = (w_delay_type[7]) ? rx_bs7_load_ext_in:1'b0;
    assign w_rx_load_ext_in[8]  = (w_delay_type[8]) ? rx_bs8_load_ext_in:1'b0;
    assign w_rx_load_ext_in[9]  = (w_delay_type[9]) ? rx_bs9_load_ext_in:1'b0;
    assign w_rx_load_ext_in[10] = (w_delay_type[10]) ? rx_bs10_load_ext_in:1'b0;
    assign w_rx_load_ext_in[11] = (w_delay_type[11]) ? rx_bs11_load_ext_in:1'b0;
    assign w_rx_load_ext_in[12] = (w_delay_type[12]) ? rx_bs12_load_ext_in:1'b0;
    assign w_rx_load_ext_in[13] = (w_delay_type[13]) ? rx_bs13_load_ext_in:1'b0;
    assign w_rx_load_ext_in[14] = (w_delay_type[14]) ? rx_bs14_load_ext_in:1'b0;
    assign w_rx_load_ext_in[15] = (w_delay_type[15]) ? rx_bs15_load_ext_in:1'b0;
    assign w_rx_load_ext_in[16] = (w_delay_type[16]) ? rx_bs16_load_ext_in:1'b0;
    assign w_rx_load_ext_in[17] = (w_delay_type[17]) ? rx_bs17_load_ext_in:1'b0;
    assign w_rx_load_ext_in[18] = (w_delay_type[18]) ? rx_bs18_load_ext_in:1'b0;
    assign w_rx_load_ext_in[19] = (w_delay_type[19]) ? rx_bs19_load_ext_in:1'b0;
    assign w_rx_load_ext_in[20] = (w_delay_type[20]) ? rx_bs20_load_ext_in:1'b0;
    assign w_rx_load_ext_in[21] = (w_delay_type[21]) ? rx_bs21_load_ext_in:1'b0;
    assign w_rx_load_ext_in[22] = (w_delay_type[22]) ? rx_bs22_load_ext_in:1'b0;
    assign w_rx_load_ext_in[23] = (w_delay_type[23]) ? rx_bs23_load_ext_in:1'b0;
    assign w_rx_load_ext_in[24] = (w_delay_type[24]) ? rx_bs24_load_ext_in:1'b0;
    assign w_rx_load_ext_in[25] = (w_delay_type[25]) ? rx_bs25_load_ext_in:1'b0;
    assign w_rx_load_ext_in[26] = (w_delay_type[26]) ? rx_bs26_load_ext_in:1'b0;
    assign w_rx_load_ext_in[27] = (w_delay_type[27]) ? rx_bs27_load_ext_in:1'b0;
    assign w_rx_load_ext_in[28] = (w_delay_type[28]) ? rx_bs28_load_ext_in:1'b0;
    assign w_rx_load_ext_in[29] = (w_delay_type[29]) ? rx_bs29_load_ext_in:1'b0;
    assign w_rx_load_ext_in[30] = (w_delay_type[30]) ? rx_bs30_load_ext_in:1'b0;
    assign w_rx_load_ext_in[31] = (w_delay_type[31]) ? rx_bs31_load_ext_in:1'b0;
    assign w_rx_load_ext_in[32] = (w_delay_type[32]) ? rx_bs32_load_ext_in:1'b0;
    assign w_rx_load_ext_in[33] = (w_delay_type[33]) ? rx_bs33_load_ext_in:1'b0;
    assign w_rx_load_ext_in[34] = (w_delay_type[34]) ? rx_bs34_load_ext_in:1'b0;
    assign w_rx_load_ext_in[35] = (w_delay_type[35]) ? rx_bs35_load_ext_in:1'b0;
    assign w_rx_load_ext_in[36] = (w_delay_type[36]) ? rx_bs36_load_ext_in:1'b0;
    assign w_rx_load_ext_in[37] = (w_delay_type[37]) ? rx_bs37_load_ext_in:1'b0;
    assign w_rx_load_ext_in[38] = (w_delay_type[38]) ? rx_bs38_load_ext_in:1'b0;
    assign w_rx_load_ext_in[39] = (w_delay_type[39]) ? rx_bs39_load_ext_in:1'b0;
    assign w_rx_load_ext_in[40] = (w_delay_type[40]) ? rx_bs40_load_ext_in:1'b0;
    assign w_rx_load_ext_in[41] = (w_delay_type[41]) ? rx_bs41_load_ext_in:1'b0;
    assign w_rx_load_ext_in[42] = (w_delay_type[42]) ? rx_bs42_load_ext_in:1'b0;
    assign w_rx_load_ext_in[43] = (w_delay_type[43]) ? rx_bs43_load_ext_in:1'b0;
    assign w_rx_load_ext_in[44] = (w_delay_type[44]) ? rx_bs44_load_ext_in:1'b0;
    assign w_rx_load_ext_in[45] = (w_delay_type[45]) ? rx_bs45_load_ext_in:1'b0;
    assign w_rx_load_ext_in[46] = (w_delay_type[46]) ? rx_bs46_load_ext_in:1'b0;
    assign w_rx_load_ext_in[47] = (w_delay_type[47]) ? rx_bs47_load_ext_in:1'b0;
    assign w_rx_load_ext_in[48] = (w_delay_type[48]) ? rx_bs48_load_ext_in:1'b0;
    assign w_rx_load_ext_in[49] = (w_delay_type[49]) ? rx_bs49_load_ext_in:1'b0;
    assign w_rx_load_ext_in[50] = (w_delay_type[50]) ? rx_bs50_load_ext_in:1'b0;
    assign w_rx_load_ext_in[51] = (w_delay_type[51]) ? rx_bs51_load_ext_in:1'b0;
    // CE
    wire [51:0] w_rx_ce_ext_in; 
    assign w_rx_ce_ext_in[0]  = (w_delay_type[0]) ? rx_bs0_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[1]  = (w_delay_type[1]) ? rx_bs1_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[2]  = (w_delay_type[2]) ? rx_bs2_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[3]  = (w_delay_type[3]) ? rx_bs3_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[4]  = (w_delay_type[4]) ? rx_bs4_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[5]  = (w_delay_type[5]) ? rx_bs5_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[6]  = (w_delay_type[6]) ? rx_bs6_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[7]  = (w_delay_type[7]) ? rx_bs7_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[8]  = (w_delay_type[8]) ? rx_bs8_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[9]  = (w_delay_type[9]) ? rx_bs9_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[10] = (w_delay_type[10]) ? rx_bs10_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[11] = (w_delay_type[11]) ? rx_bs11_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[12] = (w_delay_type[12]) ? rx_bs12_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[13] = (w_delay_type[13]) ? rx_bs13_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[14] = (w_delay_type[14]) ? rx_bs14_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[15] = (w_delay_type[15]) ? rx_bs15_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[16] = (w_delay_type[16]) ? rx_bs16_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[17] = (w_delay_type[17]) ? rx_bs17_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[18] = (w_delay_type[18]) ? rx_bs18_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[19] = (w_delay_type[19]) ? rx_bs19_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[20] = (w_delay_type[20]) ? rx_bs20_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[21] = (w_delay_type[21]) ? rx_bs21_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[22] = (w_delay_type[22]) ? rx_bs22_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[23] = (w_delay_type[23]) ? rx_bs23_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[24] = (w_delay_type[24]) ? rx_bs24_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[25] = (w_delay_type[25]) ? rx_bs25_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[26] = (w_delay_type[26]) ? rx_bs26_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[27] = (w_delay_type[27]) ? rx_bs27_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[28] = (w_delay_type[28]) ? rx_bs28_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[29] = (w_delay_type[29]) ? rx_bs29_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[30] = (w_delay_type[30]) ? rx_bs30_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[31] = (w_delay_type[31]) ? rx_bs31_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[32] = (w_delay_type[32]) ? rx_bs32_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[33] = (w_delay_type[33]) ? rx_bs33_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[34] = (w_delay_type[34]) ? rx_bs34_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[35] = (w_delay_type[35]) ? rx_bs35_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[36] = (w_delay_type[36]) ? rx_bs36_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[37] = (w_delay_type[37]) ? rx_bs37_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[38] = (w_delay_type[38]) ? rx_bs38_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[39] = (w_delay_type[39]) ? rx_bs39_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[40] = (w_delay_type[40]) ? rx_bs40_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[41] = (w_delay_type[41]) ? rx_bs41_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[42] = (w_delay_type[42]) ? rx_bs42_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[43] = (w_delay_type[43]) ? rx_bs43_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[44] = (w_delay_type[44]) ? rx_bs44_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[45] = (w_delay_type[45]) ? rx_bs45_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[46] = (w_delay_type[46]) ? rx_bs46_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[47] = (w_delay_type[47]) ? rx_bs47_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[48] = (w_delay_type[48]) ? rx_bs48_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[49] = (w_delay_type[49]) ? rx_bs49_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[50] = (w_delay_type[50]) ? rx_bs50_ce_ext_in:1'b0;
    assign w_rx_ce_ext_in[51] = (w_delay_type[51]) ? rx_bs51_ce_ext_in:1'b0;
   
    // Cntvalue in
    wire [8:0] w_rx_cntvaluein_ext_in [51:0];
    assign w_rx_cntvaluein_ext_in[0]  = (C_RX_DELAY_TYPE0 == 2'b10) ? rx_bs0_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[1]  = (C_RX_DELAY_TYPE1 == 2'b10) ? rx_bs1_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[2]  = (C_RX_DELAY_TYPE2 == 2'b10) ? rx_bs2_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[3]  = (C_RX_DELAY_TYPE3 == 2'b10) ? rx_bs3_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[4]  = (C_RX_DELAY_TYPE4 == 2'b10) ? rx_bs4_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[5]  = (C_RX_DELAY_TYPE5 == 2'b10) ? rx_bs5_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[6]  = (C_RX_DELAY_TYPE6 == 2'b10) ? rx_bs6_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[7]  = (C_RX_DELAY_TYPE7 == 2'b10) ? rx_bs7_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[8]  = (C_RX_DELAY_TYPE8 == 2'b10) ? rx_bs8_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[9]  = (C_RX_DELAY_TYPE9 == 2'b10) ? rx_bs9_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[10] = (C_RX_DELAY_TYPE10 == 2'b10) ? rx_bs10_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[11] = (C_RX_DELAY_TYPE11 == 2'b10) ? rx_bs11_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[12] = (C_RX_DELAY_TYPE12 == 2'b10) ? rx_bs12_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[13] = (C_RX_DELAY_TYPE13 == 2'b10) ? rx_bs13_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[14] = (C_RX_DELAY_TYPE14 == 2'b10) ? rx_bs14_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[15] = (C_RX_DELAY_TYPE15 == 2'b10) ? rx_bs15_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[16] = (C_RX_DELAY_TYPE16 == 2'b10) ? rx_bs16_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[17] = (C_RX_DELAY_TYPE17 == 2'b10) ? rx_bs17_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[18] = (C_RX_DELAY_TYPE18 == 2'b10) ? rx_bs18_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[19] = (C_RX_DELAY_TYPE19 == 2'b10) ? rx_bs19_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[20] = (C_RX_DELAY_TYPE20 == 2'b10) ? rx_bs20_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[21] = (C_RX_DELAY_TYPE21 == 2'b10) ? rx_bs21_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[22] = (C_RX_DELAY_TYPE22 == 2'b10) ? rx_bs22_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[23] = (C_RX_DELAY_TYPE23 == 2'b10) ? rx_bs23_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[24] = (C_RX_DELAY_TYPE24 == 2'b10) ? rx_bs24_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[25] = (C_RX_DELAY_TYPE25 == 2'b10) ? rx_bs25_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[26] = (C_RX_DELAY_TYPE26 == 2'b10) ? rx_bs26_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[27] = (C_RX_DELAY_TYPE27 == 2'b10) ? rx_bs27_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[28] = (C_RX_DELAY_TYPE28 == 2'b10) ? rx_bs28_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[29] = (C_RX_DELAY_TYPE29 == 2'b10) ? rx_bs29_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[30] = (C_RX_DELAY_TYPE30 == 2'b10) ? rx_bs30_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[31] = (C_RX_DELAY_TYPE31 == 2'b10) ? rx_bs31_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[32] = (C_RX_DELAY_TYPE32 == 2'b10) ? rx_bs32_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[33] = (C_RX_DELAY_TYPE33 == 2'b10) ? rx_bs33_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[34] = (C_RX_DELAY_TYPE34 == 2'b10) ? rx_bs34_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[35] = (C_RX_DELAY_TYPE35 == 2'b10) ? rx_bs35_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[36] = (C_RX_DELAY_TYPE36 == 2'b10) ? rx_bs36_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[37] = (C_RX_DELAY_TYPE37 == 2'b10) ? rx_bs37_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[38] = (C_RX_DELAY_TYPE38 == 2'b10) ? rx_bs38_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[39] = (C_RX_DELAY_TYPE39 == 2'b10) ? rx_bs39_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[40] = (C_RX_DELAY_TYPE40 == 2'b10) ? rx_bs40_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[41] = (C_RX_DELAY_TYPE41 == 2'b10) ? rx_bs41_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[42] = (C_RX_DELAY_TYPE42 == 2'b10) ? rx_bs42_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[43] = (C_RX_DELAY_TYPE43 == 2'b10) ? rx_bs43_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[44] = (C_RX_DELAY_TYPE44 == 2'b10) ? rx_bs44_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[45] = (C_RX_DELAY_TYPE45 == 2'b10) ? rx_bs45_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[46] = (C_RX_DELAY_TYPE46 == 2'b10) ? rx_bs46_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[47] = (C_RX_DELAY_TYPE47 == 2'b10) ? rx_bs47_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[48] = (C_RX_DELAY_TYPE48 == 2'b10) ? rx_bs48_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[49] = (C_RX_DELAY_TYPE49 == 2'b10) ? rx_bs49_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[50] = (C_RX_DELAY_TYPE50 == 2'b10) ? rx_bs50_cntvaluein_ext_in:9'b0;
    assign w_rx_cntvaluein_ext_in[51] = (C_RX_DELAY_TYPE51 == 2'b10) ? rx_bs51_cntvaluein_ext_in:9'b0;
   
    // Cnt value out
    wire [8:0] w_rx_cntvalueout_ext_out [51:0];
    assign rx_bs0_cntvalueout_ext_out   = (C_RX_DELAY_TYPE0 == 2'b10) ? w_rx_cntvalueout_ext_out[0]:9'b0;   
    assign rx_bs1_cntvalueout_ext_out   = (C_RX_DELAY_TYPE1 == 2'b10) ? w_rx_cntvalueout_ext_out[1]:9'b0;
    assign rx_bs2_cntvalueout_ext_out   = (C_RX_DELAY_TYPE2 == 2'b10) ? w_rx_cntvalueout_ext_out[2]:9'b0;
    assign rx_bs3_cntvalueout_ext_out   = (C_RX_DELAY_TYPE3 == 2'b10) ? w_rx_cntvalueout_ext_out[3]:9'b0;
    assign rx_bs4_cntvalueout_ext_out   = (C_RX_DELAY_TYPE4 == 2'b10) ? w_rx_cntvalueout_ext_out[4]:9'b0;
    assign rx_bs5_cntvalueout_ext_out   = (C_RX_DELAY_TYPE5 == 2'b10) ? w_rx_cntvalueout_ext_out[5]:9'b0;
    assign rx_bs6_cntvalueout_ext_out   = (C_RX_DELAY_TYPE6 == 2'b10) ? w_rx_cntvalueout_ext_out[6]:9'b0;
    assign rx_bs7_cntvalueout_ext_out   = (C_RX_DELAY_TYPE7 == 2'b10) ? w_rx_cntvalueout_ext_out[7]:9'b0;
    assign rx_bs8_cntvalueout_ext_out   = (C_RX_DELAY_TYPE8 == 2'b10) ? w_rx_cntvalueout_ext_out[8]:9'b0;
    assign rx_bs9_cntvalueout_ext_out   = (C_RX_DELAY_TYPE9 == 2'b10) ? w_rx_cntvalueout_ext_out[9]:9'b0;
    assign rx_bs10_cntvalueout_ext_out  = (C_RX_DELAY_TYPE10 == 2'b10) ? w_rx_cntvalueout_ext_out[10]:9'b0;
    assign rx_bs11_cntvalueout_ext_out  = (C_RX_DELAY_TYPE11 == 2'b10) ? w_rx_cntvalueout_ext_out[11]:9'b0;
    assign rx_bs12_cntvalueout_ext_out  = (C_RX_DELAY_TYPE12 == 2'b10) ? w_rx_cntvalueout_ext_out[12]:9'b0;
    assign rx_bs13_cntvalueout_ext_out  = (C_RX_DELAY_TYPE13 == 2'b10) ? w_rx_cntvalueout_ext_out[13]:9'b0;
    assign rx_bs14_cntvalueout_ext_out  = (C_RX_DELAY_TYPE14 == 2'b10) ? w_rx_cntvalueout_ext_out[14]:9'b0;
    assign rx_bs15_cntvalueout_ext_out  = (C_RX_DELAY_TYPE15 == 2'b10) ? w_rx_cntvalueout_ext_out[15]:9'b0;
    assign rx_bs16_cntvalueout_ext_out  = (C_RX_DELAY_TYPE16 == 2'b10) ? w_rx_cntvalueout_ext_out[16]:9'b0;
    assign rx_bs17_cntvalueout_ext_out  = (C_RX_DELAY_TYPE17 == 2'b10) ? w_rx_cntvalueout_ext_out[17]:9'b0;
    assign rx_bs18_cntvalueout_ext_out  = (C_RX_DELAY_TYPE18 == 2'b10) ? w_rx_cntvalueout_ext_out[18]:9'b0;
    assign rx_bs19_cntvalueout_ext_out  = (C_RX_DELAY_TYPE19 == 2'b10) ? w_rx_cntvalueout_ext_out[19]:9'b0;
    assign rx_bs20_cntvalueout_ext_out  = (C_RX_DELAY_TYPE20 == 2'b10) ? w_rx_cntvalueout_ext_out[20]:9'b0;
    assign rx_bs21_cntvalueout_ext_out  = (C_RX_DELAY_TYPE21 == 2'b10) ? w_rx_cntvalueout_ext_out[21]:9'b0;
    assign rx_bs22_cntvalueout_ext_out  = (C_RX_DELAY_TYPE22 == 2'b10) ? w_rx_cntvalueout_ext_out[22]:9'b0;
    assign rx_bs23_cntvalueout_ext_out  = (C_RX_DELAY_TYPE23 == 2'b10) ? w_rx_cntvalueout_ext_out[23]:9'b0;
    assign rx_bs24_cntvalueout_ext_out  = (C_RX_DELAY_TYPE24 == 2'b10) ? w_rx_cntvalueout_ext_out[24]:9'b0;
    assign rx_bs25_cntvalueout_ext_out  = (C_RX_DELAY_TYPE25 == 2'b10) ? w_rx_cntvalueout_ext_out[25]:9'b0;
    assign rx_bs26_cntvalueout_ext_out  = (C_RX_DELAY_TYPE26 == 2'b10) ? w_rx_cntvalueout_ext_out[26]:9'b0;
    assign rx_bs27_cntvalueout_ext_out  = (C_RX_DELAY_TYPE27 == 2'b10) ? w_rx_cntvalueout_ext_out[27]:9'b0;
    assign rx_bs28_cntvalueout_ext_out  = (C_RX_DELAY_TYPE28 == 2'b10) ? w_rx_cntvalueout_ext_out[28]:9'b0;
    assign rx_bs29_cntvalueout_ext_out  = (C_RX_DELAY_TYPE29 == 2'b10) ? w_rx_cntvalueout_ext_out[29]:9'b0;
    assign rx_bs30_cntvalueout_ext_out  = (C_RX_DELAY_TYPE30 == 2'b10) ? w_rx_cntvalueout_ext_out[30]:9'b0;
    assign rx_bs31_cntvalueout_ext_out  = (C_RX_DELAY_TYPE31 == 2'b10) ? w_rx_cntvalueout_ext_out[31]:9'b0;
    assign rx_bs32_cntvalueout_ext_out  = (C_RX_DELAY_TYPE32 == 2'b10) ? w_rx_cntvalueout_ext_out[32]:9'b0;
    assign rx_bs33_cntvalueout_ext_out  = (C_RX_DELAY_TYPE33 == 2'b10) ? w_rx_cntvalueout_ext_out[33]:9'b0;
    assign rx_bs34_cntvalueout_ext_out  = (C_RX_DELAY_TYPE34 == 2'b10) ? w_rx_cntvalueout_ext_out[34]:9'b0;
    assign rx_bs35_cntvalueout_ext_out  = (C_RX_DELAY_TYPE35 == 2'b10) ? w_rx_cntvalueout_ext_out[35]:9'b0;
    assign rx_bs36_cntvalueout_ext_out  = (C_RX_DELAY_TYPE36 == 2'b10) ? w_rx_cntvalueout_ext_out[36]:9'b0;
    assign rx_bs37_cntvalueout_ext_out  = (C_RX_DELAY_TYPE37 == 2'b10) ? w_rx_cntvalueout_ext_out[37]:9'b0;
    assign rx_bs38_cntvalueout_ext_out  = (C_RX_DELAY_TYPE38 == 2'b10) ? w_rx_cntvalueout_ext_out[38]:9'b0;
    assign rx_bs39_cntvalueout_ext_out  = (C_RX_DELAY_TYPE39 == 2'b10) ? w_rx_cntvalueout_ext_out[39]:9'b0;
    assign rx_bs40_cntvalueout_ext_out  = (C_RX_DELAY_TYPE40 == 2'b10) ? w_rx_cntvalueout_ext_out[40]:9'b0;
    assign rx_bs41_cntvalueout_ext_out  = (C_RX_DELAY_TYPE41 == 2'b10) ? w_rx_cntvalueout_ext_out[41]:9'b0;
    assign rx_bs42_cntvalueout_ext_out  = (C_RX_DELAY_TYPE42 == 2'b10) ? w_rx_cntvalueout_ext_out[42]:9'b0;
    assign rx_bs43_cntvalueout_ext_out  = (C_RX_DELAY_TYPE43 == 2'b10) ? w_rx_cntvalueout_ext_out[43]:9'b0;
    assign rx_bs44_cntvalueout_ext_out  = (C_RX_DELAY_TYPE44 == 2'b10) ? w_rx_cntvalueout_ext_out[44]:9'b0;
    assign rx_bs45_cntvalueout_ext_out  = (C_RX_DELAY_TYPE45 == 2'b10) ? w_rx_cntvalueout_ext_out[45]:9'b0;
    assign rx_bs46_cntvalueout_ext_out  = (C_RX_DELAY_TYPE46 == 2'b10) ? w_rx_cntvalueout_ext_out[46]:9'b0;
    assign rx_bs47_cntvalueout_ext_out  = (C_RX_DELAY_TYPE47 == 2'b10) ? w_rx_cntvalueout_ext_out[47]:9'b0;
    assign rx_bs48_cntvalueout_ext_out  = (C_RX_DELAY_TYPE48 == 2'b10) ? w_rx_cntvalueout_ext_out[48]:9'b0;
    assign rx_bs49_cntvalueout_ext_out  = (C_RX_DELAY_TYPE49 == 2'b10) ? w_rx_cntvalueout_ext_out[49]:9'b0;
    assign rx_bs50_cntvalueout_ext_out  = (C_RX_DELAY_TYPE50 == 2'b10) ? w_rx_cntvalueout_ext_out[50]:9'b0;
    assign rx_bs51_cntvalueout_ext_out  = (C_RX_DELAY_TYPE51 == 2'b10) ? w_rx_cntvalueout_ext_out[51]:9'b0;
    
   // Fifo Read Clock
   
   wire [51:0] w_rx_fifo_rd_clk_in;
   assign w_rx_fifo_rd_clk_in = { 
                               rx_bs51_fifo_rd_clk_in,
                               rx_bs50_fifo_rd_clk_in,
                               rx_bs49_fifo_rd_clk_in,
                               rx_bs48_fifo_rd_clk_in,
                               rx_bs47_fifo_rd_clk_in,
                               rx_bs46_fifo_rd_clk_in,
                               rx_bs45_fifo_rd_clk_in,
                               rx_bs44_fifo_rd_clk_in,
                               rx_bs43_fifo_rd_clk_in,
                               rx_bs42_fifo_rd_clk_in,
                               rx_bs41_fifo_rd_clk_in,
                               rx_bs40_fifo_rd_clk_in,
                               rx_bs39_fifo_rd_clk_in,
                               rx_bs38_fifo_rd_clk_in,
                               rx_bs37_fifo_rd_clk_in,
                               rx_bs36_fifo_rd_clk_in,
                               rx_bs35_fifo_rd_clk_in,
                               rx_bs34_fifo_rd_clk_in,
                               rx_bs33_fifo_rd_clk_in,
                               rx_bs32_fifo_rd_clk_in,
                               rx_bs31_fifo_rd_clk_in,
                               rx_bs30_fifo_rd_clk_in,
                               rx_bs29_fifo_rd_clk_in,
                               rx_bs28_fifo_rd_clk_in,
                               rx_bs27_fifo_rd_clk_in,
                               rx_bs26_fifo_rd_clk_in,
                               rx_bs25_fifo_rd_clk_in,
                               rx_bs24_fifo_rd_clk_in,
                               rx_bs23_fifo_rd_clk_in,
                               rx_bs22_fifo_rd_clk_in,
                               rx_bs21_fifo_rd_clk_in,
                               rx_bs20_fifo_rd_clk_in,
                               rx_bs19_fifo_rd_clk_in,
                               rx_bs18_fifo_rd_clk_in,
                               rx_bs17_fifo_rd_clk_in,
                               rx_bs16_fifo_rd_clk_in,
                               rx_bs15_fifo_rd_clk_in,
                               rx_bs14_fifo_rd_clk_in,
                               rx_bs13_fifo_rd_clk_in,
                               rx_bs12_fifo_rd_clk_in,
                               rx_bs11_fifo_rd_clk_in,
                               rx_bs10_fifo_rd_clk_in,
                               rx_bs9_fifo_rd_clk_in,
                               rx_bs8_fifo_rd_clk_in,
                               rx_bs7_fifo_rd_clk_in,
                               rx_bs6_fifo_rd_clk_in,
                               rx_bs5_fifo_rd_clk_in,
                               rx_bs4_fifo_rd_clk_in,
                               rx_bs3_fifo_rd_clk_in,
                               rx_bs2_fifo_rd_clk_in,
                               rx_bs1_fifo_rd_clk_in,
                               rx_bs0_fifo_rd_clk_in
                              };
   //
   wire [51:0] w_rx_fifo_rd_en_in;
   assign w_rx_fifo_rd_en_in = { 
                               rx_bs51_fifo_rd_en_in,
                               rx_bs50_fifo_rd_en_in,
                               rx_bs49_fifo_rd_en_in,
                               rx_bs48_fifo_rd_en_in,
                               rx_bs47_fifo_rd_en_in,
                               rx_bs46_fifo_rd_en_in,
                               rx_bs45_fifo_rd_en_in,
                               rx_bs44_fifo_rd_en_in,
                               rx_bs43_fifo_rd_en_in,
                               rx_bs42_fifo_rd_en_in,
                               rx_bs41_fifo_rd_en_in,
                               rx_bs40_fifo_rd_en_in,
                               rx_bs39_fifo_rd_en_in,
                               rx_bs38_fifo_rd_en_in,
                               rx_bs37_fifo_rd_en_in,
                               rx_bs36_fifo_rd_en_in,
                               rx_bs35_fifo_rd_en_in,
                               rx_bs34_fifo_rd_en_in,
                               rx_bs33_fifo_rd_en_in,
                               rx_bs32_fifo_rd_en_in,
                               rx_bs31_fifo_rd_en_in,
                               rx_bs30_fifo_rd_en_in,
                               rx_bs29_fifo_rd_en_in,
                               rx_bs28_fifo_rd_en_in,
                               rx_bs27_fifo_rd_en_in,
                               rx_bs26_fifo_rd_en_in,
                               rx_bs25_fifo_rd_en_in,
                               rx_bs24_fifo_rd_en_in,
                               rx_bs23_fifo_rd_en_in,
                               rx_bs22_fifo_rd_en_in,
                               rx_bs21_fifo_rd_en_in,
                               rx_bs20_fifo_rd_en_in,
                               rx_bs19_fifo_rd_en_in,
                               rx_bs18_fifo_rd_en_in,
                               rx_bs17_fifo_rd_en_in,
                               rx_bs16_fifo_rd_en_in,
                               rx_bs15_fifo_rd_en_in,
                               rx_bs14_fifo_rd_en_in,
                               rx_bs13_fifo_rd_en_in,
                               rx_bs12_fifo_rd_en_in,
                               rx_bs11_fifo_rd_en_in,
                               rx_bs10_fifo_rd_en_in,
                               rx_bs9_fifo_rd_en_in,
                               rx_bs8_fifo_rd_en_in,
                               rx_bs7_fifo_rd_en_in,
                               rx_bs6_fifo_rd_en_in,
                               rx_bs5_fifo_rd_en_in,
                               rx_bs4_fifo_rd_en_in,
                               rx_bs3_fifo_rd_en_in,
                               rx_bs2_fifo_rd_en_in,
                               rx_bs1_fifo_rd_en_in,
                               rx_bs0_fifo_rd_en_in
                              };
   // 
   wire [51:0] w_rx_datain;
   assign w_rx_datain = { 
                               rx_bs51_datain,
                               rx_bs50_datain,
                               rx_bs49_datain,
                               rx_bs48_datain,
                               rx_bs47_datain,
                               rx_bs46_datain,
                               rx_bs45_datain,
                               rx_bs44_datain,
                               rx_bs43_datain,
                               rx_bs42_datain,
                               rx_bs41_datain,
                               rx_bs40_datain,
                               rx_bs39_datain,
                               rx_bs38_datain,
                               rx_bs37_datain,
                               rx_bs36_datain,
                               rx_bs35_datain,
                               rx_bs34_datain,
                               rx_bs33_datain,
                               rx_bs32_datain,
                               rx_bs31_datain,
                               rx_bs30_datain,
                               rx_bs29_datain,
                               rx_bs28_datain,
                               rx_bs27_datain,
                               rx_bs26_datain,
                               rx_bs25_datain,
                               rx_bs24_datain,
                               rx_bs23_datain,
                               rx_bs22_datain,
                               rx_bs21_datain,
                               rx_bs20_datain,
                               rx_bs19_datain,
                               rx_bs18_datain,
                               rx_bs17_datain,
                               rx_bs16_datain,
                               rx_bs15_datain,
                               rx_bs14_datain,
                               rx_bs13_datain,
                               rx_bs12_datain,
                               rx_bs11_datain,
                               rx_bs10_datain,
                               rx_bs9_datain,
                               rx_bs8_datain,
                               rx_bs7_datain,
                               rx_bs6_datain,
                               rx_bs5_datain,
                               rx_bs4_datain,
                               rx_bs3_datain,
                               rx_bs2_datain,
                               rx_bs1_datain,
                               rx_bs0_datain };
   
   wire [51:0] w_rx_fifo_empty_out;
   assign rx_bs51_fifo_empty_out = w_rx_fifo_empty_out[51];
   assign rx_bs50_fifo_empty_out = w_rx_fifo_empty_out[50];
   assign rx_bs49_fifo_empty_out = w_rx_fifo_empty_out[49];
   assign rx_bs48_fifo_empty_out = w_rx_fifo_empty_out[48];
   assign rx_bs47_fifo_empty_out = w_rx_fifo_empty_out[47];
   assign rx_bs46_fifo_empty_out = w_rx_fifo_empty_out[46];
   assign rx_bs45_fifo_empty_out = w_rx_fifo_empty_out[45];
   assign rx_bs44_fifo_empty_out = w_rx_fifo_empty_out[44];
   assign rx_bs43_fifo_empty_out = w_rx_fifo_empty_out[43];
   assign rx_bs42_fifo_empty_out = w_rx_fifo_empty_out[42];
   assign rx_bs41_fifo_empty_out = w_rx_fifo_empty_out[41];
   assign rx_bs40_fifo_empty_out = w_rx_fifo_empty_out[40];
   assign rx_bs39_fifo_empty_out = w_rx_fifo_empty_out[39];
   assign rx_bs38_fifo_empty_out = w_rx_fifo_empty_out[38];
   assign rx_bs37_fifo_empty_out = w_rx_fifo_empty_out[37];
   assign rx_bs36_fifo_empty_out = w_rx_fifo_empty_out[36];
   assign rx_bs35_fifo_empty_out = w_rx_fifo_empty_out[35];
   assign rx_bs34_fifo_empty_out = w_rx_fifo_empty_out[34];
   assign rx_bs33_fifo_empty_out = w_rx_fifo_empty_out[33];
   assign rx_bs32_fifo_empty_out = w_rx_fifo_empty_out[32];
   assign rx_bs31_fifo_empty_out = w_rx_fifo_empty_out[31];
   assign rx_bs30_fifo_empty_out = w_rx_fifo_empty_out[30];
   assign rx_bs29_fifo_empty_out = w_rx_fifo_empty_out[29];
   assign rx_bs28_fifo_empty_out = w_rx_fifo_empty_out[28];
   assign rx_bs27_fifo_empty_out = w_rx_fifo_empty_out[27];
   assign rx_bs26_fifo_empty_out = w_rx_fifo_empty_out[26];
   assign rx_bs25_fifo_empty_out = w_rx_fifo_empty_out[25];
   assign rx_bs24_fifo_empty_out = w_rx_fifo_empty_out[24];
   assign rx_bs23_fifo_empty_out = w_rx_fifo_empty_out[23];
   assign rx_bs22_fifo_empty_out = w_rx_fifo_empty_out[22];
   assign rx_bs21_fifo_empty_out = w_rx_fifo_empty_out[21];
   assign rx_bs20_fifo_empty_out = w_rx_fifo_empty_out[20];
   assign rx_bs19_fifo_empty_out = w_rx_fifo_empty_out[19];
   assign rx_bs18_fifo_empty_out = w_rx_fifo_empty_out[18];
   assign rx_bs17_fifo_empty_out = w_rx_fifo_empty_out[17];
   assign rx_bs16_fifo_empty_out = w_rx_fifo_empty_out[16];
   assign rx_bs15_fifo_empty_out = w_rx_fifo_empty_out[15];
   assign rx_bs14_fifo_empty_out = w_rx_fifo_empty_out[14];
   assign rx_bs13_fifo_empty_out = w_rx_fifo_empty_out[13];
   assign rx_bs12_fifo_empty_out = w_rx_fifo_empty_out[12];
   assign rx_bs11_fifo_empty_out = w_rx_fifo_empty_out[11];
   assign rx_bs10_fifo_empty_out = w_rx_fifo_empty_out[10];
   assign rx_bs9_fifo_empty_out  = w_rx_fifo_empty_out[9];
   assign rx_bs8_fifo_empty_out  = w_rx_fifo_empty_out[8];
   assign rx_bs7_fifo_empty_out  = w_rx_fifo_empty_out[7];
   assign rx_bs6_fifo_empty_out  = w_rx_fifo_empty_out[6];
   assign rx_bs5_fifo_empty_out  = w_rx_fifo_empty_out[5];
   assign rx_bs4_fifo_empty_out  = w_rx_fifo_empty_out[4];
   assign rx_bs3_fifo_empty_out  = w_rx_fifo_empty_out[3];
   assign rx_bs2_fifo_empty_out  = w_rx_fifo_empty_out[2];
   assign rx_bs1_fifo_empty_out  = w_rx_fifo_empty_out[1];
   assign rx_bs0_fifo_empty_out  = w_rx_fifo_empty_out[0];
   
   // Fifo Write Clock Signals
   wire [51:0] w_rx_fifo_wrclk_out;
   assign rx_bs0_nib0_fifo_wrclk_out  = (C_RX_STROBE_EN[0] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[0]:1'b0;
   assign rx_bs6_nib1_fifo_wrclk_out  = (C_RX_STROBE_EN[2] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[6]:1'b0; 
   assign rx_bs13_nib2_fifo_wrclk_out = (C_RX_STROBE_EN[4] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[13]:1'b0; 
   assign rx_bs19_nib3_fifo_wrclk_out = (C_RX_STROBE_EN[6] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[19]:1'b0; 
   assign rx_bs26_nib4_fifo_wrclk_out = (C_RX_STROBE_EN[8] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[26]:1'b0;
   assign rx_bs32_nib5_fifo_wrclk_out  = (C_RX_STROBE_EN[10] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[32]:1'b0;
   assign rx_bs39_nib6_fifo_wrclk_out  = (C_RX_STROBE_EN[12] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[39]:1'b0;
   assign rx_bs45_nib7_fifo_wrclk_out  = (C_RX_STROBE_EN[14] && C_FIFO_WR_CLK_EN)? w_rx_fifo_wrclk_out[45]:1'b0;
   
   // RX Bitslice data output
   wire  [7:0] w_rx_q_int[51:0];   // Data output to bitslip, if not this gets mapped to rx_q
   wire [C_SERIALIZATION_FACTOR -1 : 0] w_rx_q [51:0];

   assign rx_bs0_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[0]) ? w_rx_q_int[0]:  w_rx_q[0]): w_rx_q_int[0]; 
   assign rx_bs1_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[1]) ? w_rx_q_int[1]:  w_rx_q[1]): w_rx_q_int[1]; 
   assign rx_bs2_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[2]) ? w_rx_q_int[2]:  w_rx_q[2]): w_rx_q_int[2]; 
   assign rx_bs3_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[3]) ? w_rx_q_int[3]:  w_rx_q[3]): w_rx_q_int[3]; 
   assign rx_bs4_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[4]) ? w_rx_q_int[4]:  w_rx_q[4]): w_rx_q_int[4]; 
   assign rx_bs5_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[5]) ? w_rx_q_int[5]:  w_rx_q[5]): w_rx_q_int[5]; 
   assign rx_bs6_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[6]) ? w_rx_q_int[6]:  w_rx_q[6]): w_rx_q_int[6]; 
   assign rx_bs7_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[7]) ? w_rx_q_int[7]:  w_rx_q[7]): w_rx_q_int[7]; 
   assign rx_bs8_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[8]) ? w_rx_q_int[8]:  w_rx_q[8]): w_rx_q_int[8]; 
   assign rx_bs9_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[9]) ? w_rx_q_int[9]:  w_rx_q[9]): w_rx_q_int[9]; 
   assign rx_bs10_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[10]) ? w_rx_q_int[10]:  w_rx_q[10]): w_rx_q_int[10]; 
   assign rx_bs11_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[11]) ? w_rx_q_int[11]:  w_rx_q[11]): w_rx_q_int[11]; 
   assign rx_bs12_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[12]) ? w_rx_q_int[12]:  w_rx_q[12]): w_rx_q_int[12]; 
   assign rx_bs13_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[13]) ? w_rx_q_int[13]:  w_rx_q[13]): w_rx_q_int[13]; 
   assign rx_bs14_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[14]) ? w_rx_q_int[14]:  w_rx_q[14]): w_rx_q_int[14]; 
   assign rx_bs15_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[15]) ? w_rx_q_int[15]:  w_rx_q[15]): w_rx_q_int[15]; 
   assign rx_bs16_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[16]) ? w_rx_q_int[16]:  w_rx_q[16]): w_rx_q_int[16]; 
   assign rx_bs17_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[17]) ? w_rx_q_int[17]:  w_rx_q[17]): w_rx_q_int[17]; 
   assign rx_bs18_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[18]) ? w_rx_q_int[18]:  w_rx_q[18]): w_rx_q_int[18]; 
   assign rx_bs19_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[19]) ? w_rx_q_int[19]:  w_rx_q[19]): w_rx_q_int[19]; 
   assign rx_bs20_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[20]) ? w_rx_q_int[20]:  w_rx_q[20]): w_rx_q_int[20]; 
   assign rx_bs21_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[21]) ? w_rx_q_int[21]:  w_rx_q[21]): w_rx_q_int[21]; 
   assign rx_bs22_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[22]) ? w_rx_q_int[22]:  w_rx_q[22]): w_rx_q_int[22]; 
   assign rx_bs23_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[23]) ? w_rx_q_int[23]:  w_rx_q[23]): w_rx_q_int[23]; 
   assign rx_bs24_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[24]) ? w_rx_q_int[24]:  w_rx_q[24]): w_rx_q_int[24]; 
   assign rx_bs25_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[25]) ? w_rx_q_int[25]:  w_rx_q[25]): w_rx_q_int[25]; 
   assign rx_bs26_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[26]) ? w_rx_q_int[26]:  w_rx_q[26]): w_rx_q_int[26]; 
   assign rx_bs27_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[27]) ? w_rx_q_int[27]:  w_rx_q[27]): w_rx_q_int[27]; 
   assign rx_bs28_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[28]) ? w_rx_q_int[28]:  w_rx_q[28]): w_rx_q_int[28]; 
   assign rx_bs29_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[29]) ? w_rx_q_int[29]:  w_rx_q[29]): w_rx_q_int[29]; 
   assign rx_bs30_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[30]) ? w_rx_q_int[30]:  w_rx_q[30]): w_rx_q_int[30]; 
   assign rx_bs31_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[31]) ? w_rx_q_int[31]:  w_rx_q[31]): w_rx_q_int[31]; 
   assign rx_bs32_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[32]) ? w_rx_q_int[32]:  w_rx_q[32]): w_rx_q_int[32]; 
   assign rx_bs33_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[33]) ? w_rx_q_int[33]:  w_rx_q[33]): w_rx_q_int[33]; 
   assign rx_bs34_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[34]) ? w_rx_q_int[34]:  w_rx_q[34]): w_rx_q_int[34]; 
   assign rx_bs35_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[35]) ? w_rx_q_int[35]:  w_rx_q[35]): w_rx_q_int[35]; 
   assign rx_bs36_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[36]) ? w_rx_q_int[36]:  w_rx_q[36]): w_rx_q_int[36]; 
   assign rx_bs37_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[37]) ? w_rx_q_int[37]:  w_rx_q[37]): w_rx_q_int[37]; 
   assign rx_bs38_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[38]) ? w_rx_q_int[38]:  w_rx_q[38]): w_rx_q_int[38]; 
   assign rx_bs39_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[39]) ? w_rx_q_int[39]:  w_rx_q[39]): w_rx_q_int[39]; 
   assign rx_bs40_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[40]) ? w_rx_q_int[40]:  w_rx_q[40]): w_rx_q_int[40]; 
   assign rx_bs41_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[41]) ? w_rx_q_int[41]:  w_rx_q[41]): w_rx_q_int[41]; 
   assign rx_bs42_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[42]) ? w_rx_q_int[42]:  w_rx_q[42]): w_rx_q_int[42]; 
   assign rx_bs43_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[43]) ? w_rx_q_int[43]:  w_rx_q[43]): w_rx_q_int[43]; 
   assign rx_bs44_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[44]) ? w_rx_q_int[44]:  w_rx_q[44]): w_rx_q_int[44]; 
   assign rx_bs45_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[45]) ? w_rx_q_int[45]:  w_rx_q[45]): w_rx_q_int[45]; 
   assign rx_bs46_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[46]) ? w_rx_q_int[46]:  w_rx_q[46]): w_rx_q_int[46]; 
   assign rx_bs47_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[47]) ? w_rx_q_int[47]:  w_rx_q[47]): w_rx_q_int[47]; 
   assign rx_bs48_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[48]) ? w_rx_q_int[48]:  w_rx_q[48]): w_rx_q_int[48]; 
   assign rx_bs49_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[49]) ? w_rx_q_int[49]:  w_rx_q[49]): w_rx_q_int[49]; 
   assign rx_bs50_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[50]) ? w_rx_q_int[50]:  w_rx_q[50]): w_rx_q_int[50]; 
   assign rx_bs51_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? ((C_ENABLE_DATA_BITSLIP && !start_bitslip_sync[51]) ? w_rx_q_int[51]:  w_rx_q[51]): w_rx_q_int[51]; 
 /*  assign rx_bs1_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[1]: w_rx_q_int[1]; 
   assign rx_bs2_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[2]: w_rx_q_int[2]; 
   assign rx_bs3_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[3]: w_rx_q_int[3]; 
   assign rx_bs4_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[4]: w_rx_q_int[4]; 
   assign rx_bs5_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[5]: w_rx_q_int[5]; 
   assign rx_bs6_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[6]: w_rx_q_int[6]; 
   assign rx_bs7_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[7]: w_rx_q_int[7]; 
   assign rx_bs8_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[8]: w_rx_q_int[8]; 
   assign rx_bs9_Q_data_to_fabric_out        = (C_ENABLE_BITSLIP) ? w_rx_q[9]: w_rx_q_int[9]; 
   assign rx_bs10_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[10]: w_rx_q_int[10]; 
   assign rx_bs11_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[11]: w_rx_q_int[11]; 
   assign rx_bs12_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[12]: w_rx_q_int[12]; 
   assign rx_bs13_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[13]: w_rx_q_int[13]; 
   assign rx_bs14_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[14]: w_rx_q_int[14]; 
   assign rx_bs15_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[15]: w_rx_q_int[15]; 
   assign rx_bs16_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[16]: w_rx_q_int[16]; 
   assign rx_bs17_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[17]: w_rx_q_int[17]; 
   assign rx_bs18_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[18]: w_rx_q_int[18]; 
   assign rx_bs19_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[19]: w_rx_q_int[19]; 
   assign rx_bs20_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[20]: w_rx_q_int[20]; 
   assign rx_bs21_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[21]: w_rx_q_int[21]; 
   assign rx_bs22_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[22]: w_rx_q_int[22]; 
   assign rx_bs23_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[23]: w_rx_q_int[23]; 
   assign rx_bs24_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[24]: w_rx_q_int[24]; 
   assign rx_bs25_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[25]: w_rx_q_int[25]; 
   assign rx_bs26_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[26]: w_rx_q_int[26]; 
   assign rx_bs27_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[27]: w_rx_q_int[27]; 
   assign rx_bs28_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[28]: w_rx_q_int[28]; 
   assign rx_bs29_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[29]: w_rx_q_int[29]; 
   assign rx_bs30_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[30]: w_rx_q_int[30]; 
   assign rx_bs31_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[31]: w_rx_q_int[31]; 
   assign rx_bs32_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[32]: w_rx_q_int[32]; 
   assign rx_bs33_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[33]: w_rx_q_int[33]; 
   assign rx_bs34_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[34]: w_rx_q_int[34]; 
   assign rx_bs35_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[35]: w_rx_q_int[35]; 
   assign rx_bs36_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[36]: w_rx_q_int[36]; 
   assign rx_bs37_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[37]: w_rx_q_int[37]; 
   assign rx_bs38_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[38]: w_rx_q_int[38]; 
   assign rx_bs39_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[39]: w_rx_q_int[39]; 
   assign rx_bs40_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[40]: w_rx_q_int[40]; 
   assign rx_bs41_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[41]: w_rx_q_int[41]; 
   assign rx_bs42_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[42]: w_rx_q_int[42]; 
   assign rx_bs43_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[43]: w_rx_q_int[43]; 
   assign rx_bs44_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[44]: w_rx_q_int[44]; 
   assign rx_bs45_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[45]: w_rx_q_int[45]; 
   assign rx_bs46_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[46]: w_rx_q_int[46]; 
   assign rx_bs47_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[47]: w_rx_q_int[47]; 
   assign rx_bs48_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[48]: w_rx_q_int[48]; 
   assign rx_bs49_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[49]: w_rx_q_int[49]; 
   assign rx_bs50_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[50]: w_rx_q_int[50]; 
   assign rx_bs51_Q_data_to_fabric_out       = (C_ENABLE_BITSLIP) ? w_rx_q[51]: w_rx_q_int[51]; */
   
   // Bitslip
   // Actual bitslip mode  
   localparam C_BITSLIP_MODE_ACT = (C_BITSLIP_MODE == "SLIP_PER_BIT") ? "Slip" : 
                                   (C_BITSLIP_MODE == "SLIP_BY_VAL")  ? "Nmbr" : 
                                   (C_BITSLIP_MODE == "SLIP_BY_COMP") ? "Comp" : "Fstc";
   // Actual bitslip val   
   localparam [2:0] C_BITSLIP_VAL_ACT  = (C_BITSLIP_MODE == "SLIP_BY_VAL") ? C_BITSLIP_VAL[2:0] : 3'b001;

   // Actual bitslip comp val
   localparam [C_SERIALIZATION_FACTOR -1 :0] C_BITSLIP_COMP_VAL_ACT = (C_SERIALIZATION_FACTOR == 8) ? C_BITSLIP_VAL : C_BITSLIP_VAL[3:0];
   
   // Bitslip error
   wire [51:0] 			     w_rx_bitslip_error_out;
   assign rx_bs51_bitslip_error_out  =  w_rx_bitslip_error_out[51];
   assign rx_bs50_bitslip_error_out  =  w_rx_bitslip_error_out[50];
   assign rx_bs49_bitslip_error_out  =  w_rx_bitslip_error_out[49];
   assign rx_bs48_bitslip_error_out  =  w_rx_bitslip_error_out[48];
   assign rx_bs47_bitslip_error_out  =  w_rx_bitslip_error_out[47];
   assign rx_bs46_bitslip_error_out  =  w_rx_bitslip_error_out[46];
   assign rx_bs45_bitslip_error_out  =  w_rx_bitslip_error_out[45];
   assign rx_bs44_bitslip_error_out  =  w_rx_bitslip_error_out[44];
   assign rx_bs43_bitslip_error_out  =  w_rx_bitslip_error_out[43];
   assign rx_bs42_bitslip_error_out  =  w_rx_bitslip_error_out[42];
   assign rx_bs41_bitslip_error_out  =  w_rx_bitslip_error_out[41];
   assign rx_bs40_bitslip_error_out  =  w_rx_bitslip_error_out[40];
   assign rx_bs39_bitslip_error_out  =  w_rx_bitslip_error_out[39];
   assign rx_bs38_bitslip_error_out  =  w_rx_bitslip_error_out[38];
   assign rx_bs37_bitslip_error_out  =  w_rx_bitslip_error_out[37];
   assign rx_bs36_bitslip_error_out  =  w_rx_bitslip_error_out[36];
   assign rx_bs35_bitslip_error_out  =  w_rx_bitslip_error_out[35];
   assign rx_bs34_bitslip_error_out  =  w_rx_bitslip_error_out[34];
   assign rx_bs33_bitslip_error_out  =  w_rx_bitslip_error_out[33];
   assign rx_bs32_bitslip_error_out  =  w_rx_bitslip_error_out[32];
   assign rx_bs31_bitslip_error_out  =  w_rx_bitslip_error_out[31];
   assign rx_bs30_bitslip_error_out  =  w_rx_bitslip_error_out[30];      
   assign rx_bs29_bitslip_error_out  =  w_rx_bitslip_error_out[29];
   assign rx_bs28_bitslip_error_out  =  w_rx_bitslip_error_out[28];
   assign rx_bs27_bitslip_error_out  =  w_rx_bitslip_error_out[27];
   assign rx_bs26_bitslip_error_out  =  w_rx_bitslip_error_out[26];
   assign rx_bs25_bitslip_error_out  =  w_rx_bitslip_error_out[25];
   assign rx_bs24_bitslip_error_out  =  w_rx_bitslip_error_out[24];
   assign rx_bs23_bitslip_error_out  =  w_rx_bitslip_error_out[23];
   assign rx_bs22_bitslip_error_out  =  w_rx_bitslip_error_out[22];
   assign rx_bs21_bitslip_error_out  =  w_rx_bitslip_error_out[21];
   assign rx_bs20_bitslip_error_out  =  w_rx_bitslip_error_out[20];      
   assign rx_bs19_bitslip_error_out  =  w_rx_bitslip_error_out[19];
   assign rx_bs18_bitslip_error_out  =  w_rx_bitslip_error_out[18];
   assign rx_bs17_bitslip_error_out  =  w_rx_bitslip_error_out[17];
   assign rx_bs16_bitslip_error_out  =  w_rx_bitslip_error_out[16];
   assign rx_bs15_bitslip_error_out  =  w_rx_bitslip_error_out[15];
   assign rx_bs14_bitslip_error_out  =  w_rx_bitslip_error_out[14];
   assign rx_bs13_bitslip_error_out  =  w_rx_bitslip_error_out[13];
   assign rx_bs12_bitslip_error_out  =  w_rx_bitslip_error_out[12];
   assign rx_bs11_bitslip_error_out  =  w_rx_bitslip_error_out[11];
   assign rx_bs10_bitslip_error_out  =  w_rx_bitslip_error_out[10];      
   assign rx_bs9_bitslip_error_out  =  w_rx_bitslip_error_out[9];
   assign rx_bs8_bitslip_error_out  =  w_rx_bitslip_error_out[8];
   assign rx_bs7_bitslip_error_out  =  w_rx_bitslip_error_out[7];
   assign rx_bs6_bitslip_error_out  =  w_rx_bitslip_error_out[6];
   assign rx_bs5_bitslip_error_out  =  w_rx_bitslip_error_out[5];
   assign rx_bs4_bitslip_error_out  =  w_rx_bitslip_error_out[4];
   assign rx_bs3_bitslip_error_out  =  w_rx_bitslip_error_out[3];
   assign rx_bs2_bitslip_error_out  =  w_rx_bitslip_error_out[2];
   assign rx_bs1_bitslip_error_out  =  w_rx_bitslip_error_out[1];
   assign rx_bs0_bitslip_error_out  =  w_rx_bitslip_error_out[0];         
   
       
   localparam [51:0] C_STROBE_EN_SET = {
   		                         6'b0,
                                         (C_RX_STROBE_EN[14] == 1'b1 )  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         5'b0, 
                                         (C_RX_STROBE_EN[12] == 1'b1 )  ? 1'b1 : 1'b0,   // 5th Nibble 
   		                         6'b0,
                                         (C_RX_STROBE_EN[10]  == 1'b1)   ? 1'b1 : 1'b0,  // 5th Nibble 
                                         5'b0, 
                                         (C_RX_STROBE_EN[8]  == 1'b1) ? 1'b1 : 1'b0,     // 4th Nibble 
   		                         6'b0,
                                         (C_RX_STROBE_EN[6]  == 1'b1) ? 1'b1 : 1'b0,     // 3rd Nibble 
                                         5'b0,
                                         (C_RX_STROBE_EN[4]  == 1'b1) ? 1'b1 : 1'b0,     // 2nd Nibble
   		                         6'b0,
                                         (C_RX_STROBE_EN[2]  == 1'b1) ? 1'b1 : 1'b0,     // 1st Nibble
                                         5'b0, 
   		                         (C_RX_STROBE_EN[0]  == 1'b1) ? 1'b1 : 1'b0      // 0th Nibble
                                       };

   localparam [51:0] C_STROBE_BS = {
   		                         5'b0,
                                         (C_RX_STROBE_EN[15] == 1'b1 )  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         (C_RX_STROBE_EN[14] == 1'b1 )  ? 1'b1 : 1'b0,   // 6th Nibble 
                                         4'b0, 
                                         (C_RX_STROBE_EN[13] == 1'b1 )  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         (C_RX_STROBE_EN[12] == 1'b1 )  ? 1'b1 : 1'b0,   // 5th Nibble 
   		                         5'b0,
                                         (C_RX_STROBE_EN[11]  == 1'b1)  ? 1'b1 : 1'b0,   // 5th Nibble 
                                         (C_RX_STROBE_EN[10]  == 1'b1)  ? 1'b1 : 1'b0,    // 5th Nibble 
                                         4'b0, 
                                         (C_RX_STROBE_EN[9]  == 1'b1) ? 1'b1 : 1'b0,     // 4th Nibble 
                                         (C_RX_STROBE_EN[8]  == 1'b1) ? 1'b1 : 1'b0,     // 4th Nibble 
   		                         5'b0,
                                         (C_RX_STROBE_EN[7]  == 1'b1) ? 1'b1 : 1'b0,     // 3rd Nibble 
                                         (C_RX_STROBE_EN[6]  == 1'b1) ? 1'b1 : 1'b0,     // 3rd Nibble 
                                         4'b0,
                                         (C_RX_STROBE_EN[5]  == 1'b1) ? 1'b1 : 1'b0,     // 2nd Nibble
                                         (C_RX_STROBE_EN[4]  == 1'b1) ? 1'b1 : 1'b0,     // 2nd Nibble
   		                         5'b0,
                                         (C_RX_STROBE_EN[3]  == 1'b1) ? 1'b1 : 1'b0,     // 1st Nibble
                                         (C_RX_STROBE_EN[2]  == 1'b1) ? 1'b1 : 1'b0,     // 1st Nibble
                                         4'b0, 
   		                         (C_RX_STROBE_EN[1]  == 1'b1) ? 1'b1 : 1'b0,     // 0th Nibble
   		                         (C_RX_STROBE_EN[0]  == 1'b1) ? 1'b1 : 1'b0      // 0th Nibble
                                       };


      localparam [51:0] C_RX_BITSLICE_INFER = 
   	                                      {   6'b0,
                                                  C_RX_BITSLICE0_EN[7],
                                                  5'b0, 
                                                  C_RX_BITSLICE0_EN[6],
   		                                  6'b0,
                                                  C_RX_BITSLICE0_EN[5],
                                                  5'b0, 
                                                  C_RX_BITSLICE0_EN[4],
   		                                  6'b0,
                                                  C_RX_BITSLICE0_EN[3],
                                                  5'b0,
                                                  C_RX_BITSLICE0_EN[2],
   		                                  6'b0,
                                                  C_RX_BITSLICE0_EN[1],
                                                  5'b0, 
                                                  C_RX_BITSLICE0_EN[0]
   	                                      };
   
   	wire [C_SERIALIZATION_FACTOR -1 :0] w_bs_q_int[51:0];

        wire [3:0] bitslip_val_4b;
        wire [3:0] inv_bitslip_val_4b;
        wire [7:0] inv_bitslip_val;

        assign bitslip_val_4b = C_BITSLIP_VAL[3:0];
        assign inv_bitslip_val_4b = ~bitslip_val_4b;
        assign inv_bitslip_val = ~C_BITSLIP_VAL;

        reg  [51:0]  sync_done_r;
        wire [51:0]  sync_done;
        wire [51:0]  w_rx_bs_rst_sync;
        reg  [51:0]  bitslip;
        reg  [3:0]   bs_cnt [51:0];
        wire [51:0]  is_N_pin;
        wire [51:0]  core_rdy_sync;

        wire         rst_to_bitslip;

        assign       rst_to_bitslip = !start_bitslip;

   generate
   genvar bs;
     for (bs = 0; bs <= 51; bs = bs + 1)
       begin : RX_BS
         assign w_rx_bs_rst[bs] =  rx_bs_rst_in[bs];
         assign w_rx_bs_rst_dly[bs] = rx_bs_rst_dly_in[bs];
         assign w_bs_q_int[bs] = ((C_SERIALIZATION_FACTOR == 8) ? w_rx_q_int[bs][7:0] : w_rx_q_int[bs][3:0]); //in[C_DataWidth-1 :0];

         if (C_RX_BS_INST[bs] == 1 || C_RX_BITSLICE_INFER[bs] == 1) begin
         RX_BITSLICE #(                             
           .DATA_TYPE((C_SERIAL_MODE == "TRUE") ? "SERIAL" : (C_STROBE_EN_SET[bs] == 1'b1) ? "DATA_AND_CLOCK" : "DATA"),
           .DATA_WIDTH(C_SERIALIZATION_FACTOR),
           .CASCADE(C_CASCADE),
           .DELAY_VALUE_EXT(C_RX_DELAY_VALUE_EXT[((bs+1)*12 -1):bs*12]),
           .DELAY_FORMAT(C_RX_DELAY_FORMAT),
           .DELAY_TYPE(C_RX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b00 ? "FIXED" : C_RX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b01 ? "VARIABLE" : "VAR_LOAD"),
           .DELAY_VALUE(C_RX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .FIFO_SYNC_MODE(C_RX_FIFO_SYNC_MODE),
           .REFCLK_FREQUENCY(C_RX_REFCLK_FREQ),
   	   .IS_CLK_EXT_INVERTED(C_RX_IS_CLK_EXT_INVERTED),           // Default value for the attribute
   	   .IS_RST_DLY_EXT_INVERTED(C_RX_IS_RST_DLY_EXT_INVERTED),   // Default value for the attribute
           .IS_CLK_INVERTED(C_RX_IS_CLK_INVERTED),                   // Default value for the attribute
   	   .IS_RST_DLY_INVERTED(C_RX_IS_RST_DLY_INVERTED),           // Default value for the attribute
   	   .IS_RST_INVERTED(C_RX_IS_RST_INVERTED),                   // Default value for the attribute
           .UPDATE_MODE("ASYNC"),
   	   .SIM_DEVICE(C_SIM_DEVICE),
           .SIM_VERSION(C_SIM_VERSION),
           .UPDATE_MODE_EXT("ASYNC")
         )
         rx_bitslice_if_bs	
         (
           .RX_BIT_CTRL_OUT(rx_bs_rx_bit_ctrl_out[bs]),
           .TX_BIT_CTRL_OUT(rx_bs_tx_bit_ctrl_out[bs]),
           .RX_BIT_CTRL_IN(rx_bs_rx_bit_ctrl_in[((bs+1)*40 -1)  : bs*40]),
           .TX_BIT_CTRL_IN(rx_bs_tx_bit_ctrl_in[((bs+1)*40 -1) : bs*40]),
           .CE_EXT(w_rx_ce_ext_in[bs]),
           .CLK_EXT(rx_bs_clk_ext_in),
           .INC_EXT(w_rx_inc_ext_in[bs]),
           .LOAD_EXT(w_rx_load_ext_in[bs]),
           .RST_DLY_EXT(rx_bs_rst_dly_ext_in[bs]),
           .CE(w_rx_ce_in[bs]),
           .CLK(rx_bs_clk_in),
           .INC(w_rx_inc_in[bs]),
           .LOAD(w_rx_load_in[bs]),
           .RST_DLY(w_rx_bs_rst_dly[bs]),
           .CNTVALUEIN(w_rx_cntvaluein[bs]),
           .CNTVALUEOUT(w_rx_cntvalueout[bs]),
           .CNTVALUEIN_EXT(w_rx_cntvaluein_ext_in[bs]),
           .CNTVALUEOUT_EXT(w_rx_cntvalueout_ext_out[bs]),
           .FIFO_EMPTY(w_rx_fifo_empty_out[bs]),
           .FIFO_WRCLK_OUT(w_rx_fifo_wrclk_out[bs]),
           .FIFO_RD_CLK(w_rx_fifo_rd_clk_in[bs]),
           .FIFO_RD_EN(w_rx_fifo_rd_en_in[bs]),
           .Q(w_rx_q_int[bs]),
           .DATAIN(w_rx_datain[bs]),
           .EN_VTC(w_rx_en_vtc_in[bs]),
           .EN_VTC_EXT(w_rx_en_vtc_ext_in[bs]),
           .RST(w_rx_bs_rst[bs])
         );
       end
   

         if (C_ENABLE_BITSLIP == 1'b1 && (C_RX_BS_INST[bs] == 1'b1)) begin 
   
         high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(100)) 
         sync_cell_start_bitslip_inst       (.src_data(start_bitslip), .dest_clk(w_rx_fifo_rd_clk_in[bs]), .dest_data(start_bitslip_sync[bs]));
   
        (* keep_hierarchy = "yes" *) 
         high_speed_selectio_wiz_v3_5_1_BitSlipInLogic_Toplevel #(
        // .C_Function     (C_BITSLIP_MODE_ACT),     // : string    := "Comp";  -- Slip, Nmbr, Comp, FstC
           .C_DataWidth    (C_SERIALIZATION_FACTOR), // : integer   := 8;       -- 8, 4
           .C_PulsedSlip   (1),                      // : integer   := 1;       -- 1 = bitslip is reduced to a clock period.
                                                     //                         -- Leave this at '1', unless you are sure that
                                                     //                         -- a bitslip given by an application is longer
                                                     //                         -- than one Clk_pin cycle.
           .C_ErrOut       (1),                      // : integer   := 1;       -- 1 = ErrOut pin available.
           .C_BITSLIP_MODE (C_BITSLIP_MODE),
           .C_InputReg     (0)                       // : integer   := 0        -- 0, No, 1 = Yes
         )
         bitslip_inst_bs
        (
           .DataIn_pin     (w_bs_q_int[bs]),            // in [C_DataWidth-1 :0];	
           .Bitslip_pin    (bitslip[bs]),               //: in ;
           .SlipVal_pin    (C_BITSLIP_VAL_ACT),         //: in [2 :0];
           .CompVal_pin    (C_BITSLIP_COMP_VAL_ACT),    //: in [C_DataWidth-1 :0];
           .Ena_pin        (1'b1),                      //: in ;
           .Rst_pin        (rst_to_bitslip),      //: in ;
           .Clk_pin        (w_rx_fifo_rd_clk_in[bs]),   //: in ;
           .DataOut_pin    (w_rx_q[bs]),                //: out [C_DataWidth-1 :0];
           .ErrOut_pin     (w_rx_bitslip_error_out[bs]) //: out 
       );

   assign is_N_pin[bs] = (C_DIFF_EN[bs] == 1'b1 && ((bs == 1) || (bs == 3 )|| (bs == 5) || (bs == 7) || (bs == 9) || (bs == 11)|| (bs == 14) || (bs == 16)|| (bs == 18)|| 
                         (bs == 20) || (bs == 22)|| (bs == 24 )|| (bs == 27)||(bs == 29)||(bs == 31)||(bs == 33)||(bs == 35) ||(bs == 37)||(bs == 40) || (bs == 42) ||(bs == 44)||(bs ==  46)||(bs == 48)||(bs == 50)) ) ? 1'b1 : 1'b0;

    high_speed_selectio_wiz_v3_5_1_sync_cell #(.C_SYNC_STAGE(2), .C_DW(1), .pTCQ(100)) 
    sync_cell_core_rdy_fifo_rd_inst       (.src_data(core_rdy[bs]), .dest_clk(w_rx_fifo_rd_clk_in[bs]), .dest_data(core_rdy_sync[bs]));

   assign sync_done[bs] =  start_bitslip && (( (!is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_rx_q[bs] == C_BITSLIP_VAL )  || 
                             ( is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_rx_q[bs] == inv_bitslip_val) || 
                             (!is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_rx_q[bs] == bitslip_val_4b ) ||
                             ( is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_rx_q[bs] == inv_bitslip_val_4b )) ||
                             ( (!is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_bs_q_int[bs] == C_BITSLIP_VAL )  || 
                             ( is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_bs_q_int[bs] == inv_bitslip_val) || 
                             (!is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_bs_q_int[bs] == bitslip_val_4b ) ||
                             ( is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_bs_q_int[bs] == inv_bitslip_val_4b )))
 ? 1'b1 : sync_done_r[bs];
   
   always @ ( posedge rst_to_bitslip or posedge  w_rx_fifo_rd_clk_in[bs])
   begin
      if ( rst_to_bitslip )
      begin
         bs_cnt[bs]        <= 4'h0;
         bitslip[bs]       <= 1'b0;
         sync_done_r[bs]   <= 1'b0; 
      end
      else
      begin
         if (core_rdy_sync[bs] )
         begin
            if ( sync_done[bs]  == 1'b0 )
                bs_cnt[bs] <= bs_cnt[bs] + 1'b1;

            if ( (!C_STROBE_BS[bs] && !is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_rx_q[bs] != C_BITSLIP_VAL   &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0) || 
                 (!C_STROBE_BS[bs] &&  is_N_pin[bs] && C_SERIALIZATION_FACTOR == 8 && w_rx_q[bs] != inv_bitslip_val &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0) || 
                 (!C_STROBE_BS[bs] && !is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_rx_q[bs] != bitslip_val_4b  &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0) ||
                 (!C_STROBE_BS[bs] &&  is_N_pin[bs] && C_SERIALIZATION_FACTOR == 4 && w_rx_q[bs] != inv_bitslip_val_4b  &&  sync_done[bs] == 1'b0 && bs_cnt[bs] == 4'h0)
               )
                   bitslip[bs] <= 1'b1;
            else   bitslip[bs] <= 1'b0;

                   sync_done_r[bs] <= sync_done[bs];
        end
      end
   end

       end //if enable bitslip
       end // block: RX_BS
      endgenerate


   wire [51:0] w_sync_done;

   generate
   genvar bs1;
     for (bs1 = 0; bs1 <= 51; bs1 = bs1 + 1)
     begin: RX_INT_BITSLIP_GEN 
   
        assign w_sync_done[bs1] =  (C_ENABLE_BITSLIP == 1'b1 && (C_RX_BS_INST[bs1] == 1'b1) && !C_STROBE_BS[bs1]) ? sync_done_r[bs1] : 1'b1;
     end
   endgenerate
    
   assign rx_bitslip_sync_done = &w_sync_done;

    endmodule 


   // (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
   // 
   // This file contains confidential and proprietary information
   // of Xilinx, Inc. and is protected under U.S. and
   // international copyright and other intellectual property
   // laws.
   // 
   // DISCLAIMER
   // This disclaimer is not a license and does not grant any
   // rights to the materials distributed herewith. Except as
   // otherwise provided in a valid license issued to you by
   // Xilinx, and to the maximum extent permitted by applicable
   // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
   // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
   // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
   // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
   // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
   // (2) Xilinx shall not be liable (whether in contract or tort,
   // including negligence, or under any other theory of
   // liability) for any loss or damage of any kind or nature
   // related to, arising under or in connection with these
   // materials, including for any direct, or any indirect,
   // special, incidental, or consequential loss or damage
   // (including loss of data, profits, goodwill, or any type of
   // loss or damage suffered as a result of any action brought
   // by a third party) even if such damage or loss was
   // reasonably foreseeable or Xilinx had been advised of the
   // possibility of the same.
   // 
   // CRITICAL APPLICATIONS
   // Xilinx products are not designed or intended to be fail-
   // safe, or for use in any application requiring fail-safe
   // performance, such as life-support or safety devices or
   // systems, Class III medical devices, nuclear facilities,
   // applications related to the deployment of airbags, or any
   // other applications that could lead to death, personal
   // injury, or severe property or environmental damage
   // (individually and collectively, "Critical
   // Applications"). Customer assumes the sole risk and
   // liability of any use of Xilinx products in Critical
   // Applications, subject only to applicable laws and
   // regulations governing limitations on product liability.
   // 
   // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
   // PART OF THIS FILE AT ALL TIMES.

   `timescale 1ps/1ps

   module high_speed_selectio_wiz_v3_5_1_tx_bs  #(

   parameter            C_SERIALIZATION_FACTOR  =  4,
   parameter  [51:0]    C_DIFF_EN               =  52'd0,  // Indicates whether the pin is differential or single ended
   parameter            C_SIM_DEVICE            =  "ULTRASCALE", 
   parameter            C_SIM_VERSION           =  1.0,
   parameter            C_TEMPLATE              =  0,
   parameter            C_TX_DELAY_FORMAT       = "TIME",
   parameter            C_TX_IS_CLK_INVERTED    =  1'b0,
   parameter            C_TX_IS_RST_DLY_INVERTED    =  1'b0,
   parameter            C_TX_IS_RST_INVERTED    =  1'b0,
   parameter            C_TX_NATIVE_ODELAY_BYPASS = "FALSE",
   //parameter            C_TX_UPDATE_MODE        =  "ASYNC",
   parameter            C_EN_TX_TRI             =   0,    // Enable Tristate for Tx Pins
   parameter            C_DATA_TRI              =   0,    // Data   Tristate
   parameter   [1:0]    C_TX_DELAY_TYPE0        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE1        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE2        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE3        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE4        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE5        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE6        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE7        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE8        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE9        =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE10       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE11       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE12       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE13       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE14       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE15       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE16       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE17       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE18       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE19       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE20       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE21       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE22       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE23       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE24       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE25       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE26       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE27       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE28       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE29       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE30       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE31       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE32       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE33       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE34       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE35       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE36       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE37       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE38       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE39       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE40       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE41       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE42       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE43       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE44       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE45       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE46       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE47       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE48       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE49       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE50       =  2'b00, // TX delay type
   parameter   [1:0]    C_TX_DELAY_TYPE51       =  2'b00, // TX delay type
   parameter   [11:0]   C_TX_DELAY_VALUE0       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE1       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE2       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE3       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE4       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE5       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE6       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE7       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE8       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE9       =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE10      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE11      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE12      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE13      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE14      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE15      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE16      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE17      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE18      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE19      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE20      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE21      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE22      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE23      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE24      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE25      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE26      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE27      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE28      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE29      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE30      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE31      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE32      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE33      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE34      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE35      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE36      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE37      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE38      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE39      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE40      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE41      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE42      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE43      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE44      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE45      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE46      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE47      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE48      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE49      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE50      =    'd0,  // TX delay value
   parameter   [11:0]   C_TX_DELAY_VALUE51      =    'd0,  // TX delay value
   parameter            C_TX_PREEMPHASIS_S      =   "NONE",  // Pre emphasis enablement
   parameter            C_TX_PREEMPHASIS_D      =   "NONE",  // Pre emphasis enablement
   parameter            C_CLK_FWD_BITSLICE_NO   =      0,  // Clock Forward bitslice #
   parameter            C_CLK_FWD_PHASE         =      0,  // Clock forward phase  
   parameter            C_TX_DATA_PHASE         =      0,  // TX Data phase  
   parameter [51:0]     C_CLK_FWD_ENABLE        =   52'd0,  // Clock forward phase
   parameter [7:0]      C_TX_BITSLICE_TRI_EN    =      0,  // TX Bitslice tri instance enablement       
   parameter [51:0]     C_TX_BITSLICE_EN        =   52'b0, // TX Bitslice tri instance enablement       
   parameter [51:0]     C_BS_INIT_VAL           =   52'b0,
   parameter            C_TX_REFCLK_FREQ        =   200    // TX clock frequency
   
   )
   
   (
   // Common signals
   input                                  rst_seq_done,
   input                                  tx_bs_clk_in,
   input     [51:0]                       tx_bs_rst_dly_in,
   input     [51:0]                       tx_bs_rst_in,
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs0_ce_in,
   input  [8:0]                           tx_bs0_cntvaluein,
   output [8:0]                           tx_bs0_cntvalueout,
   input                                  tx_bs0_en_vtc_in,
   input                                  tx_bs0_inc_in,
   input                                  tx_bs0_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs0_D_data_from_fabric_in,
   output                                 tx_bs0_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs0_t_in,
   output                                 tx_bs0_t_out,
   input                                  tx_bs0_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs0_rx_bit_ctrl_in,
   output [39:0]                          tx_bs0_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs0_tx_bit_ctrl_in,
   output [39:0]                          tx_bs0_tx_bit_ctrl_out,
   
   
   // --------------------------------------------------------
   // Bitslice1 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs1_ce_in,
   input   [8:0]                          tx_bs1_cntvaluein,
   output  [8:0]                          tx_bs1_cntvalueout,
   input                                  tx_bs1_en_vtc_in,
   input                                  tx_bs1_inc_in,
   input                                  tx_bs1_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs1_D_data_from_fabric_in,
   output                                 tx_bs1_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs1_t_in,
   output                                 tx_bs1_t_out,
   input                                  tx_bs1_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs1_rx_bit_ctrl_in,
   output [39:0]                          tx_bs1_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs1_tx_bit_ctrl_in,
   output [39:0]                          tx_bs1_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice2 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs2_ce_in,
   input  [8:0]                           tx_bs2_cntvaluein,
   output [8:0]                           tx_bs2_cntvalueout,
   input                                  tx_bs2_en_vtc_in,
   input                                  tx_bs2_inc_in,
   input                                  tx_bs2_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs2_D_data_from_fabric_in,
   output                                 tx_bs2_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs2_t_in,
   output                                 tx_bs2_t_out,
   input                                  tx_bs2_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs2_rx_bit_ctrl_in,
   output [39:0]                          tx_bs2_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs2_tx_bit_ctrl_in,
   output [39:0]                          tx_bs2_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice3 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs3_ce_in,
   input   [8:0]                          tx_bs3_cntvaluein,
   output  [8:0]                          tx_bs3_cntvalueout,
   input                                  tx_bs3_en_vtc_in,
   input                                  tx_bs3_inc_in,
   input                                  tx_bs3_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs3_D_data_from_fabric_in,
   output                                 tx_bs3_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs3_t_in,
   output                                 tx_bs3_t_out,
   input                                  tx_bs3_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs3_rx_bit_ctrl_in,
   output [39:0]                          tx_bs3_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs3_tx_bit_ctrl_in,
   output [39:0]                          tx_bs3_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice4 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs4_ce_in,
   input   [8:0]                          tx_bs4_cntvaluein,
   output  [8:0]                          tx_bs4_cntvalueout,
   input                                  tx_bs4_en_vtc_in,
   input                                  tx_bs4_inc_in,
   input                                  tx_bs4_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs4_D_data_from_fabric_in,
   output                                 tx_bs4_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs4_t_in,
   output                                 tx_bs4_t_out,
   input                                  tx_bs4_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs4_rx_bit_ctrl_in,
   output [39:0]                          tx_bs4_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs4_tx_bit_ctrl_in,
   output [39:0]                          tx_bs4_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice5 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs5_ce_in,
   input  [8:0]                           tx_bs5_cntvaluein,
   output [8:0]                           tx_bs5_cntvalueout,
   input                                  tx_bs5_en_vtc_in,
   input                                  tx_bs5_inc_in,
   input                                  tx_bs5_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs5_D_data_from_fabric_in,
   output                                 tx_bs5_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs5_t_in,
   output                                 tx_bs5_t_out,
   input                                  tx_bs5_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs5_rx_bit_ctrl_in,
   output [39:0]                          tx_bs5_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs5_tx_bit_ctrl_in,
   output [39:0]                          tx_bs5_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice6 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs6_ce_in,
   input  [8:0]                           tx_bs6_cntvaluein,
   output [8:0]                           tx_bs6_cntvalueout,
   input                                  tx_bs6_en_vtc_in,
   input                                  tx_bs6_inc_in,
   input                                  tx_bs6_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs6_D_data_from_fabric_in,
   output                                 tx_bs6_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs6_t_in,
   output                                 tx_bs6_t_out,
   input                                  tx_bs6_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs6_rx_bit_ctrl_in,
   output [39:0]                          tx_bs6_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs6_tx_bit_ctrl_in,
   output [39:0]                          tx_bs6_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice7 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs7_ce_in,
   input   [8:0]                          tx_bs7_cntvaluein,
   output  [8:0]                          tx_bs7_cntvalueout,
   input                                  tx_bs7_en_vtc_in,
   input                                  tx_bs7_inc_in,
   input                                  tx_bs7_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs7_D_data_from_fabric_in,
   output                                 tx_bs7_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs7_t_in,
   output                                 tx_bs7_t_out,
   input                                  tx_bs7_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs7_rx_bit_ctrl_in,
   output [39:0]                          tx_bs7_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs7_tx_bit_ctrl_in,
   output [39:0]                          tx_bs7_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice8 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs8_ce_in,
   input  [8:0]                           tx_bs8_cntvaluein,
   output [8:0]                           tx_bs8_cntvalueout,
   input                                  tx_bs8_en_vtc_in,
   input                                  tx_bs8_inc_in,
   input                                  tx_bs8_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs8_D_data_from_fabric_in,
   output                                 tx_bs8_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs8_t_in,
   output                                 tx_bs8_t_out,
   input                                  tx_bs8_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs8_rx_bit_ctrl_in,
   output [39:0]                          tx_bs8_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs8_tx_bit_ctrl_in,
   output [39:0]                          tx_bs8_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice09signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs9_ce_in,
   input   [8:0]                          tx_bs9_cntvaluein,
   output  [8:0]                          tx_bs9_cntvalueout,
   input                                  tx_bs9_en_vtc_in,
   input                                  tx_bs9_inc_in,
   input                                  tx_bs9_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs9_D_data_from_fabric_in,
   output                                 tx_bs9_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs9_t_in,
   output                                 tx_bs9_t_out,
   input                                  tx_bs9_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs9_rx_bit_ctrl_in,
   output [39:0]                          tx_bs9_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs9_tx_bit_ctrl_in,
   output [39:0]                          tx_bs9_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs10_ce_in,
   input   [8:0]                          tx_bs10_cntvaluein,
   output  [8:0]                          tx_bs10_cntvalueout,
   input                                  tx_bs10_en_vtc_in,
   input                                  tx_bs10_inc_in,
   input                                  tx_bs10_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs10_D_data_from_fabric_in,
   output                                 tx_bs10_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs10_t_in,
   output                                 tx_bs10_t_out,
   input                                  tx_bs10_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs10_rx_bit_ctrl_in,
   output [39:0]                          tx_bs10_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs10_tx_bit_ctrl_in,
   output [39:0]                          tx_bs10_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice11 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs11_ce_in,
   input   [8:0]                          tx_bs11_cntvaluein,
   output  [8:0]                          tx_bs11_cntvalueout,
   input                                  tx_bs11_en_vtc_in,
   input                                  tx_bs11_inc_in,
   input                                  tx_bs11_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs11_D_data_from_fabric_in,
   output                                 tx_bs11_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs11_t_in,
   output                                 tx_bs11_t_out,
   input                                  tx_bs11_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs11_rx_bit_ctrl_in,
   output [39:0]                          tx_bs11_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs11_tx_bit_ctrl_in,
   output [39:0]                          tx_bs11_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice12 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs12_ce_in,
   input   [8:0]                          tx_bs12_cntvaluein,
   output  [8:0]                          tx_bs12_cntvalueout,
   input                                  tx_bs12_en_vtc_in,
   input                                  tx_bs12_inc_in,
   input                                  tx_bs12_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs12_D_data_from_fabric_in,
   output                                 tx_bs12_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs12_t_in,
   output                                 tx_bs12_t_out,
   input                                  tx_bs12_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs12_rx_bit_ctrl_in,
   output [39:0]                          tx_bs12_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs12_tx_bit_ctrl_in,
   output [39:0]                          tx_bs12_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice13 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs13_ce_in,
   input   [8:0]                          tx_bs13_cntvaluein,
   output  [8:0]                          tx_bs13_cntvalueout,
   input                                  tx_bs13_en_vtc_in,
   input                                  tx_bs13_inc_in,
   input                                  tx_bs13_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs13_D_data_from_fabric_in,
   output                                 tx_bs13_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs13_t_in,
   output                                 tx_bs13_t_out,
   input                                  tx_bs13_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs13_rx_bit_ctrl_in,
   output [39:0]                          tx_bs13_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs13_tx_bit_ctrl_in,
   output [39:0]                          tx_bs13_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice14 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs14_ce_in,
   input   [8:0]                          tx_bs14_cntvaluein,
   output  [8:0]                          tx_bs14_cntvalueout,
   input                                  tx_bs14_en_vtc_in,
   input                                  tx_bs14_inc_in,
   input                                  tx_bs14_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs14_D_data_from_fabric_in,
   output                                 tx_bs14_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs14_t_in,
   output                                 tx_bs14_t_out,
   input                                  tx_bs14_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs14_rx_bit_ctrl_in,
   output [39:0]                          tx_bs14_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs14_tx_bit_ctrl_in,
   output [39:0]                          tx_bs14_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice15 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs15_ce_in,
   input   [8:0]                          tx_bs15_cntvaluein,
   output  [8:0]                          tx_bs15_cntvalueout,
   input                                  tx_bs15_en_vtc_in,
   input                                  tx_bs15_inc_in,
   input                                  tx_bs15_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs15_D_data_from_fabric_in,
   output                                 tx_bs15_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs15_t_in,
   output                                 tx_bs15_t_out,
   input                                  tx_bs15_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs15_rx_bit_ctrl_in,
   output [39:0]                          tx_bs15_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs15_tx_bit_ctrl_in,
   output [39:0]                          tx_bs15_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs16_ce_in,
   input   [8:0]                          tx_bs16_cntvaluein,
   output  [8:0]                          tx_bs16_cntvalueout,
   input                                  tx_bs16_en_vtc_in,
   input                                  tx_bs16_inc_in,
   input                                  tx_bs16_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs16_D_data_from_fabric_in,
   output                                 tx_bs16_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs16_t_in,
   output                                 tx_bs16_t_out,
   input                                  tx_bs16_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs16_rx_bit_ctrl_in,
   output [39:0]                          tx_bs16_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs16_tx_bit_ctrl_in,
   output [39:0]                          tx_bs16_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice17 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs17_ce_in,
   input   [8:0]                          tx_bs17_cntvaluein,
   output  [8:0]                          tx_bs17_cntvalueout,
   input                                  tx_bs17_en_vtc_in,
   input                                  tx_bs17_inc_in,
   input                                  tx_bs17_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs17_D_data_from_fabric_in,
   output                                 tx_bs17_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs17_t_in,
   output                                 tx_bs17_t_out,
   input                                  tx_bs17_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs17_rx_bit_ctrl_in,
   output [39:0]                          tx_bs17_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs17_tx_bit_ctrl_in,
   output [39:0]                          tx_bs17_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs18_ce_in,
   input   [8:0]                          tx_bs18_cntvaluein,
   output  [8:0]                          tx_bs18_cntvalueout,
   input                                  tx_bs18_en_vtc_in,
   input                                  tx_bs18_inc_in,
   input                                  tx_bs18_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs18_D_data_from_fabric_in,
   output                                 tx_bs18_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs18_t_in,
   output                                 tx_bs18_t_out,
   input                                  tx_bs18_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs18_rx_bit_ctrl_in,
   output [39:0]                          tx_bs18_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs18_tx_bit_ctrl_in,
   output [39:0]                          tx_bs18_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice19 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs19_ce_in,
   input   [8:0]                          tx_bs19_cntvaluein,
   output  [8:0]                          tx_bs19_cntvalueout,
   input                                  tx_bs19_en_vtc_in,
   input                                  tx_bs19_inc_in,
   input                                  tx_bs19_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs19_D_data_from_fabric_in,
   output                                 tx_bs19_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs19_t_in,
   output                                 tx_bs19_t_out,
   input                                  tx_bs19_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs19_rx_bit_ctrl_in,
   output [39:0]                          tx_bs19_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs19_tx_bit_ctrl_in,
   output [39:0]                          tx_bs19_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice20 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs20_ce_in,
   input   [8:0]                          tx_bs20_cntvaluein,
   output  [8:0]                          tx_bs20_cntvalueout,
   input                                  tx_bs20_en_vtc_in,
   input                                  tx_bs20_inc_in,
   input                                  tx_bs20_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs20_D_data_from_fabric_in,
   output                                 tx_bs20_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs20_t_in,
   output                                 tx_bs20_t_out,
   input                                  tx_bs20_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs20_rx_bit_ctrl_in,
   output [39:0]                          tx_bs20_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs20_tx_bit_ctrl_in,
   output [39:0]                          tx_bs20_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice21 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs21_ce_in,
   input   [8:0]                          tx_bs21_cntvaluein,
   output  [8:0]                          tx_bs21_cntvalueout,
   input                                  tx_bs21_en_vtc_in,
   input                                  tx_bs21_inc_in,
   input                                  tx_bs21_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs21_D_data_from_fabric_in,
   output                                 tx_bs21_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs21_t_in,
   output                                 tx_bs21_t_out,
   input                                  tx_bs21_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs21_rx_bit_ctrl_in,
   output [39:0]                          tx_bs21_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs21_tx_bit_ctrl_in,
   output [39:0]                          tx_bs21_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice22 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs22_ce_in,
   input   [8:0]                          tx_bs22_cntvaluein,
   output  [8:0]                          tx_bs22_cntvalueout,
   input                                  tx_bs22_en_vtc_in,
   input                                  tx_bs22_inc_in,
   input                                  tx_bs22_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs22_D_data_from_fabric_in,
   output                                 tx_bs22_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs22_t_in,
   output                                 tx_bs22_t_out,
   input                                  tx_bs22_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs22_rx_bit_ctrl_in,
   output [39:0]                          tx_bs22_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs22_tx_bit_ctrl_in,
   output [39:0]                          tx_bs22_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice23 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs23_ce_in,
   input   [8:0]                          tx_bs23_cntvaluein,
   output  [8:0]                          tx_bs23_cntvalueout,
   input                                  tx_bs23_en_vtc_in,
   input                                  tx_bs23_inc_in,
   input                                  tx_bs23_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs23_D_data_from_fabric_in,
   output                                 tx_bs23_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs23_t_in,
   output                                 tx_bs23_t_out,
   input                                  tx_bs23_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs23_rx_bit_ctrl_in,
   output [39:0]                          tx_bs23_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs23_tx_bit_ctrl_in,
   output [39:0]                          tx_bs23_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice24 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs24_ce_in,
   input   [8:0]                          tx_bs24_cntvaluein,
   output  [8:0]                          tx_bs24_cntvalueout,
   input                                  tx_bs24_en_vtc_in,
   input                                  tx_bs24_inc_in,
   input                                  tx_bs24_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs24_D_data_from_fabric_in,
   output                                 tx_bs24_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs24_t_in,
   output                                 tx_bs24_t_out,
   input                                  tx_bs24_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs24_rx_bit_ctrl_in,
   output [39:0]                          tx_bs24_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs24_tx_bit_ctrl_in,
   output [39:0]                          tx_bs24_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice25 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs25_ce_in,
   input   [8:0]                          tx_bs25_cntvaluein,
   output  [8:0]                          tx_bs25_cntvalueout,
   input                                  tx_bs25_en_vtc_in,
   input                                  tx_bs25_inc_in,
   input                                  tx_bs25_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs25_D_data_from_fabric_in,
   output                                 tx_bs25_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs25_t_in,
   output                                 tx_bs25_t_out,
   input                                  tx_bs25_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs25_rx_bit_ctrl_in,
   output [39:0]                          tx_bs25_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs25_tx_bit_ctrl_in,
   output [39:0]                          tx_bs25_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice26 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs26_ce_in,
   input   [8:0]                          tx_bs26_cntvaluein,
   output  [8:0]                          tx_bs26_cntvalueout,
   input                                  tx_bs26_en_vtc_in,
   input                                  tx_bs26_inc_in,
   input                                  tx_bs26_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs26_D_data_from_fabric_in,
   output                                 tx_bs26_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs26_t_in,
   output                                 tx_bs26_t_out,
   input                                  tx_bs26_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs26_rx_bit_ctrl_in,
   output [39:0]                          tx_bs26_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs26_tx_bit_ctrl_in,
   output [39:0]                          tx_bs26_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice27 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs27_ce_in,
   input   [8:0]                          tx_bs27_cntvaluein,
   output  [8:0]                          tx_bs27_cntvalueout,
   input                                  tx_bs27_en_vtc_in,
   input                                  tx_bs27_inc_in,
   input                                  tx_bs27_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs27_D_data_from_fabric_in,
   output                                 tx_bs27_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs27_t_in,
   output                                 tx_bs27_t_out,
   input                                  tx_bs27_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs27_rx_bit_ctrl_in,
   output [39:0]                          tx_bs27_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs27_tx_bit_ctrl_in,
   output [39:0]                          tx_bs27_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice28 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs28_ce_in,
   input   [8:0]                          tx_bs28_cntvaluein,
   output  [8:0]                          tx_bs28_cntvalueout,
   input                                  tx_bs28_en_vtc_in,
   input                                  tx_bs28_inc_in,
   input                                  tx_bs28_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs28_D_data_from_fabric_in,
   output                                 tx_bs28_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs28_t_in,
   output                                 tx_bs28_t_out,
   input                                  tx_bs28_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs28_rx_bit_ctrl_in,
   output [39:0]                          tx_bs28_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs28_tx_bit_ctrl_in,
   output [39:0]                          tx_bs28_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice29 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs29_ce_in,
   input   [8:0]                          tx_bs29_cntvaluein,
   output  [8:0]                          tx_bs29_cntvalueout,
   input                                  tx_bs29_en_vtc_in,
   input                                  tx_bs29_inc_in,
   input                                  tx_bs29_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs29_D_data_from_fabric_in,
   output                                 tx_bs29_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs29_t_in,
   output                                 tx_bs29_t_out,
   input                                  tx_bs29_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs29_rx_bit_ctrl_in,
   output [39:0]                          tx_bs29_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs29_tx_bit_ctrl_in,
   output [39:0]                          tx_bs29_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice30 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs30_ce_in,
   input   [8:0]                          tx_bs30_cntvaluein,
   output  [8:0]                          tx_bs30_cntvalueout,
   input                                  tx_bs30_en_vtc_in,
   input                                  tx_bs30_inc_in,
   input                                  tx_bs30_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs30_D_data_from_fabric_in,
   output                                 tx_bs30_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs30_t_in,
   output                                 tx_bs30_t_out,
   input                                  tx_bs30_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs30_rx_bit_ctrl_in,
   output [39:0]                          tx_bs30_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs30_tx_bit_ctrl_in,
   output [39:0]                          tx_bs30_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs31_ce_in,
   input   [8:0]                          tx_bs31_cntvaluein,
   output  [8:0]                          tx_bs31_cntvalueout,
   input                                  tx_bs31_en_vtc_in,
   input                                  tx_bs31_inc_in,
   input                                  tx_bs31_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs31_D_data_from_fabric_in,
   output                                 tx_bs31_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs31_t_in,
   output                                 tx_bs31_t_out,
   input                                  tx_bs31_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs31_rx_bit_ctrl_in,
   output [39:0]                          tx_bs31_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs31_tx_bit_ctrl_in,
   output [39:0]                          tx_bs31_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs32_ce_in,
   input   [8:0]                          tx_bs32_cntvaluein,
   output  [8:0]                          tx_bs32_cntvalueout,
   input                                  tx_bs32_en_vtc_in,
   input                                  tx_bs32_inc_in,
   input                                  tx_bs32_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs32_D_data_from_fabric_in,
   output                                 tx_bs32_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs32_t_in,
   output                                 tx_bs32_t_out,
   input                                  tx_bs32_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs32_rx_bit_ctrl_in,
   output [39:0]                          tx_bs32_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs32_tx_bit_ctrl_in,
   output [39:0]                          tx_bs32_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice33 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs33_ce_in,
   input   [8:0]                          tx_bs33_cntvaluein,
   output  [8:0]                          tx_bs33_cntvalueout,
   input                                  tx_bs33_en_vtc_in,
   input                                  tx_bs33_inc_in,
   input                                  tx_bs33_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs33_D_data_from_fabric_in,
   output                                 tx_bs33_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs33_t_in,
   output                                 tx_bs33_t_out,
   input                                  tx_bs33_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs33_rx_bit_ctrl_in,
   output [39:0]                          tx_bs33_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs33_tx_bit_ctrl_in,
   output [39:0]                          tx_bs33_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice34 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs34_ce_in,
   input   [8:0]                          tx_bs34_cntvaluein,
   output  [8:0]                          tx_bs34_cntvalueout,
   input                                  tx_bs34_en_vtc_in,
   input                                  tx_bs34_inc_in,
   input                                  tx_bs34_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs34_D_data_from_fabric_in,
   output                                 tx_bs34_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs34_t_in,
   output                                 tx_bs34_t_out,
   input                                  tx_bs34_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs34_rx_bit_ctrl_in,
   output [39:0]                          tx_bs34_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs34_tx_bit_ctrl_in,
   output [39:0]                          tx_bs34_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice35 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs35_ce_in,
   input   [8:0]                          tx_bs35_cntvaluein,
   output  [8:0]                          tx_bs35_cntvalueout,
   input                                  tx_bs35_en_vtc_in,
   input                                  tx_bs35_inc_in,
   input                                  tx_bs35_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs35_D_data_from_fabric_in,
   output                                 tx_bs35_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs35_t_in,
   output                                 tx_bs35_t_out,
   input                                  tx_bs35_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs35_rx_bit_ctrl_in,
   output [39:0]                          tx_bs35_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs35_tx_bit_ctrl_in,
   output [39:0]                          tx_bs35_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice36 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs36_ce_in,
   input   [8:0]                          tx_bs36_cntvaluein,
   output  [8:0]                          tx_bs36_cntvalueout,
   input                                  tx_bs36_en_vtc_in,
   input                                  tx_bs36_inc_in,
   input                                  tx_bs36_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs36_D_data_from_fabric_in,
   output                                 tx_bs36_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs36_t_in,
   output                                 tx_bs36_t_out,
   input                                  tx_bs36_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs36_rx_bit_ctrl_in,
   output [39:0]                          tx_bs36_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs36_tx_bit_ctrl_in,
   output [39:0]                          tx_bs36_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice37 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs37_ce_in,
   input   [8:0]                          tx_bs37_cntvaluein,
   output  [8:0]                          tx_bs37_cntvalueout,
   input                                  tx_bs37_en_vtc_in,
   input                                  tx_bs37_inc_in,
   input                                  tx_bs37_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs37_D_data_from_fabric_in,
   output                                 tx_bs37_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs37_t_in,
   output                                 tx_bs37_t_out,
   input                                  tx_bs37_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs37_rx_bit_ctrl_in,
   output [39:0]                          tx_bs37_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs37_tx_bit_ctrl_in,
   output [39:0]                          tx_bs37_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice38 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs38_ce_in,
   input   [8:0]                          tx_bs38_cntvaluein,
   output  [8:0]                          tx_bs38_cntvalueout,
   input                                  tx_bs38_en_vtc_in,
   input                                  tx_bs38_inc_in,
   input                                  tx_bs38_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs38_D_data_from_fabric_in,
   output                                 tx_bs38_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs38_t_in,
   output                                 tx_bs38_t_out,
   input                                  tx_bs38_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs38_rx_bit_ctrl_in,
   output [39:0]                          tx_bs38_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs38_tx_bit_ctrl_in,
   output [39:0]                          tx_bs38_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice39 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs39_ce_in,
   input   [8:0]                          tx_bs39_cntvaluein,
   output  [8:0]                          tx_bs39_cntvalueout,
   input                                  tx_bs39_en_vtc_in,
   input                                  tx_bs39_inc_in,
   input                                  tx_bs39_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs39_D_data_from_fabric_in,
   output                                 tx_bs39_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs39_t_in,
   output                                 tx_bs39_t_out,
   input                                  tx_bs39_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs39_rx_bit_ctrl_in,
   output [39:0]                          tx_bs39_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs39_tx_bit_ctrl_in,
   output [39:0]                          tx_bs39_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice40 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs40_ce_in,
   input   [8:0]                          tx_bs40_cntvaluein,
   output  [8:0]                          tx_bs40_cntvalueout,
   input                                  tx_bs40_en_vtc_in,
   input                                  tx_bs40_inc_in,
   input                                  tx_bs40_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs40_D_data_from_fabric_in,
   output                                 tx_bs40_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs40_t_in,
   output                                 tx_bs40_t_out,
   input                                  tx_bs40_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs40_rx_bit_ctrl_in,
   output [39:0]                          tx_bs40_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs40_tx_bit_ctrl_in,
   output [39:0]                          tx_bs40_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice41 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs41_ce_in,
   input   [8:0]                          tx_bs41_cntvaluein,
   output  [8:0]                          tx_bs41_cntvalueout,
   input                                  tx_bs41_en_vtc_in,
   input                                  tx_bs41_inc_in,
   input                                  tx_bs41_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs41_D_data_from_fabric_in,
   output                                 tx_bs41_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs41_t_in,
   output                                 tx_bs41_t_out,
   input                                  tx_bs41_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs41_rx_bit_ctrl_in,
   output [39:0]                          tx_bs41_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs41_tx_bit_ctrl_in,
   output [39:0]                          tx_bs41_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice42 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs42_ce_in,
   input   [8:0]                          tx_bs42_cntvaluein,
   output  [8:0]                          tx_bs42_cntvalueout,
   input                                  tx_bs42_en_vtc_in,
   input                                  tx_bs42_inc_in,
   input                                  tx_bs42_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs42_D_data_from_fabric_in,
   output                                 tx_bs42_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs42_t_in,
   output                                 tx_bs42_t_out,
   input                                  tx_bs42_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs42_rx_bit_ctrl_in,
   output [39:0]                          tx_bs42_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs42_tx_bit_ctrl_in,
   output [39:0]                          tx_bs42_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice43 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs43_ce_in,
   input   [8:0]                          tx_bs43_cntvaluein,
   output  [8:0]                          tx_bs43_cntvalueout,
   input                                  tx_bs43_en_vtc_in,
   input                                  tx_bs43_inc_in,
   input                                  tx_bs43_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs43_D_data_from_fabric_in,
   output                                 tx_bs43_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs43_t_in,
   output                                 tx_bs43_t_out,
   input                                  tx_bs43_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs43_rx_bit_ctrl_in,
   output [39:0]                          tx_bs43_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs43_tx_bit_ctrl_in,
   output [39:0]                          tx_bs43_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice44 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs44_ce_in,
   input   [8:0]                          tx_bs44_cntvaluein,
   output  [8:0]                          tx_bs44_cntvalueout,
   input                                  tx_bs44_en_vtc_in,
   input                                  tx_bs44_inc_in,
   input                                  tx_bs44_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs44_D_data_from_fabric_in,
   output                                 tx_bs44_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs44_t_in,
   output                                 tx_bs44_t_out,
   input                                  tx_bs44_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs44_rx_bit_ctrl_in,
   output [39:0]                          tx_bs44_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs44_tx_bit_ctrl_in,
   output [39:0]                          tx_bs44_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice45 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs45_ce_in,
   input   [8:0]                          tx_bs45_cntvaluein,
   output  [8:0]                          tx_bs45_cntvalueout,
   input                                  tx_bs45_en_vtc_in,
   input                                  tx_bs45_inc_in,
   input                                  tx_bs45_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs45_D_data_from_fabric_in,
   output                                 tx_bs45_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs45_t_in,
   output                                 tx_bs45_t_out,
   input                                  tx_bs45_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs45_rx_bit_ctrl_in,
   output [39:0]                          tx_bs45_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs45_tx_bit_ctrl_in,
   output [39:0]                          tx_bs45_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice46 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs46_ce_in,
   input   [8:0]                          tx_bs46_cntvaluein,
   output  [8:0]                          tx_bs46_cntvalueout,
   input                                  tx_bs46_en_vtc_in,
   input                                  tx_bs46_inc_in,
   input                                  tx_bs46_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs46_D_data_from_fabric_in,
   output                                 tx_bs46_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs46_t_in,
   output                                 tx_bs46_t_out,
   input                                  tx_bs46_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs46_rx_bit_ctrl_in,
   output [39:0]                          tx_bs46_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs46_tx_bit_ctrl_in,
   output [39:0]                          tx_bs46_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice47 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs47_ce_in,
   input   [8:0]                          tx_bs47_cntvaluein,
   output  [8:0]                          tx_bs47_cntvalueout,
   input                                  tx_bs47_en_vtc_in,
   input                                  tx_bs47_inc_in,
   input                                  tx_bs47_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs47_D_data_from_fabric_in,
   output                                 tx_bs47_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs47_t_in,
   output                                 tx_bs47_t_out,
   input                                  tx_bs47_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs47_rx_bit_ctrl_in,
   output [39:0]                          tx_bs47_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs47_tx_bit_ctrl_in,
   output [39:0]                          tx_bs47_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice48 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs48_ce_in,
   input   [8:0]                          tx_bs48_cntvaluein,
   output  [8:0]                          tx_bs48_cntvalueout,
   input                                  tx_bs48_en_vtc_in,
   input                                  tx_bs48_inc_in,
   input                                  tx_bs48_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs48_D_data_from_fabric_in,
   output                                 tx_bs48_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs48_t_in,
   output                                 tx_bs48_t_out,
   input                                  tx_bs48_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs48_rx_bit_ctrl_in,
   output [39:0]                          tx_bs48_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs48_tx_bit_ctrl_in,
   output [39:0]                          tx_bs48_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice49 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs49_ce_in,
   input   [8:0]                          tx_bs49_cntvaluein,
   output  [8:0]                          tx_bs49_cntvalueout,
   input                                  tx_bs49_en_vtc_in,
   input                                  tx_bs49_inc_in,
   input                                  tx_bs49_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs49_D_data_from_fabric_in,
   output                                 tx_bs49_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs49_t_in,
   output                                 tx_bs49_t_out,
   input                                  tx_bs49_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs49_rx_bit_ctrl_in,
   output [39:0]                          tx_bs49_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs49_tx_bit_ctrl_in,
   output [39:0]                          tx_bs49_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice50 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs50_ce_in,
   input   [8:0]                          tx_bs50_cntvaluein,
   output  [8:0]                          tx_bs50_cntvalueout,
   input                                  tx_bs50_en_vtc_in,
   input                                  tx_bs50_inc_in,
   input                                  tx_bs50_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs50_D_data_from_fabric_in,
   output                                 tx_bs50_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs50_t_in,
   output                                 tx_bs50_t_out,
   input                                  tx_bs50_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs50_rx_bit_ctrl_in,
   output [39:0]                          tx_bs50_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs50_tx_bit_ctrl_in,
   output [39:0]                          tx_bs50_tx_bit_ctrl_out,
   
   // --------------------------------------------------------
   // Bitslice51 signals  
   // --------------------------------------------------------
   // Delay signals
   input                                  tx_bs51_ce_in,
   input   [8:0]                          tx_bs51_cntvaluein,
   output  [8:0]                          tx_bs51_cntvalueout,
   input                                  tx_bs51_en_vtc_in,
   input                                  tx_bs51_inc_in,
   input                                  tx_bs51_load_in,
   
   // Data Signals
   input  [C_SERIALIZATION_FACTOR -1 :0]  tx_bs51_D_data_from_fabric_in,
   output                                 tx_bs51_O_data_out,
   
   // Tristate control signals
   input                                  tx_bs51_t_in,
   output                                 tx_bs51_t_out,
   input                                  tx_bs51_tbyte_in,
   
   //Ribbon cable signals
   input  [39:0]                          tx_bs51_rx_bit_ctrl_in,
   output [39:0]                          tx_bs51_rx_bit_ctrl_out,
   input  [39:0]                          tx_bs51_tx_bit_ctrl_in,
   output [39:0]                          tx_bs51_tx_bit_ctrl_out
   
   );
   
    
   // TX DELAY TYPE Parameter --- string type
   localparam [103:0] C_TX_DELAY_TYPE  =  {
                                       C_TX_DELAY_TYPE51,
   				       C_TX_DELAY_TYPE50,
   				       C_TX_DELAY_TYPE49,
                                       C_TX_DELAY_TYPE48,
   				       C_TX_DELAY_TYPE47,
   				       C_TX_DELAY_TYPE46,
                                       C_TX_DELAY_TYPE45,
   				       C_TX_DELAY_TYPE44,
   				       C_TX_DELAY_TYPE43,
                                       C_TX_DELAY_TYPE42,
   				       C_TX_DELAY_TYPE41,
   				       C_TX_DELAY_TYPE40,
                                       C_TX_DELAY_TYPE39,
   				       C_TX_DELAY_TYPE38,
   				       C_TX_DELAY_TYPE37,
                                       C_TX_DELAY_TYPE36,
   				       C_TX_DELAY_TYPE35,
   				       C_TX_DELAY_TYPE34,
                                       C_TX_DELAY_TYPE33,
   				       C_TX_DELAY_TYPE32,
   				       C_TX_DELAY_TYPE31,
                                       C_TX_DELAY_TYPE30,
   				       C_TX_DELAY_TYPE29,
   				       C_TX_DELAY_TYPE28,
                                       C_TX_DELAY_TYPE27,
   				       C_TX_DELAY_TYPE26,
   				       C_TX_DELAY_TYPE25,
                                       C_TX_DELAY_TYPE24,
   				       C_TX_DELAY_TYPE23,
   				       C_TX_DELAY_TYPE22,
                                       C_TX_DELAY_TYPE21,
   				       C_TX_DELAY_TYPE20,
   				       C_TX_DELAY_TYPE19,
                                       C_TX_DELAY_TYPE18,
   				       C_TX_DELAY_TYPE17,
   				       C_TX_DELAY_TYPE16,
                                       C_TX_DELAY_TYPE15,
   				       C_TX_DELAY_TYPE14,
   				       C_TX_DELAY_TYPE13,
                                       C_TX_DELAY_TYPE12,
   				       C_TX_DELAY_TYPE11,
   				       C_TX_DELAY_TYPE10,
   				       C_TX_DELAY_TYPE9,
                                       C_TX_DELAY_TYPE8,
   				       C_TX_DELAY_TYPE7,
   				       C_TX_DELAY_TYPE6,
                                       C_TX_DELAY_TYPE5,
   				       C_TX_DELAY_TYPE4,
   				       C_TX_DELAY_TYPE3,
                                       C_TX_DELAY_TYPE2,
   				       C_TX_DELAY_TYPE1,
   				       C_TX_DELAY_TYPE0
   				     };
   localparam [623:0] C_TX_DELAY_VALUE  =  {
                                       C_TX_DELAY_VALUE51,
   				       C_TX_DELAY_VALUE50,
   				       C_TX_DELAY_VALUE49,
                                       C_TX_DELAY_VALUE48,
   				       C_TX_DELAY_VALUE47,
   				       C_TX_DELAY_VALUE46,
                                       C_TX_DELAY_VALUE45,
   				       C_TX_DELAY_VALUE44,
   				       C_TX_DELAY_VALUE43,
                                       C_TX_DELAY_VALUE42,
   				       C_TX_DELAY_VALUE41,
   				       C_TX_DELAY_VALUE40,
                                       C_TX_DELAY_VALUE39,
   				       C_TX_DELAY_VALUE38,
   				       C_TX_DELAY_VALUE37,
                                       C_TX_DELAY_VALUE36,
   				       C_TX_DELAY_VALUE35,
   				       C_TX_DELAY_VALUE34,
                                       C_TX_DELAY_VALUE33,
   				       C_TX_DELAY_VALUE32,
   				       C_TX_DELAY_VALUE31,
                                       C_TX_DELAY_VALUE30,
   				       C_TX_DELAY_VALUE29,
   				       C_TX_DELAY_VALUE28,
                                       C_TX_DELAY_VALUE27,
   				       C_TX_DELAY_VALUE26,
   				       C_TX_DELAY_VALUE25,
                                       C_TX_DELAY_VALUE24,
   				       C_TX_DELAY_VALUE23,
   				       C_TX_DELAY_VALUE22,
                                       C_TX_DELAY_VALUE21,
   				       C_TX_DELAY_VALUE20,
   				       C_TX_DELAY_VALUE19,
                                       C_TX_DELAY_VALUE18,
   				       C_TX_DELAY_VALUE17,
   				       C_TX_DELAY_VALUE16,
                                       C_TX_DELAY_VALUE15,
   				       C_TX_DELAY_VALUE14,
   				       C_TX_DELAY_VALUE13,
                                       C_TX_DELAY_VALUE12,
   				       C_TX_DELAY_VALUE11,
   				       C_TX_DELAY_VALUE10,
   				       C_TX_DELAY_VALUE9,
                                       C_TX_DELAY_VALUE8,
   				       C_TX_DELAY_VALUE7,
   				       C_TX_DELAY_VALUE6,
                                       C_TX_DELAY_VALUE5,
   				       C_TX_DELAY_VALUE4,
   				       C_TX_DELAY_VALUE3,
                                       C_TX_DELAY_VALUE2,
   				       C_TX_DELAY_VALUE1,
   				       C_TX_DELAY_VALUE0
   				     };
     // Vectorizing individual data from fabric signals	       
   wire    [C_SERIALIZATION_FACTOR -1 :0]  tx_bs_D_data_from_fabric_in [51:0];
   assign  tx_bs_D_data_from_fabric_in[0]  = tx_bs0_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[1]  = tx_bs1_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[2]  = tx_bs2_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[3]  = tx_bs3_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[4]  = tx_bs4_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[5]  = tx_bs5_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[6]  = tx_bs6_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[7]  = tx_bs7_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[8]  = tx_bs8_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[9]  = tx_bs9_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[10] = tx_bs10_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[11] = tx_bs11_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[12] = tx_bs12_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[13] = tx_bs13_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[14] = tx_bs14_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[15] = tx_bs15_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[16] = tx_bs16_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[17] = tx_bs17_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[18] = tx_bs18_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[19] = tx_bs19_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[20] = tx_bs20_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[21] = tx_bs21_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[22] = tx_bs22_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[23] = tx_bs23_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[24] = tx_bs24_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[25] = tx_bs25_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[26] = tx_bs26_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[27] = tx_bs27_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[28] = tx_bs28_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[29] = tx_bs29_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[30] = tx_bs30_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[31] = tx_bs31_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[32] = tx_bs32_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[33] = tx_bs33_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[34] = tx_bs34_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[35] = tx_bs35_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[36] = tx_bs36_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[37] = tx_bs37_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[38] = tx_bs38_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[39] = tx_bs39_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[40] = tx_bs40_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[41] = tx_bs41_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[42] = tx_bs42_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[43] = tx_bs43_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[44] = tx_bs44_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[45] = tx_bs45_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[46] = tx_bs46_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[47] = tx_bs47_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[48] = tx_bs48_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[49] = tx_bs49_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[50] = tx_bs50_D_data_from_fabric_in;
   assign  tx_bs_D_data_from_fabric_in[51] = tx_bs51_D_data_from_fabric_in;
   
   wire [7 :0] w_tx_D_data_from_fabric_in [51:0];
   
   // Output data
   wire [51:0] w_tx_O_data_out;
   
   assign tx_bs0_O_data_out = w_tx_O_data_out[0];
   assign tx_bs1_O_data_out = w_tx_O_data_out[1];
   assign tx_bs2_O_data_out = w_tx_O_data_out[2];
   assign tx_bs3_O_data_out = w_tx_O_data_out[3];
   assign tx_bs4_O_data_out = w_tx_O_data_out[4];
   assign tx_bs5_O_data_out = w_tx_O_data_out[5];
   assign tx_bs6_O_data_out = w_tx_O_data_out[6];
   assign tx_bs7_O_data_out = w_tx_O_data_out[7];
   assign tx_bs8_O_data_out = w_tx_O_data_out[8];
   assign tx_bs9_O_data_out = w_tx_O_data_out[9];
   assign tx_bs10_O_data_out = w_tx_O_data_out[10];
   assign tx_bs11_O_data_out = w_tx_O_data_out[11];
   assign tx_bs12_O_data_out = w_tx_O_data_out[12];
   assign tx_bs13_O_data_out = w_tx_O_data_out[13];
   assign tx_bs14_O_data_out = w_tx_O_data_out[14];
   assign tx_bs15_O_data_out = w_tx_O_data_out[15];
   assign tx_bs16_O_data_out = w_tx_O_data_out[16];
   assign tx_bs17_O_data_out = w_tx_O_data_out[17];
   assign tx_bs18_O_data_out = w_tx_O_data_out[18];
   assign tx_bs19_O_data_out = w_tx_O_data_out[19];
   assign tx_bs20_O_data_out = w_tx_O_data_out[20];
   assign tx_bs21_O_data_out = w_tx_O_data_out[21];
   assign tx_bs22_O_data_out = w_tx_O_data_out[22];
   assign tx_bs23_O_data_out = w_tx_O_data_out[23];
   assign tx_bs24_O_data_out = w_tx_O_data_out[24];
   assign tx_bs25_O_data_out = w_tx_O_data_out[25];
   assign tx_bs26_O_data_out = w_tx_O_data_out[26];
   assign tx_bs27_O_data_out = w_tx_O_data_out[27];
   assign tx_bs28_O_data_out = w_tx_O_data_out[28];
   assign tx_bs29_O_data_out = w_tx_O_data_out[29];
   assign tx_bs30_O_data_out = w_tx_O_data_out[30];
   assign tx_bs31_O_data_out = w_tx_O_data_out[31];
   assign tx_bs32_O_data_out = w_tx_O_data_out[32];
   assign tx_bs33_O_data_out = w_tx_O_data_out[33];
   assign tx_bs34_O_data_out = w_tx_O_data_out[34];
   assign tx_bs35_O_data_out = w_tx_O_data_out[35];
   assign tx_bs36_O_data_out = w_tx_O_data_out[36];
   assign tx_bs37_O_data_out = w_tx_O_data_out[37];
   assign tx_bs38_O_data_out = w_tx_O_data_out[38];
   assign tx_bs39_O_data_out = w_tx_O_data_out[39];
   assign tx_bs40_O_data_out = w_tx_O_data_out[40];
   assign tx_bs41_O_data_out = w_tx_O_data_out[41];
   assign tx_bs42_O_data_out = w_tx_O_data_out[42];
   assign tx_bs43_O_data_out = w_tx_O_data_out[43];
   assign tx_bs44_O_data_out = w_tx_O_data_out[44];
   assign tx_bs45_O_data_out = w_tx_O_data_out[45];
   assign tx_bs46_O_data_out = w_tx_O_data_out[46];
   assign tx_bs47_O_data_out = w_tx_O_data_out[47];
   assign tx_bs48_O_data_out = w_tx_O_data_out[48];
   assign tx_bs49_O_data_out = w_tx_O_data_out[49];
   assign tx_bs50_O_data_out = w_tx_O_data_out[50];
   assign tx_bs51_O_data_out = w_tx_O_data_out[51];
   
   // Ribbon cable signals
   wire [39:0] tx_bs_tx_bit_ctrl_out [51:0];
   
   assign tx_bs51_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[51];
   assign tx_bs50_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[50];
   assign tx_bs49_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[49];
   assign tx_bs48_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[48];
   assign tx_bs47_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[47];
   assign tx_bs46_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[46];
   assign tx_bs45_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[45];
   assign tx_bs44_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[44];
   assign tx_bs43_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[43];
   assign tx_bs42_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[42];
   assign tx_bs41_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[41];
   assign tx_bs40_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[40];
   assign tx_bs39_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[39];
   assign tx_bs38_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[38];
   assign tx_bs37_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[37];
   assign tx_bs36_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[36];
   assign tx_bs35_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[35];
   assign tx_bs34_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[34];
   assign tx_bs33_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[33];
   assign tx_bs32_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[32];
   assign tx_bs31_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[31];
   assign tx_bs30_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[30];
   assign tx_bs29_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[29];
   assign tx_bs28_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[28];
   assign tx_bs27_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[27];
   assign tx_bs26_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[26];
   assign tx_bs25_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[25];
   assign tx_bs24_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[24];
   assign tx_bs23_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[23];
   assign tx_bs22_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[22];
   assign tx_bs21_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[21];
   assign tx_bs20_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[20];
   assign tx_bs19_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[19];
   assign tx_bs18_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[18];
   assign tx_bs17_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[17];
   assign tx_bs16_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[16];
   assign tx_bs15_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[15];
   assign tx_bs14_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[14];
   assign tx_bs13_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[13];
   assign tx_bs12_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[12];
   assign tx_bs11_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[11];
   assign tx_bs10_tx_bit_ctrl_out = tx_bs_tx_bit_ctrl_out[10];
   assign tx_bs9_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[9];
   assign tx_bs8_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[8];
   assign tx_bs7_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[7];
   assign tx_bs6_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[6];
   assign tx_bs5_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[5];
   assign tx_bs4_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[4];
   assign tx_bs3_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[3];
   assign tx_bs2_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[2];
   assign tx_bs1_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[1];
   assign tx_bs0_tx_bit_ctrl_out  = tx_bs_tx_bit_ctrl_out[0];
   
   wire [39:0] tx_bs_rx_bit_ctrl_out [51:0];
   assign tx_bs51_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[51];
   assign tx_bs50_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[50];
   assign tx_bs49_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[49];
   assign tx_bs48_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[48];
   assign tx_bs47_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[47];
   assign tx_bs46_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[46];
   assign tx_bs45_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[45];
   assign tx_bs44_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[44];
   assign tx_bs43_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[43];
   assign tx_bs42_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[42];
   assign tx_bs41_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[41];
   assign tx_bs40_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[40];
   assign tx_bs39_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[39];
   assign tx_bs38_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[38];
   assign tx_bs37_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[37];
   assign tx_bs36_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[36];
   assign tx_bs35_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[35];
   assign tx_bs34_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[34];
   assign tx_bs33_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[33];
   assign tx_bs32_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[32];
   assign tx_bs31_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[31];
   assign tx_bs30_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[30];
   assign tx_bs29_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[29];
   assign tx_bs28_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[28];
   assign tx_bs27_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[27];
   assign tx_bs26_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[26];
   assign tx_bs25_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[25];
   assign tx_bs24_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[24];
   assign tx_bs23_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[23];
   assign tx_bs22_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[22];
   assign tx_bs21_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[21];
   assign tx_bs20_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[20];
   assign tx_bs19_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[19];
   assign tx_bs18_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[18];
   assign tx_bs17_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[17];
   assign tx_bs16_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[16];
   assign tx_bs15_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[15];
   assign tx_bs14_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[14];
   assign tx_bs13_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[13];
   assign tx_bs12_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[12];
   assign tx_bs11_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[11];
   assign tx_bs10_rx_bit_ctrl_out = tx_bs_rx_bit_ctrl_out[10];
   assign tx_bs9_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[9];
   assign tx_bs8_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[8];
   assign tx_bs7_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[7];
   assign tx_bs6_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[6];
   assign tx_bs5_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[5];
   assign tx_bs4_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[4];
   assign tx_bs3_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[3];
   assign tx_bs2_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[2];
   assign tx_bs1_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[1];
   assign tx_bs0_rx_bit_ctrl_out  = tx_bs_rx_bit_ctrl_out[0];
   
   wire [51:0] tx_bs_t_out;
   
   assign tx_bs0_t_out      = tx_bs_t_out[0];
   assign tx_bs1_t_out      = tx_bs_t_out[1];
   assign tx_bs2_t_out      = tx_bs_t_out[2];
   assign tx_bs3_t_out      = tx_bs_t_out[3];
   assign tx_bs4_t_out      = tx_bs_t_out[4];
   assign tx_bs5_t_out      = tx_bs_t_out[5];
   assign tx_bs6_t_out      = tx_bs_t_out[6];
   assign tx_bs7_t_out      = tx_bs_t_out[7];
   assign tx_bs8_t_out      = tx_bs_t_out[8];
   assign tx_bs9_t_out      = tx_bs_t_out[9];
   assign tx_bs10_t_out     = tx_bs_t_out[10];
   assign tx_bs11_t_out     = tx_bs_t_out[11];
   assign tx_bs12_t_out     = tx_bs_t_out[12];
   assign tx_bs13_t_out     = tx_bs_t_out[13];
   assign tx_bs14_t_out     = tx_bs_t_out[14];
   assign tx_bs15_t_out     = tx_bs_t_out[15];
   assign tx_bs16_t_out     = tx_bs_t_out[16];
   assign tx_bs17_t_out     = tx_bs_t_out[17];
   assign tx_bs18_t_out     = tx_bs_t_out[18];
   assign tx_bs19_t_out     = tx_bs_t_out[19];
   assign tx_bs20_t_out     = tx_bs_t_out[20];
   assign tx_bs21_t_out     = tx_bs_t_out[21];
   assign tx_bs22_t_out     = tx_bs_t_out[22];
   assign tx_bs23_t_out     = tx_bs_t_out[23];
   assign tx_bs24_t_out     = tx_bs_t_out[24];
   assign tx_bs25_t_out     = tx_bs_t_out[25];
   assign tx_bs26_t_out     = tx_bs_t_out[26];
   assign tx_bs27_t_out     = tx_bs_t_out[27];
   assign tx_bs28_t_out     = tx_bs_t_out[28];
   assign tx_bs29_t_out     = tx_bs_t_out[29];
   assign tx_bs30_t_out     = tx_bs_t_out[30];
   assign tx_bs31_t_out     = tx_bs_t_out[31];
   assign tx_bs32_t_out     = tx_bs_t_out[32];
   assign tx_bs33_t_out     = tx_bs_t_out[33];
   assign tx_bs34_t_out     = tx_bs_t_out[34];
   assign tx_bs35_t_out     = tx_bs_t_out[35];
   assign tx_bs36_t_out     = tx_bs_t_out[36];
   assign tx_bs37_t_out     = tx_bs_t_out[37];
   assign tx_bs38_t_out     = tx_bs_t_out[38];
   assign tx_bs39_t_out     = tx_bs_t_out[39];
   assign tx_bs40_t_out     = tx_bs_t_out[40];
   assign tx_bs41_t_out     = tx_bs_t_out[41];
   assign tx_bs42_t_out     = tx_bs_t_out[42];
   assign tx_bs43_t_out     = tx_bs_t_out[43];
   assign tx_bs44_t_out     = tx_bs_t_out[44];
   assign tx_bs45_t_out     = tx_bs_t_out[45];
   assign tx_bs46_t_out     = tx_bs_t_out[46];
   assign tx_bs47_t_out     = tx_bs_t_out[47];
   assign tx_bs48_t_out     = tx_bs_t_out[48];
   assign tx_bs49_t_out     = tx_bs_t_out[49];
   assign tx_bs50_t_out     = tx_bs_t_out[50];
   assign tx_bs51_t_out     = tx_bs_t_out[51];

   wire [51:0] tx_bs_t_in  = {
                                     tx_bs51_t_in,
                                     tx_bs50_t_in,
                                     tx_bs49_t_in,
                                     tx_bs48_t_in,
                                     tx_bs47_t_in,
                                     tx_bs46_t_in,
                                     tx_bs45_t_in,
                                     tx_bs44_t_in,
                                     tx_bs43_t_in,
                                     tx_bs42_t_in,
                                     tx_bs41_t_in,
                                     tx_bs40_t_in,
                                     tx_bs39_t_in,
                                     tx_bs38_t_in,
                                     tx_bs37_t_in,
                                     tx_bs36_t_in,
                                     tx_bs35_t_in,
                                     tx_bs34_t_in,
                                     tx_bs33_t_in,
                                     tx_bs32_t_in,
                                     tx_bs31_t_in,
                                     tx_bs30_t_in,
                                     tx_bs29_t_in,
                                     tx_bs28_t_in,
                                     tx_bs27_t_in,
                                     tx_bs26_t_in,
                                     tx_bs25_t_in,
                                     tx_bs24_t_in,
                                     tx_bs23_t_in,
                                     tx_bs22_t_in,
                                     tx_bs21_t_in,
                                     tx_bs20_t_in,
                                     tx_bs19_t_in,
                                     tx_bs18_t_in,
                                     tx_bs17_t_in,
                                     tx_bs16_t_in,
                                     tx_bs15_t_in,
                                     tx_bs14_t_in,
                                     tx_bs13_t_in,
                                     tx_bs12_t_in,
                                     tx_bs11_t_in,
                                     tx_bs10_t_in,
                                     tx_bs9_t_in,
                                     tx_bs8_t_in,
                                     tx_bs7_t_in,
                                     tx_bs6_t_in,
                                     tx_bs5_t_in,
                                     tx_bs4_t_in,
                                     tx_bs3_t_in,
                                     tx_bs2_t_in,
                                     tx_bs1_t_in,
                                     tx_bs0_t_in
   };
   wire [51:0] tx_bs_tbyte_in  = {
                                     tx_bs51_tbyte_in,
                                     tx_bs50_tbyte_in,
                                     tx_bs49_tbyte_in,
                                     tx_bs48_tbyte_in,
                                     tx_bs47_tbyte_in,
                                     tx_bs46_tbyte_in,
                                     tx_bs45_tbyte_in,
                                     tx_bs44_tbyte_in,
                                     tx_bs43_tbyte_in,
                                     tx_bs42_tbyte_in,
                                     tx_bs41_tbyte_in,
                                     tx_bs40_tbyte_in,
                                     tx_bs39_tbyte_in,
                                     tx_bs38_tbyte_in,
                                     tx_bs37_tbyte_in,
                                     tx_bs36_tbyte_in,
                                     tx_bs35_tbyte_in,
                                     tx_bs34_tbyte_in,
                                     tx_bs33_tbyte_in,
                                     tx_bs32_tbyte_in,
                                     tx_bs31_tbyte_in,
                                     tx_bs30_tbyte_in,
                                     tx_bs29_tbyte_in,
                                     tx_bs28_tbyte_in,
                                     tx_bs27_tbyte_in,
                                     tx_bs26_tbyte_in,
                                     tx_bs25_tbyte_in,
                                     tx_bs24_tbyte_in,
                                     tx_bs23_tbyte_in,
                                     tx_bs22_tbyte_in,
                                     tx_bs21_tbyte_in,
                                     tx_bs20_tbyte_in,
                                     tx_bs19_tbyte_in,
                                     tx_bs18_tbyte_in,
                                     tx_bs17_tbyte_in,
                                     tx_bs16_tbyte_in,
                                     tx_bs15_tbyte_in,
                                     tx_bs14_tbyte_in,
                                     tx_bs13_tbyte_in,
                                     tx_bs12_tbyte_in,
                                     tx_bs11_tbyte_in,
                                     tx_bs10_tbyte_in,
                                     tx_bs9_tbyte_in,
                                     tx_bs8_tbyte_in,
                                     tx_bs7_tbyte_in,
                                     tx_bs6_tbyte_in,
                                     tx_bs5_tbyte_in,
                                     tx_bs4_tbyte_in,
                                     tx_bs3_tbyte_in,
                                     tx_bs2_tbyte_in,
                                     tx_bs1_tbyte_in,
                                     tx_bs0_tbyte_in
   };

   wire [2079:0] tx_bs_tx_bit_ctrl_in  = {
                                                   tx_bs51_tx_bit_ctrl_in,
                                                   tx_bs50_tx_bit_ctrl_in,
                                                   tx_bs49_tx_bit_ctrl_in,
                                                   tx_bs48_tx_bit_ctrl_in,
                                                   tx_bs47_tx_bit_ctrl_in,
                                                   tx_bs46_tx_bit_ctrl_in,
                                                   tx_bs45_tx_bit_ctrl_in,
                                                   tx_bs44_tx_bit_ctrl_in,
                                                   tx_bs43_tx_bit_ctrl_in,                                                
                                                   tx_bs42_tx_bit_ctrl_in,
                                                   tx_bs41_tx_bit_ctrl_in,
                                                   tx_bs40_tx_bit_ctrl_in,
                                                   tx_bs39_tx_bit_ctrl_in,
                                                   tx_bs38_tx_bit_ctrl_in,
                                                   tx_bs37_tx_bit_ctrl_in,
                                                   tx_bs36_tx_bit_ctrl_in,
                                                   tx_bs35_tx_bit_ctrl_in,
                                                   tx_bs34_tx_bit_ctrl_in,
                                                   tx_bs33_tx_bit_ctrl_in,
                                                   tx_bs32_tx_bit_ctrl_in,
                                                   tx_bs31_tx_bit_ctrl_in,
                                                   tx_bs30_tx_bit_ctrl_in,
                                                   tx_bs29_tx_bit_ctrl_in,
                                                   tx_bs28_tx_bit_ctrl_in,
                                                   tx_bs27_tx_bit_ctrl_in,
                                                   tx_bs26_tx_bit_ctrl_in,
                                                   tx_bs25_tx_bit_ctrl_in,
                                                   tx_bs24_tx_bit_ctrl_in,
                                                   tx_bs23_tx_bit_ctrl_in,
                                                   tx_bs22_tx_bit_ctrl_in,
                                                   tx_bs21_tx_bit_ctrl_in,
                                                   tx_bs20_tx_bit_ctrl_in,
                                                   tx_bs19_tx_bit_ctrl_in,
                                                   tx_bs18_tx_bit_ctrl_in,
                                                   tx_bs17_tx_bit_ctrl_in,
                                                   tx_bs16_tx_bit_ctrl_in,
                                                   tx_bs15_tx_bit_ctrl_in,
                                                   tx_bs14_tx_bit_ctrl_in,
                                                   tx_bs13_tx_bit_ctrl_in,
                                                   tx_bs12_tx_bit_ctrl_in,
                                                   tx_bs11_tx_bit_ctrl_in,
                                                   tx_bs10_tx_bit_ctrl_in,
                                                   tx_bs9_tx_bit_ctrl_in,
                                                   tx_bs8_tx_bit_ctrl_in,
                                                   tx_bs7_tx_bit_ctrl_in,
                                                   tx_bs6_tx_bit_ctrl_in,
                                                   tx_bs5_tx_bit_ctrl_in,
                                                   tx_bs4_tx_bit_ctrl_in,
                                                   tx_bs3_tx_bit_ctrl_in,
                                                   tx_bs2_tx_bit_ctrl_in,
                                                   tx_bs1_tx_bit_ctrl_in,
                                                   tx_bs0_tx_bit_ctrl_in};	       
   
   wire  [2079:0] tx_bs_rx_bit_ctrl_in = {
                                                   tx_bs51_rx_bit_ctrl_in,
                                                   tx_bs50_rx_bit_ctrl_in,
                                                   tx_bs49_rx_bit_ctrl_in,
                                                   tx_bs48_rx_bit_ctrl_in,
                                                   tx_bs47_rx_bit_ctrl_in,
                                                   tx_bs46_rx_bit_ctrl_in,
                                                   tx_bs45_rx_bit_ctrl_in,
                                                   tx_bs44_rx_bit_ctrl_in,
                                                   tx_bs43_rx_bit_ctrl_in,                                                
                                                   tx_bs42_rx_bit_ctrl_in,
                                                   tx_bs41_rx_bit_ctrl_in,
                                                   tx_bs40_rx_bit_ctrl_in,
                                                   tx_bs39_rx_bit_ctrl_in,
                                                   tx_bs38_rx_bit_ctrl_in,
                                                   tx_bs37_rx_bit_ctrl_in,
                                                   tx_bs36_rx_bit_ctrl_in,
                                                   tx_bs35_rx_bit_ctrl_in,
                                                   tx_bs34_rx_bit_ctrl_in,
                                                   tx_bs33_rx_bit_ctrl_in,
                                                   tx_bs32_rx_bit_ctrl_in,
                                                   tx_bs31_rx_bit_ctrl_in,
                                                   tx_bs30_rx_bit_ctrl_in,
                                                   tx_bs29_rx_bit_ctrl_in,
                                                   tx_bs28_rx_bit_ctrl_in,
                                                   tx_bs27_rx_bit_ctrl_in,
                                                   tx_bs26_rx_bit_ctrl_in,
                                                   tx_bs25_rx_bit_ctrl_in,
                                                   tx_bs24_rx_bit_ctrl_in,
                                                   tx_bs23_rx_bit_ctrl_in,
                                                   tx_bs22_rx_bit_ctrl_in,
                                                   tx_bs21_rx_bit_ctrl_in,
                                                   tx_bs20_rx_bit_ctrl_in,
                                                   tx_bs19_rx_bit_ctrl_in,
                                                   tx_bs18_rx_bit_ctrl_in,
                                                   tx_bs17_rx_bit_ctrl_in,
                                                   tx_bs16_rx_bit_ctrl_in,
                                                   tx_bs15_rx_bit_ctrl_in,
                                                   tx_bs14_rx_bit_ctrl_in,
                                                   tx_bs13_rx_bit_ctrl_in,
                                                   tx_bs12_rx_bit_ctrl_in,
                                                   tx_bs11_rx_bit_ctrl_in,
                                                   tx_bs10_rx_bit_ctrl_in,
                                                   tx_bs9_rx_bit_ctrl_in,
                                                   tx_bs8_rx_bit_ctrl_in,
                                                   tx_bs7_rx_bit_ctrl_in,
                                                   tx_bs6_rx_bit_ctrl_in,
                                                   tx_bs5_rx_bit_ctrl_in,
                                                   tx_bs4_rx_bit_ctrl_in,
                                                   tx_bs3_rx_bit_ctrl_in,
                                                   tx_bs2_rx_bit_ctrl_in,
                                                   tx_bs1_rx_bit_ctrl_in,
                                                   tx_bs0_rx_bit_ctrl_in};
   
   // Delay type, when VARIABLE or VAR_LOAD this wire is set
   wire [51:0] w_delay_type;
   assign w_delay_type[0]    = (C_TX_DELAY_TYPE0 == 2'b01 || C_TX_DELAY_TYPE0  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[1]    = (C_TX_DELAY_TYPE1 == 2'b01 || C_TX_DELAY_TYPE1  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[2]    = (C_TX_DELAY_TYPE2 == 2'b01 || C_TX_DELAY_TYPE2  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[3]    = (C_TX_DELAY_TYPE3 == 2'b01 || C_TX_DELAY_TYPE3  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[4]    = (C_TX_DELAY_TYPE4 == 2'b01 || C_TX_DELAY_TYPE4  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[5]    = (C_TX_DELAY_TYPE5 == 2'b01 || C_TX_DELAY_TYPE5  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[6]    = (C_TX_DELAY_TYPE6 == 2'b01 || C_TX_DELAY_TYPE6  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[7]    = (C_TX_DELAY_TYPE7 == 2'b01 || C_TX_DELAY_TYPE7  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[8]    = (C_TX_DELAY_TYPE8 == 2'b01 || C_TX_DELAY_TYPE8  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[9]    = (C_TX_DELAY_TYPE9 == 2'b01 || C_TX_DELAY_TYPE9  == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[10]   = (C_TX_DELAY_TYPE10 == 2'b01 || C_TX_DELAY_TYPE10 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[11]   = (C_TX_DELAY_TYPE11 == 2'b01 || C_TX_DELAY_TYPE11 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[12]   = (C_TX_DELAY_TYPE12 == 2'b01 || C_TX_DELAY_TYPE12 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[13]   = (C_TX_DELAY_TYPE13 == 2'b01 || C_TX_DELAY_TYPE13 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[14]   = (C_TX_DELAY_TYPE14 == 2'b01 || C_TX_DELAY_TYPE14 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[15]   = (C_TX_DELAY_TYPE15 == 2'b01 || C_TX_DELAY_TYPE15 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[16]   = (C_TX_DELAY_TYPE16 == 2'b01 || C_TX_DELAY_TYPE16 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[17]   = (C_TX_DELAY_TYPE17 == 2'b01 || C_TX_DELAY_TYPE17 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[18]   = (C_TX_DELAY_TYPE18 == 2'b01 || C_TX_DELAY_TYPE18 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[19]   = (C_TX_DELAY_TYPE19 == 2'b01 || C_TX_DELAY_TYPE19 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[20]   = (C_TX_DELAY_TYPE20 == 2'b01 || C_TX_DELAY_TYPE20 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[21]   = (C_TX_DELAY_TYPE21 == 2'b01 || C_TX_DELAY_TYPE21 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[22]   = (C_TX_DELAY_TYPE22 == 2'b01 || C_TX_DELAY_TYPE22 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[23]   = (C_TX_DELAY_TYPE23 == 2'b01 || C_TX_DELAY_TYPE23 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[24]   = (C_TX_DELAY_TYPE24 == 2'b01 || C_TX_DELAY_TYPE24 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[25]   = (C_TX_DELAY_TYPE25 == 2'b01 || C_TX_DELAY_TYPE25 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[26]   = (C_TX_DELAY_TYPE26 == 2'b01 || C_TX_DELAY_TYPE26 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[27]   = (C_TX_DELAY_TYPE27 == 2'b01 || C_TX_DELAY_TYPE27 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[28]   = (C_TX_DELAY_TYPE28 == 2'b01 || C_TX_DELAY_TYPE28 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[29]   = (C_TX_DELAY_TYPE29 == 2'b01 || C_TX_DELAY_TYPE29 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[30]   = (C_TX_DELAY_TYPE30 == 2'b01 || C_TX_DELAY_TYPE30 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[31]   = (C_TX_DELAY_TYPE31 == 2'b01 || C_TX_DELAY_TYPE31 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[32]   = (C_TX_DELAY_TYPE32 == 2'b01 || C_TX_DELAY_TYPE32 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[33]   = (C_TX_DELAY_TYPE33 == 2'b01 || C_TX_DELAY_TYPE33 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[34]   = (C_TX_DELAY_TYPE34 == 2'b01 || C_TX_DELAY_TYPE34 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[35]   = (C_TX_DELAY_TYPE35 == 2'b01 || C_TX_DELAY_TYPE35 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[36]   = (C_TX_DELAY_TYPE36 == 2'b01 || C_TX_DELAY_TYPE36 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[37]   = (C_TX_DELAY_TYPE37 == 2'b01 || C_TX_DELAY_TYPE37 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[38]   = (C_TX_DELAY_TYPE38 == 2'b01 || C_TX_DELAY_TYPE38 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[39]   = (C_TX_DELAY_TYPE39 == 2'b01 || C_TX_DELAY_TYPE39 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[40]   = (C_TX_DELAY_TYPE40 == 2'b01 || C_TX_DELAY_TYPE40 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[41]   = (C_TX_DELAY_TYPE41 == 2'b01 || C_TX_DELAY_TYPE41 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[42]   = (C_TX_DELAY_TYPE42 == 2'b01 || C_TX_DELAY_TYPE42 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[43]   = (C_TX_DELAY_TYPE43 == 2'b01 || C_TX_DELAY_TYPE43 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[44]   = (C_TX_DELAY_TYPE44 == 2'b01 || C_TX_DELAY_TYPE44 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[45]   = (C_TX_DELAY_TYPE45 == 2'b01 || C_TX_DELAY_TYPE45 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[46]   = (C_TX_DELAY_TYPE46 == 2'b01 || C_TX_DELAY_TYPE46 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[47]   = (C_TX_DELAY_TYPE47 == 2'b01 || C_TX_DELAY_TYPE47 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[48]   = (C_TX_DELAY_TYPE48 == 2'b01 || C_TX_DELAY_TYPE48 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[49]   = (C_TX_DELAY_TYPE49 == 2'b01 || C_TX_DELAY_TYPE49 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[50]   = (C_TX_DELAY_TYPE50 == 2'b01 || C_TX_DELAY_TYPE50 == 2'b10) ? 1'b1:1'b0;
   assign w_delay_type[51]   = (C_TX_DELAY_TYPE51 == 2'b01 || C_TX_DELAY_TYPE51 == 2'b10) ? 1'b1:1'b0;
   
   // vectorising EN_VTC, for VAR_LOAD and VARIABLE, tx_bs<num>_en_vtc is used and for FIXED assigned to 1'b1 or VCC
   wire [51:0] w_tx_en_vtc_in; 
   assign w_tx_en_vtc_in[0]  = !rst_seq_done ? 1'b1 : (w_delay_type[0])  ? tx_bs0_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[1]  = !rst_seq_done ? 1'b1 : (w_delay_type[1])  ? tx_bs1_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[2]  = !rst_seq_done ? 1'b1 : (w_delay_type[2])  ? tx_bs2_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[3]  = !rst_seq_done ? 1'b1 : (w_delay_type[3])  ? tx_bs3_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[4]  = !rst_seq_done ? 1'b1 : (w_delay_type[4])  ? tx_bs4_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[5]  = !rst_seq_done ? 1'b1 : (w_delay_type[5])  ? tx_bs5_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[6]  = !rst_seq_done ? 1'b1 : (w_delay_type[6])  ? tx_bs6_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[7]  = !rst_seq_done ? 1'b1 : (w_delay_type[7])  ? tx_bs7_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[8]  = !rst_seq_done ? 1'b1 : (w_delay_type[8])  ? tx_bs8_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[9]  = !rst_seq_done ? 1'b1 : (w_delay_type[9])  ? tx_bs9_en_vtc_in :((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[10] = !rst_seq_done ? 1'b1 : (w_delay_type[10]) ? tx_bs10_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[11] = !rst_seq_done ? 1'b1 : (w_delay_type[11]) ? tx_bs11_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[12] = !rst_seq_done ? 1'b1 : (w_delay_type[12]) ? tx_bs12_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[13] = !rst_seq_done ? 1'b1 : (w_delay_type[13]) ? tx_bs13_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[14] = !rst_seq_done ? 1'b1 : (w_delay_type[14]) ? tx_bs14_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[15] = !rst_seq_done ? 1'b1 : (w_delay_type[15]) ? tx_bs15_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[16] = !rst_seq_done ? 1'b1 : (w_delay_type[16]) ? tx_bs16_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[17] = !rst_seq_done ? 1'b1 : (w_delay_type[17]) ? tx_bs17_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[18] = !rst_seq_done ? 1'b1 : (w_delay_type[18]) ? tx_bs18_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[19] = !rst_seq_done ? 1'b1 : (w_delay_type[19]) ? tx_bs19_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[20] = !rst_seq_done ? 1'b1 : (w_delay_type[20]) ? tx_bs20_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[21] = !rst_seq_done ? 1'b1 : (w_delay_type[21]) ? tx_bs21_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[22] = !rst_seq_done ? 1'b1 : (w_delay_type[22]) ? tx_bs22_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[23] = !rst_seq_done ? 1'b1 : (w_delay_type[23]) ? tx_bs23_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[24] = !rst_seq_done ? 1'b1 : (w_delay_type[24]) ? tx_bs24_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[25] = !rst_seq_done ? 1'b1 : (w_delay_type[25]) ? tx_bs25_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[26] = !rst_seq_done ? 1'b1 : (w_delay_type[26]) ? tx_bs26_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[27] = !rst_seq_done ? 1'b1 : (w_delay_type[27]) ? tx_bs27_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[28] = !rst_seq_done ? 1'b1 : (w_delay_type[28]) ? tx_bs28_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[29] = !rst_seq_done ? 1'b1 : (w_delay_type[29]) ? tx_bs29_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[30] = !rst_seq_done ? 1'b1 : (w_delay_type[30]) ? tx_bs30_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[31] = !rst_seq_done ? 1'b1 : (w_delay_type[31]) ? tx_bs31_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[32] = !rst_seq_done ? 1'b1 : (w_delay_type[32]) ? tx_bs32_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[33] = !rst_seq_done ? 1'b1 : (w_delay_type[33]) ? tx_bs33_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[34] = !rst_seq_done ? 1'b1 : (w_delay_type[34]) ? tx_bs34_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[35] = !rst_seq_done ? 1'b1 : (w_delay_type[35]) ? tx_bs35_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[36] = !rst_seq_done ? 1'b1 : (w_delay_type[36]) ? tx_bs36_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[37] = !rst_seq_done ? 1'b1 : (w_delay_type[37]) ? tx_bs37_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[38] = !rst_seq_done ? 1'b1 : (w_delay_type[38]) ? tx_bs38_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[39] = !rst_seq_done ? 1'b1 : (w_delay_type[39]) ? tx_bs39_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[40] = !rst_seq_done ? 1'b1 : (w_delay_type[40]) ? tx_bs40_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[41] = !rst_seq_done ? 1'b1 : (w_delay_type[41]) ? tx_bs41_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[42] = !rst_seq_done ? 1'b1 : (w_delay_type[42]) ? tx_bs42_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[43] = !rst_seq_done ? 1'b1 : (w_delay_type[43]) ? tx_bs43_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[44] = !rst_seq_done ? 1'b1 : (w_delay_type[44]) ? tx_bs44_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[45] = !rst_seq_done ? 1'b1 : (w_delay_type[45]) ? tx_bs45_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[46] = !rst_seq_done ? 1'b1 : (w_delay_type[46]) ? tx_bs46_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[47] = !rst_seq_done ? 1'b1 : (w_delay_type[47]) ? tx_bs47_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[48] = !rst_seq_done ? 1'b1 : (w_delay_type[48]) ? tx_bs48_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[49] = !rst_seq_done ? 1'b1 : (w_delay_type[49]) ? tx_bs49_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[50] = !rst_seq_done ? 1'b1 : (w_delay_type[50]) ? tx_bs50_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   assign w_tx_en_vtc_in[51] = !rst_seq_done ? 1'b1 : (w_delay_type[51]) ? tx_bs51_en_vtc_in:((C_TX_DELAY_FORMAT == "COUNT") ? 1'b0 : 1'b1);
   
   // Increment count value for the delays, available only for VARIABLE or  VAR_LOAD					   
   wire [51:0] w_tx_inc_in;
   assign w_tx_inc_in[0]  = (w_delay_type[0]) ? tx_bs0_inc_in:1'b0;
   assign w_tx_inc_in[1]  = (w_delay_type[1]) ? tx_bs1_inc_in:1'b0;
   assign w_tx_inc_in[2]  = (w_delay_type[2]) ? tx_bs2_inc_in:1'b0;
   assign w_tx_inc_in[3]  = (w_delay_type[3]) ? tx_bs3_inc_in:1'b0;
   assign w_tx_inc_in[4]  = (w_delay_type[4]) ? tx_bs4_inc_in:1'b0;
   assign w_tx_inc_in[5]  = (w_delay_type[5]) ? tx_bs5_inc_in:1'b0;
   assign w_tx_inc_in[6]  = (w_delay_type[6]) ? tx_bs6_inc_in:1'b0;
   assign w_tx_inc_in[7]  = (w_delay_type[7]) ? tx_bs7_inc_in:1'b0;
   assign w_tx_inc_in[8]  = (w_delay_type[8]) ? tx_bs8_inc_in:1'b0;
   assign w_tx_inc_in[9]  = (w_delay_type[9]) ? tx_bs9_inc_in:1'b0;
   assign w_tx_inc_in[10] = (w_delay_type[10]) ? tx_bs10_inc_in:1'b0;
   assign w_tx_inc_in[11] = (w_delay_type[11]) ? tx_bs11_inc_in:1'b0;
   assign w_tx_inc_in[12] = (w_delay_type[12]) ? tx_bs12_inc_in:1'b0;
   assign w_tx_inc_in[13] = (w_delay_type[13]) ? tx_bs13_inc_in:1'b0;
   assign w_tx_inc_in[14] = (w_delay_type[14]) ? tx_bs14_inc_in:1'b0;
   assign w_tx_inc_in[15] = (w_delay_type[15]) ? tx_bs15_inc_in:1'b0;
   assign w_tx_inc_in[16] = (w_delay_type[16]) ? tx_bs16_inc_in:1'b0;
   assign w_tx_inc_in[17] = (w_delay_type[17]) ? tx_bs17_inc_in:1'b0;
   assign w_tx_inc_in[18] = (w_delay_type[18]) ? tx_bs18_inc_in:1'b0;
   assign w_tx_inc_in[19] = (w_delay_type[19]) ? tx_bs19_inc_in:1'b0;
   assign w_tx_inc_in[20] = (w_delay_type[20]) ? tx_bs20_inc_in:1'b0;
   assign w_tx_inc_in[21] = (w_delay_type[21]) ? tx_bs21_inc_in:1'b0;
   assign w_tx_inc_in[22] = (w_delay_type[22]) ? tx_bs22_inc_in:1'b0;
   assign w_tx_inc_in[23] = (w_delay_type[23]) ? tx_bs23_inc_in:1'b0;
   assign w_tx_inc_in[24] = (w_delay_type[24]) ? tx_bs24_inc_in:1'b0;
   assign w_tx_inc_in[25] = (w_delay_type[25]) ? tx_bs25_inc_in:1'b0;
   assign w_tx_inc_in[26] = (w_delay_type[26]) ? tx_bs26_inc_in:1'b0;
   assign w_tx_inc_in[27] = (w_delay_type[27]) ? tx_bs27_inc_in:1'b0;
   assign w_tx_inc_in[28] = (w_delay_type[28]) ? tx_bs28_inc_in:1'b0;
   assign w_tx_inc_in[29] = (w_delay_type[29]) ? tx_bs29_inc_in:1'b0;
   assign w_tx_inc_in[30] = (w_delay_type[30]) ? tx_bs30_inc_in:1'b0;
   assign w_tx_inc_in[31] = (w_delay_type[31]) ? tx_bs31_inc_in:1'b0;
   assign w_tx_inc_in[32] = (w_delay_type[32]) ? tx_bs32_inc_in:1'b0;
   assign w_tx_inc_in[33] = (w_delay_type[33]) ? tx_bs33_inc_in:1'b0;
   assign w_tx_inc_in[34] = (w_delay_type[34]) ? tx_bs34_inc_in:1'b0;
   assign w_tx_inc_in[35] = (w_delay_type[35]) ? tx_bs35_inc_in:1'b0;
   assign w_tx_inc_in[36] = (w_delay_type[36]) ? tx_bs36_inc_in:1'b0;
   assign w_tx_inc_in[37] = (w_delay_type[37]) ? tx_bs37_inc_in:1'b0;
   assign w_tx_inc_in[38] = (w_delay_type[38]) ? tx_bs38_inc_in:1'b0;
   assign w_tx_inc_in[39] = (w_delay_type[39]) ? tx_bs39_inc_in:1'b0;
   assign w_tx_inc_in[40] = (w_delay_type[40]) ? tx_bs40_inc_in:1'b0;
   assign w_tx_inc_in[41] = (w_delay_type[41]) ? tx_bs41_inc_in:1'b0;
   assign w_tx_inc_in[42] = (w_delay_type[42]) ? tx_bs42_inc_in:1'b0;
   assign w_tx_inc_in[43] = (w_delay_type[43]) ? tx_bs43_inc_in:1'b0;
   assign w_tx_inc_in[44] = (w_delay_type[44]) ? tx_bs44_inc_in:1'b0;
   assign w_tx_inc_in[45] = (w_delay_type[45]) ? tx_bs45_inc_in:1'b0;
   assign w_tx_inc_in[46] = (w_delay_type[46]) ? tx_bs46_inc_in:1'b0;
   assign w_tx_inc_in[47] = (w_delay_type[47]) ? tx_bs47_inc_in:1'b0;
   assign w_tx_inc_in[48] = (w_delay_type[48]) ? tx_bs48_inc_in:1'b0;
   assign w_tx_inc_in[49] = (w_delay_type[49]) ? tx_bs49_inc_in:1'b0;
   assign w_tx_inc_in[50] = (w_delay_type[50]) ? tx_bs50_inc_in:1'b0;
   assign w_tx_inc_in[51] = (w_delay_type[51]) ? tx_bs51_inc_in:1'b0;
   
   // Load value for the delay, Applicable only when DELAY_TYPE is VARIABLE or  VARLOAD
   wire [51:0] w_tx_load_in;
   assign w_tx_load_in[0]  = (w_delay_type[0]) ? tx_bs0_load_in:1'b0;
   assign w_tx_load_in[1]  = (w_delay_type[1]) ? tx_bs1_load_in:1'b0;
   assign w_tx_load_in[2]  = (w_delay_type[2]) ? tx_bs2_load_in:1'b0;
   assign w_tx_load_in[3]  = (w_delay_type[3]) ? tx_bs3_load_in:1'b0;
   assign w_tx_load_in[4]  = (w_delay_type[4]) ? tx_bs4_load_in:1'b0;
   assign w_tx_load_in[5]  = (w_delay_type[5]) ? tx_bs5_load_in:1'b0;
   assign w_tx_load_in[6]  = (w_delay_type[6]) ? tx_bs6_load_in:1'b0;
   assign w_tx_load_in[7]  = (w_delay_type[7]) ? tx_bs7_load_in:1'b0;
   assign w_tx_load_in[8]  = (w_delay_type[8]) ? tx_bs8_load_in:1'b0;
   assign w_tx_load_in[9]  = (w_delay_type[9]) ? tx_bs9_load_in:1'b0;
   assign w_tx_load_in[10] = (w_delay_type[10]) ? tx_bs10_load_in:1'b0;
   assign w_tx_load_in[11] = (w_delay_type[11]) ? tx_bs11_load_in:1'b0;
   assign w_tx_load_in[12] = (w_delay_type[12]) ? tx_bs12_load_in:1'b0;
   assign w_tx_load_in[13] = (w_delay_type[13]) ? tx_bs13_load_in:1'b0;
   assign w_tx_load_in[14] = (w_delay_type[14]) ? tx_bs14_load_in:1'b0;
   assign w_tx_load_in[15] = (w_delay_type[15]) ? tx_bs15_load_in:1'b0;
   assign w_tx_load_in[16] = (w_delay_type[16]) ? tx_bs16_load_in:1'b0;
   assign w_tx_load_in[17] = (w_delay_type[17]) ? tx_bs17_load_in:1'b0;
   assign w_tx_load_in[18] = (w_delay_type[18]) ? tx_bs18_load_in:1'b0;
   assign w_tx_load_in[19] = (w_delay_type[19]) ? tx_bs19_load_in:1'b0;
   assign w_tx_load_in[20] = (w_delay_type[20]) ? tx_bs20_load_in:1'b0;
   assign w_tx_load_in[21] = (w_delay_type[21]) ? tx_bs21_load_in:1'b0;
   assign w_tx_load_in[22] = (w_delay_type[22]) ? tx_bs22_load_in:1'b0;
   assign w_tx_load_in[23] = (w_delay_type[23]) ? tx_bs23_load_in:1'b0;
   assign w_tx_load_in[24] = (w_delay_type[24]) ? tx_bs24_load_in:1'b0;
   assign w_tx_load_in[25] = (w_delay_type[25]) ? tx_bs25_load_in:1'b0;
   assign w_tx_load_in[26] = (w_delay_type[26]) ? tx_bs26_load_in:1'b0;
   assign w_tx_load_in[27] = (w_delay_type[27]) ? tx_bs27_load_in:1'b0;
   assign w_tx_load_in[28] = (w_delay_type[28]) ? tx_bs28_load_in:1'b0;
   assign w_tx_load_in[29] = (w_delay_type[29]) ? tx_bs29_load_in:1'b0;
   assign w_tx_load_in[30] = (w_delay_type[30]) ? tx_bs30_load_in:1'b0;
   assign w_tx_load_in[31] = (w_delay_type[31]) ? tx_bs31_load_in:1'b0;
   assign w_tx_load_in[32] = (w_delay_type[32]) ? tx_bs32_load_in:1'b0;
   assign w_tx_load_in[33] = (w_delay_type[33]) ? tx_bs33_load_in:1'b0;
   assign w_tx_load_in[34] = (w_delay_type[34]) ? tx_bs34_load_in:1'b0;
   assign w_tx_load_in[35] = (w_delay_type[35]) ? tx_bs35_load_in:1'b0;
   assign w_tx_load_in[36] = (w_delay_type[36]) ? tx_bs36_load_in:1'b0;
   assign w_tx_load_in[37] = (w_delay_type[37]) ? tx_bs37_load_in:1'b0;
   assign w_tx_load_in[38] = (w_delay_type[38]) ? tx_bs38_load_in:1'b0;
   assign w_tx_load_in[39] = (w_delay_type[39]) ? tx_bs39_load_in:1'b0;
   assign w_tx_load_in[40] = (w_delay_type[40]) ? tx_bs40_load_in:1'b0;
   assign w_tx_load_in[41] = (w_delay_type[41]) ? tx_bs41_load_in:1'b0;
   assign w_tx_load_in[42] = (w_delay_type[42]) ? tx_bs42_load_in:1'b0;
   assign w_tx_load_in[43] = (w_delay_type[43]) ? tx_bs43_load_in:1'b0;
   assign w_tx_load_in[44] = (w_delay_type[44]) ? tx_bs44_load_in:1'b0;
   assign w_tx_load_in[45] = (w_delay_type[45]) ? tx_bs45_load_in:1'b0;
   assign w_tx_load_in[46] = (w_delay_type[46]) ? tx_bs46_load_in:1'b0;
   assign w_tx_load_in[47] = (w_delay_type[47]) ? tx_bs47_load_in:1'b0;
   assign w_tx_load_in[48] = (w_delay_type[48]) ? tx_bs48_load_in:1'b0;
   assign w_tx_load_in[49] = (w_delay_type[49]) ? tx_bs49_load_in:1'b0;
   assign w_tx_load_in[50] = (w_delay_type[50]) ? tx_bs50_load_in:1'b0;
   assign w_tx_load_in[51] = (w_delay_type[51]) ? tx_bs51_load_in:1'b0;
   // CE
   wire [51:0] w_tx_ce_in; 
   assign w_tx_ce_in[0]  = (w_delay_type[0]) ? tx_bs0_ce_in:1'b0;
   assign w_tx_ce_in[1]  = (w_delay_type[1]) ? tx_bs1_ce_in:1'b0;
   assign w_tx_ce_in[2]  = (w_delay_type[2]) ? tx_bs2_ce_in:1'b0;
   assign w_tx_ce_in[3]  = (w_delay_type[3]) ? tx_bs3_ce_in:1'b0;
   assign w_tx_ce_in[4]  = (w_delay_type[4]) ? tx_bs4_ce_in:1'b0;
   assign w_tx_ce_in[5]  = (w_delay_type[5]) ? tx_bs5_ce_in:1'b0;
   assign w_tx_ce_in[6]  = (w_delay_type[6]) ? tx_bs6_ce_in:1'b0;
   assign w_tx_ce_in[7]  = (w_delay_type[7]) ? tx_bs7_ce_in:1'b0;
   assign w_tx_ce_in[8]  = (w_delay_type[8]) ? tx_bs8_ce_in:1'b0;
   assign w_tx_ce_in[9]  = (w_delay_type[9]) ? tx_bs9_ce_in:1'b0;
   assign w_tx_ce_in[10] = (w_delay_type[10]) ? tx_bs10_ce_in:1'b0;
   assign w_tx_ce_in[11] = (w_delay_type[11]) ? tx_bs11_ce_in:1'b0;
   assign w_tx_ce_in[12] = (w_delay_type[12]) ? tx_bs12_ce_in:1'b0;
   assign w_tx_ce_in[13] = (w_delay_type[13]) ? tx_bs13_ce_in:1'b0;
   assign w_tx_ce_in[14] = (w_delay_type[14]) ? tx_bs14_ce_in:1'b0;
   assign w_tx_ce_in[15] = (w_delay_type[15]) ? tx_bs15_ce_in:1'b0;
   assign w_tx_ce_in[16] = (w_delay_type[16]) ? tx_bs16_ce_in:1'b0;
   assign w_tx_ce_in[17] = (w_delay_type[17]) ? tx_bs17_ce_in:1'b0;
   assign w_tx_ce_in[18] = (w_delay_type[18]) ? tx_bs18_ce_in:1'b0;
   assign w_tx_ce_in[19] = (w_delay_type[19]) ? tx_bs19_ce_in:1'b0;
   assign w_tx_ce_in[20] = (w_delay_type[20]) ? tx_bs20_ce_in:1'b0;
   assign w_tx_ce_in[21] = (w_delay_type[21]) ? tx_bs21_ce_in:1'b0;
   assign w_tx_ce_in[22] = (w_delay_type[22]) ? tx_bs22_ce_in:1'b0;
   assign w_tx_ce_in[23] = (w_delay_type[23]) ? tx_bs23_ce_in:1'b0;
   assign w_tx_ce_in[24] = (w_delay_type[24]) ? tx_bs24_ce_in:1'b0;
   assign w_tx_ce_in[25] = (w_delay_type[25]) ? tx_bs25_ce_in:1'b0;
   assign w_tx_ce_in[26] = (w_delay_type[26]) ? tx_bs26_ce_in:1'b0;
   assign w_tx_ce_in[27] = (w_delay_type[27]) ? tx_bs27_ce_in:1'b0;
   assign w_tx_ce_in[28] = (w_delay_type[28]) ? tx_bs28_ce_in:1'b0;
   assign w_tx_ce_in[29] = (w_delay_type[29]) ? tx_bs29_ce_in:1'b0;
   assign w_tx_ce_in[30] = (w_delay_type[30]) ? tx_bs30_ce_in:1'b0;
   assign w_tx_ce_in[31] = (w_delay_type[31]) ? tx_bs31_ce_in:1'b0;
   assign w_tx_ce_in[32] = (w_delay_type[32]) ? tx_bs32_ce_in:1'b0;
   assign w_tx_ce_in[33] = (w_delay_type[33]) ? tx_bs33_ce_in:1'b0;
   assign w_tx_ce_in[34] = (w_delay_type[34]) ? tx_bs34_ce_in:1'b0;
   assign w_tx_ce_in[35] = (w_delay_type[35]) ? tx_bs35_ce_in:1'b0;
   assign w_tx_ce_in[36] = (w_delay_type[36]) ? tx_bs36_ce_in:1'b0;
   assign w_tx_ce_in[37] = (w_delay_type[37]) ? tx_bs37_ce_in:1'b0;
   assign w_tx_ce_in[38] = (w_delay_type[38]) ? tx_bs38_ce_in:1'b0;
   assign w_tx_ce_in[39] = (w_delay_type[39]) ? tx_bs39_ce_in:1'b0;
   assign w_tx_ce_in[40] = (w_delay_type[40]) ? tx_bs40_ce_in:1'b0;
   assign w_tx_ce_in[41] = (w_delay_type[41]) ? tx_bs41_ce_in:1'b0;
   assign w_tx_ce_in[42] = (w_delay_type[42]) ? tx_bs42_ce_in:1'b0;
   assign w_tx_ce_in[43] = (w_delay_type[43]) ? tx_bs43_ce_in:1'b0;
   assign w_tx_ce_in[44] = (w_delay_type[44]) ? tx_bs44_ce_in:1'b0;
   assign w_tx_ce_in[45] = (w_delay_type[45]) ? tx_bs45_ce_in:1'b0;
   assign w_tx_ce_in[46] = (w_delay_type[46]) ? tx_bs46_ce_in:1'b0;
   assign w_tx_ce_in[47] = (w_delay_type[47]) ? tx_bs47_ce_in:1'b0;
   assign w_tx_ce_in[48] = (w_delay_type[48]) ? tx_bs48_ce_in:1'b0;
   assign w_tx_ce_in[49] = (w_delay_type[49]) ? tx_bs49_ce_in:1'b0;
   assign w_tx_ce_in[50] = (w_delay_type[50]) ? tx_bs50_ce_in:1'b0;
   assign w_tx_ce_in[51] = (w_delay_type[51]) ? tx_bs51_ce_in:1'b0;
   
   // Cntvalue in
   wire [8:0] w_tx_cntvaluein [51:0];
   assign w_tx_cntvaluein[0]  = (C_TX_DELAY_TYPE0 == 2'b10) ? tx_bs0_cntvaluein:9'b0;
   assign w_tx_cntvaluein[1]  = (C_TX_DELAY_TYPE1 == 2'b10) ? tx_bs1_cntvaluein:9'b0;
   assign w_tx_cntvaluein[2]  = (C_TX_DELAY_TYPE2 == 2'b10) ? tx_bs2_cntvaluein:9'b0;
   assign w_tx_cntvaluein[3]  = (C_TX_DELAY_TYPE3 == 2'b10) ? tx_bs3_cntvaluein:9'b0;
   assign w_tx_cntvaluein[4]  = (C_TX_DELAY_TYPE4 == 2'b10) ? tx_bs4_cntvaluein:9'b0;
   assign w_tx_cntvaluein[5]  = (C_TX_DELAY_TYPE5 == 2'b10) ? tx_bs5_cntvaluein:9'b0;
   assign w_tx_cntvaluein[6]  = (C_TX_DELAY_TYPE6 == 2'b10) ? tx_bs6_cntvaluein:9'b0;
   assign w_tx_cntvaluein[7]  = (C_TX_DELAY_TYPE7 == 2'b10) ? tx_bs7_cntvaluein:9'b0;
   assign w_tx_cntvaluein[8]  = (C_TX_DELAY_TYPE8 == 2'b10) ? tx_bs8_cntvaluein:9'b0;
   assign w_tx_cntvaluein[9]  = (C_TX_DELAY_TYPE9 == 2'b10) ? tx_bs9_cntvaluein:9'b0;
   assign w_tx_cntvaluein[10] = (C_TX_DELAY_TYPE10 == 2'b10) ? tx_bs10_cntvaluein:9'b0;
   assign w_tx_cntvaluein[11] = (C_TX_DELAY_TYPE11 == 2'b10) ? tx_bs11_cntvaluein:9'b0;
   assign w_tx_cntvaluein[12] = (C_TX_DELAY_TYPE12 == 2'b10) ? tx_bs12_cntvaluein:9'b0;
   assign w_tx_cntvaluein[13] = (C_TX_DELAY_TYPE13 == 2'b10) ? tx_bs13_cntvaluein:9'b0;
   assign w_tx_cntvaluein[14] = (C_TX_DELAY_TYPE14 == 2'b10) ? tx_bs14_cntvaluein:9'b0;
   assign w_tx_cntvaluein[15] = (C_TX_DELAY_TYPE15 == 2'b10) ? tx_bs15_cntvaluein:9'b0;
   assign w_tx_cntvaluein[16] = (C_TX_DELAY_TYPE16 == 2'b10) ? tx_bs16_cntvaluein:9'b0;
   assign w_tx_cntvaluein[17] = (C_TX_DELAY_TYPE17 == 2'b10) ? tx_bs17_cntvaluein:9'b0;
   assign w_tx_cntvaluein[18] = (C_TX_DELAY_TYPE18 == 2'b10) ? tx_bs18_cntvaluein:9'b0;
   assign w_tx_cntvaluein[19] = (C_TX_DELAY_TYPE19 == 2'b10) ? tx_bs19_cntvaluein:9'b0;
   assign w_tx_cntvaluein[20] = (C_TX_DELAY_TYPE20 == 2'b10) ? tx_bs20_cntvaluein:9'b0;
   assign w_tx_cntvaluein[21] = (C_TX_DELAY_TYPE21 == 2'b10) ? tx_bs21_cntvaluein:9'b0;
   assign w_tx_cntvaluein[22] = (C_TX_DELAY_TYPE22 == 2'b10) ? tx_bs22_cntvaluein:9'b0;
   assign w_tx_cntvaluein[23] = (C_TX_DELAY_TYPE23 == 2'b10) ? tx_bs23_cntvaluein:9'b0;
   assign w_tx_cntvaluein[24] = (C_TX_DELAY_TYPE24 == 2'b10) ? tx_bs24_cntvaluein:9'b0;
   assign w_tx_cntvaluein[25] = (C_TX_DELAY_TYPE25 == 2'b10) ? tx_bs25_cntvaluein:9'b0;
   assign w_tx_cntvaluein[26] = (C_TX_DELAY_TYPE26 == 2'b10) ? tx_bs26_cntvaluein:9'b0;
   assign w_tx_cntvaluein[27] = (C_TX_DELAY_TYPE27 == 2'b10) ? tx_bs27_cntvaluein:9'b0;
   assign w_tx_cntvaluein[28] = (C_TX_DELAY_TYPE28 == 2'b10) ? tx_bs28_cntvaluein:9'b0;
   assign w_tx_cntvaluein[29] = (C_TX_DELAY_TYPE29 == 2'b10) ? tx_bs29_cntvaluein:9'b0;
   assign w_tx_cntvaluein[30] = (C_TX_DELAY_TYPE30 == 2'b10) ? tx_bs30_cntvaluein:9'b0;
   assign w_tx_cntvaluein[31] = (C_TX_DELAY_TYPE31 == 2'b10) ? tx_bs31_cntvaluein:9'b0;
   assign w_tx_cntvaluein[32] = (C_TX_DELAY_TYPE32 == 2'b10) ? tx_bs32_cntvaluein:9'b0;
   assign w_tx_cntvaluein[33] = (C_TX_DELAY_TYPE33 == 2'b10) ? tx_bs33_cntvaluein:9'b0;
   assign w_tx_cntvaluein[34] = (C_TX_DELAY_TYPE34 == 2'b10) ? tx_bs34_cntvaluein:9'b0;
   assign w_tx_cntvaluein[35] = (C_TX_DELAY_TYPE35 == 2'b10) ? tx_bs35_cntvaluein:9'b0;
   assign w_tx_cntvaluein[36] = (C_TX_DELAY_TYPE36 == 2'b10) ? tx_bs36_cntvaluein:9'b0;
   assign w_tx_cntvaluein[37] = (C_TX_DELAY_TYPE37 == 2'b10) ? tx_bs37_cntvaluein:9'b0;
   assign w_tx_cntvaluein[38] = (C_TX_DELAY_TYPE38 == 2'b10) ? tx_bs38_cntvaluein:9'b0;
   assign w_tx_cntvaluein[39] = (C_TX_DELAY_TYPE39 == 2'b10) ? tx_bs39_cntvaluein:9'b0;
   assign w_tx_cntvaluein[40] = (C_TX_DELAY_TYPE40 == 2'b10) ? tx_bs40_cntvaluein:9'b0;
   assign w_tx_cntvaluein[41] = (C_TX_DELAY_TYPE41 == 2'b10) ? tx_bs41_cntvaluein:9'b0;
   assign w_tx_cntvaluein[42] = (C_TX_DELAY_TYPE42 == 2'b10) ? tx_bs42_cntvaluein:9'b0;
   assign w_tx_cntvaluein[43] = (C_TX_DELAY_TYPE43 == 2'b10) ? tx_bs43_cntvaluein:9'b0;
   assign w_tx_cntvaluein[44] = (C_TX_DELAY_TYPE44 == 2'b10) ? tx_bs44_cntvaluein:9'b0;
   assign w_tx_cntvaluein[45] = (C_TX_DELAY_TYPE45 == 2'b10) ? tx_bs45_cntvaluein:9'b0;
   assign w_tx_cntvaluein[46] = (C_TX_DELAY_TYPE46 == 2'b10) ? tx_bs46_cntvaluein:9'b0;
   assign w_tx_cntvaluein[47] = (C_TX_DELAY_TYPE47 == 2'b10) ? tx_bs47_cntvaluein:9'b0;
   assign w_tx_cntvaluein[48] = (C_TX_DELAY_TYPE48 == 2'b10) ? tx_bs48_cntvaluein:9'b0;
   assign w_tx_cntvaluein[49] = (C_TX_DELAY_TYPE49 == 2'b10) ? tx_bs49_cntvaluein:9'b0;
   assign w_tx_cntvaluein[50] = (C_TX_DELAY_TYPE50 == 2'b10) ? tx_bs50_cntvaluein:9'b0;
   assign w_tx_cntvaluein[51] = (C_TX_DELAY_TYPE51 == 2'b10) ? tx_bs51_cntvaluein:9'b0;
   
   // Cnt value out
   wire [8:0] w_tx_cntvalueout [51:0];
   assign tx_bs0_cntvalueout   = (C_TX_DELAY_TYPE0 == 2'b10) ? w_tx_cntvalueout[0]:9'b0;   
   assign tx_bs1_cntvalueout   = (C_TX_DELAY_TYPE1 == 2'b10) ? w_tx_cntvalueout[1]:9'b0;
   assign tx_bs2_cntvalueout   = (C_TX_DELAY_TYPE2 == 2'b10) ? w_tx_cntvalueout[2]:9'b0;
   assign tx_bs3_cntvalueout   = (C_TX_DELAY_TYPE3 == 2'b10) ? w_tx_cntvalueout[3]:9'b0;
   assign tx_bs4_cntvalueout   = (C_TX_DELAY_TYPE4 == 2'b10) ? w_tx_cntvalueout[4]:9'b0;
   assign tx_bs5_cntvalueout   = (C_TX_DELAY_TYPE5 == 2'b10) ? w_tx_cntvalueout[5]:9'b0;
   assign tx_bs6_cntvalueout   = (C_TX_DELAY_TYPE6 == 2'b10) ? w_tx_cntvalueout[6]:9'b0;
   assign tx_bs7_cntvalueout   = (C_TX_DELAY_TYPE7 == 2'b10) ? w_tx_cntvalueout[7]:9'b0;
   assign tx_bs8_cntvalueout   = (C_TX_DELAY_TYPE8 == 2'b10) ? w_tx_cntvalueout[8]:9'b0;
   assign tx_bs9_cntvalueout   = (C_TX_DELAY_TYPE9 == 2'b10) ? w_tx_cntvalueout[9]:9'b0;
   assign tx_bs10_cntvalueout  = (C_TX_DELAY_TYPE10 == 2'b10) ? w_tx_cntvalueout[10]:9'b0;
   assign tx_bs11_cntvalueout  = (C_TX_DELAY_TYPE11 == 2'b10) ? w_tx_cntvalueout[11]:9'b0;
   assign tx_bs12_cntvalueout  = (C_TX_DELAY_TYPE12 == 2'b10) ? w_tx_cntvalueout[12]:9'b0;
   assign tx_bs13_cntvalueout  = (C_TX_DELAY_TYPE13 == 2'b10) ? w_tx_cntvalueout[13]:9'b0;
   assign tx_bs14_cntvalueout  = (C_TX_DELAY_TYPE14 == 2'b10) ? w_tx_cntvalueout[14]:9'b0;
   assign tx_bs15_cntvalueout  = (C_TX_DELAY_TYPE15 == 2'b10) ? w_tx_cntvalueout[15]:9'b0;
   assign tx_bs16_cntvalueout  = (C_TX_DELAY_TYPE16 == 2'b10) ? w_tx_cntvalueout[16]:9'b0;
   assign tx_bs17_cntvalueout  = (C_TX_DELAY_TYPE17 == 2'b10) ? w_tx_cntvalueout[17]:9'b0;
   assign tx_bs18_cntvalueout  = (C_TX_DELAY_TYPE18 == 2'b10) ? w_tx_cntvalueout[18]:9'b0;
   assign tx_bs19_cntvalueout  = (C_TX_DELAY_TYPE19 == 2'b10) ? w_tx_cntvalueout[19]:9'b0;
   assign tx_bs20_cntvalueout  = (C_TX_DELAY_TYPE20 == 2'b10) ? w_tx_cntvalueout[20]:9'b0;
   assign tx_bs21_cntvalueout  = (C_TX_DELAY_TYPE21 == 2'b10) ? w_tx_cntvalueout[21]:9'b0;
   assign tx_bs22_cntvalueout  = (C_TX_DELAY_TYPE22 == 2'b10) ? w_tx_cntvalueout[22]:9'b0;
   assign tx_bs23_cntvalueout  = (C_TX_DELAY_TYPE23 == 2'b10) ? w_tx_cntvalueout[23]:9'b0;
   assign tx_bs24_cntvalueout  = (C_TX_DELAY_TYPE24 == 2'b10) ? w_tx_cntvalueout[24]:9'b0;
   assign tx_bs25_cntvalueout  = (C_TX_DELAY_TYPE25 == 2'b10) ? w_tx_cntvalueout[25]:9'b0;
   assign tx_bs26_cntvalueout  = (C_TX_DELAY_TYPE26 == 2'b10) ? w_tx_cntvalueout[26]:9'b0;
   assign tx_bs27_cntvalueout  = (C_TX_DELAY_TYPE27 == 2'b10) ? w_tx_cntvalueout[27]:9'b0;
   assign tx_bs28_cntvalueout  = (C_TX_DELAY_TYPE28 == 2'b10) ? w_tx_cntvalueout[28]:9'b0;
   assign tx_bs29_cntvalueout  = (C_TX_DELAY_TYPE29 == 2'b10) ? w_tx_cntvalueout[29]:9'b0;
   assign tx_bs30_cntvalueout  = (C_TX_DELAY_TYPE30 == 2'b10) ? w_tx_cntvalueout[30]:9'b0;
   assign tx_bs31_cntvalueout  = (C_TX_DELAY_TYPE31 == 2'b10) ? w_tx_cntvalueout[31]:9'b0;
   assign tx_bs32_cntvalueout  = (C_TX_DELAY_TYPE32 == 2'b10) ? w_tx_cntvalueout[32]:9'b0;
   assign tx_bs33_cntvalueout  = (C_TX_DELAY_TYPE33 == 2'b10) ? w_tx_cntvalueout[33]:9'b0;
   assign tx_bs34_cntvalueout  = (C_TX_DELAY_TYPE34 == 2'b10) ? w_tx_cntvalueout[34]:9'b0;
   assign tx_bs35_cntvalueout  = (C_TX_DELAY_TYPE35 == 2'b10) ? w_tx_cntvalueout[35]:9'b0;
   assign tx_bs36_cntvalueout  = (C_TX_DELAY_TYPE36 == 2'b10) ? w_tx_cntvalueout[36]:9'b0;
   assign tx_bs37_cntvalueout  = (C_TX_DELAY_TYPE37 == 2'b10) ? w_tx_cntvalueout[37]:9'b0;
   assign tx_bs38_cntvalueout  = (C_TX_DELAY_TYPE38 == 2'b10) ? w_tx_cntvalueout[38]:9'b0;
   assign tx_bs39_cntvalueout  = (C_TX_DELAY_TYPE39 == 2'b10) ? w_tx_cntvalueout[39]:9'b0;
   assign tx_bs40_cntvalueout  = (C_TX_DELAY_TYPE40 == 2'b10) ? w_tx_cntvalueout[40]:9'b0;
   assign tx_bs41_cntvalueout  = (C_TX_DELAY_TYPE41 == 2'b10) ? w_tx_cntvalueout[41]:9'b0;
   assign tx_bs42_cntvalueout  = (C_TX_DELAY_TYPE42 == 2'b10) ? w_tx_cntvalueout[42]:9'b0;
   assign tx_bs43_cntvalueout  = (C_TX_DELAY_TYPE43 == 2'b10) ? w_tx_cntvalueout[43]:9'b0;
   assign tx_bs44_cntvalueout  = (C_TX_DELAY_TYPE44 == 2'b10) ? w_tx_cntvalueout[44]:9'b0;
   assign tx_bs45_cntvalueout  = (C_TX_DELAY_TYPE45 == 2'b10) ? w_tx_cntvalueout[45]:9'b0;
   assign tx_bs46_cntvalueout  = (C_TX_DELAY_TYPE46 == 2'b10) ? w_tx_cntvalueout[46]:9'b0;
   assign tx_bs47_cntvalueout  = (C_TX_DELAY_TYPE47 == 2'b10) ? w_tx_cntvalueout[47]:9'b0;
   assign tx_bs48_cntvalueout  = (C_TX_DELAY_TYPE48 == 2'b10) ? w_tx_cntvalueout[48]:9'b0;
   assign tx_bs49_cntvalueout  = (C_TX_DELAY_TYPE49 == 2'b10) ? w_tx_cntvalueout[49]:9'b0;
   assign tx_bs50_cntvalueout  = (C_TX_DELAY_TYPE50 == 2'b10) ? w_tx_cntvalueout[50]:9'b0;
   assign tx_bs51_cntvalueout  = (C_TX_DELAY_TYPE51 == 2'b10) ? w_tx_cntvalueout[51]:9'b0;
   
       
   // ---------------------------------------------------------------
   // TX BITSLICE 0 Instantiation 
   // ---------------------------------------------------------------
   
   generate 
   genvar bs;
       for (bs = 0; bs <= 51; bs=bs+1) 
       begin : TX_BS
   
       assign w_tx_D_data_from_fabric_in[bs]  =  (C_SERIALIZATION_FACTOR ==4) ? {4'b0,tx_bs_D_data_from_fabric_in[bs]} : tx_bs_D_data_from_fabric_in[bs];
   
       localparam C_OUTPUT_PHASE_90_SET = (C_CLK_FWD_PHASE == 0) ? "FALSE" : "TRUE";
       localparam C_D_OUTPUT_PHASE_90_SET = (C_TX_DATA_PHASE == 0) ? "FALSE" : "TRUE";
   
       if (C_TX_BITSLICE_EN[bs] == 1) begin
         TX_BITSLICE #(                             
           .DATA_WIDTH           (C_SERIALIZATION_FACTOR),
           .DELAY_FORMAT         (C_TX_DELAY_FORMAT),
           .DELAY_TYPE           ((C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] ==2'b00) ? "FIXED" : (C_TX_DELAY_TYPE[((bs+1)*2 -1):bs*2] == 2'b01) ? "VARIABLE" : "VAR_LOAD"),
           //.DELAY_VALUE          (C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12]),
           .DELAY_VALUE          (((C_CLK_FWD_ENABLE[bs] == 1 && C_OUTPUT_PHASE_90_SET == "TRUE") || (C_CLK_FWD_ENABLE[bs] == 0 && C_D_OUTPUT_PHASE_90_SET == "TRUE")) ? 'd0 : (C_TX_DELAY_VALUE[((bs+1)*12 -1):bs*12])),
   	   .INIT                 (C_BS_INIT_VAL[bs]),                // Default value for the attribute
   	   .ENABLE_PRE_EMPHASIS  (((C_DIFF_EN[bs] == 1'b1 && (C_TX_PREEMPHASIS_D == "RDRV_240" || C_TX_PREEMPHASIS_D == "TRUE")) || (C_DIFF_EN[bs] == 1'b0 && C_TX_PREEMPHASIS_S == "RDRV_240")) ? "TRUE" : "FALSE"), 
           .IS_CLK_INVERTED      (C_TX_IS_CLK_INVERTED),     // Default value for the attribute
   	   .IS_RST_DLY_INVERTED  (C_TX_IS_RST_DLY_INVERTED), // Default value for the attribute
   	   .IS_RST_INVERTED      (C_TX_IS_RST_INVERTED),     // Default value for the attribute
           .OUTPUT_PHASE_90      ((C_CLK_FWD_ENABLE[bs] == 1) ? C_OUTPUT_PHASE_90_SET : C_D_OUTPUT_PHASE_90_SET),
           .REFCLK_FREQUENCY     (C_TX_REFCLK_FREQ),
           .TBYTE_CTL            ((C_TEMPLATE == 1 || C_DATA_TRI == 1) ? "T" : "TBYTE_IN"),
           .SIM_DEVICE           (C_SIM_DEVICE),
   	   .SIM_VERSION          (C_SIM_VERSION),
           .NATIVE_ODELAY_BYPASS (C_TX_NATIVE_ODELAY_BYPASS),
           .UPDATE_MODE          ("ASYNC")
        )
        u_tx_bitslice_if_bs
        (
           .TX_BIT_CTRL_OUT(tx_bs_tx_bit_ctrl_out[bs]),
           .RX_BIT_CTRL_OUT(tx_bs_rx_bit_ctrl_out[bs]),
           .TX_BIT_CTRL_IN(tx_bs_tx_bit_ctrl_in[((bs+1)*40 -1):bs*40]),
           .RX_BIT_CTRL_IN(tx_bs_rx_bit_ctrl_in[((bs+1)*40 -1):bs*40]),
           .INC(w_tx_inc_in[bs]),
           .LOAD(w_tx_load_in[bs]),
           .RST_DLY(tx_bs_rst_dly_in[bs]),
           .CE(w_tx_ce_in[bs]),
           .CLK(tx_bs_clk_in),
           .CNTVALUEOUT(w_tx_cntvalueout[bs]),
           .CNTVALUEIN(w_tx_cntvaluein[bs]),
           .O(w_tx_O_data_out[bs]),
           .T_OUT(tx_bs_t_out[bs]),
           .D(w_tx_D_data_from_fabric_in[bs]),
           .EN_VTC(w_tx_en_vtc_in[bs]),
           .RST(tx_bs_rst_in[bs]),
           .T(tx_bs_t_in[bs]),
           .TBYTE_IN(C_EN_TX_TRI == 1 && C_DATA_TRI == 0 ?tx_bs_tbyte_in[bs]  : 1'b0)
        );
        end
       end // for (bs=0, bs <= 51, bs=bs+1)
   endgenerate
   
   endmodule
   


// (c) Copyright 2013 - 2015 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.


`timescale 1ps/1ps

   module high_speed_selectio_wiz_v3_5_1_bs_top #(

      // Common parameters
      parameter            C_SERIALIZATION_FACTOR             = 4,  // Serialization factor
      parameter            C_SIM_DEVICE                       = "ULTRASCALE", 
      parameter            C_SIM_VERSION                      = 1.0,
      parameter            C_PLL0_RX_EXTERNAL_CLK_TO_DATA     = 1,
 
      parameter [51:0]     C_RX_PIN_EN                        =  52'd0, 
      parameter [51:0]     C_DIFF_EN                          =  52'd0,  // Indicates whether the pin is differential or single ended
      parameter            C_TEMPLATE                         =  0,      
      parameter            C_ENABLE_N_PINS                    =  1,      
      // TX bitslice parameters
      parameter            C_CLK_FWD_BITSLICE_NO   =  0,      // Clock Forward bitslice #
      parameter            C_CLK_FWD_PHASE         =  0,      // Clock forward phase  
      parameter            C_TX_DATA_PHASE         =  0,      // TX Data phase  
      parameter [51:0]     C_CLK_FWD_ENABLE        =  52'd0,  // Clock forward phase  
      parameter [51:0]     C_TX_BITSLICE_EN        =  52'd0,  // Bitslice # for which TX bitslice should be enabled 
      parameter [51:0]     C_BS_INIT_VAL           =  52'd0,
      parameter            C_TX_DELAY_FORMAT       = "TIME",
      parameter            C_TX_IS_CLK_INVERTED    =  1'b0,
      parameter            C_TX_IS_RST_DLY_INVERTED    =  1'b0,
      parameter            C_TX_IS_RST_INVERTED        =  1'b0,
      //parameter            C_TX_UPDATE_MODE            =  "ASYNC",
      parameter            C_TX_NATIVE_ODELAY_BYPASS   = "FALSE",

      // TX/Bidir TX bitslice parameters
      parameter            C_TX_PREEMPHASIS_S      =  "NONE", // Pre emphasis enablement
      parameter            C_TX_PREEMPHASIS_D      =  "NONE", // Pre emphasis enablement
      parameter  [1:0]     C_TX_DELAY_TYPE0        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE1        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE2        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE3        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE4        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE5        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE6        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE7        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE8        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE9        =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE10       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE11       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE12       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE13       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE14       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE15       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE16       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE17       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE18       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE19       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE20       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE21       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE22       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE23       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE24       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE25       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE26       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE27       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE28       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE29       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE30       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE31       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE32       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE33       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE34       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE35       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE36       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE37       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE38       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE39       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE40       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE41       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE42       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE43       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE44       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE45       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE46       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE47       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE48       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE49       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE50       =  2'b00,  // TX delay type
      parameter  [1:0]     C_TX_DELAY_TYPE51       =  2'b00,  // TX delay type
      parameter  [11:0]    C_TX_DELAY_VALUE0       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE1       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE2       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE3       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE4       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE5       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE6       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE7       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE8       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE9       =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE10      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE11      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE12      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE13      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE14      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE15      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE16      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE17      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE18      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE19      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE20      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE21      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE22      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE23      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE24      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE25      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE26      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE27      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE28      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE29      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE30      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE31      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE32      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE33      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE34      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE35      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE36      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE37      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE38      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE39      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE40      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE41      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE42      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE43      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE44      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE45      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE46      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE47      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE48      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE49      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE50      =    'd0,  // TX delay value
      parameter  [11:0]    C_TX_DELAY_VALUE51      =    'd0,  // TX delay value
      parameter            C_TX_REFCLK_FREQ        =    200,  // TX clock frequency
      
      // Bidir parameters
      parameter [51:0]     C_BIDIR_BITSLICE_EN     =  52'd0,  //  Bitslice # for which Bidir bitslice should be enabled 
      
      // Rx parameters
      parameter            C_SERIAL_MODE           =  "FALSE", // Serial mode
      parameter [7:0]      C_RX_BITSLICE0_EN       =  8'b0,   // RX bitslice0 enablement for each nibble 
      parameter [51:0]     C_RX_BITSLICE_EN        =  52'b0,  // Bitslice # for which RX bitslice should be enabled 
      parameter [15:0]     C_RX_STROBE_EN          =  16'b0,  // Strobe enable position for RX bitslice
      parameter            C_RX_DELAY_CASCADE      =  1'b0,   // Cascased RX delay enablement  
      parameter            C_RX_DELAY_FORMAT            = "TIME",
      parameter            C_RX_FIFO_SYNC_MODE          = "FALSE",
      parameter            C_RX_IS_CLK_INVERTED         =  1'b0,
      parameter            C_RX_IS_CLK_EXT_INVERTED     =  1'b0,
      parameter            C_RX_IS_RST_DLY_EXT_INVERTED = 1'b0,
      parameter            C_RX_IS_RST_DLY_INVERTED     = 1'b0,
      parameter            C_RX_IS_RST_INVERTED         = 1'b0,
      //parameter            C_RX_UPDATE_MODE             = "ASYNC",
      //parameter            C_RX_UPDATE_MODE_EXT         = "ASYNC",

      parameter  [1:0]     C_RX_DELAY_TYPE0        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE1        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE2        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE3        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE4        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE5        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE6        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE7        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE8        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE9        =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE10       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE11       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE12       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE13       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE14       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE15       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE16       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE17       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE18       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE19       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE20       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE21       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE22       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE23       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE24       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE25       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE26       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE27       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE28       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE29       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE30       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE31       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE32       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE33       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE34       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE35       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE36       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE37       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE38       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE39       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE40       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE41       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE42       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE43       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE44       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE45       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE46       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE47       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE48       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE49       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE50       =  2'b00,  // RX delay type
      parameter  [1:0]     C_RX_DELAY_TYPE51       =  2'b00,  // RX delay type
      parameter  [11:0]    C_RX_DELAY_VALUE0       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE1       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE2       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE3       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE4       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE5       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE6       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE7       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE8       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE9       =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE10      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE11      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE12      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE13      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE14      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE15      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE16      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE17      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE18      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE19      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE20      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE21      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE22      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE23      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE24      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE25      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE26      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE27      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE28      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE29      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE30      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE31      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE32      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE33      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE34      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE35      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE36      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE37      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE38      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE39      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE40      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE41      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE42      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE43      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE44      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE45      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE46      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE47      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE48      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE49      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE50      =    'd0,  // RX delay value
      parameter  [11:0]    C_RX_DELAY_VALUE51      =    'd0,  // RX delay value
      
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT0   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT1   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT2   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT3   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT4   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT5   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT6   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT7   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT8   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT9   =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT10  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT11  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT12  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT13  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT14  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT15  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT16  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT17  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT18  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT19  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT20  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT21  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT22  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT23  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT24  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT25  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT26  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT27  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT28  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT29  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT30  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT31  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT32  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT33  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT34  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT35  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT36  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT37  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT38  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT39  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT40  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT41  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT42  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT43  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT44  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT45  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT46  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT47  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT48  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT49  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT50  =    'd0,  // RX extended delay value
      parameter  [11:0]    C_RX_DELAY_VALUE_EXT51  =    'd0,  // RX extended delay value
      parameter            C_RX_REFCLK_FREQ        =    200,  // RX clock frequency
      parameter            C_FIFO_SYNC_MODE        =   1'b0,  // RX clock frequency
      
      // RX/Bidir-RX parameters
      parameter [7:0]      C_BITSLIP_VAL           =  8'h00,  // Bitslip value
      parameter            C_BITSLIP_MODE          =  "SLIP_PER_BIT",  // Bitslip mode
      parameter            C_ENABLE_BITSLIP        =  0,      // Enable Bitslip
      parameter            C_ENABLE_DATA_BITSLIP   =  0,      
      		
      // Fifo Write clock parameters		
      parameter            C_FIFO_WR_CLK_EN        =   1'b1,  // Enable Fifo Write Clock Port
      
      // Bidir Parameters
      parameter         C_EN_TX_TRI                    =   0,     // Tx   Tristate
      parameter         C_DATA_TRI                     =   0,     // Data   Tristate
      parameter         C_CLOCK_TRI                    =   0,     // Clock  Tristate
      parameter         C_BIDIR_FIFO_SYNC_MODE         = "FALSE",
      parameter         C_BIDIR_RX_DELAY_FORMAT        = "TIME",
      parameter         C_BIDIR_TX_DELAY_FORMAT        = "TIME",
      //parameter         C_BIDIR_RX_UPDATE_MODE         = "ASYNC",
      //parameter         C_BIDIR_TX_UPDATE_MODE         = "ASYNC",
      parameter         C_BIDIR_IS_RX_CLK_INVERTED     = 1'b0,
      parameter         C_BIDIR_IS_RX_RST_DLY_INVERTED = 1'b0,
      parameter         C_BIDIR_IS_RX_RST_INVERTED     = 1'b0,
      parameter         C_BIDIR_IS_TX_CLK_INVERTED     = 1'b0,
      parameter         C_BIDIR_IS_TX_RST_DLY_INVERTED = 1'b0,
      parameter         C_BIDIR_IS_TX_RST_INVERTED     = 1'b0,

      
      // TX BITSLICE TRI Parameters
      parameter [7:0]      TX_BITSLICE_TRI_EN              = 8'b0000_0000, // TX Bitslice tri en
      parameter            C_TX_TRI_DELAY_FORMAT           =  "TIME",
      parameter            C_TX_TRI_NATIVE_ODELAY_BYPASS   = "FALSE",
      parameter            C_TX_TRI_INIT                   =  1'b1,
      parameter            C_TX_TRI_IS_CLK_INVERTED        =  1'b0,
      parameter            C_TX_TRI_IS_RST_DLY_INVERTED    =  1'b0,
      parameter            C_TX_TRI_IS_RST_INVERTED        =  1'b0,
      //parameter            C_TX_TRI_UPDATE_MODE            =  "ASYNC",
      parameter            C_TX_TRI_OUTPUT_PHASE_90        =  "FALSE",

      parameter [1:0]      C_TX_TRI_DELAY_TYPE0    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE1    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE2    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE3    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE4    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE5    =  2'b00,       // TX delay type        
      parameter [1:0]      C_TX_TRI_DELAY_TYPE6    =  2'b00,       // TX delay type
      parameter [1:0]      C_TX_TRI_DELAY_TYPE7    =  2'b00,       // TX delay type     
      
      parameter [11:0]     C_TX_TRI_DELAY_VALUE0   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE1   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE2   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE3   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE4   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE5   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE6   =    'd0,       // TX delay value
      parameter [11:0]     C_TX_TRI_DELAY_VALUE7   =    'd0,       // TX delay value
      
      // For knowing strobe propagation this is used in RX and RX tx bitslices
      parameter            C_NIB5_EN_CLK_TO_EXT_NORTH        =   1'b1,   // 6th Nibble 
      parameter            C_NIB5_EN_CLK_TO_EXT_SOUTH        =   1'b1,   // 3rd Nibble 
      parameter            C_NIB4_EN_CLK_TO_EXT_NORTH        =   1'b1,   // 5th Nibble 
      parameter            C_NIB4_EN_CLK_TO_EXT_SOUTH        =   1'b1,   // 2nd Nibble
      parameter            C_NIB3_EN_CLK_TO_EXT_NORTH        =   1'b1,   // 5th Nibble 
      parameter            C_NIB3_EN_CLK_TO_EXT_SOUTH        =   1'b1,   // 1st Nibble
      parameter            C_NIB2_EN_CLK_TO_EXT_NORTH        =   1'b1,   // 4th Nibble 
      parameter            C_NIB2_EN_CLK_TO_EXT_SOUTH        =   1'b1    // 0th Nibble
      
      ) (
      
      //-----------------------------------------------------
      // Common Signals
      //-----------------------------------------------------

      input                           div_clk_to_fabric,
      input                           rst_in,
      input                           start_bitslip,
      input  [51:0]                   core_rdy,
      output                          rx_bitslip_sync_done,
      output                          rxtx_bitslip_sync_done,
      
      // TX signals
      input                           rst_seq_done,
      input                           bs_tx_clk_in,              // Clock used to sample LOAD, CE, INC
      input  [51:0]                   bs_tx_rst_in,              // Async assert,sync deassert for TX_BITSLICE OSERDES
      input  [51:0]                   bs_tx_rst_dly_in,          // Reset the internal DELAY value to DELAY_VALUE
      
      output [51:0]                   tx_bs_t_out,          // Reset the internal DELAY value to DELAY_VALUE
      
      // RX signals 
      input                           bs_rx_clk_in,              // Clock used to sample LOAD, CE, INC
      input  [51:0]                   bs_rx_rst_in,              // Async assert, sync deassert for RX_BITSLICE ISERDES
      input  [51:0]                   bs_rx_rst_dly_in,          // Reset the internal DELAY value to DELAY_VALUE
      
      // RXCascade signals, For bidir RX cascade delays are not supported
      input                           bs_clk_ext_in,             // Extended(cascade delay) clk used to sample LOAD,CE,INC
      input  [51:0]                   bs_rst_dly_ext_in,         // Extended(cascade delay) reset delay to DELAY_VALUE_EXT
      
      // bidir TX signals
      input                           bs_rxtx_tx_clk_in,         // Bidir TX Clock used to sample LOAD, CE, INC
      input  [51:0]                   bs_rxtx_tx_rst_in,         // TX Async assert, sync deassert for RXTX_BITSLICE OSERDES
      input  [51:0]                   bs_rxtx_tx_rst_dly_in,     // TX Reset the internal DELAY value to DELAY_VALUE
      
      // Bidir-RX signals 
      input                           bs_rxtx_rx_clk_in,         // RX Clock used to sample LOAD, CE, INC
      input   [51:0]                  bs_rxtx_rx_rst_in,         // RX Async assert, sync deassert for RXTX_BITSLICE ISERDES
      input   [51:0]                  bs_rxtx_rx_rst_dly_in,     // RX Reset the internal DELAY value to DELAY_VALUE
      
      //Tristate signals
      input                           bs_tri_clk_in,             // Clock input
      input                           bs_tri_reset_in,           // Async assert, sync deassert
      input                           bs_tri_rst_dly_in,         // Reset the internal DELAY value to DELAY_VALUE
      
      
      //-----------------------------------------------------
      // Bitslice0 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs0_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs0_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs0_t_out,                       // Byte group 3-state output 
      input                           bs0_t_in,                        // Legacy T byte input from device logic(fabric)
      
      // TX/Bidir-TX Delay Control signals
      input                           bs0_tx_ce_in,                    // Clk enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs0_tx_cntvaluein,               // TX Counter value from device logic for tap value 
      output [8:0]                    bs0_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs0_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs0_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs0_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input  [0:0]                     bs0_datain_from_buf_in,         // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs0_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR, o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs0_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clock
      output [8:0]                    bs0_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs0_rx_cntvaluein,               // RX Counter value from device logic for tap value 
      input                           bs0_rx_en_vtc_in,                // RX Enable for stable delay over VT when setHIGH
      input                           bs0_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs0_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs0_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs0_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs0_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs0_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT 
      input                           bs0_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs0_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs0_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs0_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs0_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs0_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs0_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs0_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs0_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice1 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs1_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs1_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs1_t_out,                       // Byte group 3-state output 
      input                           bs1_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs1_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs1_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs1_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs1_tx_en_vtc_in,                // TX Enable for stable delay over VT when set  HIGH
      input                           bs1_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs1_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs1_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs1_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs1_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs1_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs1_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs1_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs1_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs1_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs1_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs1_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs1_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs1_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT 
      input                           bs1_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs1_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext.delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs1_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs1_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs1_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs1_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs1_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs1_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs1_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice2 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs2_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs2_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs2_t_out,                       // Byte group 3-state output 
      input                           bs2_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs2_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs2_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs2_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs2_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs2_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs2_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs2_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs2_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs2_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs2_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs2_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs2_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs2_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs2_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs2_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs2_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs2_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs2_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT 
      input                           bs2_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs2_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext.delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs2_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs2_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs2_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs2_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs2_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs2_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs2_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice3 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs3_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs3_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs3_t_out,                       // Byte group 3-state output 
      input                           bs3_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs3_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs3_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs3_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs3_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs3_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs3_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs3_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs3_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs3_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs3_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs3_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs3_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs3_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs3_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs3_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs3_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs3_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs3_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs3_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs3_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs3_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs3_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs3_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs3_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs3_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs3_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs3_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice4 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs4_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs4_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs4_t_out,                       // Byte group 3-state output 
      input                           bs4_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs4_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs4_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs4_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs4_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs4_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs4_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs4_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs4_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs4_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs4_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs4_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs4_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs4_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs4_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs4_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs4_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs4_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs4_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs4_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs4_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs4_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs4_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs4_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs4_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs4_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs4_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs4_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice5 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs5_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs5_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs5_t_out,                       // Byte group 3-state output 
      input                           bs5_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs5_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs5_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs5_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs5_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs5_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs5_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs5_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs5_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs5_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs5_rxcntvalueout,      	       // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs5_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs5_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs5_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs5_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs5_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs5_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs5_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs5_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs5_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs5_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs5_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs5_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs5_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs5_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs5_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs5_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs5_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice6 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs6_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs6_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs6_t_out,                       // Byte group 3-state output 
      input                           bs6_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs6_tx_ce_in,                    //Clk enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs6_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs6_tx_cntvalueout,              //TX Count value to fabric for monitoring tap value
      input                           bs6_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs6_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs6_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs6_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs6_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs6_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs6_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs6_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs6_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs6_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs6_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs6_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs6_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs6_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs6_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs6_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs6_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs6_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs6_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs6_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs6_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs6_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs6_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs6_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice7 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs7_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs7_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs7_t_out,                       // Byte group 3-state output 
      input                           bs7_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs7_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs7_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs7_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs7_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs7_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs7_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs7_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs7_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs7_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs7_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs7_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs7_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs7_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs7_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs7_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs7_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs7_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs7_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs7_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs7_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs7_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs7_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs7_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs7_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs7_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs7_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs7_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice8 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs8_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs8_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs8_t_out,                       // Byte group 3-state output 
      input                           bs8_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs8_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs8_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs8_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs8_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs8_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs8_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs8_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs8_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs8_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs8_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs8_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs8_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs8_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs8_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs8_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs8_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs8_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs8_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs8_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs8_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs8_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs8_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs8_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs8_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs8_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs8_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs8_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice9 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs9_D_data_from_fabric_in,  // D value for TX and TXBIDIR, Data from Device logic
      output                          bs9_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs9_t_out,                       // Byte group 3-state output 
      input                           bs9_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs9_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs9_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs9_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs9_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs9_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs9_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs9_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs9_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs9_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs9_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs9_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs9_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs9_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs9_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs9_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs9_cntvalueout_ext_out,         // Extended (cascade delay) count value to the fabric
      input  [8:0]                    bs9_cntvaluein_ext_in,           // Extended (cascade delay) counter value from fabric
      input                           bs9_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs9_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs9_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs9_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs9_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs9_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs9_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs9_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs9_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs9_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice10 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs10_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs10_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs10_t_out,                       // Byte group 3-state output 
      input                           bs10_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs10_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs10_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs10_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs10_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs10_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs10_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs10_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs10_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs10_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs10_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs10_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs10_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs10_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs10_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs10_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs10_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs10_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs10_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs10_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs10_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs10_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs10_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs10_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs10_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs10_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs10_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs10_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice11 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs11_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs11_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs11_t_out,                       // Byte group 3-state output 
      input                           bs11_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs11_tx_ce_in,                    //Clk enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs11_tx_cntvaluein,                //TX Counter value from device logic for tap value
      output [8:0]                   bs11_tx_cntvalueout,    		//TX Count value to fabric for monitoring tap value
      input                           bs11_tx_en_vtc_in,           	//TX Enable for stable delay over VT when set HIGH
      input                           bs11_tx_inc_in,                   //TX Increment the current delay tap setting 
      input                           bs11_tx_load_in,                  //TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs11_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs11_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs11_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs11_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs11_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs11_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs11_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs11_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs11_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs11_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs11_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs11_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs11_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs11_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs11_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs11_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs11_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs11_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs11_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs11_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs11_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      
      //-----------------------------------------------------
      // Bitslice12 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs12_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs12_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs12_t_out,                       // Byte group 3-state output 
      input                           bs12_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs12_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs12_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs12_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs12_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs12_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs12_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs12_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs12_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs12_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs12_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs12_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs12_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs12_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs12_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs12_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs12_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs12_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs12_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs12_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs12_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs12_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs12_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs12_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs12_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs12_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs12_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs12_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice13 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs13_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs13_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs13_t_out,                       // Byte group 3-state output 
      input                           bs13_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs13_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs13_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs13_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs13_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs13_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs13_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs13_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs13_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs13_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs13_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs13_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs13_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs13_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs13_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs13_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs13_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs13_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs13_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs13_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs13_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs13_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs13_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs13_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs13_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs13_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs13_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs13_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice14 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs14_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs14_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs14_t_out,                       // Byte group 3-state output 
      input                           bs14_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs14_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs14_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs14_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs14_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs14_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs14_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs14_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs14_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs14_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs14_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs14_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs14_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs14_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs14_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs14_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs14_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs14_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs14_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs14_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs14_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs14_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs14_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs14_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs14_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs14_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs14_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs14_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice15 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs15_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs15_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs15_t_out,                       // Byte group 15-state output 
      input                           bs15_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs15_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                  bs15_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                  bs15_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs15_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs15_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs15_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs15_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs15_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs15_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs15_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs15_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs15_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs15_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs15_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs15_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs15_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs15_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs15_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs15_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs15_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs15_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs15_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs15_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs15_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs15_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs15_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs15_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice16 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs16_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs16_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs16_t_out,                       // Byte group 3-state output 
      input                           bs16_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs16_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs16_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs16_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs16_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs16_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs16_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs16_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs16_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs16_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs16_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs16_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs16_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs16_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs16_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs16_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs16_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs16_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs16_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs16_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs16_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs16_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs16_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs16_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs16_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs16_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs16_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs16_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice17 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs17_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs17_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs17_t_out,                       // Byte group 3-state output 
      input                           bs17_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs17_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs17_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs17_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs17_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs17_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs17_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs17_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs17_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs17_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs17_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs17_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs17_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs17_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs17_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs17_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs17_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs17_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs17_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs17_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs17_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs17_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs17_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs17_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs17_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs17_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs17_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs17_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice18 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs18_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs18_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs18_t_out,                       // Byte group 3-state output 
      input                           bs18_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs18_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs18_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs18_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs18_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs18_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs18_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs18_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs18_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs18_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs18_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs18_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs18_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs18_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs18_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs18_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs18_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs18_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs18_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs18_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs18_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs18_fifo_empty_out,             // FIFO empty flag for the FIFO of this bit
      input                           bs18_fifo_rd_clk,                // FIFO read clock for the FIFO of this bit
      input                           bs18_fifo_rd_en,                 // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs18_tx_bit_ctrl_in,             // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs18_tx_bit_ctrl_out,            // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs18_rx_bit_ctrl_in,             // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs18_rx_bit_ctrl_out,            // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice19 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs19_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs19_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs19_t_out,                       // Byte group 3-state output 
      input                           bs19_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs19_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs19_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs19_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs19_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs19_tx_inc_in,             	// TX Increment the current delay tap setting 
      input                           bs19_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs19_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs19_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs19_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs19_rxcntvalueout,               // RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs19_rx_cntvaluein,               // RX Counter value from device logic for tap value
      input                           bs19_rx_en_vtc_in,                // RX Enable for stable delay over VT when set HIGH
      input                           bs19_rx_inc_in,                   // RX Increment the current delay tap setting
      input                           bs19_rx_load_in,                  // RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs19_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs19_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs19_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs19_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs19_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs19_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs19_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs19_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs19_fifo_rd_en,                  // FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs19_tx_bit_ctrl_in,              // TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs19_tx_bit_ctrl_out,             // Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs19_rx_bit_ctrl_in,              // RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs19_rx_bit_ctrl_out,             // RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice20 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs20_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs20_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs20_t_out,                       // Byte group 3-state output 
      input                           bs20_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs20_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs20_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs20_tx_cntvalueout,   		// TX Count value to fabric for monitoring tap value
      input                           bs20_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs20_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs20_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs20_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs20_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs20_rx_ce_in,                    // Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs20_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs20_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs20_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs20_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs20_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs20_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs20_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs20_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs20_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs20_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs20_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs20_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs20_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs20_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs20_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs20_tx_bit_ctrl_out,        	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs20_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs20_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice21 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs21_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs21_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs21_t_out,                       // Byte group 3-state output 
      input                           bs21_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs21_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs21_tx_cntvaluein,    		// TX Counter value from device logic for tap value
      output [8:0]                   bs21_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs21_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs21_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs21_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs21_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs21_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs21_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs21_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs21_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs21_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs21_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs21_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs21_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs21_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs21_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs21_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs21_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs21_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs21_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs21_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs21_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs21_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs21_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs21_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs21_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice22 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs22_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs22_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs22_t_out,                       // Byte group 3-state output 
      input                           bs22_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs22_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs22_tx_cntvaluein,      		// TX Counter value from device logic for tap value
      output [8:0]                   bs22_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs22_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs22_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs22_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs22_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs22_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs22_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs22_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs22_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs22_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs22_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs22_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs22_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs22_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs22_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs22_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs22_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs22_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs22_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs22_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs22_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs22_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs22_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs22_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs22_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice13 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs23_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs23_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs23_t_out,                       // Byte group 3-state output 
      input                           bs23_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs23_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs23_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs23_tx_cntvalueout,     		// TX Count value to fabric for monitoring tap value
      input                           bs23_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs23_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs23_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs23_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs23_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs23_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs23_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs23_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs23_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs23_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs23_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs23_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs23_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs23_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs23_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs23_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs23_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs23_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs23_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs23_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs23_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs23_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs23_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs23_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice24 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs24_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs24_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs24_t_out,                       // Byte group 3-state output 
      input                           bs24_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs24_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs24_tx_cntvaluein,    		// TX Counter value from device logic for tap value
      output [8:0]                   bs24_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs24_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs24_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs24_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs24_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs24_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs24_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs24_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs24_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs24_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs24_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs24_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs24_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs24_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs24_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs24_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs24_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs24_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs24_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs24_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs24_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs24_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs24_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs24_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs24_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice25 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs25_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs25_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs25_t_out,                       // Byte group 3-state output 
      input                           bs25_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs25_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs25_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs25_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs25_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs25_tx_inc_in,             	// TX Increment the current delay tap setting 
      input                           bs25_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs25_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs25_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs25_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs25_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs25_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs25_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs25_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs25_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs25_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs25_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs25_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs25_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs25_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs25_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs25_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs25_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs25_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs25_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs25_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs25_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs25_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice26 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs26_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs26_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs26_t_out,                       // Byte group 3-state output 
      input                           bs26_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs26_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs26_tx_cntvaluein,      		// TX Counter value from device logic for tap value
      output [8:0]                   bs26_tx_cntvalueout,   		// TX Count value to fabric for monitoring tap value
      input                           bs26_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs26_tx_inc_in,             	// TX Increment the current delay tap setting 
      input                           bs26_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs26_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs26_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs26_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs26_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs26_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs26_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs26_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs26_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs26_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs26_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs26_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs26_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs26_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs26_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs26_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs26_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs26_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs26_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs26_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs26_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs26_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice27 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs27_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs27_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs27_t_out,                       // Byte group 3-state output 
      input                           bs27_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs27_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs27_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs27_tx_cntvalueout,   		// TX Count value to fabric for monitoring tap value
      input                           bs27_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs27_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs27_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs27_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs27_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs27_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs27_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs27_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs27_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs27_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs27_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs27_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs27_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs27_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs27_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs27_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs27_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs27_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs27_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs27_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs27_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs27_tx_bit_ctrl_out,        	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs27_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs27_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice28 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs28_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs28_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs28_t_out,                       // Byte group 3-state output 
      input                           bs28_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs28_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs28_tx_cntvaluein,      		// TX Counter value from device logic for tap value
      output [8:0]                   bs28_tx_cntvalueout,  		// TX Count value to fabric for monitoring tap value
      input                           bs28_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs28_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs28_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs28_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs28_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs28_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs28_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs28_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs28_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs28_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs28_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs28_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs28_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs28_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs28_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs28_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs28_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs28_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs28_fifo_rd_clk,           	// FIFO read clock for the FIFO of this bit
      input                           bs28_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs28_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs28_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs28_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs28_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice29 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs29_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs29_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs29_t_out,                       // Byte group 3-state output 
      input                           bs29_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs29_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs29_tx_cntvaluein,      		// TX Counter value from device logic for tap value
      output [8:0]                   bs29_tx_cntvalueout, 		// TX Count value to fabric for monitoring tap value
      input                           bs29_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs29_tx_inc_in,             	// TX Increment the current delay tap setting 
      input                           bs29_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs29_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs29_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs29_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs29_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs29_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs29_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs29_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs29_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs29_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs29_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs29_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs29_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs29_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs29_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs29_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs29_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs29_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      input  [39:0]                   bs29_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs29_tx_bit_ctrl_out,        	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs29_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs29_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      //-----------------------------------------------------
      // Bitslice30 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs30_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs30_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs30_t_out,                       // Byte group 3-state output 
      input                           bs30_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs30_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs30_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs30_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs30_tx_en_vtc_in,          	// TX Enable for stable delay over VT when set HIGH
      input                           bs30_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs30_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs30_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs30_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs30_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs30_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs30_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs30_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs30_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs30_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs30_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs30_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs30_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs30_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs30_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs30_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs30_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs30_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs30_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs30_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs30_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs30_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs30_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice31 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs31_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs31_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs31_t_out,                       // Byte group 3-state output 
      input                           bs31_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs31_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs31_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs31_tx_cntvalueout,   		// TX Count value to fabric for monitoring tap value
      input                           bs31_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs31_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs31_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs31_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs31_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs31_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs31_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs31_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs31_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs31_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs31_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs31_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs31_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs31_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs31_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs31_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs31_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs31_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs31_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs31_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs31_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs31_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs31_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs31_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice32 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs32_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs32_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs32_t_out,                       // Byte group 3-state output 
      input                           bs32_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs32_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs32_tx_cntvaluein,     		// TX Counter value from device logic for tap value
      output [8:0]                   bs32_tx_cntvalueout, 		// TX Count value to fabric for monitoring tap value
      input                           bs32_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs32_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs32_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs32_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs32_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs32_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs32_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs32_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs32_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs32_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs32_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs32_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs32_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs32_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs32_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs32_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs32_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs32_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs32_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs32_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs32_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs32_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs32_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs32_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice33 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs33_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs33_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs33_t_out,                       // Byte group 3-state output 
      input                           bs33_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs33_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs33_tx_cntvaluein,    		// TX Counter value from device logic for tap value
      output [8:0]                   bs33_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs33_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs33_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs33_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs33_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs33_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs33_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs33_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs33_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs33_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs33_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs33_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs33_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs33_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs33_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs33_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs33_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs33_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs33_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs33_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs33_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs33_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs33_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs33_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs33_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice34 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs34_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs34_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs34_t_out,                       // Byte group 3-state output 
      input                           bs34_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs34_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs34_tx_cntvaluein,       		// TX Counter value from device logic for tap value
      output [8:0]                   bs34_tx_cntvalueout,    		// TX Count value to fabric for monitoring tap value
      input                           bs34_tx_en_vtc_in,           	// TX Enable for stable delay over VT when set HIGH
      input                           bs34_tx_inc_in,              	// TX Increment the current delay tap setting 
      input                           bs34_tx_load_in,             	// TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs34_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs34_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs34_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs34_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs34_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs34_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs34_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs34_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs34_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs34_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs34_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs34_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs34_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs34_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs34_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs34_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs34_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs34_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs34_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs34_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs34_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice35 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs35_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs35_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs35_t_out,                       // Byte group 3-state output 
      input                           bs35_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs35_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs35_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs35_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs35_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs35_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs35_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs35_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs35_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs35_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs35_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs35_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs35_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs35_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs35_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs35_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs35_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs35_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs35_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs35_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs35_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs35_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs35_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs35_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs35_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs35_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs35_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs35_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL   
      
      //-----------------------------------------------------
      // Bitslice36 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs36_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs36_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs36_t_out,                       // Byte group 3-state output 
      input                           bs36_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs36_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs36_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs36_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs36_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs36_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs36_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs36_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs36_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs36_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs36_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs36_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs36_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs36_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs36_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs36_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs36_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs36_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs36_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs36_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs36_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs36_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs36_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs36_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs36_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs36_tx_bit_ctrl_out,        	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs36_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs36_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      
      
      //-----------------------------------------------------
      // Bitslice37 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs37_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs37_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs37_t_out,                       // Byte group 3-state output 
      input                           bs37_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs37_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs37_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs37_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs37_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs37_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs37_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs37_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs37_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs37_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs37_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs37_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs37_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs37_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs37_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs37_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs37_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs37_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs37_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs37_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs37_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs37_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs37_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs37_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs37_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs37_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs37_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs37_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice38 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs38_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs38_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs38_t_out,                       // Byte group 3-state output 
      input                           bs38_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs38_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs38_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs38_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs38_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs38_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs38_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs38_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs38_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs38_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs38_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs38_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs38_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs38_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs38_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs38_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs38_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs38_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs38_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs38_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs38_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs38_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs38_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs38_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs38_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs38_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs38_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs38_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice39 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs39_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs39_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs39_t_out,                       // Byte group 3-state output 
      input                           bs39_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs39_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs39_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs39_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs39_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs39_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs39_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs39_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs39_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs39_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs39_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs39_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs39_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs39_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs39_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs39_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs39_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs39_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs39_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs39_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs39_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs39_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs39_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs39_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs39_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs39_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs39_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs39_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice40 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs40_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs40_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs40_t_out,                       // Byte group 15-state output 
      input                           bs40_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs40_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs40_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs40_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs40_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs40_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs40_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs40_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs40_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs40_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs40_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs40_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs40_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs40_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs40_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs40_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs40_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs40_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs40_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs40_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs40_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs40_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs40_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs40_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs40_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs40_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs40_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs40_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice16 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs41_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs41_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs41_t_out,                       // Byte group 3-state output 
      input                           bs41_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs41_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs41_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs41_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs41_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs41_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs41_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs41_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs41_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs41_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs41_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs41_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs41_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs41_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs41_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs41_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs41_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs41_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs41_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs41_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs41_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs41_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs41_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs41_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs41_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs41_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs41_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs41_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice42 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs42_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs42_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs42_t_out,                       // Byte group 3-state output 
      input                           bs42_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs42_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs42_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs42_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs42_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs42_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs42_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs42_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs42_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs42_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs42_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs42_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs42_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs42_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs42_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs42_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs42_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs42_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs42_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs42_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs42_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs42_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs42_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs42_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      input  [39:0]                   bs42_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs42_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs42_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs42_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice43 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs43_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs43_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs43_t_out,                       // Byte group 3-state output 
      input                           bs43_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs43_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs43_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs43_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs43_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs43_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs43_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs43_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs43_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs43_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs43_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs43_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs43_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs43_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs43_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs43_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs43_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs43_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs43_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs43_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs43_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs43_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs43_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs43_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs43_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs43_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs43_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs43_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice44 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs44_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs44_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs44_t_out,                       // Byte group 3-state output 
      input                           bs44_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs44_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs44_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs44_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs44_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs44_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs44_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs44_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs44_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs44_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs44_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs44_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs44_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs44_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs44_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs44_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs44_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs44_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs44_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs44_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs44_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs44_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs44_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs44_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs44_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs44_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs44_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs44_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice45 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs45_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs45_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs45_t_out,                       // Byte group 3-state output 
      input                           bs45_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs45_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs45_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs45_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs45_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs45_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs45_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs45_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs45_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs45_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs45_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs45_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs45_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs45_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs45_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs45_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs45_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs45_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs45_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs45_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs45_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs45_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs45_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs45_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs45_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs45_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs45_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs45_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice46 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs46_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs46_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs46_t_out,                       // Byte group 3-state output 
      input                           bs46_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs46_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs46_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs46_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs46_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs46_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs46_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs46_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs46_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs46_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs46_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs46_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs46_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs46_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs46_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs46_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs46_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs46_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs46_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs46_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs46_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs46_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs46_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs46_fifo_rd_en,            	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs46_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs46_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs46_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs46_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice47 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs47_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs47_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs47_t_out,                       // Byte group 3-state output 
      input                           bs47_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs47_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs47_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs47_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs47_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs47_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs47_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs47_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs47_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs47_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs47_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs47_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs47_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs47_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs47_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs47_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs47_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs47_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs47_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs47_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs47_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs47_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs47_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs47_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs47_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs47_tx_bit_ctrl_out,        	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs47_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs47_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice48 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs48_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs48_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs48_t_out,                       // Byte group 3-state output 
      input                           bs48_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs48_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs48_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs48_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs48_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs48_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs48_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs48_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs48_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs48_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs48_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs48_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs48_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs48_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs48_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs48_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs48_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs48_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs48_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs48_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs48_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs48_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs48_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs48_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs48_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs48_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs48_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs48_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      
      //-----------------------------------------------------
      // Bitslice49 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs49_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs49_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs49_t_out,                       // Byte group 3-state output 
      input                           bs49_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs49_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs49_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs49_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs49_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs49_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs49_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs49_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs49_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs49_rx_ce_in,             	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs49_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs49_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs49_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs49_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs49_rx_load_in,            	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs49_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs49_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs49_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs49_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs49_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs49_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs49_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs49_fifo_rd_clk,                 // FIFO read clock for the FIFO of this bit
      input                           bs49_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs49_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs49_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs49_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs49_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice50 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs50_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs50_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs50_t_out,                       // Byte group 3-state output 
      input                           bs50_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs50_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                   bs50_tx_cntvaluein,                // TX Counter value from device logic for tap value
      output [8:0]                   bs50_tx_cntvalueout,               // TX Count value to fabric for monitoring tap value
      input                           bs50_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs50_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs50_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs50_datain_from_buf_in,          // Data in from IOBUF to RX/RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs50_Q_data_to_fabric_out,  // Data to Fabric from RX/RXBIDIR,o/p data from Fifo
      
      // RX/Bidir-RX Delay control signals
      input                           bs50_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs50_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs50_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs50_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs50_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs50_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs50_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs50_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs50_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs50_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs50_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs50_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs50_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs50_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs50_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs50_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs50_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs50_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs50_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      //-----------------------------------------------------
      // Bitslice51 signals
      //-----------------------------------------------------
      // TX/Bidir-TX data signals from fabric to output buffer
      input [C_SERIALIZATION_FACTOR -1 :0] bs51_D_data_from_fabric_in,  //D value for TX and TXBIDIR, Data from Device logic
      output                          bs51_O_out,                       //Serialized data to output buffer from TX/TXBIDIR
      
      // TX/Bidir-TX Tristate control signals
      output                          bs51_t_out,                       // Byte group 3-state output 
      input                           bs51_t_in,                        // Legacy T byte input from device logic
      
      // TX/Bidir-TX Delay Control signals
      input                           bs51_tx_ce_in,                    //Clock enable for RXTX_BITSLICE ODELAY register clk
      input  [8:0]                    bs51_tx_cntvaluein,               // TX Counter value from device logic for tap value
      output [8:0]                    bs51_tx_cntvalueout,              // TX Count value to fabric for monitoring tap value
      input                           bs51_tx_en_vtc_in,                // TX Enable for stable delay over VT when set HIGH
      input                           bs51_tx_inc_in,                   // TX Increment the current delay tap setting 
      input                           bs51_tx_load_in,                  // TX Clock used to sample LOAD, CE, INC
      
      
      // RX/Bidir-RX Data signals from input buffer/to fabric
      input                           bs51_datain_from_buf_in,          // Data in from IOBUF to RX and RXBIDIR from IOBUF
      output [C_SERIALIZATION_FACTOR -1 :0] bs51_Q_data_to_fabric_out,  //Data to Fabric from RX/RXBIDIR,o/p data from Fifo
 
      
      // RX/Bidir-RX Delay control signals
      input                           bs51_rx_ce_in,               	// Clk enable for RXTX_BITSLICE IDELAY register clk 
      output [8:0]                    bs51_rxcntvalueout,      		// RX Clock used to sample LOAD, CE, INC
      input  [8:0]                    bs51_rx_cntvaluein,       	// RX Counter value from device logic for tap value
      input                           bs51_rx_en_vtc_in,           	// RX Enable for stable delay over VT when set HIGH
      input                           bs51_rx_inc_in,              	// RX Increment the current delay tap setting
      input                           bs51_rx_load_in,             	// RX Load the CNTVALUEIN tap setting
      
      // RX Extended delay signals for RX bitslice, 
      // Applicable only for RX
      input                           bs51_ce_ext_in,                   // Extended (cascade delay) clock enable for IDELAY
      output [8:0]                    bs51_cntvalueout_ext_out,         // Extended (cascade delay)count value to the fabric
      input  [8:0]                    bs51_cntvaluein_ext_in,           // Extended (cascade delay)counter value from fabric
      input                           bs51_en_vtc_ext_in,               // Enables IDELAYCTRL for stable delay over VT
      input                           bs51_inc_ext_in,                  // Increments the delay tap setting for ext. delay
      input                           bs51_load_ext_in,                 // load the CNTVALUEIN_EXT tap setting for ext delay
      
      // RX/RX-Bidir Fifo Signals
      output                          bs51_fifo_empty_out,              // FIFO empty flag for the FIFO of this bit
      input                           bs51_fifo_rd_clk,            	// FIFO read clock for the FIFO of this bit
      input                           bs51_fifo_rd_en,             	// FIFO read enable for the FIFO of this bit
      
      // Ribbon cable signals for TX/RX/Bidir
      input  [39:0]                   bs51_tx_bit_ctrl_in,         	// TX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs51_tx_bit_ctrl_out,         	// Output bus to BITSLICE_CONTROL for TX
      input  [39:0]                   bs51_rx_bit_ctrl_in,         	// RX Input bus from BITSLICE_CONTROL
      output [39:0]                   bs51_rx_bit_ctrl_out,        	// RX Output bus to BITSLICE_CONTROL
      
      // RX/Bidir Bitslip signals
      
      // Bitslip Error
      output                          bs0_bitslip_error_out,
      output                          bs1_bitslip_error_out, 
      output                          bs2_bitslip_error_out, 
      output                          bs3_bitslip_error_out, 
      output                          bs4_bitslip_error_out, 
      output                          bs5_bitslip_error_out,
      output                          bs6_bitslip_error_out,
      output                          bs7_bitslip_error_out, 
      output                          bs8_bitslip_error_out, 
      output                          bs9_bitslip_error_out, 
      output                          bs10_bitslip_error_out,
      output                          bs11_bitslip_error_out, 
      output                          bs12_bitslip_error_out, 
      output                          bs13_bitslip_error_out, 
      output                          bs14_bitslip_error_out, 
      output                          bs15_bitslip_error_out,
      output                          bs16_bitslip_error_out,
      output                          bs17_bitslip_error_out, 
      output                          bs18_bitslip_error_out, 
      output                          bs19_bitslip_error_out, 
      output                          bs20_bitslip_error_out, 
      output                          bs21_bitslip_error_out, 
      output                          bs22_bitslip_error_out, 
      output                          bs23_bitslip_error_out, 
      output                          bs24_bitslip_error_out, 
      output                          bs25_bitslip_error_out,
      output                          bs26_bitslip_error_out,
      output                          bs27_bitslip_error_out, 
      output                          bs28_bitslip_error_out, 
      output                          bs29_bitslip_error_out, 
      output                          bs30_bitslip_error_out, 
      output                          bs31_bitslip_error_out, 
      output                          bs32_bitslip_error_out, 
      output                          bs33_bitslip_error_out, 
      output                          bs34_bitslip_error_out, 
      output                          bs35_bitslip_error_out,
      output                          bs36_bitslip_error_out,
      output                          bs37_bitslip_error_out, 
      output                          bs38_bitslip_error_out, 
      output                          bs39_bitslip_error_out, 
      output                          bs40_bitslip_error_out,
      output                          bs41_bitslip_error_out, 
      output                          bs42_bitslip_error_out, 
      output                          bs43_bitslip_error_out, 
      output                          bs44_bitslip_error_out, 
      output                          bs45_bitslip_error_out,
      output                          bs46_bitslip_error_out,
      output                          bs47_bitslip_error_out, 
      output                          bs48_bitslip_error_out, 
      output                          bs49_bitslip_error_out, 
      output                          bs50_bitslip_error_out,
      output                          bs51_bitslip_error_out,
      
      // RX / Bidir-Rx Fifo Write clocignals
      // Fifo Write Clock Signals
      output                           bs0_nib0_fifo_wrclk_out,       // Fifo Write clock signal from Nib0
      output                           bs6_nib1_fifo_wrclk_out,       // Fifo Write clock signal from Nib1
      output                           bs13_nib2_fifo_wrclk_out,      // Fifo Write clock signal from Nib2
      output                           bs19_nib3_fifo_wrclk_out,      // Fifo Write clock signal from Nib3
      output                           bs26_nib4_fifo_wrclk_out,      // Fifo Write clock signal from Nib4
      output                           bs32_nib5_fifo_wrclk_out,      // Fifo Write clock signal from Nib5
      output                           bs39_nib6_fifo_wrclk_out,      // Fifo Write clock signal from Nib6
      output                           bs45_nib7_fifo_wrclk_out,      // Fifo Write clock signal from Nib7
      
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib0_tri_cntvalueout,        //Counter value to the fabric for monitoring tap value 
      input  [8:0]                    bs_nib0_tri_cntvaluein,         //Counter value from fabric for tap value input
      input                           bs_nib0_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib0_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib0_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib0_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib0_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib0_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      
      
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib1_tri_cntvalueout,        //Counter value to  fabric for monitoring tap value 
      input  [8:0]                    bs_nib1_tri_cntvaluein,         //Counter value from fabric logic for tap value input
      input                           bs_nib1_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib1_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib1_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib1_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib1_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib1_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib2_tri_cntvalueout,        // Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib2_tri_cntvaluein,         // Counter value from fabric for tap value input
      input                           bs_nib2_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib2_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib2_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib2_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib2_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib2_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib3_tri_cntvalueout,        //Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib3_tri_cntvaluein,         //Counter value from fabric for tap value input
      input                           bs_nib3_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib3_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib3_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib3_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib3_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib3_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib4_tri_cntvalueout,        // Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib4_tri_cntvaluein,         // Counter value from fabric for tap value input
      input                           bs_nib4_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib4_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib4_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib4_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib4_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib4_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib5_tri_cntvalueout,        // Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib5_tri_cntvaluein,         // Counter value from fabric for tap value input
      input                           bs_nib5_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib5_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib5_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib5_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib5_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib5_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib6_tri_cntvalueout,        // Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib6_tri_cntvaluein,         // Counter value from fabric for tap value input
      input                           bs_nib6_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib6_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib6_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib6_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib6_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib6_tri_bit_ctrl_out,       // Output bus to BITSLICE_CONTROL  
      //------------------------------------------------
      //TX bitslice tri delay signals for VARIABLE/VARLOAD delays for Nibble0
      //------------------------------------------------
      output [8:0]                    bs_nib7_tri_cntvalueout,        // Counter value to fabric for monitoring tap value 
      input  [8:0]                    bs_nib7_tri_cntvaluein,         // Counter value from fabric for tap value input
      input                           bs_nib7_tri_en_vtc_in,          //Enable to keep stable delay over VT when set to HIGH
      input                           bs_nib7_tri_ce_in,              // Active high enable increment/decrement input
      input                           bs_nib7_tri_inc_in,             // Increment the current delay tap setting
      input                           bs_nib7_tri_load_in,            // Load the CNTVALUEIN tap setting
      
      // Tristate Ribbon cable signals
      input  [39:0]                   bs_nib7_tri_bit_ctrl_in,        // Input bus from BITSLICE_CONTROL
      output [39:0]                   bs_nib7_tri_bit_ctrl_out        // Output bus to BITSLICE_CONTROL  
   
   );
   
      
   
   // --------------------------------ClockEnable----------------------------------------------------   
   // TX CE signals
   wire [51:0] tx_bs_ce_in;
   assign tx_bs_ce_in = { 
                         (C_TX_BITSLICE_EN[51]) ? bs51_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[50]) ? bs50_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[49]) ? bs49_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[48]) ? bs48_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[47]) ? bs47_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[46]) ? bs46_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[45]) ? bs45_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[44]) ? bs44_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[43]) ? bs43_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[42]) ? bs42_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[41]) ? bs41_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[40]) ? bs40_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[39]) ? bs39_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[38]) ? bs38_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[37]) ? bs37_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[36]) ? bs36_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[35]) ? bs35_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[34]) ? bs34_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[33]) ? bs33_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[32]) ? bs32_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[31]) ? bs31_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[30]) ? bs30_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[29]) ? bs29_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[28]) ? bs28_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[27]) ? bs27_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[26]) ? bs26_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[25]) ? bs25_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[24]) ? bs24_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[23]) ? bs23_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[22]) ? bs22_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[21]) ? bs21_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[20]) ? bs20_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[19]) ? bs19_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[18]) ? bs18_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[17]) ? bs17_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[16]) ? bs16_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[15]) ? bs15_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[14]) ? bs14_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[13]) ? bs13_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[12]) ? bs12_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[11]) ? bs11_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[10]) ? bs10_tx_ce_in  : 1'b0,
                         (C_TX_BITSLICE_EN[9])  ? bs9_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[8])  ? bs8_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[7])  ? bs7_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[6])  ? bs6_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[5])  ? bs5_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[4])  ? bs4_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[3])  ? bs3_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[2])  ? bs2_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[1])  ? bs1_tx_ce_in   : 1'b0,
                         (C_TX_BITSLICE_EN[0])  ? bs0_tx_ce_in   : 1'b0
   		      };
   			  
   // TX BTISLICE TRI CE signals
   wire [7:0]  tx_bs_tri_nib_ce_in;
   assign tx_bs_tri_nib_ce_in = { 
                         (TX_BITSLICE_TRI_EN[7])  ? bs_nib7_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[6])  ? bs_nib6_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[5])  ? bs_nib5_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[4])  ? bs_nib4_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[3])  ? bs_nib3_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[2])  ? bs_nib2_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[1])  ? bs_nib1_tri_ce_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[0])  ? bs_nib0_tri_ce_in  : 1'b0 };
   					  
   // RX CE signals		
   wire [51:0] rx_bs_ce_in;
   assign rx_bs_ce_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_rx_ce_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_rx_ce_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_rx_ce_in   : 1'b0
   		      };
   //Cascade CE signals
   wire [51:0] rx_bs_ce_ext_in;
   assign rx_bs_ce_ext_in =  (C_RX_DELAY_CASCADE ?  
                      ({ (C_RX_BITSLICE_EN[51]) ? bs51_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_ce_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_ce_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_ce_ext_in   : 1'b0 }) : 0);   
   
   // Bidir RX CE signals					  
   wire [51:0] rxtx_bs_rx_ce_in;
   assign rxtx_bs_rx_ce_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_ce_in   : 1'b0
   		      };
   
   // Bidir TX CE signals  
   wire [51:0] rxtx_bs_tx_ce_in;
   assign rxtx_bs_tx_ce_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_ce_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_ce_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_ce_in   : 1'b0 };
   // ------------------------------- CE ends --------------------------------
      
   // --------------------------------vtc begins here-------------------------------   
   
   // TX EN_VTC signals
   wire [51:0] tx_bs_en_vtc_in;
   assign tx_bs_en_vtc_in = { 
                         (C_TX_BITSLICE_EN[51]) ? bs51_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[50]) ? bs50_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[49]) ? bs49_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[48]) ? bs48_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[47]) ? bs47_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[46]) ? bs46_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[45]) ? bs45_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[44]) ? bs44_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[43]) ? bs43_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[42]) ? bs42_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[41]) ? bs41_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[40]) ? bs40_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[39]) ? bs39_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[38]) ? bs38_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[37]) ? bs37_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[36]) ? bs36_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[35]) ? bs35_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[34]) ? bs34_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[33]) ? bs33_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[32]) ? bs32_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[31]) ? bs31_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[30]) ? bs30_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[29]) ? bs29_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[28]) ? bs28_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[27]) ? bs27_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[26]) ? bs26_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[25]) ? bs25_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[24]) ? bs24_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[23]) ? bs23_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[22]) ? bs22_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[21]) ? bs21_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[20]) ? bs20_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[19]) ? bs19_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[18]) ? bs18_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[17]) ? bs17_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[16]) ? bs16_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[15]) ? bs15_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[14]) ? bs14_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[13]) ? bs13_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[12]) ? bs12_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[11]) ? bs11_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[10]) ? bs10_tx_en_vtc_in  : 1'b1,
                         (C_TX_BITSLICE_EN[9])  ? bs9_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[8])  ? bs8_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[7])  ? bs7_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[6])  ? bs6_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[5])  ? bs5_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[4])  ? bs4_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[3])  ? bs3_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[2])  ? bs2_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[1])  ? bs1_tx_en_vtc_in   : 1'b1,
                         (C_TX_BITSLICE_EN[0])  ? bs0_tx_en_vtc_in   : 1'b1
   		      };
   
   // TX Bitslice TRI EN_VTC signals			  
   wire [7:0]  tx_bs_tri_nib_en_vtc_in;
   assign tx_bs_tri_nib_en_vtc_in = { 
                         (TX_BITSLICE_TRI_EN[7])  ? bs_nib7_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[6])  ? bs_nib6_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[5])  ? bs_nib5_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[4])  ? bs_nib4_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[3])  ? bs_nib3_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[2])  ? bs_nib2_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[1])  ? bs_nib1_tri_en_vtc_in  : 1'b1,
                         (TX_BITSLICE_TRI_EN[0])  ? bs_nib0_tri_en_vtc_in  : 1'b1 };
   
   // RX EN_VTC signals			  
   wire [51:0] rx_bs_en_vtc_in;
   assign rx_bs_en_vtc_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[50]) ? bs50_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[49]) ? bs49_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[48]) ? bs48_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[47]) ? bs47_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[46]) ? bs46_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[45]) ? bs45_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[44]) ? bs44_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[43]) ? bs43_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[42]) ? bs42_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[41]) ? bs41_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[40]) ? bs40_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[39]) ? bs39_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[38]) ? bs38_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[37]) ? bs37_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[36]) ? bs36_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[35]) ? bs35_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[34]) ? bs34_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[33]) ? bs33_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[32]) ? bs32_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[31]) ? bs31_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[30]) ? bs30_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[29]) ? bs29_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[28]) ? bs28_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[27]) ? bs27_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[26]) ? bs26_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[25]) ? bs25_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[24]) ? bs24_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[23]) ? bs23_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[22]) ? bs22_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[21]) ? bs21_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[20]) ? bs20_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[19]) ? bs19_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[18]) ? bs18_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[17]) ? bs17_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[16]) ? bs16_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[15]) ? bs15_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[14]) ? bs14_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[13]) ? bs13_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[12]) ? bs12_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[11]) ? bs11_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[10]) ? bs10_rx_en_vtc_in  : 1'b1,
                         (C_RX_BITSLICE_EN[9])  ? bs9_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[8])  ? bs8_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[7])  ? bs7_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[6])  ? bs6_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[5])  ? bs5_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[4])  ? bs4_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[3])  ? bs3_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[2])  ? bs2_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[1])  ? bs1_rx_en_vtc_in   : 1'b1,
                         (C_RX_BITSLICE_EN[0])  ? bs0_rx_en_vtc_in   : 1'b1
   		      };
   
   // Cascade EN_VTC signals			  
   wire [51:0] rx_bs_en_vtc_ext_in;
   assign rx_bs_en_vtc_ext_in =  (C_RX_DELAY_CASCADE ?  
                      ({ (C_RX_BITSLICE_EN[51]) ? bs51_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[50]) ? bs50_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[49]) ? bs49_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[48]) ? bs48_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[47]) ? bs47_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[46]) ? bs46_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[45]) ? bs45_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[44]) ? bs44_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[43]) ? bs43_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[42]) ? bs42_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[41]) ? bs41_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[40]) ? bs40_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[39]) ? bs39_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[38]) ? bs38_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[37]) ? bs37_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[36]) ? bs36_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[35]) ? bs35_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[34]) ? bs34_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[33]) ? bs33_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[32]) ? bs32_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[31]) ? bs31_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[30]) ? bs30_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[29]) ? bs29_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[28]) ? bs28_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[27]) ? bs27_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[26]) ? bs26_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[25]) ? bs25_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[24]) ? bs24_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[23]) ? bs23_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[22]) ? bs22_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[21]) ? bs21_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[20]) ? bs20_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[19]) ? bs19_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[18]) ? bs18_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[17]) ? bs17_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[16]) ? bs16_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[15]) ? bs15_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[14]) ? bs14_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[13]) ? bs13_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[12]) ? bs12_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[11]) ? bs11_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[10]) ? bs10_en_vtc_ext_in  : 1'b1,
                         (C_RX_BITSLICE_EN[9])  ? bs9_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[8])  ? bs8_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[7])  ? bs7_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[6])  ? bs6_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[5])  ? bs5_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[4])  ? bs4_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[3])  ? bs3_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[2])  ? bs2_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[1])  ? bs1_en_vtc_ext_in   : 1'b1,
                         (C_RX_BITSLICE_EN[0])  ? bs0_en_vtc_ext_in   : 1'b1 }) : 52'hf_ffff_ffff_ffff);   
   
   // Bidir/RX EN_VTC signals					  
   wire [51:0] rxtx_bs_rx_en_vtc_in;
   assign rxtx_bs_rx_en_vtc_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_en_vtc_in   : 1'b1
   		      };
   
   // Bidir TX EN_VTC signals   
   wire [51:0] rxtx_bs_tx_en_vtc_in;   
   assign rxtx_bs_tx_en_vtc_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_en_vtc_in  : 1'b1,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_en_vtc_in   : 1'b1,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_en_vtc_in   : 1'b1 };
    // ------------------------------- vtc ends----------------------------------   
   
   // --------------------------------Inc (Delay value increment------------------------   
      
   // TX Inc signals
   wire [51:0] tx_bs_inc_in;
   assign tx_bs_inc_in = { 
                         (C_TX_BITSLICE_EN[51]) ? bs51_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[50]) ? bs50_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[49]) ? bs49_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[48]) ? bs48_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[47]) ? bs47_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[46]) ? bs46_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[45]) ? bs45_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[44]) ? bs44_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[43]) ? bs43_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[42]) ? bs42_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[41]) ? bs41_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[40]) ? bs40_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[39]) ? bs39_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[38]) ? bs38_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[37]) ? bs37_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[36]) ? bs36_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[35]) ? bs35_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[34]) ? bs34_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[33]) ? bs33_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[32]) ? bs32_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[31]) ? bs31_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[30]) ? bs30_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[29]) ? bs29_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[28]) ? bs28_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[27]) ? bs27_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[26]) ? bs26_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[25]) ? bs25_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[24]) ? bs24_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[23]) ? bs23_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[22]) ? bs22_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[21]) ? bs21_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[20]) ? bs20_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[19]) ? bs19_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[18]) ? bs18_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[17]) ? bs17_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[16]) ? bs16_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[15]) ? bs15_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[14]) ? bs14_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[13]) ? bs13_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[12]) ? bs12_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[11]) ? bs11_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[10]) ? bs10_tx_inc_in  : 1'b0,
                         (C_TX_BITSLICE_EN[9])  ? bs9_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[8])  ? bs8_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[7])  ? bs7_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[6])  ? bs6_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[5])  ? bs5_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[4])  ? bs4_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[3])  ? bs3_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[2])  ? bs2_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[1])  ? bs1_tx_inc_in   : 1'b0,
                         (C_TX_BITSLICE_EN[0])  ? bs0_tx_inc_in   : 1'b0
   		      };
   
   // TX Bitslice TRI INC signals			  
   wire [7:0]  tx_bs_tri_nib_inc_in;
   assign tx_bs_tri_nib_inc_in = { 
                         (TX_BITSLICE_TRI_EN[7])  ? bs_nib7_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[6])  ? bs_nib6_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[5])  ? bs_nib5_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[4])  ? bs_nib4_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[3])  ? bs_nib3_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[2])  ? bs_nib2_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[1])  ? bs_nib1_tri_inc_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[0])  ? bs_nib0_tri_inc_in  : 1'b0 };			  
   // RX INC signals
   wire [51:0] rx_bs_inc_in;
   assign rx_bs_inc_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_rx_inc_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_rx_inc_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_rx_inc_in   : 1'b0
   		      };
   
   // Cascade Inc signals			  
   wire [51:0] rx_bs_inc_ext_in;
   assign rx_bs_inc_ext_in =  (C_RX_DELAY_CASCADE ?  
                      ({ (C_RX_BITSLICE_EN[51]) ? bs51_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_inc_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_inc_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_inc_ext_in   : 1'b0 }) : 52'hf_ffff_ffff_ffff);   
   
   // Bidir-RX Inc Signals					  
   wire [51:0] rxtx_bs_rx_inc_in;
   assign rxtx_bs_rx_inc_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_inc_in   : 1'b0
   		      };
   
   // Bidir RX Inc signals   
   wire [51:0] rxtx_bs_tx_inc_in;
   assign rxtx_bs_tx_inc_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_inc_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_inc_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_inc_in   : 1'b0 };
   // --------------------------- Inc (Delay value inc ends)-------- ---------------------
   
   // --------------------------------load (Delay value load)------------------------   
   // TX Load signals
   wire [51:0] tx_bs_load_in;
   assign tx_bs_load_in = { 
                         (C_TX_BITSLICE_EN[51]) ? bs51_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[50]) ? bs50_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[49]) ? bs49_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[48]) ? bs48_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[47]) ? bs47_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[46]) ? bs46_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[45]) ? bs45_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[44]) ? bs44_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[43]) ? bs43_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[42]) ? bs42_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[41]) ? bs41_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[40]) ? bs40_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[39]) ? bs39_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[38]) ? bs38_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[37]) ? bs37_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[36]) ? bs36_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[35]) ? bs35_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[34]) ? bs34_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[33]) ? bs33_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[32]) ? bs32_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[31]) ? bs31_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[30]) ? bs30_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[29]) ? bs29_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[28]) ? bs28_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[27]) ? bs27_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[26]) ? bs26_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[25]) ? bs25_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[24]) ? bs24_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[23]) ? bs23_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[22]) ? bs22_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[21]) ? bs21_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[20]) ? bs20_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[19]) ? bs19_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[18]) ? bs18_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[17]) ? bs17_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[16]) ? bs16_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[15]) ? bs15_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[14]) ? bs14_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[13]) ? bs13_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[12]) ? bs12_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[11]) ? bs11_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[10]) ? bs10_tx_load_in  : 1'b0,
                         (C_TX_BITSLICE_EN[9])  ? bs9_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[8])  ? bs8_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[7])  ? bs7_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[6])  ? bs6_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[5])  ? bs5_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[4])  ? bs4_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[3])  ? bs3_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[2])  ? bs2_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[1])  ? bs1_tx_load_in   : 1'b0,
                         (C_TX_BITSLICE_EN[0])  ? bs0_tx_load_in   : 1'b0
   		      };
   // TX bitslice TRI load signals
   wire [7:0]  tx_bs_tri_nib_load_in;  
   assign tx_bs_tri_nib_load_in = { 
                         (TX_BITSLICE_TRI_EN[7])  ? bs_nib7_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[6])  ? bs_nib6_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[5])  ? bs_nib5_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[4])  ? bs_nib4_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[3])  ? bs_nib3_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[2])  ? bs_nib2_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[1])  ? bs_nib1_tri_load_in  : 1'b0,
                         (TX_BITSLICE_TRI_EN[0])  ? bs_nib0_tri_load_in  : 1'b0 };				  
   // RX bitslice load signals
   wire [51:0] rx_bs_load_in;
   assign rx_bs_load_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_rx_load_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_rx_load_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_rx_load_in   : 1'b0
   		      };
   			  
   // Cascade load signals
   wire [51:0] rx_bs_load_ext_in;
   assign rx_bs_load_ext_in =  (C_RX_DELAY_CASCADE ?  
                      ({ (C_RX_BITSLICE_EN[51]) ? bs51_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_load_ext_in  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_load_ext_in   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_load_ext_in   : 1'b0 }) : 0);   
   
   // Bidir RX bitslice load signals					  
   wire [51:0] rxtx_bs_rx_load_in;
   assign rxtx_bs_rx_load_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_load_in   : 1'b0
   		      };
   
   // Bidir TX bitslice load signals   
   wire [51:0] rxtx_bs_tx_load_in;
   assign rxtx_bs_tx_load_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_load_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_load_in   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_load_in   : 1'b0 };
   // ----------------------------- Load ends (Delay load)---------------------------   
    
   // --------------------------------Cntvaluein----------------------------------------------------   
   
   // TX cntvalue in
   wire [8:0] tx_bs_cntvaluein[51:0];            
   assign tx_bs_cntvaluein[51]  =  (C_TX_BITSLICE_EN[51]) ? bs51_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[50]  =  (C_TX_BITSLICE_EN[50]) ? bs50_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[49]  =  (C_TX_BITSLICE_EN[49]) ? bs49_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[48]  =  (C_TX_BITSLICE_EN[48]) ? bs48_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[47]  =  (C_TX_BITSLICE_EN[47]) ? bs47_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[46]  =  (C_TX_BITSLICE_EN[46]) ? bs46_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[45]  =  (C_TX_BITSLICE_EN[45]) ? bs45_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[44]  =  (C_TX_BITSLICE_EN[44]) ? bs44_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[43]  =  (C_TX_BITSLICE_EN[43]) ? bs43_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[42]  =  (C_TX_BITSLICE_EN[42]) ? bs42_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[41]  =  (C_TX_BITSLICE_EN[41]) ? bs41_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[40]  =  (C_TX_BITSLICE_EN[40]) ? bs40_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[39]  =  (C_TX_BITSLICE_EN[39]) ? bs39_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[38]  =  (C_TX_BITSLICE_EN[38]) ? bs38_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[37]  =  (C_TX_BITSLICE_EN[37]) ? bs37_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[36]  =  (C_TX_BITSLICE_EN[36]) ? bs36_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[35]  =  (C_TX_BITSLICE_EN[35]) ? bs35_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[34]  =  (C_TX_BITSLICE_EN[34]) ? bs34_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[33]  =  (C_TX_BITSLICE_EN[33]) ? bs33_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[32]  =  (C_TX_BITSLICE_EN[32]) ? bs32_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[31]  =  (C_TX_BITSLICE_EN[31]) ? bs31_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[30]  =  (C_TX_BITSLICE_EN[30]) ? bs30_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[29]  =  (C_TX_BITSLICE_EN[29]) ? bs29_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[28]  =  (C_TX_BITSLICE_EN[28]) ? bs28_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[27]  =  (C_TX_BITSLICE_EN[27]) ? bs27_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[26]  =  (C_TX_BITSLICE_EN[26]) ? bs26_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[25]  =  (C_TX_BITSLICE_EN[25]) ? bs25_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[24]  =  (C_TX_BITSLICE_EN[24]) ? bs24_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[23]  =  (C_TX_BITSLICE_EN[23]) ? bs23_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[22]  =  (C_TX_BITSLICE_EN[22]) ? bs22_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[21]  =  (C_TX_BITSLICE_EN[21]) ? bs21_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[20]  =  (C_TX_BITSLICE_EN[20]) ? bs20_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[19]  =  (C_TX_BITSLICE_EN[19]) ? bs19_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[18]  =  (C_TX_BITSLICE_EN[18]) ? bs18_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[17]  =  (C_TX_BITSLICE_EN[17]) ? bs17_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[16]  =  (C_TX_BITSLICE_EN[16]) ? bs16_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[15]  =  (C_TX_BITSLICE_EN[15]) ? bs15_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[14]  =  (C_TX_BITSLICE_EN[14]) ? bs14_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[13]  =  (C_TX_BITSLICE_EN[13]) ? bs13_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[12]  =  (C_TX_BITSLICE_EN[12]) ? bs12_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[11]  =  (C_TX_BITSLICE_EN[11]) ? bs11_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[10]  =  (C_TX_BITSLICE_EN[10]) ? bs10_tx_cntvaluein  : 9'd0;
   assign tx_bs_cntvaluein[9]   =  (C_TX_BITSLICE_EN[9])  ? bs9_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[8]   =  (C_TX_BITSLICE_EN[8])  ? bs8_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[7]   =  (C_TX_BITSLICE_EN[7])  ? bs7_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[6]   =  (C_TX_BITSLICE_EN[6])  ? bs6_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[5]   =  (C_TX_BITSLICE_EN[5])  ? bs5_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[4]   =  (C_TX_BITSLICE_EN[4])  ? bs4_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[3]   =  (C_TX_BITSLICE_EN[3])  ? bs3_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[2]   =  (C_TX_BITSLICE_EN[2])  ? bs2_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[1]   =  (C_TX_BITSLICE_EN[1])  ? bs1_tx_cntvaluein   : 9'd0;
   assign tx_bs_cntvaluein[0]   =  (C_TX_BITSLICE_EN[0])  ? bs0_tx_cntvaluein   : 9'd0;
   
   // RX Cnt value in
   wire [8:0] rx_bs_cntvaluein[51:0];
   assign rx_bs_cntvaluein[51]  = (C_RX_BITSLICE_EN[51]) ? bs51_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[50]  = (C_RX_BITSLICE_EN[50]) ? bs50_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[49]  = (C_RX_BITSLICE_EN[49]) ? bs49_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[48]  = (C_RX_BITSLICE_EN[48]) ? bs48_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[47]  = (C_RX_BITSLICE_EN[47]) ? bs47_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[46]  = (C_RX_BITSLICE_EN[46]) ? bs46_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[45]  = (C_RX_BITSLICE_EN[45]) ? bs45_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[44]  = (C_RX_BITSLICE_EN[44]) ? bs44_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[43]  = (C_RX_BITSLICE_EN[43]) ? bs43_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[42]  = (C_RX_BITSLICE_EN[42]) ? bs42_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[41]  = (C_RX_BITSLICE_EN[41]) ? bs41_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[40]  = (C_RX_BITSLICE_EN[40]) ? bs40_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[39]  = (C_RX_BITSLICE_EN[39]) ? bs39_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[38]  = (C_RX_BITSLICE_EN[38]) ? bs38_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[37]  = (C_RX_BITSLICE_EN[37]) ? bs37_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[36]  = (C_RX_BITSLICE_EN[36]) ? bs36_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[35]  = (C_RX_BITSLICE_EN[35]) ? bs35_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[34]  = (C_RX_BITSLICE_EN[34]) ? bs34_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[33]  = (C_RX_BITSLICE_EN[33]) ? bs33_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[32]  = (C_RX_BITSLICE_EN[32]) ? bs32_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[31]  = (C_RX_BITSLICE_EN[31]) ? bs31_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[30]  = (C_RX_BITSLICE_EN[30]) ? bs30_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[29]  = (C_RX_BITSLICE_EN[29]) ? bs29_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[28]  = (C_RX_BITSLICE_EN[28]) ? bs28_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[27]  = (C_RX_BITSLICE_EN[27]) ? bs27_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[26]  = (C_RX_BITSLICE_EN[26]) ? bs26_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[25]  = (C_RX_BITSLICE_EN[25]) ? bs25_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[24]  = (C_RX_BITSLICE_EN[24]) ? bs24_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[23]  = (C_RX_BITSLICE_EN[23]) ? bs23_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[22]  = (C_RX_BITSLICE_EN[22]) ? bs22_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[21]  = (C_RX_BITSLICE_EN[21]) ? bs21_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[20]  = (C_RX_BITSLICE_EN[20]) ? bs20_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[19]  = (C_RX_BITSLICE_EN[19]) ? bs19_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[18]  = (C_RX_BITSLICE_EN[18]) ? bs18_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[17]  = (C_RX_BITSLICE_EN[17]) ? bs17_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[16]  = (C_RX_BITSLICE_EN[16]) ? bs16_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[15]  = (C_RX_BITSLICE_EN[15]) ? bs15_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[14]  = (C_RX_BITSLICE_EN[14]) ? bs14_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[13]  = (C_RX_BITSLICE_EN[13]) ? bs13_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[12]  = (C_RX_BITSLICE_EN[12]) ? bs12_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[11]  = (C_RX_BITSLICE_EN[11]) ? bs11_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[10]  = (C_RX_BITSLICE_EN[10]) ? bs10_rx_cntvaluein  : 9'd0;
   assign rx_bs_cntvaluein[9]   = (C_RX_BITSLICE_EN[9])  ? bs9_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[8]   = (C_RX_BITSLICE_EN[8])  ? bs8_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[7]   = (C_RX_BITSLICE_EN[7])  ? bs7_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[6]   = (C_RX_BITSLICE_EN[6])  ? bs6_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[5]   = (C_RX_BITSLICE_EN[5])  ? bs5_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[4]   = (C_RX_BITSLICE_EN[4])  ? bs4_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[3]   = (C_RX_BITSLICE_EN[3])  ? bs3_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[2]   = (C_RX_BITSLICE_EN[2])  ? bs2_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[1]   = (C_RX_BITSLICE_EN[1])  ? bs1_rx_cntvaluein   : 9'd0;
   assign rx_bs_cntvaluein[0]   = (C_RX_BITSLICE_EN[0])  ? bs0_rx_cntvaluein   : 9'd0;
   		      
   wire [8:0] tx_bs_tri_nib_cntvaluein[51:0];    
   assign tx_bs_tri_nib_cntvaluein[7] =    (TX_BITSLICE_TRI_EN[7])  ? bs_nib7_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[6] =    (TX_BITSLICE_TRI_EN[6])  ? bs_nib6_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[5] =    (TX_BITSLICE_TRI_EN[5])  ? bs_nib5_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[4] =    (TX_BITSLICE_TRI_EN[4])  ? bs_nib4_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[3] =    (TX_BITSLICE_TRI_EN[3])  ? bs_nib3_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[2] =    (TX_BITSLICE_TRI_EN[2])  ? bs_nib2_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[1] =    (TX_BITSLICE_TRI_EN[1])  ? bs_nib1_tri_cntvaluein  : 9'd0;
   assign tx_bs_tri_nib_cntvaluein[0] =    (TX_BITSLICE_TRI_EN[0])  ? bs_nib0_tri_cntvaluein  : 9'd0;
   
   wire [8:0] rx_bs_cntvaluein_ext_in[51:0];
   assign rx_bs_cntvaluein_ext_in[51] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[51]) ? bs51_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[50] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[50]) ? bs50_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[49] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[49]) ? bs49_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[48] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[48]) ? bs48_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[47] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[47]) ? bs47_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[46] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[46]) ? bs46_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[45] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[45]) ? bs45_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[44] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[44]) ? bs44_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[43] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[43]) ? bs43_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[42] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[42]) ? bs42_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[41] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[41]) ? bs41_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[40] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[40]) ? bs40_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[39] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[39]) ? bs39_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[38] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[38]) ? bs38_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[37] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[37]) ? bs37_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[36] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[36]) ? bs36_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[35] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[35]) ? bs35_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[34] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[34]) ? bs34_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[33] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[33]) ? bs33_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[32] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[32]) ? bs32_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[31] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[31]) ? bs31_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[30] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[30]) ? bs30_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[29] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[29]) ? bs29_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[28] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[28]) ? bs28_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[27] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[27]) ? bs27_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[26] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[26]) ? bs26_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[25] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[25]) ? bs25_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[24] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[24]) ? bs24_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[23] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[23]) ? bs23_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[22] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[22]) ? bs22_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[21] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[21]) ? bs21_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[20] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[20]) ? bs20_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[19] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[19]) ? bs19_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[18] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[18]) ? bs18_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[17] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[17]) ? bs17_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[16] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[16]) ? bs16_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[15] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[15]) ? bs15_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[14] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[14]) ? bs14_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[13] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[13]) ? bs13_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[12] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[12]) ? bs12_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[11] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[11]) ? bs11_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[10] =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[10]) ? bs10_cntvaluein_ext_in  : 9'd0;
   assign rx_bs_cntvaluein_ext_in[9]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[9])  ? bs9_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[8]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[8])  ? bs8_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[7]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[7])  ? bs7_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[6]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[6])  ? bs6_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[5]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[5])  ? bs5_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[4]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[4])  ? bs4_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[3]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[3])  ? bs3_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[2]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[2])  ? bs2_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[1]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[1])  ? bs1_cntvaluein_ext_in   : 9'd0;
   assign rx_bs_cntvaluein_ext_in[0]  =   (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[0])  ? bs0_cntvaluein_ext_in   : 9'd0;   
   
   // Bidir RX
   wire [8:0] rxtx_bs_rx_cntvaluein[51:0];
   assign rxtx_bs_rx_cntvaluein[51]  = (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[50]  = (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[49]  = (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[48]  = (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[47]  = (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[46]  = (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[45]  = (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[44]  = (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[43]  = (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[42]  = (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[41]  = (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[40]  = (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[39]  = (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[38]  = (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[37]  = (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[36]  = (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[35]  = (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[34]  = (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[33]  = (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[32]  = (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[31]  = (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[30]  = (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[29]  = (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[28]  = (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[27]  = (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[26]  = (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[25]  = (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[24]  = (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[23]  = (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[22]  = (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[21]  = (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[20]  = (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[19]  = (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[18]  = (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[17]  = (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[16]  = (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[15]  = (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[14]  = (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[13]  = (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[12]  = (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[11]  = (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[10]  = (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_cntvaluein  : 9'd0;
   assign rxtx_bs_rx_cntvaluein[9]   = (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[8]   = (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[7]   = (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[6]   = (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[5]   = (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[4]   = (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[3]   = (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[2]   = (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[1]   = (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_cntvaluein   : 9'd0;
   assign rxtx_bs_rx_cntvaluein[0]   = (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_cntvaluein   : 9'd0;
   
   // Bidir TX		         
   wire [8:0] rxtx_bs_tx_cntvaluein[51:0];
   assign rxtx_bs_tx_cntvaluein[51]  =  (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[50]  =  (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[49]  =  (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[48]  =  (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[47]  =  (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[46]  =  (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[45]  =  (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[44]  =  (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[43]  =  (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[42]  =  (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[41]  =  (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[40]  =  (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[39]  =  (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[38]  =  (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[37]  =  (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[36]  =  (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[35]  =  (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[34]  =  (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[33]  =  (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[32]  =  (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[31]  =  (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[30]  =  (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[29]  =  (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[28]  =  (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[27]  =  (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[26]  =  (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[25]  =  (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[24]  =  (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[23]  =  (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[22]  =  (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[21]  =  (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[20]  =  (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[19]  =  (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[18]  =  (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[17]  =  (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[16]  =  (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[15]  =  (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[14]  =  (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[13]  =  (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[12]  =  (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[11]  =  (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[10]  =  (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_cntvaluein  : 9'd0;
   assign rxtx_bs_tx_cntvaluein[9]   =  (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[8]   =  (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[7]   =  (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[6]   =  (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[5]   =  (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[4]   =  (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[3]   =  (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[2]   =  (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[1]   =  (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_cntvaluein   : 9'd0;
   assign rxtx_bs_tx_cntvaluein[0]   =  (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_cntvaluein   : 9'd0;
   
   // --------------------------------Cntvaluein ends----------------------------------------------------   
   
   // --------------------------------Cntvalueout ----------------------------------------------------   
   
   // Bidir-TX/TX Bitslice Cntvalueout signals
   wire [8:0] tx_bs_cntvalueout[51:0];
   wire [8:0] rxtx_bs_tx_cntvalueout[51:0];
   assign bs51_tx_cntvalueout = (C_TX_BITSLICE_EN[51]) ? tx_bs_cntvalueout[51] : (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_tx_cntvalueout[51] : 9'd0;   
   assign bs50_tx_cntvalueout = (C_TX_BITSLICE_EN[50]) ? tx_bs_cntvalueout[50] : (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_tx_cntvalueout[50] : 9'd0;
   assign bs49_tx_cntvalueout = (C_TX_BITSLICE_EN[49]) ? tx_bs_cntvalueout[49] : (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_tx_cntvalueout[49] : 9'd0;
   assign bs48_tx_cntvalueout = (C_TX_BITSLICE_EN[48]) ? tx_bs_cntvalueout[48] : (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_tx_cntvalueout[48] : 9'd0;
   assign bs47_tx_cntvalueout = (C_TX_BITSLICE_EN[47]) ? tx_bs_cntvalueout[47] : (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_tx_cntvalueout[47] : 9'd0;
   assign bs46_tx_cntvalueout = (C_TX_BITSLICE_EN[46]) ? tx_bs_cntvalueout[46] : (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_tx_cntvalueout[46] : 9'd0;
   assign bs45_tx_cntvalueout = (C_TX_BITSLICE_EN[45]) ? tx_bs_cntvalueout[45] : (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_tx_cntvalueout[45] : 9'd0;
   assign bs44_tx_cntvalueout = (C_TX_BITSLICE_EN[44]) ? tx_bs_cntvalueout[44] : (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_tx_cntvalueout[44] : 9'd0;
   assign bs43_tx_cntvalueout = (C_TX_BITSLICE_EN[43]) ? tx_bs_cntvalueout[43] : (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_tx_cntvalueout[43] : 9'd0;
   assign bs42_tx_cntvalueout = (C_TX_BITSLICE_EN[42]) ? tx_bs_cntvalueout[42] : (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_tx_cntvalueout[42] : 9'd0;
   assign bs41_tx_cntvalueout = (C_TX_BITSLICE_EN[41]) ? tx_bs_cntvalueout[41] : (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_tx_cntvalueout[41] : 9'd0;
   assign bs40_tx_cntvalueout = (C_TX_BITSLICE_EN[40]) ? tx_bs_cntvalueout[40] : (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_tx_cntvalueout[40] : 9'd0;
   assign bs39_tx_cntvalueout = (C_TX_BITSLICE_EN[39]) ? tx_bs_cntvalueout[39] : (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_tx_cntvalueout[39] : 9'd0;
   assign bs38_tx_cntvalueout = (C_TX_BITSLICE_EN[38]) ? tx_bs_cntvalueout[38] : (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_tx_cntvalueout[38] : 9'd0;
   assign bs37_tx_cntvalueout = (C_TX_BITSLICE_EN[37]) ? tx_bs_cntvalueout[37] : (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_tx_cntvalueout[37] : 9'd0;
   assign bs36_tx_cntvalueout = (C_TX_BITSLICE_EN[36]) ? tx_bs_cntvalueout[36] : (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_tx_cntvalueout[36] : 9'd0;
   assign bs35_tx_cntvalueout = (C_TX_BITSLICE_EN[35]) ? tx_bs_cntvalueout[35] : (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_tx_cntvalueout[35] : 9'd0;
   assign bs34_tx_cntvalueout = (C_TX_BITSLICE_EN[34]) ? tx_bs_cntvalueout[34] : (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_tx_cntvalueout[34] : 9'd0;
   assign bs33_tx_cntvalueout = (C_TX_BITSLICE_EN[33]) ? tx_bs_cntvalueout[33] : (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_tx_cntvalueout[33] : 9'd0;
   assign bs32_tx_cntvalueout = (C_TX_BITSLICE_EN[32]) ? tx_bs_cntvalueout[32] : (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_tx_cntvalueout[32] : 9'd0;
   assign bs31_tx_cntvalueout = (C_TX_BITSLICE_EN[31]) ? tx_bs_cntvalueout[31] : (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_tx_cntvalueout[31] : 9'd0;
   assign bs30_tx_cntvalueout = (C_TX_BITSLICE_EN[30]) ? tx_bs_cntvalueout[30] : (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_tx_cntvalueout[30] : 9'd0;
   assign bs29_tx_cntvalueout = (C_TX_BITSLICE_EN[29]) ? tx_bs_cntvalueout[29] : (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_tx_cntvalueout[29] : 9'd0;
   assign bs28_tx_cntvalueout = (C_TX_BITSLICE_EN[28]) ? tx_bs_cntvalueout[28] : (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_tx_cntvalueout[28] : 9'd0;
   assign bs27_tx_cntvalueout = (C_TX_BITSLICE_EN[27]) ? tx_bs_cntvalueout[27] : (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_tx_cntvalueout[27] : 9'd0;
   assign bs26_tx_cntvalueout = (C_TX_BITSLICE_EN[26]) ? tx_bs_cntvalueout[26] : (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_tx_cntvalueout[26] : 9'd0;
   assign bs25_tx_cntvalueout = (C_TX_BITSLICE_EN[25]) ? tx_bs_cntvalueout[25] : (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_tx_cntvalueout[25] : 9'd0;
   assign bs24_tx_cntvalueout = (C_TX_BITSLICE_EN[24]) ? tx_bs_cntvalueout[24] : (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_tx_cntvalueout[24] : 9'd0;
   assign bs23_tx_cntvalueout = (C_TX_BITSLICE_EN[23]) ? tx_bs_cntvalueout[23] : (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_tx_cntvalueout[23] : 9'd0;
   assign bs22_tx_cntvalueout = (C_TX_BITSLICE_EN[22]) ? tx_bs_cntvalueout[22] : (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_tx_cntvalueout[22] : 9'd0;
   assign bs21_tx_cntvalueout = (C_TX_BITSLICE_EN[21]) ? tx_bs_cntvalueout[21] : (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_tx_cntvalueout[21] : 9'd0;
   assign bs20_tx_cntvalueout = (C_TX_BITSLICE_EN[20]) ? tx_bs_cntvalueout[20] : (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_tx_cntvalueout[20] : 9'd0;
   assign bs19_tx_cntvalueout = (C_TX_BITSLICE_EN[19]) ? tx_bs_cntvalueout[19] : (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_tx_cntvalueout[19] : 9'd0;
   assign bs18_tx_cntvalueout = (C_TX_BITSLICE_EN[18]) ? tx_bs_cntvalueout[18] : (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_tx_cntvalueout[18] : 9'd0;
   assign bs17_tx_cntvalueout = (C_TX_BITSLICE_EN[17]) ? tx_bs_cntvalueout[17] : (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_tx_cntvalueout[17] : 9'd0;
   assign bs16_tx_cntvalueout = (C_TX_BITSLICE_EN[16]) ? tx_bs_cntvalueout[16] : (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_tx_cntvalueout[16] : 9'd0;
   assign bs15_tx_cntvalueout = (C_TX_BITSLICE_EN[15]) ? tx_bs_cntvalueout[15] : (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_tx_cntvalueout[15] : 9'd0;
   assign bs14_tx_cntvalueout = (C_TX_BITSLICE_EN[14]) ? tx_bs_cntvalueout[14] : (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_tx_cntvalueout[14] : 9'd0;
   assign bs13_tx_cntvalueout = (C_TX_BITSLICE_EN[13]) ? tx_bs_cntvalueout[13] : (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_tx_cntvalueout[13] : 9'd0;
   assign bs12_tx_cntvalueout = (C_TX_BITSLICE_EN[12]) ? tx_bs_cntvalueout[12] : (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_tx_cntvalueout[12] : 9'd0;
   assign bs11_tx_cntvalueout = (C_TX_BITSLICE_EN[11]) ? tx_bs_cntvalueout[11] : (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_tx_cntvalueout[11] : 9'd0;
   assign bs10_tx_cntvalueout = (C_TX_BITSLICE_EN[10]) ? tx_bs_cntvalueout[10] : (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_tx_cntvalueout[10] : 9'd0;
   assign bs9_tx_cntvalueout  = (C_TX_BITSLICE_EN[9])  ? tx_bs_cntvalueout[9]  : (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_tx_cntvalueout[9]  : 9'd0;
   assign bs8_tx_cntvalueout  = (C_TX_BITSLICE_EN[8])  ? tx_bs_cntvalueout[8]  : (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_tx_cntvalueout[8]  : 9'd0;
   assign bs7_tx_cntvalueout  = (C_TX_BITSLICE_EN[7])  ? tx_bs_cntvalueout[7]  : (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_tx_cntvalueout[7]  : 9'd0;
   assign bs6_tx_cntvalueout  = (C_TX_BITSLICE_EN[6])  ? tx_bs_cntvalueout[6]  : (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_tx_cntvalueout[6]  : 9'd0;
   assign bs5_tx_cntvalueout  = (C_TX_BITSLICE_EN[5])  ? tx_bs_cntvalueout[5]  : (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_tx_cntvalueout[5]  : 9'd0;
   assign bs4_tx_cntvalueout  = (C_TX_BITSLICE_EN[4])  ? tx_bs_cntvalueout[4]  : (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_tx_cntvalueout[4]  : 9'd0;
   assign bs3_tx_cntvalueout  = (C_TX_BITSLICE_EN[3])  ? tx_bs_cntvalueout[3]  : (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_tx_cntvalueout[3]  : 9'd0;
   assign bs2_tx_cntvalueout  = (C_TX_BITSLICE_EN[2])  ? tx_bs_cntvalueout[2]  : (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_tx_cntvalueout[2]  : 9'd0;
   assign bs1_tx_cntvalueout  = (C_TX_BITSLICE_EN[1])  ? tx_bs_cntvalueout[1]  : (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_tx_cntvalueout[1]  : 9'd0;
   assign bs0_tx_cntvalueout  = (C_TX_BITSLICE_EN[0])  ? tx_bs_cntvalueout[0]  : (C_BIDIR_BITSLICE_EN[0])  ? rxtx_bs_tx_cntvalueout[0]  : 9'd0;
   
   // TX bitslice Tri cntvalueout
   wire [8:0] tx_bs_tri_nib_cntvalueout[51:0];
   assign bs_nib7_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[7]) ? tx_bs_tri_nib_cntvalueout[7] : 9'd0;
   assign bs_nib6_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[6]) ? tx_bs_tri_nib_cntvalueout[6] : 9'd0;
   assign bs_nib5_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[5]) ? tx_bs_tri_nib_cntvalueout[5] : 9'd0;
   assign bs_nib4_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[4]) ? tx_bs_tri_nib_cntvalueout[4] : 9'd0;
   assign bs_nib3_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[3]) ? tx_bs_tri_nib_cntvalueout[3] : 9'd0;
   assign bs_nib2_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[2]) ? tx_bs_tri_nib_cntvalueout[2] : 9'd0;
   assign bs_nib1_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[1]) ? tx_bs_tri_nib_cntvalueout[1] : 9'd0;
   assign bs_nib0_tri_cntvalueout  = (TX_BITSLICE_TRI_EN[0]) ? tx_bs_tri_nib_cntvalueout[0] : 9'd0;
   
   // RX/Bidir RX cntvalue out signals
   wire [8:0] rx_bs_cntvalueout[51:0];
   wire [8:0] rxtx_bs_rx_cntvalueout[51:0];
   assign bs51_rxcntvalueout = (C_RX_BITSLICE_EN[51]) ? rx_bs_cntvalueout[51] : (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_rx_cntvalueout[51] : 9'd0;   
   assign bs50_rxcntvalueout = (C_RX_BITSLICE_EN[50]) ? rx_bs_cntvalueout[50] : (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_rx_cntvalueout[50] : 9'd0;
   assign bs49_rxcntvalueout = (C_RX_BITSLICE_EN[49]) ? rx_bs_cntvalueout[49] : (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_rx_cntvalueout[49] : 9'd0;
   assign bs48_rxcntvalueout = (C_RX_BITSLICE_EN[48]) ? rx_bs_cntvalueout[48] : (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_rx_cntvalueout[48] : 9'd0;
   assign bs47_rxcntvalueout = (C_RX_BITSLICE_EN[47]) ? rx_bs_cntvalueout[47] : (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_rx_cntvalueout[47] : 9'd0;
   assign bs46_rxcntvalueout = (C_RX_BITSLICE_EN[46]) ? rx_bs_cntvalueout[46] : (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_rx_cntvalueout[46] : 9'd0;
   assign bs45_rxcntvalueout = (C_RX_BITSLICE_EN[45]) ? rx_bs_cntvalueout[45] : (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_rx_cntvalueout[45] : 9'd0;
   assign bs44_rxcntvalueout = (C_RX_BITSLICE_EN[44]) ? rx_bs_cntvalueout[44] : (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_rx_cntvalueout[44] : 9'd0;
   assign bs43_rxcntvalueout = (C_RX_BITSLICE_EN[43]) ? rx_bs_cntvalueout[43] : (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_rx_cntvalueout[43] : 9'd0;
   assign bs42_rxcntvalueout = (C_RX_BITSLICE_EN[42]) ? rx_bs_cntvalueout[42] : (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_rx_cntvalueout[42] : 9'd0;
   assign bs41_rxcntvalueout = (C_RX_BITSLICE_EN[41]) ? rx_bs_cntvalueout[41] : (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_rx_cntvalueout[41] : 9'd0;
   assign bs40_rxcntvalueout = (C_RX_BITSLICE_EN[40]) ? rx_bs_cntvalueout[40] : (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_rx_cntvalueout[40] : 9'd0;
   assign bs39_rxcntvalueout = (C_RX_BITSLICE_EN[39]) ? rx_bs_cntvalueout[39] : (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_rx_cntvalueout[39] : 9'd0;
   assign bs38_rxcntvalueout = (C_RX_BITSLICE_EN[38]) ? rx_bs_cntvalueout[38] : (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_rx_cntvalueout[38] : 9'd0;
   assign bs37_rxcntvalueout = (C_RX_BITSLICE_EN[37]) ? rx_bs_cntvalueout[37] : (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_rx_cntvalueout[37] : 9'd0;
   assign bs36_rxcntvalueout = (C_RX_BITSLICE_EN[36]) ? rx_bs_cntvalueout[36] : (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_rx_cntvalueout[36] : 9'd0;
   assign bs35_rxcntvalueout = (C_RX_BITSLICE_EN[35]) ? rx_bs_cntvalueout[35] : (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_rx_cntvalueout[35] : 9'd0;
   assign bs34_rxcntvalueout = (C_RX_BITSLICE_EN[34]) ? rx_bs_cntvalueout[34] : (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_rx_cntvalueout[34] : 9'd0;
   assign bs33_rxcntvalueout = (C_RX_BITSLICE_EN[33]) ? rx_bs_cntvalueout[33] : (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_rx_cntvalueout[33] : 9'd0;
   assign bs32_rxcntvalueout = (C_RX_BITSLICE_EN[32]) ? rx_bs_cntvalueout[32] : (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_rx_cntvalueout[32] : 9'd0;
   assign bs31_rxcntvalueout = (C_RX_BITSLICE_EN[31]) ? rx_bs_cntvalueout[31] : (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_rx_cntvalueout[31] : 9'd0;
   assign bs30_rxcntvalueout = (C_RX_BITSLICE_EN[30]) ? rx_bs_cntvalueout[30] : (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_rx_cntvalueout[30] : 9'd0;
   assign bs29_rxcntvalueout = (C_RX_BITSLICE_EN[29]) ? rx_bs_cntvalueout[29] : (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_rx_cntvalueout[29] : 9'd0;
   assign bs28_rxcntvalueout = (C_RX_BITSLICE_EN[28]) ? rx_bs_cntvalueout[28] : (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_rx_cntvalueout[28] : 9'd0;
   assign bs27_rxcntvalueout = (C_RX_BITSLICE_EN[27]) ? rx_bs_cntvalueout[27] : (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_rx_cntvalueout[27] : 9'd0;
   assign bs26_rxcntvalueout = (C_RX_BITSLICE_EN[26]) ? rx_bs_cntvalueout[26] : (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_rx_cntvalueout[26] : 9'd0;
   assign bs25_rxcntvalueout = (C_RX_BITSLICE_EN[25]) ? rx_bs_cntvalueout[25] : (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_rx_cntvalueout[25] : 9'd0;
   assign bs24_rxcntvalueout = (C_RX_BITSLICE_EN[24]) ? rx_bs_cntvalueout[24] : (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_rx_cntvalueout[24] : 9'd0;
   assign bs23_rxcntvalueout = (C_RX_BITSLICE_EN[23]) ? rx_bs_cntvalueout[23] : (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_rx_cntvalueout[23] : 9'd0;
   assign bs22_rxcntvalueout = (C_RX_BITSLICE_EN[22]) ? rx_bs_cntvalueout[22] : (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_rx_cntvalueout[22] : 9'd0;
   assign bs21_rxcntvalueout = (C_RX_BITSLICE_EN[21]) ? rx_bs_cntvalueout[21] : (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_rx_cntvalueout[21] : 9'd0;
   assign bs20_rxcntvalueout = (C_RX_BITSLICE_EN[20]) ? rx_bs_cntvalueout[20] : (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_rx_cntvalueout[20] : 9'd0;
   assign bs19_rxcntvalueout = (C_RX_BITSLICE_EN[19]) ? rx_bs_cntvalueout[19] : (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_rx_cntvalueout[19] : 9'd0;
   assign bs18_rxcntvalueout = (C_RX_BITSLICE_EN[18]) ? rx_bs_cntvalueout[18] : (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_rx_cntvalueout[18] : 9'd0;
   assign bs17_rxcntvalueout = (C_RX_BITSLICE_EN[17]) ? rx_bs_cntvalueout[17] : (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_rx_cntvalueout[17] : 9'd0;
   assign bs16_rxcntvalueout = (C_RX_BITSLICE_EN[16]) ? rx_bs_cntvalueout[16] : (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_rx_cntvalueout[16] : 9'd0;
   assign bs15_rxcntvalueout = (C_RX_BITSLICE_EN[15]) ? rx_bs_cntvalueout[15] : (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_rx_cntvalueout[15] : 9'd0;
   assign bs14_rxcntvalueout = (C_RX_BITSLICE_EN[14]) ? rx_bs_cntvalueout[14] : (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_rx_cntvalueout[14] : 9'd0;
   assign bs13_rxcntvalueout = (C_RX_BITSLICE_EN[13]) ? rx_bs_cntvalueout[13] : (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_rx_cntvalueout[13] : 9'd0;
   assign bs12_rxcntvalueout = (C_RX_BITSLICE_EN[12]) ? rx_bs_cntvalueout[12] : (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_rx_cntvalueout[12] : 9'd0;
   assign bs11_rxcntvalueout = (C_RX_BITSLICE_EN[11]) ? rx_bs_cntvalueout[11] : (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_rx_cntvalueout[11] : 9'd0;
   assign bs10_rxcntvalueout = (C_RX_BITSLICE_EN[10]) ? rx_bs_cntvalueout[10] : (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_rx_cntvalueout[10] : 9'd0;
   assign bs9_rxcntvalueout  = (C_RX_BITSLICE_EN[9])  ? rx_bs_cntvalueout[9]  : (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_rx_cntvalueout[9]  : 9'd0;
   assign bs8_rxcntvalueout  = (C_RX_BITSLICE_EN[8])  ? rx_bs_cntvalueout[8]  : (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_rx_cntvalueout[8]  : 9'd0;
   assign bs7_rxcntvalueout  = (C_RX_BITSLICE_EN[7])  ? rx_bs_cntvalueout[7]  : (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_rx_cntvalueout[7]  : 9'd0;
   assign bs6_rxcntvalueout  = (C_RX_BITSLICE_EN[6])  ? rx_bs_cntvalueout[6]  : (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_rx_cntvalueout[6]  : 9'd0;
   assign bs5_rxcntvalueout  = (C_RX_BITSLICE_EN[5])  ? rx_bs_cntvalueout[5]  : (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_rx_cntvalueout[5]  : 9'd0;
   assign bs4_rxcntvalueout  = (C_RX_BITSLICE_EN[4])  ? rx_bs_cntvalueout[4]  : (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_rx_cntvalueout[4]  : 9'd0;
   assign bs3_rxcntvalueout  = (C_RX_BITSLICE_EN[3])  ? rx_bs_cntvalueout[3]  : (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_rx_cntvalueout[3]  : 9'd0;
   assign bs2_rxcntvalueout  = (C_RX_BITSLICE_EN[2])  ? rx_bs_cntvalueout[2]  : (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_rx_cntvalueout[2]  : 9'd0;
   assign bs1_rxcntvalueout  = (C_RX_BITSLICE_EN[1])  ? rx_bs_cntvalueout[1]  : (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_rx_cntvalueout[1]  : 9'd0;
   assign bs0_rxcntvalueout  = (C_RX_BITSLICE_EN[0])  ? rx_bs_cntvalueout[0]  : (C_BIDIR_BITSLICE_EN[0])  ? rxtx_bs_rx_cntvalueout[0]  : 9'd0;
   
   // Delay cascade cntvalueout signals
   wire [8:0] rx_bs_cntvalueout_ext_out [51:0];
   assign bs51_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[51]) ? rx_bs_cntvalueout_ext_out[51] : 9'd0;
   assign bs50_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[50]) ? rx_bs_cntvalueout_ext_out[50] : 9'd0;
   assign bs49_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[49]) ? rx_bs_cntvalueout_ext_out[39] : 9'd0;
   assign bs48_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[48]) ? rx_bs_cntvalueout_ext_out[38] : 9'd0;
   assign bs47_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[47]) ? rx_bs_cntvalueout_ext_out[47] : 9'd0;
   assign bs46_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[46]) ? rx_bs_cntvalueout_ext_out[46] : 9'd0;
   assign bs45_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[45]) ? rx_bs_cntvalueout_ext_out[45] : 9'd0;
   assign bs44_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[44]) ? rx_bs_cntvalueout_ext_out[44] : 9'd0;
   assign bs43_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[43]) ? rx_bs_cntvalueout_ext_out[43] : 9'd0;
   assign bs42_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[42]) ? rx_bs_cntvalueout_ext_out[42] : 9'd0;
   assign bs41_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[41]) ? rx_bs_cntvalueout_ext_out[41] : 9'd0;
   assign bs40_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[40]) ? rx_bs_cntvalueout_ext_out[40] : 9'd0;
   assign bs39_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[39]) ? rx_bs_cntvalueout_ext_out[39] : 9'd0;
   assign bs38_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[38]) ? rx_bs_cntvalueout_ext_out[38] : 9'd0;
   assign bs37_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[37]) ? rx_bs_cntvalueout_ext_out[37] : 9'd0;
   assign bs36_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[36]) ? rx_bs_cntvalueout_ext_out[36] : 9'd0;
   assign bs35_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[35]) ? rx_bs_cntvalueout_ext_out[35] : 9'd0;
   assign bs34_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[34]) ? rx_bs_cntvalueout_ext_out[34] : 9'd0;
   assign bs33_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[33]) ? rx_bs_cntvalueout_ext_out[33] : 9'd0;
   assign bs32_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[32]) ? rx_bs_cntvalueout_ext_out[32] : 9'd0;
   assign bs31_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[31]) ? rx_bs_cntvalueout_ext_out[31] : 9'd0;
   assign bs30_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[30]) ? rx_bs_cntvalueout_ext_out[30] : 9'd0;
   assign bs29_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[29]) ? rx_bs_cntvalueout_ext_out[29] : 9'd0;
   assign bs28_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[28]) ? rx_bs_cntvalueout_ext_out[28] : 9'd0;
   assign bs27_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[27]) ? rx_bs_cntvalueout_ext_out[27] : 9'd0;
   assign bs26_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[26]) ? rx_bs_cntvalueout_ext_out[26] : 9'd0;
   assign bs25_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[25]) ? rx_bs_cntvalueout_ext_out[25] : 9'd0;
   assign bs24_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[24]) ? rx_bs_cntvalueout_ext_out[24] : 9'd0;
   assign bs23_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[23]) ? rx_bs_cntvalueout_ext_out[23] : 9'd0;
   assign bs22_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[22]) ? rx_bs_cntvalueout_ext_out[22] : 9'd0;
   assign bs21_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[21]) ? rx_bs_cntvalueout_ext_out[21] : 9'd0;
   assign bs20_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[20]) ? rx_bs_cntvalueout_ext_out[20] : 9'd0;
   assign bs19_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[19]) ? rx_bs_cntvalueout_ext_out[19] : 9'd0;
   assign bs18_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[18]) ? rx_bs_cntvalueout_ext_out[18] : 9'd0;
   assign bs17_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[17]) ? rx_bs_cntvalueout_ext_out[17] : 9'd0;
   assign bs16_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[16]) ? rx_bs_cntvalueout_ext_out[16] : 9'd0;
   assign bs15_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[15]) ? rx_bs_cntvalueout_ext_out[15] : 9'd0;
   assign bs14_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[14]) ? rx_bs_cntvalueout_ext_out[14] : 9'd0;
   assign bs13_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[13]) ? rx_bs_cntvalueout_ext_out[13] : 9'd0;
   assign bs12_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[12]) ? rx_bs_cntvalueout_ext_out[12] : 9'd0;
   assign bs11_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[11]) ? rx_bs_cntvalueout_ext_out[11] : 9'd0;
   assign bs10_cntvalueout_ext_out =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[10]) ? rx_bs_cntvalueout_ext_out[10] : 9'd0;
   assign bs9_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[9])  ? rx_bs_cntvalueout_ext_out[9]  : 9'd0;
   assign bs8_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[8])  ? rx_bs_cntvalueout_ext_out[8]  : 9'd0;
   assign bs7_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[7])  ? rx_bs_cntvalueout_ext_out[7]  : 9'd0;
   assign bs6_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[6])  ? rx_bs_cntvalueout_ext_out[6]  : 9'd0;
   assign bs5_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[5])  ? rx_bs_cntvalueout_ext_out[5]  : 9'd0;
   assign bs4_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[4])  ? rx_bs_cntvalueout_ext_out[4]  : 9'd0;
   assign bs3_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[3])  ? rx_bs_cntvalueout_ext_out[3]  : 9'd0;
   assign bs2_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[2])  ? rx_bs_cntvalueout_ext_out[2]  : 9'd0;
   assign bs1_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[1])  ? rx_bs_cntvalueout_ext_out[1]  : 9'd0;
   assign bs0_cntvalueout_ext_out  =     (C_RX_DELAY_CASCADE && C_RX_BITSLICE_EN[0])  ? rx_bs_cntvalueout_ext_out[0]  : 9'd0;
   // --------------------------- Cntvalueout-------------------------------------------
   
   // --------------------------------Ribbon cable sigals------------------------   
   
   // TX bitslice ribbon cable signals (tx_bit_ctrl_in)
   wire [39:0] tx_bs_tx_bit_ctrl_in[51:0];
   assign  tx_bs_tx_bit_ctrl_in[51] = (C_TX_BITSLICE_EN[51]) ? bs51_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[50] = (C_TX_BITSLICE_EN[50]) ? bs50_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[49] = (C_TX_BITSLICE_EN[49]) ? bs49_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[48] = (C_TX_BITSLICE_EN[48]) ? bs48_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[47] = (C_TX_BITSLICE_EN[47]) ? bs47_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[46] = (C_TX_BITSLICE_EN[46]) ? bs46_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[45] = (C_TX_BITSLICE_EN[45]) ? bs45_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[44] = (C_TX_BITSLICE_EN[44]) ? bs44_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[43] = (C_TX_BITSLICE_EN[43]) ? bs43_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[42] = (C_TX_BITSLICE_EN[42]) ? bs42_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[41] = (C_TX_BITSLICE_EN[41]) ? bs41_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[40] = (C_TX_BITSLICE_EN[40]) ? bs40_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[39] = (C_TX_BITSLICE_EN[39]) ? bs39_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[38] = (C_TX_BITSLICE_EN[38]) ? bs38_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[37] = (C_TX_BITSLICE_EN[37]) ? bs37_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[36] = (C_TX_BITSLICE_EN[36]) ? bs36_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[35] = (C_TX_BITSLICE_EN[35]) ? bs35_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[34] = (C_TX_BITSLICE_EN[34]) ? bs34_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[33] = (C_TX_BITSLICE_EN[33]) ? bs33_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[32] = (C_TX_BITSLICE_EN[32]) ? bs32_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[31] = (C_TX_BITSLICE_EN[31]) ? bs31_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[30] = (C_TX_BITSLICE_EN[30]) ? bs30_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[29] = (C_TX_BITSLICE_EN[29]) ? bs29_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[28] = (C_TX_BITSLICE_EN[28]) ? bs28_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[27] = (C_TX_BITSLICE_EN[27]) ? bs27_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[26] = (C_TX_BITSLICE_EN[26]) ? bs26_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[25] = (C_TX_BITSLICE_EN[25]) ? bs25_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[24] = (C_TX_BITSLICE_EN[24]) ? bs24_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[23] = (C_TX_BITSLICE_EN[23]) ? bs23_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[22] = (C_TX_BITSLICE_EN[22]) ? bs22_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[21] = (C_TX_BITSLICE_EN[21]) ? bs21_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[20] = (C_TX_BITSLICE_EN[20]) ? bs20_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[19] = (C_TX_BITSLICE_EN[19]) ? bs19_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[18] = (C_TX_BITSLICE_EN[18]) ? bs18_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[17] = (C_TX_BITSLICE_EN[17]) ? bs17_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[16] = (C_TX_BITSLICE_EN[16]) ? bs16_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[15] = (C_TX_BITSLICE_EN[15]) ? bs15_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[14] = (C_TX_BITSLICE_EN[14]) ? bs14_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[13] = (C_TX_BITSLICE_EN[13]) ? bs13_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[12] = (C_TX_BITSLICE_EN[12]) ? bs12_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[11] = (C_TX_BITSLICE_EN[11]) ? bs11_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[10] = (C_TX_BITSLICE_EN[10]) ? bs10_tx_bit_ctrl_in  : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[9]  = (C_TX_BITSLICE_EN[9])  ? bs9_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[8]  = (C_TX_BITSLICE_EN[8])  ? bs8_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[7]  = (C_TX_BITSLICE_EN[7])  ? bs7_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[6]  = (C_TX_BITSLICE_EN[6])  ? bs6_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[5]  = (C_TX_BITSLICE_EN[5])  ? bs5_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[4]  = (C_TX_BITSLICE_EN[4])  ? bs4_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[3]  = (C_TX_BITSLICE_EN[3])  ? bs3_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[2]  = (C_TX_BITSLICE_EN[2])  ? bs2_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[1]  = (C_TX_BITSLICE_EN[1])  ? bs1_tx_bit_ctrl_in   : 40'd0;
   assign  tx_bs_tx_bit_ctrl_in[0]  = (C_TX_BITSLICE_EN[0])  ? bs0_tx_bit_ctrl_in   : 40'd0;
   
   // TX bitslice TRI ribbon cable signals(bit_ctrl in)		      
   wire [39:0] tx_bs_tri_nib_bit_ctrl_in[51:0];
   assign tx_bs_tri_nib_bit_ctrl_in[7]  =  (TX_BITSLICE_TRI_EN[7]) ? bs_nib7_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[6]  =  (TX_BITSLICE_TRI_EN[6]) ? bs_nib6_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[5]  =  (TX_BITSLICE_TRI_EN[5]) ? bs_nib5_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[4]  =  (TX_BITSLICE_TRI_EN[4]) ? bs_nib4_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[3]  =  (TX_BITSLICE_TRI_EN[3]) ? bs_nib3_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[2]  =  (TX_BITSLICE_TRI_EN[2]) ? bs_nib2_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[1]  =  (TX_BITSLICE_TRI_EN[1]) ? bs_nib1_tri_bit_ctrl_in : 40'd0;   
   assign tx_bs_tri_nib_bit_ctrl_in[0]  =  (TX_BITSLICE_TRI_EN[0]) ? bs_nib0_tri_bit_ctrl_in : 40'd0;   
   
   // RX bitslice Ribbon cable signals (for tx_bit_ctrl_in)
   // RX bitslice0 is instantiated for each bytegroup if C_RX_BITSLICE0_EN is set, Bidir/RX buses get the strobe from this bitslice0 within that bytegroup
   wire [39:0] rx_bs_tx_bit_ctrl_in[51:0];
   assign rx_bs_tx_bit_ctrl_in[51] =  (C_RX_BITSLICE_EN[51])                              ? bs51_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[50] =  (C_RX_BITSLICE_EN[50])                              ? bs50_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[49] =  (C_RX_BITSLICE_EN[49])                              ? bs49_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[48] =  (C_RX_BITSLICE_EN[48])                              ? bs48_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[47] =  (C_RX_BITSLICE_EN[47])                              ? bs47_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[46] =  (C_RX_BITSLICE_EN[46])                              ? bs46_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[45] = ((C_RX_BITSLICE_EN[45] || C_RX_BITSLICE0_EN[7]))     ? bs45_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[44] = (C_RX_BITSLICE_EN[44])                               ? bs44_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[43] =  (C_RX_BITSLICE_EN[43])                              ? bs43_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[42] =  (C_RX_BITSLICE_EN[42])                              ? bs42_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[41] =  (C_RX_BITSLICE_EN[41])                              ? bs41_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[40] = (C_RX_BITSLICE_EN[40])                               ? bs40_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[39] = ((C_RX_BITSLICE_EN[39]) || (C_RX_BITSLICE0_EN[6]))   ? bs39_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[38] =  (C_RX_BITSLICE_EN[38])                              ? bs38_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[37] =  (C_RX_BITSLICE_EN[37])                              ? bs37_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[36] =  (C_RX_BITSLICE_EN[36])                              ? bs36_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[35] =  (C_RX_BITSLICE_EN[35])                              ? bs35_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[34] =  (C_RX_BITSLICE_EN[34])                              ? bs34_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[33] = (C_RX_BITSLICE_EN[33])                               ? bs33_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[32] = ((C_RX_BITSLICE_EN[32]) || (C_RX_BITSLICE0_EN[5]))   ? bs32_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[31] =  (C_RX_BITSLICE_EN[31])                              ? bs31_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[30] =  (C_RX_BITSLICE_EN[30])                              ? bs30_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[29] =  (C_RX_BITSLICE_EN[29])                              ? bs29_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[28] =  (C_RX_BITSLICE_EN[28])                              ? bs28_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[27] = (C_RX_BITSLICE_EN[27])                               ? bs27_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[26] = ((C_RX_BITSLICE_EN[26]) || (C_RX_BITSLICE0_EN[4]))   ? bs26_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[25] =  (C_RX_BITSLICE_EN[25])                              ? bs25_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[24] =  (C_RX_BITSLICE_EN[24])                              ? bs24_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[23] =  (C_RX_BITSLICE_EN[23])                              ? bs23_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[22] =  (C_RX_BITSLICE_EN[22])                              ? bs22_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[21] =  (C_RX_BITSLICE_EN[21])                              ? bs21_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[20] = (C_RX_BITSLICE_EN[20])                               ? bs20_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[19] = ((C_RX_BITSLICE_EN[19]) || (C_RX_BITSLICE0_EN[3]))   ? bs19_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[18] =  (C_RX_BITSLICE_EN[18])                              ? bs18_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[17] =  (C_RX_BITSLICE_EN[17])                              ? bs17_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[16] =  (C_RX_BITSLICE_EN[16])                              ? bs16_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[15] =  (C_RX_BITSLICE_EN[15])                              ? bs15_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[14] = (C_RX_BITSLICE_EN[14])                               ? bs14_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[13] = ((C_RX_BITSLICE_EN[13]) || (C_RX_BITSLICE0_EN[2]))   ? bs13_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[12] =  (C_RX_BITSLICE_EN[12])                              ? bs12_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[11] =  (C_RX_BITSLICE_EN[11])                              ? bs11_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[10] =  (C_RX_BITSLICE_EN[10])                              ? bs10_tx_bit_ctrl_in  : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[9] =  (C_RX_BITSLICE_EN[9])                                ? bs9_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[8] =  (C_RX_BITSLICE_EN[8])                                ? bs8_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[7] =  (C_RX_BITSLICE_EN[7])                                ? bs7_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[6] = ((C_RX_BITSLICE_EN[6]) || (C_RX_BITSLICE0_EN[1]))     ? bs6_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[5] =  (C_RX_BITSLICE_EN[5])                                ? bs5_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[4] =  (C_RX_BITSLICE_EN[4])                                ? bs4_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[3] =  (C_RX_BITSLICE_EN[3])                                ? bs3_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[2] =  (C_RX_BITSLICE_EN[2])                                ? bs2_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[1] = (C_RX_BITSLICE_EN[1])                                 ? bs1_tx_bit_ctrl_in   : 40'd0;
   assign rx_bs_tx_bit_ctrl_in[0] = ((C_RX_BITSLICE_EN[0]) || (C_RX_BITSLICE0_EN[0]))     ? bs0_tx_bit_ctrl_in   : 40'd0;
   		      
   // Bidir-TX ribbon cable signals			  
   wire [39:0] rxtx_bs_tx_bit_ctrl_in[51:0];
   assign rxtx_bs_tx_bit_ctrl_in[51] =   (C_BIDIR_BITSLICE_EN[51]) ? bs51_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[50] =   (C_BIDIR_BITSLICE_EN[50]) ? bs50_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[49] =   (C_BIDIR_BITSLICE_EN[49]) ? bs49_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[48] =   (C_BIDIR_BITSLICE_EN[48]) ? bs48_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[47] =   (C_BIDIR_BITSLICE_EN[47]) ? bs47_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[46] =   (C_BIDIR_BITSLICE_EN[46]) ? bs46_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[45] =   (C_BIDIR_BITSLICE_EN[45]) ? bs45_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[44] =   (C_BIDIR_BITSLICE_EN[44]) ? bs44_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[43] =   (C_BIDIR_BITSLICE_EN[43]) ? bs43_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[42] =   (C_BIDIR_BITSLICE_EN[42]) ? bs42_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[41] =   (C_BIDIR_BITSLICE_EN[41]) ? bs41_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[40] =   (C_BIDIR_BITSLICE_EN[40]) ? bs40_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[39] =   (C_BIDIR_BITSLICE_EN[39]) ? bs39_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[38] =   (C_BIDIR_BITSLICE_EN[38]) ? bs38_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[37] =   (C_BIDIR_BITSLICE_EN[37]) ? bs37_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[36] =   (C_BIDIR_BITSLICE_EN[36]) ? bs36_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[35] =   (C_BIDIR_BITSLICE_EN[35]) ? bs35_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[34] =   (C_BIDIR_BITSLICE_EN[34]) ? bs34_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[33] =   (C_BIDIR_BITSLICE_EN[33]) ? bs33_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[32] =   (C_BIDIR_BITSLICE_EN[32]) ? bs32_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[31] =   (C_BIDIR_BITSLICE_EN[31]) ? bs31_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[30] =   (C_BIDIR_BITSLICE_EN[30]) ? bs30_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[29] =   (C_BIDIR_BITSLICE_EN[29]) ? bs29_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[28] =   (C_BIDIR_BITSLICE_EN[28]) ? bs28_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[27] =   (C_BIDIR_BITSLICE_EN[27]) ? bs27_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[26] =   (C_BIDIR_BITSLICE_EN[26]) ? bs26_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[25] =   (C_BIDIR_BITSLICE_EN[25]) ? bs25_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[24] =   (C_BIDIR_BITSLICE_EN[24]) ? bs24_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[23] =   (C_BIDIR_BITSLICE_EN[23]) ? bs23_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[22] =   (C_BIDIR_BITSLICE_EN[22]) ? bs22_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[21] =   (C_BIDIR_BITSLICE_EN[21]) ? bs21_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[20] =   (C_BIDIR_BITSLICE_EN[20]) ? bs20_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[19] =   (C_BIDIR_BITSLICE_EN[19]) ? bs19_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[18] =   (C_BIDIR_BITSLICE_EN[18]) ? bs18_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[17] =   (C_BIDIR_BITSLICE_EN[17]) ? bs17_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[16] =   (C_BIDIR_BITSLICE_EN[16]) ? bs16_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[15] =   (C_BIDIR_BITSLICE_EN[15]) ? bs15_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[14] =   (C_BIDIR_BITSLICE_EN[14]) ? bs14_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[13] =   (C_BIDIR_BITSLICE_EN[13]) ? bs13_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[12] =   (C_BIDIR_BITSLICE_EN[12]) ? bs12_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[11] =   (C_BIDIR_BITSLICE_EN[11]) ? bs11_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[10] =   (C_BIDIR_BITSLICE_EN[10]) ? bs10_tx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[9]  =   (C_BIDIR_BITSLICE_EN[9])  ? bs9_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[8]  =   (C_BIDIR_BITSLICE_EN[8])  ? bs8_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[7]  =   (C_BIDIR_BITSLICE_EN[7])  ? bs7_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[6]  =   (C_BIDIR_BITSLICE_EN[6])  ? bs6_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[5]  =   (C_BIDIR_BITSLICE_EN[5])  ? bs5_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[4]  =   (C_BIDIR_BITSLICE_EN[4])  ? bs4_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[3]  =   (C_BIDIR_BITSLICE_EN[3])  ? bs3_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[2]  =   (C_BIDIR_BITSLICE_EN[2])  ? bs2_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[1]  =   (C_BIDIR_BITSLICE_EN[1])  ? bs1_tx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_tx_bit_ctrl_in[0]  =   (C_BIDIR_BITSLICE_EN[0])  ? bs0_tx_bit_ctrl_in   : 40'd0;
   
   // TX bitslice ribbon cable signals (rx_bit_ctrl_in)
   wire [39:0] tx_bs_rx_bit_ctrl_in[51:0];
   assign tx_bs_rx_bit_ctrl_in[51] =  (C_TX_BITSLICE_EN[51]) ? bs51_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[50] =  (C_TX_BITSLICE_EN[50]) ? bs50_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[49] =  (C_TX_BITSLICE_EN[49]) ? bs49_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[48] =  (C_TX_BITSLICE_EN[48]) ? bs48_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[47] =  (C_TX_BITSLICE_EN[47]) ? bs47_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[46] =  (C_TX_BITSLICE_EN[46]) ? bs46_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[45] =  (C_TX_BITSLICE_EN[45]) ? bs45_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[44] =  (C_TX_BITSLICE_EN[44]) ? bs44_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[43] =  (C_TX_BITSLICE_EN[43]) ? bs43_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[42] =  (C_TX_BITSLICE_EN[42]) ? bs42_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[41] =  (C_TX_BITSLICE_EN[41]) ? bs41_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[40] =  (C_TX_BITSLICE_EN[40]) ? bs40_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[39] =  (C_TX_BITSLICE_EN[39]) ? bs39_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[38] =  (C_TX_BITSLICE_EN[38]) ? bs38_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[37] =  (C_TX_BITSLICE_EN[37]) ? bs37_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[36] =  (C_TX_BITSLICE_EN[36]) ? bs36_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[35] =  (C_TX_BITSLICE_EN[35]) ? bs35_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[34] =  (C_TX_BITSLICE_EN[34]) ? bs34_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[33] =  (C_TX_BITSLICE_EN[33]) ? bs33_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[32] =  (C_TX_BITSLICE_EN[32]) ? bs32_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[31] =  (C_TX_BITSLICE_EN[31]) ? bs31_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[30] =  (C_TX_BITSLICE_EN[30]) ? bs30_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[29] =  (C_TX_BITSLICE_EN[29]) ? bs29_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[28] =  (C_TX_BITSLICE_EN[28]) ? bs28_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[27] =  (C_TX_BITSLICE_EN[27]) ? bs27_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[26] =  (C_TX_BITSLICE_EN[26]) ? bs26_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[25] =  (C_TX_BITSLICE_EN[25]) ? bs25_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[24] =  (C_TX_BITSLICE_EN[24]) ? bs24_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[23] =  (C_TX_BITSLICE_EN[23]) ? bs23_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[22] =  (C_TX_BITSLICE_EN[22]) ? bs22_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[21] =  (C_TX_BITSLICE_EN[21]) ? bs21_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[20] =  (C_TX_BITSLICE_EN[20]) ? bs20_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[19] =  (C_TX_BITSLICE_EN[19]) ? bs19_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[18] =  (C_TX_BITSLICE_EN[18]) ? bs18_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[17] =  (C_TX_BITSLICE_EN[17]) ? bs17_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[16] =  (C_TX_BITSLICE_EN[16]) ? bs16_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[15] =  (C_TX_BITSLICE_EN[15]) ? bs15_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[14] =  (C_TX_BITSLICE_EN[14]) ? bs14_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[13] =  (C_TX_BITSLICE_EN[13]) ? bs13_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[12] =  (C_TX_BITSLICE_EN[12]) ? bs12_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[11] =  (C_TX_BITSLICE_EN[11]) ? bs11_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[10] =  (C_TX_BITSLICE_EN[10]) ? bs10_rx_bit_ctrl_in  : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[9]  =  (C_TX_BITSLICE_EN[9])  ? bs9_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[8]  =  (C_TX_BITSLICE_EN[8])  ? bs8_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[7]  =  (C_TX_BITSLICE_EN[7])  ? bs7_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[6]  =  (C_TX_BITSLICE_EN[6])  ? bs6_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[5]  =  (C_TX_BITSLICE_EN[5])  ? bs5_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[4]  =  (C_TX_BITSLICE_EN[4])  ? bs4_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[3]  =  (C_TX_BITSLICE_EN[3])  ? bs3_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[2]  =  (C_TX_BITSLICE_EN[2])  ? bs2_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[1]  =  (C_TX_BITSLICE_EN[1])  ? bs1_rx_bit_ctrl_in   : 40'd0;
   assign tx_bs_rx_bit_ctrl_in[0]  =  (C_TX_BITSLICE_EN[0])  ? bs0_rx_bit_ctrl_in   : 40'd0;
   		      
   // RX bitslice Ribbon cable signals (for rx_bit_ctrl_in)
   // RX bitslice0 is instantiated for each bytegroup if C_RX_BITSLICE0_EN is set, Bidir/RX buses get the strobe from this bitslice0 within that bytegroup			  
   wire [39:0] rx_bs_rx_bit_ctrl_in[51:0];
   assign rx_bs_rx_bit_ctrl_in[51] =   (C_RX_BITSLICE_EN[51])                             ? bs51_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[50] =   (C_RX_BITSLICE_EN[50])                             ? bs50_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[49] =   (C_RX_BITSLICE_EN[49])                             ? bs49_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[48] =   (C_RX_BITSLICE_EN[48])                             ? bs48_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[47] =   (C_RX_BITSLICE_EN[47])                             ? bs47_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[46] =   ((C_RX_BITSLICE_EN[46]))                           ? bs46_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[45] =   ((C_RX_BITSLICE_EN[45]) || (C_RX_BITSLICE0_EN[7]))? bs45_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[44] =   (C_RX_BITSLICE_EN[44])                             ? bs44_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[43] =   (C_RX_BITSLICE_EN[43])                             ? bs43_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[42] =   (C_RX_BITSLICE_EN[42])                             ? bs42_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[41] =   (C_RX_BITSLICE_EN[41])                             ? bs41_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[40] =   ((C_RX_BITSLICE_EN[40]))                           ? bs40_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[39] =   ((C_RX_BITSLICE_EN[39]) || (C_RX_BITSLICE0_EN[6])) ? bs39_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[38] =   (C_RX_BITSLICE_EN[38])                             ? bs38_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[37] =   (C_RX_BITSLICE_EN[37])                             ? bs37_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[36] =   (C_RX_BITSLICE_EN[36])                             ? bs36_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[35] =   (C_RX_BITSLICE_EN[35])                             ? bs35_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[34] =   (C_RX_BITSLICE_EN[34])                             ? bs34_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[33] =   ((C_RX_BITSLICE_EN[33]))                           ? bs33_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[32] =   ((C_RX_BITSLICE_EN[32]) || (C_RX_BITSLICE0_EN[5])) ? bs32_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[31] =   (C_RX_BITSLICE_EN[31])                             ? bs31_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[30] =   (C_RX_BITSLICE_EN[30])                             ? bs30_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[29] =   (C_RX_BITSLICE_EN[29])                             ? bs29_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[28] =   (C_RX_BITSLICE_EN[28])                             ? bs28_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[27] =   ((C_RX_BITSLICE_EN[27]))                           ? bs27_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[26] =   ((C_RX_BITSLICE_EN[26]) || (C_RX_BITSLICE0_EN[4])) ? bs26_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[25] =   (C_RX_BITSLICE_EN[25])                             ? bs25_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[24] =   (C_RX_BITSLICE_EN[24])                             ? bs24_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[23] =   (C_RX_BITSLICE_EN[23])                             ? bs23_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[22] =   (C_RX_BITSLICE_EN[22])                             ? bs22_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[21] =   (C_RX_BITSLICE_EN[21])                             ? bs21_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[20] =   ((C_RX_BITSLICE_EN[20]))                           ? bs20_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[19] =   ((C_RX_BITSLICE_EN[19]) || (C_RX_BITSLICE0_EN[3])) ? bs19_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[18] =   (C_RX_BITSLICE_EN[18])                             ? bs18_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[17] =   (C_RX_BITSLICE_EN[17])                             ? bs17_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[16] =   (C_RX_BITSLICE_EN[16])                             ? bs16_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[15] =   (C_RX_BITSLICE_EN[15])                             ? bs15_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[14] =   ((C_RX_BITSLICE_EN[14]))                           ? bs14_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[13] =   ((C_RX_BITSLICE_EN[13]) || (C_RX_BITSLICE0_EN[2])) ? bs13_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[12] =   (C_RX_BITSLICE_EN[12])                             ? bs12_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[11] =   (C_RX_BITSLICE_EN[11])                             ? bs11_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[10] =   (C_RX_BITSLICE_EN[10])                             ? bs10_rx_bit_ctrl_in  : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[9]  =   (C_RX_BITSLICE_EN[9])                              ? bs9_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[8]  =   (C_RX_BITSLICE_EN[8])                              ? bs8_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[7]  =   ((C_RX_BITSLICE_EN[7]))                            ? bs7_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[6]  =   ((C_RX_BITSLICE_EN[6]) || (C_RX_BITSLICE0_EN[1]))  ? bs6_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[5]  =   (C_RX_BITSLICE_EN[5])                              ? bs5_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[4]  =   (C_RX_BITSLICE_EN[4])                              ? bs4_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[3]  =   (C_RX_BITSLICE_EN[3])                              ? bs3_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[2]  =   (C_RX_BITSLICE_EN[2])                              ? bs2_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[1]  =   ((C_RX_BITSLICE_EN[1]))                            ? bs1_rx_bit_ctrl_in   : 40'd0;
   assign rx_bs_rx_bit_ctrl_in[0]  =   ((C_RX_BITSLICE_EN[0]) || (C_RX_BITSLICE0_EN[0]))  ? bs0_rx_bit_ctrl_in   : 40'd0;
   		      		  
   // Bidir-RX bitslice ribbon cable signals
   wire [39:0] rxtx_bs_rx_bit_ctrl_in[51:0];
   assign rxtx_bs_rx_bit_ctrl_in[51] =  (C_BIDIR_BITSLICE_EN[51]) ? bs51_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[50] =  (C_BIDIR_BITSLICE_EN[50]) ? bs50_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[49] =  (C_BIDIR_BITSLICE_EN[49]) ? bs49_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[48] =  (C_BIDIR_BITSLICE_EN[48]) ? bs48_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[47] =  (C_BIDIR_BITSLICE_EN[47]) ? bs47_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[46] =  (C_BIDIR_BITSLICE_EN[46]) ? bs46_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[45] =  (C_BIDIR_BITSLICE_EN[45]) ? bs45_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[44] =  (C_BIDIR_BITSLICE_EN[44]) ? bs44_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[43] =  (C_BIDIR_BITSLICE_EN[43]) ? bs43_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[42] =  (C_BIDIR_BITSLICE_EN[42]) ? bs42_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[41] =  (C_BIDIR_BITSLICE_EN[41]) ? bs41_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[40] =  (C_BIDIR_BITSLICE_EN[40]) ? bs40_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[39] =  (C_BIDIR_BITSLICE_EN[39]) ? bs39_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[38] =  (C_BIDIR_BITSLICE_EN[38]) ? bs38_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[37] =  (C_BIDIR_BITSLICE_EN[37]) ? bs37_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[36] =  (C_BIDIR_BITSLICE_EN[36]) ? bs36_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[35] =  (C_BIDIR_BITSLICE_EN[35]) ? bs35_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[34] =  (C_BIDIR_BITSLICE_EN[34]) ? bs34_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[33] =  (C_BIDIR_BITSLICE_EN[33]) ? bs33_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[32] =  (C_BIDIR_BITSLICE_EN[32]) ? bs32_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[31] =  (C_BIDIR_BITSLICE_EN[31]) ? bs31_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[30] =  (C_BIDIR_BITSLICE_EN[30]) ? bs30_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[29] =  (C_BIDIR_BITSLICE_EN[29]) ? bs29_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[28] =  (C_BIDIR_BITSLICE_EN[28]) ? bs28_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[27] =  (C_BIDIR_BITSLICE_EN[27]) ? bs27_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[26] =  (C_BIDIR_BITSLICE_EN[26]) ? bs26_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[25] =  (C_BIDIR_BITSLICE_EN[25]) ? bs25_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[24] =  (C_BIDIR_BITSLICE_EN[24]) ? bs24_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[23] =  (C_BIDIR_BITSLICE_EN[23]) ? bs23_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[22] =  (C_BIDIR_BITSLICE_EN[22]) ? bs22_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[21] =  (C_BIDIR_BITSLICE_EN[21]) ? bs21_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[20] =  (C_BIDIR_BITSLICE_EN[20]) ? bs20_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[19] =  (C_BIDIR_BITSLICE_EN[19]) ? bs19_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[18] =  (C_BIDIR_BITSLICE_EN[18]) ? bs18_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[17] =  (C_BIDIR_BITSLICE_EN[17]) ? bs17_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[16] =  (C_BIDIR_BITSLICE_EN[16]) ? bs16_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[15] =  (C_BIDIR_BITSLICE_EN[15]) ? bs15_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[14] =  (C_BIDIR_BITSLICE_EN[14]) ? bs14_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[13] =  (C_BIDIR_BITSLICE_EN[13]) ? bs13_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[12] =  (C_BIDIR_BITSLICE_EN[12]) ? bs12_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[11] =  (C_BIDIR_BITSLICE_EN[11]) ? bs11_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[10] =  (C_BIDIR_BITSLICE_EN[10]) ? bs10_rx_bit_ctrl_in  : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[9] =   (C_BIDIR_BITSLICE_EN[9])  ? bs9_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[8] =   (C_BIDIR_BITSLICE_EN[8])  ? bs8_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[7] =   (C_BIDIR_BITSLICE_EN[7])  ? bs7_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[6] =   (C_BIDIR_BITSLICE_EN[6])  ? bs6_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[5] =   (C_BIDIR_BITSLICE_EN[5])  ? bs5_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[4] =   (C_BIDIR_BITSLICE_EN[4])  ? bs4_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[3] =   (C_BIDIR_BITSLICE_EN[3])  ? bs3_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[2] =   (C_BIDIR_BITSLICE_EN[2])  ? bs2_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[1] =   (C_BIDIR_BITSLICE_EN[1])  ? bs1_rx_bit_ctrl_in   : 40'd0;
   assign rxtx_bs_rx_bit_ctrl_in[0] =   (C_BIDIR_BITSLICE_EN[0])  ? bs0_rx_bit_ctrl_in   : 40'd0;
   
   // Ribbon cable out signals		    
   // Bit control out signals
   wire [39:0] rxtx_bs_tx_bit_ctrl_out[51:0];
   wire [39:0] rx_bs_tx_bit_ctrl_out[51:0];
   wire [39:0] tx_bs_tx_bit_ctrl_out[51:0];
   assign  bs51_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[51]) ?  tx_bs_tx_bit_ctrl_out[51] : (C_RX_BITSLICE_EN[51]) ?  rx_bs_tx_bit_ctrl_out[51] : (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_tx_bit_ctrl_out[51] : 40'd0;
   assign  bs50_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[50]) ?  tx_bs_tx_bit_ctrl_out[50] : (C_RX_BITSLICE_EN[50]) ?  rx_bs_tx_bit_ctrl_out[50] : (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_tx_bit_ctrl_out[50] : 40'd0;
   assign  bs49_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[49]) ?  tx_bs_tx_bit_ctrl_out[49] : (C_RX_BITSLICE_EN[49]) ?  rx_bs_tx_bit_ctrl_out[49] : (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_tx_bit_ctrl_out[49] : 40'd0;
   assign  bs48_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[48]) ?  tx_bs_tx_bit_ctrl_out[48] : (C_RX_BITSLICE_EN[48]) ?  rx_bs_tx_bit_ctrl_out[48] : (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_tx_bit_ctrl_out[48] : 40'd0;
   assign  bs47_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[47]) ?  tx_bs_tx_bit_ctrl_out[47] : (C_RX_BITSLICE_EN[47]) ?  rx_bs_tx_bit_ctrl_out[47] : (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_tx_bit_ctrl_out[47] : 40'd0;
   assign  bs46_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[46]) ?  tx_bs_tx_bit_ctrl_out[46] : (C_RX_BITSLICE_EN[46]) ?  rx_bs_tx_bit_ctrl_out[46] : (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_tx_bit_ctrl_out[46] : 40'd0;
   assign  bs45_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[45]) ?  tx_bs_tx_bit_ctrl_out[45] : (C_RX_BITSLICE_EN[45] || C_RX_BITSLICE0_EN[7]) ?  rx_bs_tx_bit_ctrl_out[45] : (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_tx_bit_ctrl_out[45] : 40'd0;
   assign  bs44_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[44]) ?  tx_bs_tx_bit_ctrl_out[44] : (C_RX_BITSLICE_EN[44]) ?  rx_bs_tx_bit_ctrl_out[44] : (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_tx_bit_ctrl_out[44] : 40'd0;
   assign  bs43_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[43]) ?  tx_bs_tx_bit_ctrl_out[43] : (C_RX_BITSLICE_EN[43]) ?  rx_bs_tx_bit_ctrl_out[43] : (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_tx_bit_ctrl_out[43] : 40'd0;
   assign  bs42_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[42]) ?  tx_bs_tx_bit_ctrl_out[42] : (C_RX_BITSLICE_EN[42]) ?  rx_bs_tx_bit_ctrl_out[42] : (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_tx_bit_ctrl_out[42] : 40'd0;
   assign  bs41_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[41]) ?  tx_bs_tx_bit_ctrl_out[41] : (C_RX_BITSLICE_EN[41]) ?  rx_bs_tx_bit_ctrl_out[41] : (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_tx_bit_ctrl_out[41] : 40'd0;
   assign  bs40_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[40]) ?  tx_bs_tx_bit_ctrl_out[40] : (C_RX_BITSLICE_EN[40]) ?  rx_bs_tx_bit_ctrl_out[40] : (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_tx_bit_ctrl_out[40] : 40'd0;
   assign  bs39_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[39]) ?  tx_bs_tx_bit_ctrl_out[39] : (C_RX_BITSLICE_EN[39] || C_RX_BITSLICE0_EN[6]) ?  rx_bs_tx_bit_ctrl_out[39] : (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_tx_bit_ctrl_out[39] : 40'd0;
   assign  bs38_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[38]) ?  tx_bs_tx_bit_ctrl_out[38] : (C_RX_BITSLICE_EN[38]) ?  rx_bs_tx_bit_ctrl_out[38] : (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_tx_bit_ctrl_out[38] : 40'd0;
   assign  bs37_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[37]) ?  tx_bs_tx_bit_ctrl_out[37] : (C_RX_BITSLICE_EN[37]) ?  rx_bs_tx_bit_ctrl_out[37] : (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_tx_bit_ctrl_out[37] : 40'd0;
   assign  bs36_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[36]) ?  tx_bs_tx_bit_ctrl_out[36] : (C_RX_BITSLICE_EN[36]) ?  rx_bs_tx_bit_ctrl_out[36] : (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_tx_bit_ctrl_out[36] : 40'd0;
   assign  bs35_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[35]) ?  tx_bs_tx_bit_ctrl_out[35] : (C_RX_BITSLICE_EN[35]) ?  rx_bs_tx_bit_ctrl_out[35] : (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_tx_bit_ctrl_out[35] : 40'd0;
   assign  bs34_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[34]) ?  tx_bs_tx_bit_ctrl_out[34] : (C_RX_BITSLICE_EN[34]) ?  rx_bs_tx_bit_ctrl_out[34] : (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_tx_bit_ctrl_out[34] : 40'd0;
   assign  bs33_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[33]) ?  tx_bs_tx_bit_ctrl_out[33] : (C_RX_BITSLICE_EN[33]) ?  rx_bs_tx_bit_ctrl_out[33] : (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_tx_bit_ctrl_out[33] : 40'd0;
   assign  bs32_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[32]) ?  tx_bs_tx_bit_ctrl_out[32] : (C_RX_BITSLICE_EN[32] || C_RX_BITSLICE0_EN[5]) ?  rx_bs_tx_bit_ctrl_out[32] : (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_tx_bit_ctrl_out[32] : 40'd0;
   assign  bs31_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[31]) ?  tx_bs_tx_bit_ctrl_out[31] : (C_RX_BITSLICE_EN[31]) ?  rx_bs_tx_bit_ctrl_out[31] : (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_tx_bit_ctrl_out[31] : 40'd0;
   assign  bs30_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[30]) ?  tx_bs_tx_bit_ctrl_out[30] : (C_RX_BITSLICE_EN[30]) ?  rx_bs_tx_bit_ctrl_out[30] : (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_tx_bit_ctrl_out[30] : 40'd0;
   assign  bs29_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[29]) ?  tx_bs_tx_bit_ctrl_out[29] : (C_RX_BITSLICE_EN[29]) ?  rx_bs_tx_bit_ctrl_out[29] : (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_tx_bit_ctrl_out[29] : 40'd0;
   assign  bs28_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[28]) ?  tx_bs_tx_bit_ctrl_out[28] : (C_RX_BITSLICE_EN[28]) ?  rx_bs_tx_bit_ctrl_out[28] : (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_tx_bit_ctrl_out[28] : 40'd0;
   assign  bs27_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[27]) ?  tx_bs_tx_bit_ctrl_out[27] : (C_RX_BITSLICE_EN[27]) ?  rx_bs_tx_bit_ctrl_out[27] : (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_tx_bit_ctrl_out[27] : 40'd0;
   assign  bs26_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[26]) ?  tx_bs_tx_bit_ctrl_out[26] : (C_RX_BITSLICE_EN[26] || C_RX_BITSLICE0_EN[4]) ?  rx_bs_tx_bit_ctrl_out[26] : (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_tx_bit_ctrl_out[26] : 40'd0;
   assign  bs25_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[25]) ?  tx_bs_tx_bit_ctrl_out[25] : (C_RX_BITSLICE_EN[25]) ?  rx_bs_tx_bit_ctrl_out[25] : (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_tx_bit_ctrl_out[25] : 40'd0;
   assign  bs24_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[24]) ?  tx_bs_tx_bit_ctrl_out[24] : (C_RX_BITSLICE_EN[24]) ?  rx_bs_tx_bit_ctrl_out[24] : (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_tx_bit_ctrl_out[24] : 40'd0;
   assign  bs23_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[23]) ?  tx_bs_tx_bit_ctrl_out[23] : (C_RX_BITSLICE_EN[23]) ?  rx_bs_tx_bit_ctrl_out[23] : (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_tx_bit_ctrl_out[23] : 40'd0;
   assign  bs22_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[22]) ?  tx_bs_tx_bit_ctrl_out[22] : (C_RX_BITSLICE_EN[22]) ?  rx_bs_tx_bit_ctrl_out[22] : (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_tx_bit_ctrl_out[22] : 40'd0;
   assign  bs21_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[21]) ?  tx_bs_tx_bit_ctrl_out[21] : (C_RX_BITSLICE_EN[21]) ?  rx_bs_tx_bit_ctrl_out[21] : (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_tx_bit_ctrl_out[21] : 40'd0;
   assign  bs20_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[20]) ?  tx_bs_tx_bit_ctrl_out[20] : (C_RX_BITSLICE_EN[20]) ?  rx_bs_tx_bit_ctrl_out[20] : (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_tx_bit_ctrl_out[20] : 40'd0;
   assign  bs19_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[19]) ?  tx_bs_tx_bit_ctrl_out[19] : (C_RX_BITSLICE_EN[19] || C_RX_BITSLICE0_EN[3]) ?  rx_bs_tx_bit_ctrl_out[19] : (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_tx_bit_ctrl_out[19] : 40'd0;
   assign  bs18_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[18]) ?  tx_bs_tx_bit_ctrl_out[18] : (C_RX_BITSLICE_EN[18]) ?  rx_bs_tx_bit_ctrl_out[18] : (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_tx_bit_ctrl_out[18] : 40'd0;
   assign  bs17_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[17]) ?  tx_bs_tx_bit_ctrl_out[17] : (C_RX_BITSLICE_EN[17]) ?  rx_bs_tx_bit_ctrl_out[17] : (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_tx_bit_ctrl_out[17] : 40'd0;
   assign  bs16_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[16]) ?  tx_bs_tx_bit_ctrl_out[16] : (C_RX_BITSLICE_EN[16]) ?  rx_bs_tx_bit_ctrl_out[16] : (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_tx_bit_ctrl_out[16] : 40'd0;
   assign  bs15_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[15]) ?  tx_bs_tx_bit_ctrl_out[15] : (C_RX_BITSLICE_EN[15]) ?  rx_bs_tx_bit_ctrl_out[15] : (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_tx_bit_ctrl_out[15] : 40'd0;
   assign  bs14_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[14]) ?  tx_bs_tx_bit_ctrl_out[14] : (C_RX_BITSLICE_EN[14]) ?  rx_bs_tx_bit_ctrl_out[14] : (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_tx_bit_ctrl_out[14] : 40'd0;
   assign  bs13_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[13]) ?  tx_bs_tx_bit_ctrl_out[13] : (C_RX_BITSLICE_EN[13] || C_RX_BITSLICE0_EN[2]) ?  rx_bs_tx_bit_ctrl_out[13] : (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_tx_bit_ctrl_out[13] : 40'd0;
   assign  bs12_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[12]) ?  tx_bs_tx_bit_ctrl_out[12] : (C_RX_BITSLICE_EN[12]) ?  rx_bs_tx_bit_ctrl_out[12] : (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_tx_bit_ctrl_out[12] : 40'd0;
   assign  bs11_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[11]) ?  tx_bs_tx_bit_ctrl_out[11] : (C_RX_BITSLICE_EN[11]) ?  rx_bs_tx_bit_ctrl_out[11] : (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_tx_bit_ctrl_out[11] : 40'd0;
   assign  bs10_tx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[10]) ?  tx_bs_tx_bit_ctrl_out[10] : (C_RX_BITSLICE_EN[10]) ?  rx_bs_tx_bit_ctrl_out[10] : (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_tx_bit_ctrl_out[10] : 40'd0;
   assign  bs9_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[9])  ?  tx_bs_tx_bit_ctrl_out[9]  : (C_RX_BITSLICE_EN[9])  ?  rx_bs_tx_bit_ctrl_out[9]  : (C_BIDIR_BITSLICE_EN[9]) ? rxtx_bs_tx_bit_ctrl_out[9]:40'd0; 
   assign  bs8_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[8])  ?  tx_bs_tx_bit_ctrl_out[8]  : (C_RX_BITSLICE_EN[8])  ?  rx_bs_tx_bit_ctrl_out[8]  : (C_BIDIR_BITSLICE_EN[8]) ? rxtx_bs_tx_bit_ctrl_out[8]:40'd0; 
   assign  bs7_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[7])  ?  tx_bs_tx_bit_ctrl_out[7]  : (C_RX_BITSLICE_EN[7]) ?  rx_bs_tx_bit_ctrl_out[7]  : (C_BIDIR_BITSLICE_EN[7]) ? rxtx_bs_tx_bit_ctrl_out[7]:40'd0; 
   assign  bs6_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[6])  ?  tx_bs_tx_bit_ctrl_out[6]  : (C_RX_BITSLICE_EN[6] || C_RX_BITSLICE0_EN[1]) ?  rx_bs_tx_bit_ctrl_out[6]  : (C_BIDIR_BITSLICE_EN[6]) ? rxtx_bs_tx_bit_ctrl_out[6]:40'd0; 
   assign  bs5_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[5])  ?  tx_bs_tx_bit_ctrl_out[5]  : (C_RX_BITSLICE_EN[5])  ?  rx_bs_tx_bit_ctrl_out[5]  : (C_BIDIR_BITSLICE_EN[5]) ? rxtx_bs_tx_bit_ctrl_out[5]:40'd0; 
   assign  bs4_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[4])  ?  tx_bs_tx_bit_ctrl_out[4]  : (C_RX_BITSLICE_EN[4])  ?  rx_bs_tx_bit_ctrl_out[4]  : (C_BIDIR_BITSLICE_EN[4]) ? rxtx_bs_tx_bit_ctrl_out[4]:40'd0; 
   assign  bs3_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[3])  ?  tx_bs_tx_bit_ctrl_out[3]  : (C_RX_BITSLICE_EN[3])  ?  rx_bs_tx_bit_ctrl_out[3]  : (C_BIDIR_BITSLICE_EN[3]) ? rxtx_bs_tx_bit_ctrl_out[3]:40'd0; 
   assign  bs2_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[2])  ?  tx_bs_tx_bit_ctrl_out[2]  : (C_RX_BITSLICE_EN[2])  ?  rx_bs_tx_bit_ctrl_out[2]  : (C_BIDIR_BITSLICE_EN[2]) ? rxtx_bs_tx_bit_ctrl_out[2]:40'd0; 
   assign  bs1_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[1])  ?  tx_bs_tx_bit_ctrl_out[1]  : (C_RX_BITSLICE_EN[1]) ?  rx_bs_tx_bit_ctrl_out[1]  : (C_BIDIR_BITSLICE_EN[1]) ? rxtx_bs_tx_bit_ctrl_out[1]:40'd0; 
   assign  bs0_tx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[0])  ?  tx_bs_tx_bit_ctrl_out[0]  : (C_RX_BITSLICE_EN[0] || C_RX_BITSLICE0_EN[0]) ?  rx_bs_tx_bit_ctrl_out[0]  : (C_BIDIR_BITSLICE_EN[0]) ? rxtx_bs_tx_bit_ctrl_out[0]:40'd0; 
   
   wire [39:0] tx_bs_tri_nib_bit_ctrl_out [7:0];
   assign  bs_nib7_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[7]) ? tx_bs_tri_nib_bit_ctrl_out[7]:40'd0; 
   assign  bs_nib6_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[6]) ? tx_bs_tri_nib_bit_ctrl_out[6]:40'd0; 
   assign  bs_nib5_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[5]) ? tx_bs_tri_nib_bit_ctrl_out[5]:40'd0; 
   assign  bs_nib4_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[4]) ? tx_bs_tri_nib_bit_ctrl_out[4]:40'd0; 
   assign  bs_nib3_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[3]) ? tx_bs_tri_nib_bit_ctrl_out[3]:40'd0; 
   assign  bs_nib2_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[2]) ? tx_bs_tri_nib_bit_ctrl_out[2]:40'd0; 
   assign  bs_nib1_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[1]) ? tx_bs_tri_nib_bit_ctrl_out[1]:40'd0; 
   assign  bs_nib0_tri_bit_ctrl_out      =   (TX_BITSLICE_TRI_EN[0]) ? tx_bs_tri_nib_bit_ctrl_out[0]:40'd0; 
   
   wire [39:0] rxtx_bs_rx_bit_ctrl_out[51:0];
   wire [39:0] tx_bs_rx_bit_ctrl_out[51:0];
   wire [39:0] rx_bs_rx_bit_ctrl_out[51:0];
   // Bit control out signals
   assign  bs51_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[51]) ?  tx_bs_rx_bit_ctrl_out[51] : (C_RX_BITSLICE_EN[51]) ?  rx_bs_rx_bit_ctrl_out[51] : (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_rx_bit_ctrl_out[51] : 40'd0;
   assign  bs50_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[50]) ?  tx_bs_rx_bit_ctrl_out[50] : (C_RX_BITSLICE_EN[50]) ?  rx_bs_rx_bit_ctrl_out[50] : (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_rx_bit_ctrl_out[50] : 40'd0;
   assign  bs49_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[49]) ?  tx_bs_rx_bit_ctrl_out[49] : (C_RX_BITSLICE_EN[49]) ?  rx_bs_rx_bit_ctrl_out[49] : (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_rx_bit_ctrl_out[49] : 40'd0;
   assign  bs48_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[48]) ?  tx_bs_rx_bit_ctrl_out[48] : (C_RX_BITSLICE_EN[48]) ?  rx_bs_rx_bit_ctrl_out[48] : (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_rx_bit_ctrl_out[48] : 40'd0;
   assign  bs47_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[47]) ?  tx_bs_rx_bit_ctrl_out[47] : (C_RX_BITSLICE_EN[47]) ?  rx_bs_rx_bit_ctrl_out[47] : (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_rx_bit_ctrl_out[47] : 40'd0;
   assign  bs46_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[46]) ?  tx_bs_rx_bit_ctrl_out[46] : (C_RX_BITSLICE_EN[46]) ?  rx_bs_rx_bit_ctrl_out[46] : (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_rx_bit_ctrl_out[46] : 40'd0;
   assign  bs45_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[45]) ?  tx_bs_rx_bit_ctrl_out[45] : (C_RX_BITSLICE_EN[45] || C_RX_BITSLICE0_EN[7]) ?  rx_bs_rx_bit_ctrl_out[45] : (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_rx_bit_ctrl_out[45] : 40'd0;
   assign  bs44_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[44]) ?  tx_bs_rx_bit_ctrl_out[44] : (C_RX_BITSLICE_EN[44]) ?  rx_bs_rx_bit_ctrl_out[44] : (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_rx_bit_ctrl_out[44] : 40'd0;
   assign  bs43_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[43]) ?  tx_bs_rx_bit_ctrl_out[43] : (C_RX_BITSLICE_EN[43]) ?  rx_bs_rx_bit_ctrl_out[43] : (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_rx_bit_ctrl_out[43] : 40'd0;
   assign  bs42_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[42]) ?  tx_bs_rx_bit_ctrl_out[42] : (C_RX_BITSLICE_EN[42]) ?  rx_bs_rx_bit_ctrl_out[42] : (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_rx_bit_ctrl_out[42] : 40'd0;
   assign  bs41_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[41]) ?  tx_bs_rx_bit_ctrl_out[41] : (C_RX_BITSLICE_EN[41]) ?  rx_bs_rx_bit_ctrl_out[41] : (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_rx_bit_ctrl_out[41] : 40'd0;
   assign  bs40_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[40]) ?  tx_bs_rx_bit_ctrl_out[40] : (C_RX_BITSLICE_EN[40]) ?  rx_bs_rx_bit_ctrl_out[40] : (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_rx_bit_ctrl_out[40] : 40'd0;
   assign  bs39_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[39]) ?  tx_bs_rx_bit_ctrl_out[39] : (C_RX_BITSLICE_EN[39] || C_RX_BITSLICE0_EN[6]) ?  rx_bs_rx_bit_ctrl_out[39] : (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_rx_bit_ctrl_out[39] : 40'd0;
   assign  bs38_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[38]) ?  tx_bs_rx_bit_ctrl_out[38] : (C_RX_BITSLICE_EN[38]) ?  rx_bs_rx_bit_ctrl_out[38] : (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_rx_bit_ctrl_out[38] : 40'd0;
   assign  bs37_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[37]) ?  tx_bs_rx_bit_ctrl_out[37] : (C_RX_BITSLICE_EN[37]) ?  rx_bs_rx_bit_ctrl_out[37] : (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_rx_bit_ctrl_out[37] : 40'd0;
   assign  bs36_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[36]) ?  tx_bs_rx_bit_ctrl_out[36] : (C_RX_BITSLICE_EN[36]) ?  rx_bs_rx_bit_ctrl_out[36] : (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_rx_bit_ctrl_out[36] : 40'd0;
   assign  bs35_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[35]) ?  tx_bs_rx_bit_ctrl_out[35] : (C_RX_BITSLICE_EN[35]) ?  rx_bs_rx_bit_ctrl_out[35] : (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_rx_bit_ctrl_out[35] : 40'd0;
   assign  bs34_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[34]) ?  tx_bs_rx_bit_ctrl_out[34] : (C_RX_BITSLICE_EN[34]) ?  rx_bs_rx_bit_ctrl_out[34] : (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_rx_bit_ctrl_out[34] : 40'd0;
   assign  bs33_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[33]) ?  tx_bs_rx_bit_ctrl_out[33] : (C_RX_BITSLICE_EN[33]) ?  rx_bs_rx_bit_ctrl_out[33] : (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_rx_bit_ctrl_out[33] : 40'd0;
   assign  bs32_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[32]) ?  tx_bs_rx_bit_ctrl_out[32] : (C_RX_BITSLICE_EN[32] || C_RX_BITSLICE0_EN[5]) ?  rx_bs_rx_bit_ctrl_out[32] : (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_rx_bit_ctrl_out[32] : 40'd0;
   assign  bs31_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[31]) ?  tx_bs_rx_bit_ctrl_out[31] : (C_RX_BITSLICE_EN[31]) ?  rx_bs_rx_bit_ctrl_out[31] : (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_rx_bit_ctrl_out[31] : 40'd0;
   assign  bs30_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[30]) ?  tx_bs_rx_bit_ctrl_out[30] : (C_RX_BITSLICE_EN[30]) ?  rx_bs_rx_bit_ctrl_out[30] : (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_rx_bit_ctrl_out[30] : 40'd0;
   assign  bs29_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[29]) ?  tx_bs_rx_bit_ctrl_out[29] : (C_RX_BITSLICE_EN[29]) ?  rx_bs_rx_bit_ctrl_out[29] : (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_rx_bit_ctrl_out[29] : 40'd0;
   assign  bs28_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[28]) ?  tx_bs_rx_bit_ctrl_out[28] : (C_RX_BITSLICE_EN[28]) ?  rx_bs_rx_bit_ctrl_out[28] : (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_rx_bit_ctrl_out[28] : 40'd0;
   assign  bs27_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[27]) ?  tx_bs_rx_bit_ctrl_out[27] : (C_RX_BITSLICE_EN[27]) ?  rx_bs_rx_bit_ctrl_out[27] : (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_rx_bit_ctrl_out[27] : 40'd0;
   assign  bs26_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[26]) ?  tx_bs_rx_bit_ctrl_out[26] : (C_RX_BITSLICE_EN[26] || C_RX_BITSLICE0_EN[4]) ?  rx_bs_rx_bit_ctrl_out[26] : (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_rx_bit_ctrl_out[26] : 40'd0;
   assign  bs25_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[25]) ?  tx_bs_rx_bit_ctrl_out[25] : (C_RX_BITSLICE_EN[25]) ?  rx_bs_rx_bit_ctrl_out[25] : (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_rx_bit_ctrl_out[25] : 40'd0;
   assign  bs24_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[24]) ?  tx_bs_rx_bit_ctrl_out[24] : (C_RX_BITSLICE_EN[24]) ?  rx_bs_rx_bit_ctrl_out[24] : (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_rx_bit_ctrl_out[24] : 40'd0;
   assign  bs23_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[23]) ?  tx_bs_rx_bit_ctrl_out[23] : (C_RX_BITSLICE_EN[23]) ?  rx_bs_rx_bit_ctrl_out[23] : (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_rx_bit_ctrl_out[23] : 40'd0;
   assign  bs22_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[22]) ?  tx_bs_rx_bit_ctrl_out[22] : (C_RX_BITSLICE_EN[22]) ?  rx_bs_rx_bit_ctrl_out[22] : (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_rx_bit_ctrl_out[22] : 40'd0;
   assign  bs21_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[21]) ?  tx_bs_rx_bit_ctrl_out[21] : (C_RX_BITSLICE_EN[21]) ?  rx_bs_rx_bit_ctrl_out[21] : (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_rx_bit_ctrl_out[21] : 40'd0;
   assign  bs20_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[20]) ?  tx_bs_rx_bit_ctrl_out[20] : (C_RX_BITSLICE_EN[20]) ?  rx_bs_rx_bit_ctrl_out[20] : (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_rx_bit_ctrl_out[20] : 40'd0;
   assign  bs19_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[19]) ?  tx_bs_rx_bit_ctrl_out[19] : (C_RX_BITSLICE_EN[19] || C_RX_BITSLICE0_EN[3]) ?  rx_bs_rx_bit_ctrl_out[19] : (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_rx_bit_ctrl_out[19] : 40'd0;
   assign  bs18_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[18]) ?  tx_bs_rx_bit_ctrl_out[18] : (C_RX_BITSLICE_EN[18]) ?  rx_bs_rx_bit_ctrl_out[18] : (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_rx_bit_ctrl_out[18] : 40'd0;
   assign  bs17_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[17]) ?  tx_bs_rx_bit_ctrl_out[17] : (C_RX_BITSLICE_EN[17]) ?  rx_bs_rx_bit_ctrl_out[17] : (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_rx_bit_ctrl_out[17] : 40'd0;
   assign  bs16_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[16]) ?  tx_bs_rx_bit_ctrl_out[16] : (C_RX_BITSLICE_EN[16]) ?  rx_bs_rx_bit_ctrl_out[16] : (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_rx_bit_ctrl_out[16] : 40'd0;
   assign  bs15_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[15]) ?  tx_bs_rx_bit_ctrl_out[15] : (C_RX_BITSLICE_EN[15]) ?  rx_bs_rx_bit_ctrl_out[15] : (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_rx_bit_ctrl_out[15] : 40'd0;
   assign  bs14_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[14]) ?  tx_bs_rx_bit_ctrl_out[14] : (C_RX_BITSLICE_EN[14]) ?  rx_bs_rx_bit_ctrl_out[14] : (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_rx_bit_ctrl_out[14] : 40'd0;
   assign  bs13_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[13]) ?  tx_bs_rx_bit_ctrl_out[13] : (C_RX_BITSLICE_EN[13] || C_RX_BITSLICE0_EN[2]) ?  rx_bs_rx_bit_ctrl_out[13] : (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_rx_bit_ctrl_out[13] : 40'd0;
   assign  bs12_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[12]) ?  tx_bs_rx_bit_ctrl_out[12] : (C_RX_BITSLICE_EN[12]) ?  rx_bs_rx_bit_ctrl_out[12] : (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_rx_bit_ctrl_out[12] : 40'd0;
   assign  bs11_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[11]) ?  tx_bs_rx_bit_ctrl_out[11] : (C_RX_BITSLICE_EN[11]) ?  rx_bs_rx_bit_ctrl_out[11] : (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_rx_bit_ctrl_out[11] : 40'd0;
   assign  bs10_rx_bit_ctrl_out     =   (C_TX_BITSLICE_EN[10]) ?  tx_bs_rx_bit_ctrl_out[10] : (C_RX_BITSLICE_EN[10]) ?  rx_bs_rx_bit_ctrl_out[10] : (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_rx_bit_ctrl_out[10] : 40'd0;
   assign  bs9_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[9])  ?  tx_bs_rx_bit_ctrl_out[9]  : (C_RX_BITSLICE_EN[9])  ?  rx_bs_rx_bit_ctrl_out[9]  : (C_BIDIR_BITSLICE_EN[9]) ? rxtx_bs_rx_bit_ctrl_out[9]:40'd0; 
   assign  bs8_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[8])  ?  tx_bs_rx_bit_ctrl_out[8]  : (C_RX_BITSLICE_EN[8])  ?  rx_bs_rx_bit_ctrl_out[8]  : (C_BIDIR_BITSLICE_EN[8]) ? rxtx_bs_rx_bit_ctrl_out[8]:40'd0; 
   assign  bs7_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[7])  ?  tx_bs_rx_bit_ctrl_out[7]  : (C_RX_BITSLICE_EN[7])  ?  rx_bs_rx_bit_ctrl_out[7]  : (C_BIDIR_BITSLICE_EN[7]) ? rxtx_bs_rx_bit_ctrl_out[7]:40'd0; 
   assign  bs6_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[6])  ?  tx_bs_rx_bit_ctrl_out[6]  : (C_RX_BITSLICE_EN[6] || C_RX_BITSLICE0_EN[1])  ?  rx_bs_rx_bit_ctrl_out[6]  : (C_BIDIR_BITSLICE_EN[6]) ? rxtx_bs_rx_bit_ctrl_out[6]:40'd0; 
   assign  bs5_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[5])  ?  tx_bs_rx_bit_ctrl_out[5]  : (C_RX_BITSLICE_EN[5])  ?  rx_bs_rx_bit_ctrl_out[5]  : (C_BIDIR_BITSLICE_EN[5]) ? rxtx_bs_rx_bit_ctrl_out[5]:40'd0; 
   assign  bs4_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[4])  ?  tx_bs_rx_bit_ctrl_out[4]  : (C_RX_BITSLICE_EN[4])  ?  rx_bs_rx_bit_ctrl_out[4]  : (C_BIDIR_BITSLICE_EN[4]) ? rxtx_bs_rx_bit_ctrl_out[4]:40'd0; 
   assign  bs3_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[3])  ?  tx_bs_rx_bit_ctrl_out[3]  : (C_RX_BITSLICE_EN[3])  ?  rx_bs_rx_bit_ctrl_out[3]  : (C_BIDIR_BITSLICE_EN[3]) ? rxtx_bs_rx_bit_ctrl_out[3]:40'd0; 
   assign  bs2_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[2])  ?  tx_bs_rx_bit_ctrl_out[2]  : (C_RX_BITSLICE_EN[2])  ?  rx_bs_rx_bit_ctrl_out[2]  : (C_BIDIR_BITSLICE_EN[2]) ? rxtx_bs_rx_bit_ctrl_out[2]:40'd0; 
   assign  bs1_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[1])  ?  tx_bs_rx_bit_ctrl_out[1]  : (C_RX_BITSLICE_EN[1])  ?  rx_bs_rx_bit_ctrl_out[1]  : (C_BIDIR_BITSLICE_EN[1]) ? rxtx_bs_rx_bit_ctrl_out[1]:40'd0; 
   assign  bs0_rx_bit_ctrl_out      =   (C_TX_BITSLICE_EN[0])  ?  tx_bs_rx_bit_ctrl_out[0]  : (C_RX_BITSLICE_EN[0] || C_RX_BITSLICE0_EN[0])  ?  rx_bs_rx_bit_ctrl_out[0]  : (C_BIDIR_BITSLICE_EN[0]) ? rxtx_bs_rx_bit_ctrl_out[0]:40'd0; 
   // -------------------------------------Ribbon cable signals end--------------------------------------
   
   //---------------------------------------- Fifo Signals ------------------
   wire [51:0] rxtx_bs_rx_fifo_empty_out;
   wire [51:0] rx_bs_fifo_empty_out;
   assign   bs51_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_rx_fifo_empty_out[51] : (C_RX_BITSLICE_EN[51]) ? rx_bs_fifo_empty_out[51] : 1'b1;
   assign   bs50_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_rx_fifo_empty_out[50] : (C_RX_BITSLICE_EN[50]) ? rx_bs_fifo_empty_out[50] : 1'b1;
   assign   bs49_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_rx_fifo_empty_out[49] : (C_RX_BITSLICE_EN[49]) ? rx_bs_fifo_empty_out[49] : 1'b1;
   assign   bs48_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_rx_fifo_empty_out[48] : (C_RX_BITSLICE_EN[48]) ? rx_bs_fifo_empty_out[48] : 1'b1;
   assign   bs47_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_rx_fifo_empty_out[47] : (C_RX_BITSLICE_EN[47]) ? rx_bs_fifo_empty_out[47] : 1'b1;
   assign   bs46_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_rx_fifo_empty_out[46] : (C_RX_BITSLICE_EN[46]) ? rx_bs_fifo_empty_out[46] : 1'b1;
   assign   bs45_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_rx_fifo_empty_out[45] : (C_RX_BITSLICE_EN[45]) ? rx_bs_fifo_empty_out[45] : 1'b1;
   assign   bs44_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_rx_fifo_empty_out[44] : (C_RX_BITSLICE_EN[44]) ? rx_bs_fifo_empty_out[44] : 1'b1;
   assign   bs43_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_rx_fifo_empty_out[43] : (C_RX_BITSLICE_EN[43]) ? rx_bs_fifo_empty_out[43] : 1'b1;
   assign   bs42_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_rx_fifo_empty_out[42] : (C_RX_BITSLICE_EN[42]) ? rx_bs_fifo_empty_out[42] : 1'b1;
   assign   bs41_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_rx_fifo_empty_out[41] : (C_RX_BITSLICE_EN[41]) ? rx_bs_fifo_empty_out[41] : 1'b1;
   assign   bs40_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_rx_fifo_empty_out[40] : (C_RX_BITSLICE_EN[40]) ? rx_bs_fifo_empty_out[40] : 1'b1;
   assign   bs39_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_rx_fifo_empty_out[39] : (C_RX_BITSLICE_EN[39]) ? rx_bs_fifo_empty_out[39] : 1'b1;
   assign   bs38_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_rx_fifo_empty_out[38] : (C_RX_BITSLICE_EN[38]) ? rx_bs_fifo_empty_out[38] : 1'b1;
   assign   bs37_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_rx_fifo_empty_out[37] : (C_RX_BITSLICE_EN[37]) ? rx_bs_fifo_empty_out[37] : 1'b1;
   assign   bs36_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_rx_fifo_empty_out[36] : (C_RX_BITSLICE_EN[36]) ? rx_bs_fifo_empty_out[36] : 1'b1;
   assign   bs35_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_rx_fifo_empty_out[35] : (C_RX_BITSLICE_EN[35]) ? rx_bs_fifo_empty_out[35] : 1'b1;
   assign   bs34_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_rx_fifo_empty_out[34] : (C_RX_BITSLICE_EN[34]) ? rx_bs_fifo_empty_out[34] : 1'b1;
   assign   bs33_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_rx_fifo_empty_out[33] : (C_RX_BITSLICE_EN[33]) ? rx_bs_fifo_empty_out[33] : 1'b1;
   assign   bs32_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_rx_fifo_empty_out[32] : (C_RX_BITSLICE_EN[32]) ? rx_bs_fifo_empty_out[32] : 1'b1;
   assign   bs31_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_rx_fifo_empty_out[31] : (C_RX_BITSLICE_EN[31]) ? rx_bs_fifo_empty_out[31] : 1'b1;
   assign   bs30_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_rx_fifo_empty_out[30] : (C_RX_BITSLICE_EN[30]) ? rx_bs_fifo_empty_out[30] : 1'b1;
   assign   bs29_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_rx_fifo_empty_out[29] : (C_RX_BITSLICE_EN[29]) ? rx_bs_fifo_empty_out[29] : 1'b1;
   assign   bs28_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_rx_fifo_empty_out[28] : (C_RX_BITSLICE_EN[28]) ? rx_bs_fifo_empty_out[28] : 1'b1;
   assign   bs27_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_rx_fifo_empty_out[27] : (C_RX_BITSLICE_EN[27]) ? rx_bs_fifo_empty_out[27] : 1'b1;
   assign   bs26_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_rx_fifo_empty_out[26] : (C_RX_BITSLICE_EN[26]) ? rx_bs_fifo_empty_out[26] : 1'b1;
   assign   bs25_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_rx_fifo_empty_out[25] : (C_RX_BITSLICE_EN[25]) ? rx_bs_fifo_empty_out[25] : 1'b1;
   assign   bs24_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_rx_fifo_empty_out[24] : (C_RX_BITSLICE_EN[24]) ? rx_bs_fifo_empty_out[24] : 1'b1;
   assign   bs23_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_rx_fifo_empty_out[23] : (C_RX_BITSLICE_EN[23]) ? rx_bs_fifo_empty_out[23] : 1'b1;
   assign   bs22_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_rx_fifo_empty_out[22] : (C_RX_BITSLICE_EN[22]) ? rx_bs_fifo_empty_out[22] : 1'b1;
   assign   bs21_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_rx_fifo_empty_out[21] : (C_RX_BITSLICE_EN[21]) ? rx_bs_fifo_empty_out[21] : 1'b1;
   assign   bs20_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_rx_fifo_empty_out[20] : (C_RX_BITSLICE_EN[20]) ? rx_bs_fifo_empty_out[20] : 1'b1;
   assign   bs19_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_rx_fifo_empty_out[19] : (C_RX_BITSLICE_EN[19]) ? rx_bs_fifo_empty_out[19] : 1'b1;
   assign   bs18_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_rx_fifo_empty_out[18] : (C_RX_BITSLICE_EN[18]) ? rx_bs_fifo_empty_out[18] : 1'b1;
   assign   bs17_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_rx_fifo_empty_out[17] : (C_RX_BITSLICE_EN[17]) ? rx_bs_fifo_empty_out[17] : 1'b1;
   assign   bs16_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_rx_fifo_empty_out[16] : (C_RX_BITSLICE_EN[16]) ? rx_bs_fifo_empty_out[16] : 1'b1;
   assign   bs15_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_rx_fifo_empty_out[15] : (C_RX_BITSLICE_EN[15]) ? rx_bs_fifo_empty_out[15] : 1'b1;
   assign   bs14_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_rx_fifo_empty_out[14] : (C_RX_BITSLICE_EN[14]) ? rx_bs_fifo_empty_out[14] : 1'b1;
   assign   bs13_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_rx_fifo_empty_out[13] : (C_RX_BITSLICE_EN[13]) ? rx_bs_fifo_empty_out[13] : 1'b1;
   assign   bs12_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_rx_fifo_empty_out[12] : (C_RX_BITSLICE_EN[12]) ? rx_bs_fifo_empty_out[12] : 1'b1;
   assign   bs11_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_rx_fifo_empty_out[11] : (C_RX_BITSLICE_EN[11]) ? rx_bs_fifo_empty_out[11] : 1'b1;
   assign   bs10_fifo_empty_out    =     (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_rx_fifo_empty_out[10] : (C_RX_BITSLICE_EN[10]) ? rx_bs_fifo_empty_out[10] : 1'b1;
   assign   bs9_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_rx_fifo_empty_out[9]  : (C_RX_BITSLICE_EN[9])  ? rx_bs_fifo_empty_out[9]  : 1'b1;
   assign   bs8_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_rx_fifo_empty_out[8]  : (C_RX_BITSLICE_EN[8])  ? rx_bs_fifo_empty_out[8]  : 1'b1;
   assign   bs7_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_rx_fifo_empty_out[7]  : (C_RX_BITSLICE_EN[7])  ? rx_bs_fifo_empty_out[7]  : 1'b1;
   assign   bs6_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_rx_fifo_empty_out[6]  : (C_RX_BITSLICE_EN[6])  ? rx_bs_fifo_empty_out[6]  : 1'b1;
   assign   bs5_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_rx_fifo_empty_out[5]  : (C_RX_BITSLICE_EN[5])  ? rx_bs_fifo_empty_out[5]  : 1'b1;
   assign   bs4_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_rx_fifo_empty_out[4]  : (C_RX_BITSLICE_EN[4])  ? rx_bs_fifo_empty_out[4]  : 1'b1;
   assign   bs3_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_rx_fifo_empty_out[3]  : (C_RX_BITSLICE_EN[3])  ? rx_bs_fifo_empty_out[3]  : 1'b1;
   assign   bs2_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_rx_fifo_empty_out[2]  : (C_RX_BITSLICE_EN[2])  ? rx_bs_fifo_empty_out[2]  : 1'b1;
   assign   bs1_fifo_empty_out     =     (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_rx_fifo_empty_out[1]  : (C_RX_BITSLICE_EN[1])  ? rx_bs_fifo_empty_out[1]  : 1'b1;
   assign   bs0_fifo_empty_out     =    (C_BIDIR_BITSLICE_EN[0])   ? rxtx_bs_rx_fifo_empty_out[0]  : (C_RX_BITSLICE_EN[0])  ? rx_bs_fifo_empty_out[0]  : 1'b1;
   
   // Fifo Read clock 
   wire [51:0] rxtx_bs_rx_fifo_rd_clk_in;
   assign rxtx_bs_rx_fifo_rd_clk_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_fifo_rd_clk  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_fifo_rd_clk   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_fifo_rd_clk   : 1'b0 };
   
   
   wire [51:0] rx_bs_fifo_rd_clk_in;
   assign rx_bs_fifo_rd_clk_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_fifo_rd_clk  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_fifo_rd_clk   :  1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_fifo_rd_clk   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_fifo_rd_clk   : 1'b0 };
   // Read enable		    
   
   wire [51:0] rxtx_bs_rx_fifo_rd_en_in;
   assign rxtx_bs_rx_fifo_rd_en_in = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_fifo_rd_en  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_fifo_rd_en   : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_fifo_rd_en   : 1'b0 };
   					  
   wire [51:0] rx_bs_fifo_rd_en_in;
   assign rx_bs_fifo_rd_en_in = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[45]) ? bs45_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[39]) ? bs39_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[32]) ? bs32_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[26]) ? bs26_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[19]) ? bs19_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[13]) ? bs13_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_fifo_rd_en  : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[6])  ? bs6_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_fifo_rd_en   : 1'b0,
                         (C_RX_BITSLICE_EN[0])  ? bs0_fifo_rd_en   : 1'b0 };
   //-----------------------------------Fifo signals end-----------------------------------------
   // ---------------------Bitslip signals------------
   
     					  
   // Bitslip error
   
   //-------------------Bitslip Error signals-----------------------
   wire [51:0] rxtx_bs_rx_bitslip_error_out;
   wire [51:0] rx_bs_bitslip_error_out;
   assign   bs51_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_rx_bitslip_error_out[51] : (C_RX_BITSLICE_EN[51]) ? rx_bs_bitslip_error_out[51] : 1'b0;
   assign   bs50_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_rx_bitslip_error_out[50] : (C_RX_BITSLICE_EN[50]) ? rx_bs_bitslip_error_out[50] : 1'b0;
   assign   bs49_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_rx_bitslip_error_out[49] : (C_RX_BITSLICE_EN[49]) ? rx_bs_bitslip_error_out[49] : 1'b0;
   assign   bs48_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_rx_bitslip_error_out[48] : (C_RX_BITSLICE_EN[48]) ? rx_bs_bitslip_error_out[48] : 1'b0;
   assign   bs47_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_rx_bitslip_error_out[47] : (C_RX_BITSLICE_EN[47]) ? rx_bs_bitslip_error_out[47] : 1'b0;
   assign   bs46_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_rx_bitslip_error_out[46] : (C_RX_BITSLICE_EN[46]) ? rx_bs_bitslip_error_out[46] : 1'b0;
   assign   bs45_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_rx_bitslip_error_out[45] : (C_RX_BITSLICE_EN[45]) ? rx_bs_bitslip_error_out[45] : 1'b0;
   assign   bs44_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_rx_bitslip_error_out[44] : (C_RX_BITSLICE_EN[44]) ? rx_bs_bitslip_error_out[44] : 1'b0;
   assign   bs43_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_rx_bitslip_error_out[43] : (C_RX_BITSLICE_EN[43]) ? rx_bs_bitslip_error_out[43] : 1'b0;
   assign   bs42_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_rx_bitslip_error_out[42] : (C_RX_BITSLICE_EN[42]) ? rx_bs_bitslip_error_out[42] : 1'b0;
   assign   bs41_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_rx_bitslip_error_out[41] : (C_RX_BITSLICE_EN[41]) ? rx_bs_bitslip_error_out[41] : 1'b0;
   assign   bs40_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_rx_bitslip_error_out[40] : (C_RX_BITSLICE_EN[40]) ? rx_bs_bitslip_error_out[40] : 1'b0;
   assign   bs39_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_rx_bitslip_error_out[39] : (C_RX_BITSLICE_EN[39]) ? rx_bs_bitslip_error_out[39] : 1'b0;
   assign   bs38_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_rx_bitslip_error_out[38] : (C_RX_BITSLICE_EN[38]) ? rx_bs_bitslip_error_out[38] : 1'b0;
   assign   bs37_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_rx_bitslip_error_out[37] : (C_RX_BITSLICE_EN[37]) ? rx_bs_bitslip_error_out[37] : 1'b0;
   assign   bs36_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_rx_bitslip_error_out[36] : (C_RX_BITSLICE_EN[36]) ? rx_bs_bitslip_error_out[36] : 1'b0;
   assign   bs35_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_rx_bitslip_error_out[35] : (C_RX_BITSLICE_EN[35]) ? rx_bs_bitslip_error_out[35] : 1'b0;
   assign   bs34_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_rx_bitslip_error_out[34] : (C_RX_BITSLICE_EN[34]) ? rx_bs_bitslip_error_out[34] : 1'b0;
   assign   bs33_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_rx_bitslip_error_out[33] : (C_RX_BITSLICE_EN[33]) ? rx_bs_bitslip_error_out[33] : 1'b0;
   assign   bs32_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_rx_bitslip_error_out[32] : (C_RX_BITSLICE_EN[32]) ? rx_bs_bitslip_error_out[32] : 1'b0;
   assign   bs31_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_rx_bitslip_error_out[31] : (C_RX_BITSLICE_EN[31]) ? rx_bs_bitslip_error_out[31] : 1'b0;
   assign   bs30_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_rx_bitslip_error_out[30] : (C_RX_BITSLICE_EN[30]) ? rx_bs_bitslip_error_out[30] : 1'b0;
   assign   bs29_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_rx_bitslip_error_out[29] : (C_RX_BITSLICE_EN[29]) ? rx_bs_bitslip_error_out[29] : 1'b0;
   assign   bs28_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_rx_bitslip_error_out[28] : (C_RX_BITSLICE_EN[28]) ? rx_bs_bitslip_error_out[28] : 1'b0;
   assign   bs27_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_rx_bitslip_error_out[27] : (C_RX_BITSLICE_EN[27]) ? rx_bs_bitslip_error_out[27] : 1'b0;
   assign   bs26_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_rx_bitslip_error_out[26] : (C_RX_BITSLICE_EN[26]) ? rx_bs_bitslip_error_out[26] : 1'b0;
   assign   bs25_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_rx_bitslip_error_out[25] : (C_RX_BITSLICE_EN[25]) ? rx_bs_bitslip_error_out[25] : 1'b0;
   assign   bs24_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_rx_bitslip_error_out[24] : (C_RX_BITSLICE_EN[24]) ? rx_bs_bitslip_error_out[24] : 1'b0;
   assign   bs23_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_rx_bitslip_error_out[23] : (C_RX_BITSLICE_EN[23]) ? rx_bs_bitslip_error_out[23] : 1'b0;
   assign   bs22_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_rx_bitslip_error_out[22] : (C_RX_BITSLICE_EN[22]) ? rx_bs_bitslip_error_out[22] : 1'b0;
   assign   bs21_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_rx_bitslip_error_out[21] : (C_RX_BITSLICE_EN[21]) ? rx_bs_bitslip_error_out[21] : 1'b0;
   assign   bs20_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_rx_bitslip_error_out[20] : (C_RX_BITSLICE_EN[20]) ? rx_bs_bitslip_error_out[20] : 1'b0;
   assign   bs19_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_rx_bitslip_error_out[19] : (C_RX_BITSLICE_EN[19]) ? rx_bs_bitslip_error_out[19] : 1'b0;
   assign   bs18_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_rx_bitslip_error_out[18] : (C_RX_BITSLICE_EN[18]) ? rx_bs_bitslip_error_out[18] : 1'b0;
   assign   bs17_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_rx_bitslip_error_out[17] : (C_RX_BITSLICE_EN[17]) ? rx_bs_bitslip_error_out[17] : 1'b0;
   assign   bs16_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_rx_bitslip_error_out[16] : (C_RX_BITSLICE_EN[16]) ? rx_bs_bitslip_error_out[16] : 1'b0;
   assign   bs15_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_rx_bitslip_error_out[15] : (C_RX_BITSLICE_EN[15]) ? rx_bs_bitslip_error_out[15] : 1'b0;
   assign   bs14_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_rx_bitslip_error_out[14] : (C_RX_BITSLICE_EN[14]) ? rx_bs_bitslip_error_out[14] : 1'b0;
   assign   bs13_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_rx_bitslip_error_out[13] : (C_RX_BITSLICE_EN[13]) ? rx_bs_bitslip_error_out[13] : 1'b0;
   assign   bs12_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_rx_bitslip_error_out[12] : (C_RX_BITSLICE_EN[12]) ? rx_bs_bitslip_error_out[12] : 1'b0;
   assign   bs11_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_rx_bitslip_error_out[11] : (C_RX_BITSLICE_EN[11]) ? rx_bs_bitslip_error_out[11] : 1'b0;
   assign   bs10_bitslip_error_out    =     (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_rx_bitslip_error_out[10] : (C_RX_BITSLICE_EN[10]) ? rx_bs_bitslip_error_out[10] : 1'b0;
   assign   bs9_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_rx_bitslip_error_out[9]  : (C_RX_BITSLICE_EN[9])  ? rx_bs_bitslip_error_out[9]  : 1'b0;
   assign   bs8_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_rx_bitslip_error_out[8]  : (C_RX_BITSLICE_EN[8])  ? rx_bs_bitslip_error_out[8]  : 1'b0;
   assign   bs7_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_rx_bitslip_error_out[7]  : (C_RX_BITSLICE_EN[7])  ? rx_bs_bitslip_error_out[7]  : 1'b0;
   assign   bs6_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_rx_bitslip_error_out[6]  : (C_RX_BITSLICE_EN[6])  ? rx_bs_bitslip_error_out[6]  : 1'b0;
   assign   bs5_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_rx_bitslip_error_out[5]  : (C_RX_BITSLICE_EN[5])  ? rx_bs_bitslip_error_out[5]  : 1'b0;
   assign   bs4_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_rx_bitslip_error_out[4]  : (C_RX_BITSLICE_EN[4])  ? rx_bs_bitslip_error_out[4]  : 1'b0;
   assign   bs3_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_rx_bitslip_error_out[3]  : (C_RX_BITSLICE_EN[3])  ? rx_bs_bitslip_error_out[3]  : 1'b0;
   assign   bs2_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_rx_bitslip_error_out[2]  : (C_RX_BITSLICE_EN[2])  ? rx_bs_bitslip_error_out[2]  : 1'b0;
   assign   bs1_bitslip_error_out     =     (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_rx_bitslip_error_out[1]  : (C_RX_BITSLICE_EN[1])  ? rx_bs_bitslip_error_out[1]  : 1'b0;
   assign   bs0_bitslip_error_out     =    (C_BIDIR_BITSLICE_EN[0])   ? rxtx_bs_rx_bitslip_error_out[0]  : (C_RX_BITSLICE_EN[0])  ? rx_bs_bitslip_error_out[0]  : 1'b0;
   //------------------------------bitslip signals end ---------------------------
   
   //---------------------------------Data signals --------------------------------------------
   // --------------------------------D (TX Data from fabric signals)------------------------   
   wire [C_SERIALIZATION_FACTOR -1 : 0] tx_bs_D_data_from_fabric_in[51:0];
   
   assign tx_bs_D_data_from_fabric_in[51]  =   (C_TX_BITSLICE_EN[51]) ? bs51_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[50]  =   (C_TX_BITSLICE_EN[50]) ? bs50_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[49]  =   (C_TX_BITSLICE_EN[49]) ? bs49_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[48]  =   (C_TX_BITSLICE_EN[48]) ? bs48_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[47]  =   (C_TX_BITSLICE_EN[47]) ? bs47_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[46]  =   (C_TX_BITSLICE_EN[46]) ? bs46_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[45]  =   (C_TX_BITSLICE_EN[45]) ? bs45_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[44]  =   (C_TX_BITSLICE_EN[44]) ? bs44_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[43]  =   (C_TX_BITSLICE_EN[43]) ? bs43_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[42]  =   (C_TX_BITSLICE_EN[42]) ? bs42_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[41]  =   (C_TX_BITSLICE_EN[41]) ? bs41_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[40]  =   (C_TX_BITSLICE_EN[40]) ? bs40_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[39]  =   (C_TX_BITSLICE_EN[39]) ? bs39_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[38]  =   (C_TX_BITSLICE_EN[38]) ? bs38_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[37]  =   (C_TX_BITSLICE_EN[37]) ? bs37_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[36]  =   (C_TX_BITSLICE_EN[36]) ? bs36_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[35]  =   (C_TX_BITSLICE_EN[35]) ? bs35_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[34]  =   (C_TX_BITSLICE_EN[34]) ? bs34_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[33]  =   (C_TX_BITSLICE_EN[33]) ? bs33_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[32]  =   (C_TX_BITSLICE_EN[32]) ? bs32_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[31]  =   (C_TX_BITSLICE_EN[31]) ? bs31_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[30]  =   (C_TX_BITSLICE_EN[30]) ? bs30_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[29]  =   (C_TX_BITSLICE_EN[29]) ? bs29_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[28]  =   (C_TX_BITSLICE_EN[28]) ? bs28_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[27]  =   (C_TX_BITSLICE_EN[27]) ? bs27_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[26]  =   (C_TX_BITSLICE_EN[26]) ? bs26_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[25]  =   (C_TX_BITSLICE_EN[25]) ? bs25_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[24]  =   (C_TX_BITSLICE_EN[24]) ? bs24_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[23]  =   (C_TX_BITSLICE_EN[23]) ? bs23_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[22]  =   (C_TX_BITSLICE_EN[22]) ? bs22_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[21]  =   (C_TX_BITSLICE_EN[21]) ? bs21_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[20]  =   (C_TX_BITSLICE_EN[20]) ? bs20_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[19]  =   (C_TX_BITSLICE_EN[19]) ? bs19_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[18]  =   (C_TX_BITSLICE_EN[18]) ? bs18_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[17]  =   (C_TX_BITSLICE_EN[17]) ? bs17_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[16]  =   (C_TX_BITSLICE_EN[16]) ? bs16_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[15]  =   (C_TX_BITSLICE_EN[15]) ? bs15_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[14]  =   (C_TX_BITSLICE_EN[14]) ? bs14_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[13]  =   (C_TX_BITSLICE_EN[13]) ? bs13_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[12]  =   (C_TX_BITSLICE_EN[12]) ? bs12_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[11]  =   (C_TX_BITSLICE_EN[11]) ? bs11_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[10]  =   (C_TX_BITSLICE_EN[10]) ? bs10_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[9]   =   (C_TX_BITSLICE_EN[9])  ? bs9_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[8]   =   (C_TX_BITSLICE_EN[8])  ? bs8_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[7]   =   (C_TX_BITSLICE_EN[7])  ? bs7_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[6]   =   (C_TX_BITSLICE_EN[6])  ? bs6_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[5]   =   (C_TX_BITSLICE_EN[5])  ? bs5_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[4]   =   (C_TX_BITSLICE_EN[4])  ? bs4_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[3]   =   (C_TX_BITSLICE_EN[3])  ? bs3_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[2]   =   (C_TX_BITSLICE_EN[2])  ? bs2_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[1]   =   (C_TX_BITSLICE_EN[1])  ? bs1_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign tx_bs_D_data_from_fabric_in[0]   =   (C_TX_BITSLICE_EN[0])  ? bs0_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   		      
    // Rx data to fabric signals			 
   wire [51:0] tx_bs_O_data_out;
   wire [51:0] rxtx_bs_O_tx_data_out;
   assign   bs51_O_out    =     (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_O_tx_data_out[51] : (C_TX_BITSLICE_EN[51]) ? tx_bs_O_data_out[51] : 1'd0;
   assign   bs50_O_out    =     (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_O_tx_data_out[50] : (C_TX_BITSLICE_EN[50]) ? tx_bs_O_data_out[50] : 1'd0;
   assign   bs49_O_out    =     (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_O_tx_data_out[49] : (C_TX_BITSLICE_EN[49]) ? tx_bs_O_data_out[49] : 1'd0;
   assign   bs48_O_out    =     (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_O_tx_data_out[48] : (C_TX_BITSLICE_EN[48]) ? tx_bs_O_data_out[48] : 1'd0;
   assign   bs47_O_out    =     (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_O_tx_data_out[47] : (C_TX_BITSLICE_EN[47]) ? tx_bs_O_data_out[47] : 1'd0;
   assign   bs46_O_out    =     (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_O_tx_data_out[46] : (C_TX_BITSLICE_EN[46]) ? tx_bs_O_data_out[46] : 1'd0;
   assign   bs45_O_out    =     (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_O_tx_data_out[45] : (C_TX_BITSLICE_EN[45]) ? tx_bs_O_data_out[45] : 1'd0;
   assign   bs44_O_out    =     (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_O_tx_data_out[44] : (C_TX_BITSLICE_EN[44]) ? tx_bs_O_data_out[44] : 1'd0;
   assign   bs43_O_out    =     (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_O_tx_data_out[43] : (C_TX_BITSLICE_EN[43]) ? tx_bs_O_data_out[43] : 1'd0;
   assign   bs42_O_out    =     (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_O_tx_data_out[42] : (C_TX_BITSLICE_EN[42]) ? tx_bs_O_data_out[42] : 1'd0;
   assign   bs41_O_out    =     (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_O_tx_data_out[41] : (C_TX_BITSLICE_EN[41]) ? tx_bs_O_data_out[41] : 1'd0;
   assign   bs40_O_out    =     (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_O_tx_data_out[40] : (C_TX_BITSLICE_EN[40]) ? tx_bs_O_data_out[40] : 1'd0;
   assign   bs39_O_out    =     (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_O_tx_data_out[39] : (C_TX_BITSLICE_EN[39]) ? tx_bs_O_data_out[39] : 1'd0;
   assign   bs38_O_out    =     (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_O_tx_data_out[38] : (C_TX_BITSLICE_EN[38]) ? tx_bs_O_data_out[38] : 1'd0;
   assign   bs37_O_out    =     (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_O_tx_data_out[37] : (C_TX_BITSLICE_EN[37]) ? tx_bs_O_data_out[37] : 1'd0;
   assign   bs36_O_out    =     (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_O_tx_data_out[36] : (C_TX_BITSLICE_EN[36]) ? tx_bs_O_data_out[36] : 1'd0;
   assign   bs35_O_out    =     (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_O_tx_data_out[35] : (C_TX_BITSLICE_EN[35]) ? tx_bs_O_data_out[35] : 1'd0;
   assign   bs34_O_out    =     (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_O_tx_data_out[34] : (C_TX_BITSLICE_EN[34]) ? tx_bs_O_data_out[34] : 1'd0;
   assign   bs33_O_out    =     (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_O_tx_data_out[33] : (C_TX_BITSLICE_EN[33]) ? tx_bs_O_data_out[33] : 1'd0;
   assign   bs32_O_out    =     (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_O_tx_data_out[32] : (C_TX_BITSLICE_EN[32]) ? tx_bs_O_data_out[32] : 1'd0;
   assign   bs31_O_out    =     (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_O_tx_data_out[31] : (C_TX_BITSLICE_EN[31]) ? tx_bs_O_data_out[31] : 1'd0;
   assign   bs30_O_out    =     (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_O_tx_data_out[30] : (C_TX_BITSLICE_EN[30]) ? tx_bs_O_data_out[30] : 1'd0;
   assign   bs29_O_out    =     (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_O_tx_data_out[29] : (C_TX_BITSLICE_EN[29]) ? tx_bs_O_data_out[29] : 1'd0;
   assign   bs28_O_out    =     (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_O_tx_data_out[28] : (C_TX_BITSLICE_EN[28]) ? tx_bs_O_data_out[28] : 1'd0;
   assign   bs27_O_out    =     (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_O_tx_data_out[27] : (C_TX_BITSLICE_EN[27]) ? tx_bs_O_data_out[27] : 1'd0;
   assign   bs26_O_out    =     (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_O_tx_data_out[26] : (C_TX_BITSLICE_EN[26]) ? tx_bs_O_data_out[26] : 1'd0;
   assign   bs25_O_out    =     (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_O_tx_data_out[25] : (C_TX_BITSLICE_EN[25]) ? tx_bs_O_data_out[25] : 1'd0;
   assign   bs24_O_out    =     (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_O_tx_data_out[24] : (C_TX_BITSLICE_EN[24]) ? tx_bs_O_data_out[24] : 1'd0;
   assign   bs23_O_out    =     (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_O_tx_data_out[23] : (C_TX_BITSLICE_EN[23]) ? tx_bs_O_data_out[23] : 1'd0;
   assign   bs22_O_out    =     (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_O_tx_data_out[22] : (C_TX_BITSLICE_EN[22]) ? tx_bs_O_data_out[22] : 1'd0;
   assign   bs21_O_out    =     (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_O_tx_data_out[21] : (C_TX_BITSLICE_EN[21]) ? tx_bs_O_data_out[21] : 1'd0;
   assign   bs20_O_out    =     (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_O_tx_data_out[20] : (C_TX_BITSLICE_EN[20]) ? tx_bs_O_data_out[20] : 1'd0;
   assign   bs19_O_out    =     (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_O_tx_data_out[19] : (C_TX_BITSLICE_EN[19]) ? tx_bs_O_data_out[19] : 1'd0;
   assign   bs18_O_out    =     (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_O_tx_data_out[18] : (C_TX_BITSLICE_EN[18]) ? tx_bs_O_data_out[18] : 1'd0;
   assign   bs17_O_out    =     (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_O_tx_data_out[17] : (C_TX_BITSLICE_EN[17]) ? tx_bs_O_data_out[17] : 1'd0;
   assign   bs16_O_out    =     (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_O_tx_data_out[16] : (C_TX_BITSLICE_EN[16]) ? tx_bs_O_data_out[16] : 1'd0;
   assign   bs15_O_out    =     (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_O_tx_data_out[15] : (C_TX_BITSLICE_EN[15]) ? tx_bs_O_data_out[15] : 1'd0;
   assign   bs14_O_out    =     (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_O_tx_data_out[14] : (C_TX_BITSLICE_EN[14]) ? tx_bs_O_data_out[14] : 1'd0;
   assign   bs13_O_out    =     (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_O_tx_data_out[13] : (C_TX_BITSLICE_EN[13]) ? tx_bs_O_data_out[13] : 1'd0;
   assign   bs12_O_out    =     (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_O_tx_data_out[12] : (C_TX_BITSLICE_EN[12]) ? tx_bs_O_data_out[12] : 1'd0;
   assign   bs11_O_out    =     (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_O_tx_data_out[11] : (C_TX_BITSLICE_EN[11]) ? tx_bs_O_data_out[11] : 1'd0;
   assign   bs10_O_out    =     (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_O_tx_data_out[10] : (C_TX_BITSLICE_EN[10]) ? tx_bs_O_data_out[10] : 1'd0;
   assign   bs9_O_out     =     (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_O_tx_data_out[9]  : (C_TX_BITSLICE_EN[9])  ? tx_bs_O_data_out[9]  : 1'd0;
   assign   bs8_O_out     =     (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_O_tx_data_out[8]  : (C_TX_BITSLICE_EN[8])  ? tx_bs_O_data_out[8]  : 1'd0;
   assign   bs7_O_out     =     (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_O_tx_data_out[7]  : (C_TX_BITSLICE_EN[7])  ? tx_bs_O_data_out[7]  : 1'd0;
   assign   bs6_O_out     =     (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_O_tx_data_out[6]  : (C_TX_BITSLICE_EN[6])  ? tx_bs_O_data_out[6]  : 1'd0;
   assign   bs5_O_out     =     (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_O_tx_data_out[5]  : (C_TX_BITSLICE_EN[5])  ? tx_bs_O_data_out[5]  : 1'd0;
   assign   bs4_O_out     =     (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_O_tx_data_out[4]  : (C_TX_BITSLICE_EN[4])  ? tx_bs_O_data_out[4]  : 1'd0;
   assign   bs3_O_out     =     (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_O_tx_data_out[3]  : (C_TX_BITSLICE_EN[3])  ? tx_bs_O_data_out[3]  : 1'd0;
   assign   bs2_O_out     =     (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_O_tx_data_out[2]  : (C_TX_BITSLICE_EN[2])  ? tx_bs_O_data_out[2]  : 1'd0;
   assign   bs1_O_out     =     (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_O_tx_data_out[1]  : (C_TX_BITSLICE_EN[1])  ? tx_bs_O_data_out[1]  : 1'd0;
   assign   bs0_O_out     =     (C_BIDIR_BITSLICE_EN[0])  ? rxtx_bs_O_tx_data_out[0]  : (C_TX_BITSLICE_EN[0])  ? tx_bs_O_data_out[0]  : 1'd0;
   
   wire [C_SERIALIZATION_FACTOR -1 : 0] rxtx_bs_D_data_from_fabric_in[51:0];   
   assign rxtx_bs_D_data_from_fabric_in[51] =  (C_BIDIR_BITSLICE_EN[51]) ? bs51_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[50] =  (C_BIDIR_BITSLICE_EN[50]) ? bs50_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[49] =  (C_BIDIR_BITSLICE_EN[49]) ? bs49_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[48] =  (C_BIDIR_BITSLICE_EN[48]) ? bs48_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[47] =  (C_BIDIR_BITSLICE_EN[47]) ? bs47_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[46] =  (C_BIDIR_BITSLICE_EN[46]) ? bs46_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[45] =  (C_BIDIR_BITSLICE_EN[45]) ? bs45_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[44] =  (C_BIDIR_BITSLICE_EN[44]) ? bs44_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[43] =  (C_BIDIR_BITSLICE_EN[43]) ? bs43_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[42] =  (C_BIDIR_BITSLICE_EN[42]) ? bs42_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[41] =  (C_BIDIR_BITSLICE_EN[41]) ? bs41_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[40] =  (C_BIDIR_BITSLICE_EN[40]) ? bs40_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[39] =  (C_BIDIR_BITSLICE_EN[39]) ? bs39_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[38] =  (C_BIDIR_BITSLICE_EN[38]) ? bs38_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[37] =  (C_BIDIR_BITSLICE_EN[37]) ? bs37_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[36] =  (C_BIDIR_BITSLICE_EN[36]) ? bs36_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[35] =  (C_BIDIR_BITSLICE_EN[35]) ? bs35_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[34] =  (C_BIDIR_BITSLICE_EN[34]) ? bs34_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[33] =  (C_BIDIR_BITSLICE_EN[33]) ? bs33_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[32] =  (C_BIDIR_BITSLICE_EN[32]) ? bs32_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[31] =  (C_BIDIR_BITSLICE_EN[31]) ? bs31_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[30] =  (C_BIDIR_BITSLICE_EN[30]) ? bs30_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[29] =  (C_BIDIR_BITSLICE_EN[29]) ? bs29_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[28] =  (C_BIDIR_BITSLICE_EN[28]) ? bs28_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[27] =  (C_BIDIR_BITSLICE_EN[27]) ? bs27_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[26] =  (C_BIDIR_BITSLICE_EN[26]) ? bs26_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[25] =  (C_BIDIR_BITSLICE_EN[25]) ? bs25_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[24] =  (C_BIDIR_BITSLICE_EN[24]) ? bs24_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[23] =  (C_BIDIR_BITSLICE_EN[23]) ? bs23_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[22] =  (C_BIDIR_BITSLICE_EN[22]) ? bs22_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[21] =  (C_BIDIR_BITSLICE_EN[21]) ? bs21_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[20] =  (C_BIDIR_BITSLICE_EN[20]) ? bs20_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[19] =  (C_BIDIR_BITSLICE_EN[19]) ? bs19_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[18] =  (C_BIDIR_BITSLICE_EN[18]) ? bs18_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[17] =  (C_BIDIR_BITSLICE_EN[17]) ? bs17_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[16] =  (C_BIDIR_BITSLICE_EN[16]) ? bs16_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[15] =  (C_BIDIR_BITSLICE_EN[15]) ? bs15_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[14] =  (C_BIDIR_BITSLICE_EN[14]) ? bs14_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[13] =  (C_BIDIR_BITSLICE_EN[13]) ? bs13_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[12] =  (C_BIDIR_BITSLICE_EN[12]) ? bs12_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[11] =  (C_BIDIR_BITSLICE_EN[11]) ? bs11_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[10] =  (C_BIDIR_BITSLICE_EN[10]) ? bs10_D_data_from_fabric_in : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[9]  =  (C_BIDIR_BITSLICE_EN[9])  ? bs9_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[8]  =  (C_BIDIR_BITSLICE_EN[8])  ? bs8_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[7]  =  (C_BIDIR_BITSLICE_EN[7])  ? bs7_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[6]  =  (C_BIDIR_BITSLICE_EN[6])  ? bs6_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[5]  =  (C_BIDIR_BITSLICE_EN[5])  ? bs5_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[4]  =  (C_BIDIR_BITSLICE_EN[4])  ? bs4_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[3]  =  (C_BIDIR_BITSLICE_EN[3])  ? bs3_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[2]  =  (C_BIDIR_BITSLICE_EN[2])  ? bs2_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[1]  =  (C_BIDIR_BITSLICE_EN[1])  ? bs1_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign rxtx_bs_D_data_from_fabric_in[0]  =  (C_BIDIR_BITSLICE_EN[0])  ? bs0_D_data_from_fabric_in  : {C_SERIALIZATION_FACTOR{1'b0}};
   		      			  
    // Rx data to fabric signals			 
   //wire [51:0] rx_bs_Q;
   //wire [51:0] rxtx_bs_Q_data_to_fabric_out;
   //wire [51:0] rx_bs_Q_data_to_fabric_out;
   wire [C_SERIALIZATION_FACTOR -1 :0] rxtx_bs_Q_data_to_fabric_out[51:0];
   wire [C_SERIALIZATION_FACTOR -1 :0] rx_bs_Q_data_to_fabric_out[51:0];
   assign   bs51_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_Q_data_to_fabric_out[51] : (C_RX_BITSLICE_EN[51]) ? rx_bs_Q_data_to_fabric_out[51] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs50_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_Q_data_to_fabric_out[50] : (C_RX_BITSLICE_EN[50]) ? rx_bs_Q_data_to_fabric_out[50] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs49_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_Q_data_to_fabric_out[49] : (C_RX_BITSLICE_EN[49]) ? rx_bs_Q_data_to_fabric_out[49] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs48_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_Q_data_to_fabric_out[48] : (C_RX_BITSLICE_EN[48]) ? rx_bs_Q_data_to_fabric_out[48] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs47_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_Q_data_to_fabric_out[47] : (C_RX_BITSLICE_EN[47]) ? rx_bs_Q_data_to_fabric_out[47] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs46_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_Q_data_to_fabric_out[46] : (C_RX_BITSLICE_EN[46]) ? rx_bs_Q_data_to_fabric_out[46] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs45_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_Q_data_to_fabric_out[45] : (C_RX_BITSLICE_EN[45]) ? rx_bs_Q_data_to_fabric_out[45] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs44_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_Q_data_to_fabric_out[44] : (C_RX_BITSLICE_EN[44]) ? rx_bs_Q_data_to_fabric_out[44] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs43_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_Q_data_to_fabric_out[43] : (C_RX_BITSLICE_EN[43]) ? rx_bs_Q_data_to_fabric_out[43] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs42_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_Q_data_to_fabric_out[42] : (C_RX_BITSLICE_EN[42]) ? rx_bs_Q_data_to_fabric_out[42] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs41_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_Q_data_to_fabric_out[41] : (C_RX_BITSLICE_EN[41]) ? rx_bs_Q_data_to_fabric_out[41] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs40_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_Q_data_to_fabric_out[40] : (C_RX_BITSLICE_EN[40]) ? rx_bs_Q_data_to_fabric_out[40] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs39_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_Q_data_to_fabric_out[39] : (C_RX_BITSLICE_EN[39]) ? rx_bs_Q_data_to_fabric_out[39] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs38_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_Q_data_to_fabric_out[38] : (C_RX_BITSLICE_EN[38]) ? rx_bs_Q_data_to_fabric_out[38] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs37_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_Q_data_to_fabric_out[37] : (C_RX_BITSLICE_EN[37]) ? rx_bs_Q_data_to_fabric_out[37] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs36_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_Q_data_to_fabric_out[36] : (C_RX_BITSLICE_EN[36]) ? rx_bs_Q_data_to_fabric_out[36] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs35_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_Q_data_to_fabric_out[35] : (C_RX_BITSLICE_EN[35]) ? rx_bs_Q_data_to_fabric_out[35] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs34_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_Q_data_to_fabric_out[34] : (C_RX_BITSLICE_EN[34]) ? rx_bs_Q_data_to_fabric_out[34] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs33_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_Q_data_to_fabric_out[33] : (C_RX_BITSLICE_EN[33]) ? rx_bs_Q_data_to_fabric_out[33] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs32_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_Q_data_to_fabric_out[32] : (C_RX_BITSLICE_EN[32]) ? rx_bs_Q_data_to_fabric_out[32] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs31_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_Q_data_to_fabric_out[31] : (C_RX_BITSLICE_EN[31]) ? rx_bs_Q_data_to_fabric_out[31] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs30_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_Q_data_to_fabric_out[30] : (C_RX_BITSLICE_EN[30]) ? rx_bs_Q_data_to_fabric_out[30] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs29_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_Q_data_to_fabric_out[29] : (C_RX_BITSLICE_EN[29]) ? rx_bs_Q_data_to_fabric_out[29] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs28_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_Q_data_to_fabric_out[28] : (C_RX_BITSLICE_EN[28]) ? rx_bs_Q_data_to_fabric_out[28] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs27_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_Q_data_to_fabric_out[27] : (C_RX_BITSLICE_EN[27]) ? rx_bs_Q_data_to_fabric_out[27] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs26_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_Q_data_to_fabric_out[26] : (C_RX_BITSLICE_EN[26]) ? rx_bs_Q_data_to_fabric_out[26] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs25_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_Q_data_to_fabric_out[25] : (C_RX_BITSLICE_EN[25]) ? rx_bs_Q_data_to_fabric_out[25] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs24_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_Q_data_to_fabric_out[24] : (C_RX_BITSLICE_EN[24]) ? rx_bs_Q_data_to_fabric_out[24] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs23_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_Q_data_to_fabric_out[23] : (C_RX_BITSLICE_EN[23]) ? rx_bs_Q_data_to_fabric_out[23] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs22_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_Q_data_to_fabric_out[22] : (C_RX_BITSLICE_EN[22]) ? rx_bs_Q_data_to_fabric_out[22] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs21_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_Q_data_to_fabric_out[21] : (C_RX_BITSLICE_EN[21]) ? rx_bs_Q_data_to_fabric_out[21] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs20_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_Q_data_to_fabric_out[20] : (C_RX_BITSLICE_EN[20]) ? rx_bs_Q_data_to_fabric_out[20] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs19_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_Q_data_to_fabric_out[19] : (C_RX_BITSLICE_EN[19]) ? rx_bs_Q_data_to_fabric_out[19] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs18_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_Q_data_to_fabric_out[18] : (C_RX_BITSLICE_EN[18]) ? rx_bs_Q_data_to_fabric_out[18] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs17_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_Q_data_to_fabric_out[17] : (C_RX_BITSLICE_EN[17]) ? rx_bs_Q_data_to_fabric_out[17] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs16_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_Q_data_to_fabric_out[16] : (C_RX_BITSLICE_EN[16]) ? rx_bs_Q_data_to_fabric_out[16] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs15_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_Q_data_to_fabric_out[15] : (C_RX_BITSLICE_EN[15]) ? rx_bs_Q_data_to_fabric_out[15] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs14_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_Q_data_to_fabric_out[14] : (C_RX_BITSLICE_EN[14]) ? rx_bs_Q_data_to_fabric_out[14] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs13_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_Q_data_to_fabric_out[13] : (C_RX_BITSLICE_EN[13]) ? rx_bs_Q_data_to_fabric_out[13] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs12_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_Q_data_to_fabric_out[12] : (C_RX_BITSLICE_EN[12]) ? rx_bs_Q_data_to_fabric_out[12] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs11_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_Q_data_to_fabric_out[11] : (C_RX_BITSLICE_EN[11]) ? rx_bs_Q_data_to_fabric_out[11] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs10_Q_data_to_fabric_out  =   (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_Q_data_to_fabric_out[10] : (C_RX_BITSLICE_EN[10]) ? rx_bs_Q_data_to_fabric_out[10] : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs9_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_Q_data_to_fabric_out[9]  : (C_RX_BITSLICE_EN[9])  ? rx_bs_Q_data_to_fabric_out[9]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs8_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_Q_data_to_fabric_out[8]  : (C_RX_BITSLICE_EN[8])  ? rx_bs_Q_data_to_fabric_out[8]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs7_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_Q_data_to_fabric_out[7]  : (C_RX_BITSLICE_EN[7])  ? rx_bs_Q_data_to_fabric_out[7]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs6_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_Q_data_to_fabric_out[6]  : (C_RX_BITSLICE_EN[6])  ? rx_bs_Q_data_to_fabric_out[6]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs5_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_Q_data_to_fabric_out[5]  : (C_RX_BITSLICE_EN[5])  ? rx_bs_Q_data_to_fabric_out[5]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs4_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_Q_data_to_fabric_out[4]  : (C_RX_BITSLICE_EN[4])  ? rx_bs_Q_data_to_fabric_out[4]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs3_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_Q_data_to_fabric_out[3]  : (C_RX_BITSLICE_EN[3])  ? rx_bs_Q_data_to_fabric_out[3]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs2_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_Q_data_to_fabric_out[2]  : (C_RX_BITSLICE_EN[2])  ? rx_bs_Q_data_to_fabric_out[2]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs1_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_Q_data_to_fabric_out[1]  : (C_RX_BITSLICE_EN[1])  ? rx_bs_Q_data_to_fabric_out[1]  : {C_SERIALIZATION_FACTOR{1'b0}};
   assign   bs0_Q_data_to_fabric_out   =   (C_BIDIR_BITSLICE_EN[0])  ? rxtx_bs_Q_data_to_fabric_out[0]  : (C_RX_BITSLICE_EN[0])  ? rx_bs_Q_data_to_fabric_out[0]  : {C_SERIALIZATION_FACTOR{1'b0}};

   // RX data in from pins
   wire  [51:0] rx_bs_datain;
   wire  [51:0] rxtx_bs_rx_datain;   
   assign rx_bs_datain = { 
                         (C_RX_BITSLICE_EN[51]) ? bs51_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[50]) ? bs50_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[49]) ? bs49_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[48]) ? bs48_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[47]) ? bs47_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[46]) ? bs46_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[45] || C_RX_BITSLICE0_EN[7] == 1)  ? bs45_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[44]) ? bs44_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[43]) ? bs43_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[42]) ? bs42_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[41]) ? bs41_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[40]) ? bs40_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[39] || C_RX_BITSLICE0_EN[6] == 1)  ? bs39_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[38]) ? bs38_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[37]) ? bs37_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[36]) ? bs36_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[35]) ? bs35_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[34]) ? bs34_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[33]) ? bs33_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[32] || C_RX_BITSLICE0_EN[5] == 1)  ? bs32_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[31]) ? bs31_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[30]) ? bs30_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[29]) ? bs29_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[28]) ? bs28_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[27]) ? bs27_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[26] || C_RX_BITSLICE0_EN[4] == 1)  ? bs26_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[25]) ? bs25_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[24]) ? bs24_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[23]) ? bs23_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[22]) ? bs22_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[21]) ? bs21_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[20]) ? bs20_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[19] || C_RX_BITSLICE0_EN[3] == 1)  ? bs19_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[18]) ? bs18_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[17]) ? bs17_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[16]) ? bs16_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[15]) ? bs15_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[14]) ? bs14_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[13] || C_RX_BITSLICE0_EN[2] == 1)  ? bs13_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[12]) ? bs12_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[11]) ? bs11_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[10]) ? bs10_datain_from_buf_in : 1'b0,
                         (C_RX_BITSLICE_EN[9])  ? bs9_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[8])  ? bs8_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[7])  ? bs7_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[6] || C_RX_BITSLICE0_EN[1] == 1)  ? bs6_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[5])  ? bs5_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[4])  ? bs4_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[3])  ? bs3_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[2])  ? bs2_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[1])  ? bs1_datain_from_buf_in  : 1'b0,
                         (C_RX_BITSLICE_EN[0] || C_RX_BITSLICE0_EN[0] == 1)  ? bs0_datain_from_buf_in  : 1'b0
   		      };
   
   assign rxtx_bs_rx_datain = { 
                         (C_BIDIR_BITSLICE_EN[51]) ? bs51_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[50]) ? bs50_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[49]) ? bs49_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[48]) ? bs48_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[47]) ? bs47_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[46]) ? bs46_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[45]) ? bs45_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[44]) ? bs44_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[43]) ? bs43_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[42]) ? bs42_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[41]) ? bs41_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[40]) ? bs40_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[39]) ? bs39_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[38]) ? bs38_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[37]) ? bs37_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[36]) ? bs36_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[35]) ? bs35_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[34]) ? bs34_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[33]) ? bs33_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[32]) ? bs32_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[31]) ? bs31_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[30]) ? bs30_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[29]) ? bs29_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[28]) ? bs28_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[27]) ? bs27_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[26]) ? bs26_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[25]) ? bs25_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[24]) ? bs24_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[23]) ? bs23_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[22]) ? bs22_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[21]) ? bs21_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[20]) ? bs20_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[19]) ? bs19_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[18]) ? bs18_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[17]) ? bs17_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[16]) ? bs16_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[15]) ? bs15_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[14]) ? bs14_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[13]) ? bs13_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[12]) ? bs12_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[11]) ? bs11_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[10]) ? bs10_datain_from_buf_in : 1'b0,
                         (C_BIDIR_BITSLICE_EN[9])  ? bs9_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[8])  ? bs8_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[7])  ? bs7_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[6])  ? bs6_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[5])  ? bs5_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[4])  ? bs4_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[3])  ? bs3_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[2])  ? bs2_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[1])  ? bs1_datain_from_buf_in  : 1'b0,
                         (C_BIDIR_BITSLICE_EN[0])  ? bs0_datain_from_buf_in  : 1'b0
   		      };
   // --------------------------------Data signals end--------------------------------------------
   // ---------------------------------Tristate signals from TX bitslice------------------------------------------------------
   wire [51:0] rxtx_bs_tx_t_out;
   //wire [51:0] tx_bs_t_out;
   assign   bs51_t_out    =     (C_BIDIR_BITSLICE_EN[51]) ? rxtx_bs_tx_t_out[51] : (C_TX_BITSLICE_EN[51])  ? tx_bs_t_out[51] : 1'd0;
   assign   bs50_t_out    =     (C_BIDIR_BITSLICE_EN[50]) ? rxtx_bs_tx_t_out[50] : (C_TX_BITSLICE_EN[50])  ? tx_bs_t_out[50] : 1'd0;
   assign   bs49_t_out    =     (C_BIDIR_BITSLICE_EN[49]) ? rxtx_bs_tx_t_out[49] : (C_TX_BITSLICE_EN[49])  ? tx_bs_t_out[49] : 1'd0;
   assign   bs48_t_out    =     (C_BIDIR_BITSLICE_EN[48]) ? rxtx_bs_tx_t_out[48] : (C_TX_BITSLICE_EN[48])  ? tx_bs_t_out[48] : 1'd0;
   assign   bs47_t_out    =     (C_BIDIR_BITSLICE_EN[47]) ? rxtx_bs_tx_t_out[47] : (C_TX_BITSLICE_EN[47])  ? tx_bs_t_out[47] : 1'd0;
   assign   bs46_t_out    =     (C_BIDIR_BITSLICE_EN[46]) ? rxtx_bs_tx_t_out[46] : (C_TX_BITSLICE_EN[46])  ? tx_bs_t_out[46] : 1'd0;
   assign   bs45_t_out    =     (C_BIDIR_BITSLICE_EN[45]) ? rxtx_bs_tx_t_out[45] : (C_TX_BITSLICE_EN[45])  ? tx_bs_t_out[45] : 1'd0;
   assign   bs44_t_out    =     (C_BIDIR_BITSLICE_EN[44]) ? rxtx_bs_tx_t_out[44] : (C_TX_BITSLICE_EN[44])  ? tx_bs_t_out[44] : 1'd0;
   assign   bs43_t_out    =     (C_BIDIR_BITSLICE_EN[43]) ? rxtx_bs_tx_t_out[43] : (C_TX_BITSLICE_EN[43])  ? tx_bs_t_out[43] : 1'd0;
   assign   bs42_t_out    =     (C_BIDIR_BITSLICE_EN[42]) ? rxtx_bs_tx_t_out[42] : (C_TX_BITSLICE_EN[42])  ? tx_bs_t_out[42] : 1'd0;
   assign   bs41_t_out    =     (C_BIDIR_BITSLICE_EN[41]) ? rxtx_bs_tx_t_out[41] : (C_TX_BITSLICE_EN[41])  ? tx_bs_t_out[41] : 1'd0;
   assign   bs40_t_out    =     (C_BIDIR_BITSLICE_EN[40]) ? rxtx_bs_tx_t_out[40] : (C_TX_BITSLICE_EN[40])  ? tx_bs_t_out[40] : 1'd0;
   assign   bs39_t_out    =     (C_BIDIR_BITSLICE_EN[39]) ? rxtx_bs_tx_t_out[39] : (C_TX_BITSLICE_EN[39])  ? tx_bs_t_out[39] : 1'd0;
   assign   bs38_t_out    =     (C_BIDIR_BITSLICE_EN[38]) ? rxtx_bs_tx_t_out[38] : (C_TX_BITSLICE_EN[38])  ? tx_bs_t_out[38] : 1'd0;
   assign   bs37_t_out    =     (C_BIDIR_BITSLICE_EN[37]) ? rxtx_bs_tx_t_out[37] : (C_TX_BITSLICE_EN[37])  ? tx_bs_t_out[37] : 1'd0;
   assign   bs36_t_out    =     (C_BIDIR_BITSLICE_EN[36]) ? rxtx_bs_tx_t_out[36] : (C_TX_BITSLICE_EN[36])  ? tx_bs_t_out[36] : 1'd0;
   assign   bs35_t_out    =     (C_BIDIR_BITSLICE_EN[35]) ? rxtx_bs_tx_t_out[35] : (C_TX_BITSLICE_EN[35])  ? tx_bs_t_out[35] : 1'd0;
   assign   bs34_t_out    =     (C_BIDIR_BITSLICE_EN[34]) ? rxtx_bs_tx_t_out[34] : (C_TX_BITSLICE_EN[34])  ? tx_bs_t_out[34] : 1'd0;
   assign   bs33_t_out    =     (C_BIDIR_BITSLICE_EN[33]) ? rxtx_bs_tx_t_out[33] : (C_TX_BITSLICE_EN[33])  ? tx_bs_t_out[33] : 1'd0;
   assign   bs32_t_out    =     (C_BIDIR_BITSLICE_EN[32]) ? rxtx_bs_tx_t_out[32] : (C_TX_BITSLICE_EN[32])  ? tx_bs_t_out[32] : 1'd0;
   assign   bs31_t_out    =     (C_BIDIR_BITSLICE_EN[31]) ? rxtx_bs_tx_t_out[31] : (C_TX_BITSLICE_EN[31])  ? tx_bs_t_out[31] : 1'd0;
   assign   bs30_t_out    =     (C_BIDIR_BITSLICE_EN[30]) ? rxtx_bs_tx_t_out[30] : (C_TX_BITSLICE_EN[30])  ? tx_bs_t_out[30] : 1'd0;
   assign   bs29_t_out    =     (C_BIDIR_BITSLICE_EN[29]) ? rxtx_bs_tx_t_out[29] : (C_TX_BITSLICE_EN[29])  ? tx_bs_t_out[29] : 1'd0;
   assign   bs28_t_out    =     (C_BIDIR_BITSLICE_EN[28]) ? rxtx_bs_tx_t_out[28] : (C_TX_BITSLICE_EN[28])  ? tx_bs_t_out[28] : 1'd0;
   assign   bs27_t_out    =     (C_BIDIR_BITSLICE_EN[27]) ? rxtx_bs_tx_t_out[27] : (C_TX_BITSLICE_EN[27])  ? tx_bs_t_out[27] : 1'd0;
   assign   bs26_t_out    =     (C_BIDIR_BITSLICE_EN[26]) ? rxtx_bs_tx_t_out[26] : (C_TX_BITSLICE_EN[26])  ? tx_bs_t_out[26] : 1'd0;
   assign   bs25_t_out    =     (C_BIDIR_BITSLICE_EN[25]) ? rxtx_bs_tx_t_out[25] : (C_TX_BITSLICE_EN[25])  ? tx_bs_t_out[25] : 1'd0;
   assign   bs24_t_out    =     (C_BIDIR_BITSLICE_EN[24]) ? rxtx_bs_tx_t_out[24] : (C_TX_BITSLICE_EN[24])  ? tx_bs_t_out[24] : 1'd0;
   assign   bs23_t_out    =     (C_BIDIR_BITSLICE_EN[23]) ? rxtx_bs_tx_t_out[23] : (C_TX_BITSLICE_EN[23])  ? tx_bs_t_out[23] : 1'd0;
   assign   bs22_t_out    =     (C_BIDIR_BITSLICE_EN[22]) ? rxtx_bs_tx_t_out[22] : (C_TX_BITSLICE_EN[22])  ? tx_bs_t_out[22] : 1'd0;
   assign   bs21_t_out    =     (C_BIDIR_BITSLICE_EN[21]) ? rxtx_bs_tx_t_out[21] : (C_TX_BITSLICE_EN[21])  ? tx_bs_t_out[21] : 1'd0;
   assign   bs20_t_out    =     (C_BIDIR_BITSLICE_EN[20]) ? rxtx_bs_tx_t_out[20] : (C_TX_BITSLICE_EN[20])  ? tx_bs_t_out[20] : 1'd0;
   assign   bs19_t_out    =     (C_BIDIR_BITSLICE_EN[19]) ? rxtx_bs_tx_t_out[19] : (C_TX_BITSLICE_EN[19])  ? tx_bs_t_out[19] : 1'd0;
   assign   bs18_t_out    =     (C_BIDIR_BITSLICE_EN[18]) ? rxtx_bs_tx_t_out[18] : (C_TX_BITSLICE_EN[18])  ? tx_bs_t_out[18] : 1'd0;
   assign   bs17_t_out    =     (C_BIDIR_BITSLICE_EN[17]) ? rxtx_bs_tx_t_out[17] : (C_TX_BITSLICE_EN[17])  ? tx_bs_t_out[17] : 1'd0;
   assign   bs16_t_out    =     (C_BIDIR_BITSLICE_EN[16]) ? rxtx_bs_tx_t_out[16] : (C_TX_BITSLICE_EN[16])  ? tx_bs_t_out[16] : 1'd0;
   assign   bs15_t_out    =     (C_BIDIR_BITSLICE_EN[15]) ? rxtx_bs_tx_t_out[15] : (C_TX_BITSLICE_EN[15])  ? tx_bs_t_out[15] : 1'd0;
   assign   bs14_t_out    =     (C_BIDIR_BITSLICE_EN[14]) ? rxtx_bs_tx_t_out[14] : (C_TX_BITSLICE_EN[14])  ? tx_bs_t_out[14] : 1'd0;
   assign   bs13_t_out    =     (C_BIDIR_BITSLICE_EN[13]) ? rxtx_bs_tx_t_out[13] : (C_TX_BITSLICE_EN[13])  ? tx_bs_t_out[13] : 1'd0;
   assign   bs12_t_out    =     (C_BIDIR_BITSLICE_EN[12]) ? rxtx_bs_tx_t_out[12] : (C_TX_BITSLICE_EN[12])  ? tx_bs_t_out[12] : 1'd0;
   assign   bs11_t_out    =     (C_BIDIR_BITSLICE_EN[11]) ? rxtx_bs_tx_t_out[11] : (C_TX_BITSLICE_EN[11])  ? tx_bs_t_out[11] : 1'd0;
   assign   bs10_t_out    =     (C_BIDIR_BITSLICE_EN[10]) ? rxtx_bs_tx_t_out[10] : (C_TX_BITSLICE_EN[10])  ? tx_bs_t_out[10] : 1'd0;
   assign   bs9_t_out     =     (C_BIDIR_BITSLICE_EN[9])  ? rxtx_bs_tx_t_out[9]  : (C_TX_BITSLICE_EN[9])  ? tx_bs_t_out[9] : 1'd0;
   assign   bs8_t_out     =     (C_BIDIR_BITSLICE_EN[8])  ? rxtx_bs_tx_t_out[8]  : (C_TX_BITSLICE_EN[8])  ? tx_bs_t_out[8] : 1'd0;
   assign   bs7_t_out     =     (C_BIDIR_BITSLICE_EN[7])  ? rxtx_bs_tx_t_out[7]  : (C_TX_BITSLICE_EN[7])  ? tx_bs_t_out[7] : 1'd0;
   assign   bs6_t_out     =     (C_BIDIR_BITSLICE_EN[6])  ? rxtx_bs_tx_t_out[6]  : (C_TX_BITSLICE_EN[6])  ? tx_bs_t_out[6] : 1'd0;
   assign   bs5_t_out     =     (C_BIDIR_BITSLICE_EN[5])  ? rxtx_bs_tx_t_out[5]  : (C_TX_BITSLICE_EN[5])  ? tx_bs_t_out[5] : 1'd0;
   assign   bs4_t_out     =     (C_BIDIR_BITSLICE_EN[4])  ? rxtx_bs_tx_t_out[4]  : (C_TX_BITSLICE_EN[4])  ? tx_bs_t_out[4] : 1'd0;
   assign   bs3_t_out     =     (C_BIDIR_BITSLICE_EN[3])  ? rxtx_bs_tx_t_out[3]  : (C_TX_BITSLICE_EN[3])  ? tx_bs_t_out[3] : 1'd0;
   assign   bs2_t_out     =     (C_BIDIR_BITSLICE_EN[2])  ? rxtx_bs_tx_t_out[2]  : (C_TX_BITSLICE_EN[2])  ? tx_bs_t_out[2] : 1'd0;
   assign   bs1_t_out     =     (C_BIDIR_BITSLICE_EN[1])  ? rxtx_bs_tx_t_out[1]  : (C_TX_BITSLICE_EN[1])  ? tx_bs_t_out[1] : 1'd0;
   assign   bs0_t_out     =     (C_BIDIR_BITSLICE_EN[0])  ? rxtx_bs_tx_t_out[0]  : (C_TX_BITSLICE_EN[0])  ? tx_bs_t_out[0] : 1'd0;
   
   
   // -------------------------------Tristate signals---------------------------------------------
   wire [51:0] tx_bs_t_in;
   wire [51:0] rxtx_bs_tx_t_in;   
   assign tx_bs_t_in = { 
                         ((C_TX_BITSLICE_EN[51]) && (C_DATA_TRI == 1 )) ? bs51_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[50]) && (C_DATA_TRI == 1 )) ? bs50_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[49]) && (C_DATA_TRI == 1 )) ? bs49_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[48]) && (C_DATA_TRI == 1 )) ? bs48_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[47]) && (C_DATA_TRI == 1 )) ? bs47_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[46]) && (C_DATA_TRI == 1 )) ? bs46_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[45]) && (C_DATA_TRI == 1 )) ? bs45_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[44]) && (C_DATA_TRI == 1 )) ? bs44_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[43]) && (C_DATA_TRI == 1 )) ? bs43_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[42]) && (C_DATA_TRI == 1 )) ? bs42_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[41]) && (C_DATA_TRI == 1 )) ? bs41_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[40]) && (C_DATA_TRI == 1 )) ? bs40_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[39]) && (C_DATA_TRI == 1 )) ? bs39_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[38]) && (C_DATA_TRI == 1 )) ? bs38_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[37]) && (C_DATA_TRI == 1 )) ? bs37_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[36]) && (C_DATA_TRI == 1 )) ? bs36_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[35]) && (C_DATA_TRI == 1 )) ? bs35_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[34]) && (C_DATA_TRI == 1 )) ? bs34_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[33]) && (C_DATA_TRI == 1 )) ? bs33_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[32]) && (C_DATA_TRI == 1 )) ? bs32_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[31]) && (C_DATA_TRI == 1 )) ? bs31_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[30]) && (C_DATA_TRI == 1 )) ? bs30_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[29]) && (C_DATA_TRI == 1 )) ? bs29_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[28]) && (C_DATA_TRI == 1 )) ? bs28_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[27]) && (C_DATA_TRI == 1 )) ? bs27_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[26]) && (C_DATA_TRI == 1 )) ? bs26_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[25]) && (C_DATA_TRI == 1 )) ? bs25_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[24]) && (C_DATA_TRI == 1 )) ? bs24_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[23]) && (C_DATA_TRI == 1 )) ? bs23_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[22]) && (C_DATA_TRI == 1 )) ? bs22_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[21]) && (C_DATA_TRI == 1 )) ? bs21_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[20]) && (C_DATA_TRI == 1 )) ? bs20_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[19]) && (C_DATA_TRI == 1 )) ? bs19_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[18]) && (C_DATA_TRI == 1 )) ? bs18_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[17]) && (C_DATA_TRI == 1 )) ? bs17_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[16]) && (C_DATA_TRI == 1 )) ? bs16_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[15]) && (C_DATA_TRI == 1 )) ? bs15_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[14]) && (C_DATA_TRI == 1 )) ? bs14_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[13]) && (C_DATA_TRI == 1 )) ? bs13_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[12]) && (C_DATA_TRI == 1 )) ? bs12_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[11]) && (C_DATA_TRI == 1 )) ? bs11_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[10]) && (C_DATA_TRI == 1 )) ? bs10_t_in : 1'b0,
                         ((C_TX_BITSLICE_EN[9]) && (C_DATA_TRI == 1 )) ? bs9_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[8]) && (C_DATA_TRI == 1 )) ? bs8_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[7]) && (C_DATA_TRI == 1 )) ? bs7_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[6]) && (C_DATA_TRI == 1 )) ? bs6_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[5]) && (C_DATA_TRI == 1 )) ? bs5_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[4]) && (C_DATA_TRI == 1 )) ? bs4_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[3]) && (C_DATA_TRI == 1 )) ? bs3_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[2]) && (C_DATA_TRI == 1 )) ? bs2_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[1]) && (C_DATA_TRI == 1 )) ? bs1_t_in  : 1'b0,
                         ((C_TX_BITSLICE_EN[0]) && (C_DATA_TRI == 1 )) ? bs0_t_in  : 1'b0
   		      };
   
   assign rxtx_bs_tx_t_in = { 
                         ((C_BIDIR_BITSLICE_EN[51]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs51_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[50]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs50_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[49]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs49_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[48]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs48_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[47]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs47_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[46]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs46_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[45]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs45_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[44]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs44_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[43]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs43_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[42]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs42_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[41]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs41_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[40]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs40_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[39]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs39_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[38]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs38_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[37]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs37_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[36]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs36_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[35]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs35_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[34]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs34_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[33]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs33_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[32]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs32_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[31]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs31_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[30]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs30_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[29]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs29_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[28]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs28_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[27]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs27_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[26]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs26_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[25]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs25_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[24]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs24_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[23]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs23_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[22]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs22_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[21]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs21_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[20]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs20_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[19]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs19_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[18]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs18_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[17]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs17_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[16]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs16_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[15]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs15_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[14]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs14_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[13]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs13_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[12]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs12_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[11]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs11_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[10]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs10_t_in : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[9]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs9_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[8]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs8_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[7]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs7_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[6]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs6_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[5]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs5_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[4]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs4_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[3]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs3_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[2]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs2_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[1]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs1_t_in  : 1'b0,
                         ((C_BIDIR_BITSLICE_EN[0]) && (C_DATA_TRI == 1 || C_CLOCK_TRI == 1)) ? bs0_t_in  : 1'b0
   		      };
   
   
   //---------------------------------------Tristate signals ends---------------------------------------
   
   //--------------------------------------- Fifo write clock------------------------------------------
   // RX / Bidir-Rx Fifo Write clock signals
   // Fifo Write Clock Signals
   wire rx_bs0_nib0_fifo_wrclk_out;
   wire rx_bs6_nib1_fifo_wrclk_out;
   wire rx_bs13_nib2_fifo_wrclk_out;
   wire rx_bs19_nib3_fifo_wrclk_out;
   wire rx_bs26_nib4_fifo_wrclk_out;
   wire rx_bs32_nib5_fifo_wrclk_out;
   wire rx_bs39_nib6_fifo_wrclk_out;
   wire rx_bs45_nib7_fifo_wrclk_out;
   
   wire rxtx_bs0_nib0_rx_fifo_wrclk_out;
   wire rxtx_bs6_nib1_rx_fifo_wrclk_out;
   wire rxtx_bs13_nib2_rx_fifo_wrclk_out;
   wire rxtx_bs19_nib3_rx_fifo_wrclk_out;
   wire rxtx_bs26_nib4_rx_fifo_wrclk_out;
   wire rxtx_bs32_nib5_rx_fifo_wrclk_out;
   wire rxtx_bs39_nib6_rx_fifo_wrclk_out;
   wire rxtx_bs45_nib7_rx_fifo_wrclk_out;
   
   assign bs0_nib0_fifo_wrclk_out = ((C_RX_STROBE_EN[0]) && (C_RX_BITSLICE_EN[0]))      ?  rx_bs0_nib0_fifo_wrclk_out      :
                                    ((C_RX_STROBE_EN[0]) && (C_BIDIR_BITSLICE_EN[0]))   ?  rxtx_bs0_nib0_rx_fifo_wrclk_out : 1'b0; 

   assign bs6_nib1_fifo_wrclk_out = ((C_RX_STROBE_EN[2]) && (C_RX_BITSLICE_EN[6]))      ?  rx_bs6_nib1_fifo_wrclk_out      : 
                                    ((C_RX_STROBE_EN[2]) && (C_BIDIR_BITSLICE_EN[6]))   ?  rxtx_bs6_nib1_rx_fifo_wrclk_out : 1'b0; 

   assign bs13_nib2_fifo_wrclk_out = ((C_RX_STROBE_EN[4]) && (C_RX_BITSLICE_EN[13]))    ?  rx_bs13_nib2_fifo_wrclk_out      :
                                     ((C_RX_STROBE_EN[4]) && (C_BIDIR_BITSLICE_EN[13])) ?  rxtx_bs13_nib2_rx_fifo_wrclk_out : 1'b0; 

   assign bs19_nib3_fifo_wrclk_out = ((C_RX_STROBE_EN[6]) && (C_RX_BITSLICE_EN[19]))    ?  rx_bs19_nib3_fifo_wrclk_out: 
                                     ((C_RX_STROBE_EN[6]) && (C_BIDIR_BITSLICE_EN[19])) ?  rxtx_bs19_nib3_rx_fifo_wrclk_out : 1'b0; 

   assign bs26_nib4_fifo_wrclk_out = ((C_RX_STROBE_EN[8]  && C_RX_BITSLICE_EN[26]) || (C_RX_STROBE_EN[8] && C_BIDIR_BITSLICE_EN[26] == 1'b0)) ?  rx_bs26_nib4_fifo_wrclk_out : 
                                     ((C_RX_STROBE_EN[8]) && (C_BIDIR_BITSLICE_EN[26]))                                                       ?  rxtx_bs26_nib4_rx_fifo_wrclk_out: 1'b0; 

   assign bs32_nib5_fifo_wrclk_out = ((C_RX_STROBE_EN[10]) && (C_RX_BITSLICE_EN[32]))    ?  rx_bs32_nib5_fifo_wrclk_out      : 
                                     ((C_RX_STROBE_EN[10]) && (C_BIDIR_BITSLICE_EN[32])) ?  rxtx_bs32_nib5_rx_fifo_wrclk_out : 1'b0; 

   assign bs39_nib6_fifo_wrclk_out = ((C_RX_STROBE_EN[12]) && (C_RX_BITSLICE_EN[39]))    ?  rx_bs39_nib6_fifo_wrclk_out      : 
                                     ((C_RX_STROBE_EN[12]) && (C_BIDIR_BITSLICE_EN[39])) ?  rxtx_bs39_nib6_rx_fifo_wrclk_out : 1'b0; 

   assign bs45_nib7_fifo_wrclk_out = ((C_RX_STROBE_EN[14]) && (C_RX_BITSLICE_EN[45]))    ?  rx_bs45_nib7_fifo_wrclk_out      : 
                                     ((C_RX_STROBE_EN[14]) && (C_BIDIR_BITSLICE_EN[45])) ?  rxtx_bs45_nib7_rx_fifo_wrclk_out : 1'b0;  
   
   //--------------------------------------- Fifo Write clock ends--------------------------------------
   
   //----------------------------------------------Tx_t_out wire declaration-----
   wire [7:0]  tx_bs_tri_nib_t_out;  // Tristate signal Connection between tx_bitslice_tri and rxtx_bitslice
   
   //--------------------------------------------------------------------------------------------------
   // --------------------------------------------------------   
   //  TX BITSLICE INSTANTIATION
   // --------------------------------------------------------   
   //<=: ComponentName :>_tx_bs  #( 
   high_speed_selectio_wiz_v3_5_1_tx_bs  #( 
   .C_SIM_DEVICE(C_SIM_DEVICE),
   .C_DIFF_EN(C_DIFF_EN),
   .C_TEMPLATE(C_TEMPLATE),
   .C_SIM_VERSION(C_SIM_VERSION),
   .C_SERIALIZATION_FACTOR(C_SERIALIZATION_FACTOR),
   .C_TX_DELAY_FORMAT(C_TX_DELAY_FORMAT),
   .C_TX_IS_CLK_INVERTED(C_TX_IS_CLK_INVERTED),
   .C_TX_IS_RST_DLY_INVERTED(C_TX_IS_RST_DLY_INVERTED),
   .C_TX_IS_RST_INVERTED(C_TX_IS_RST_INVERTED),
   .C_TX_NATIVE_ODELAY_BYPASS (C_TX_NATIVE_ODELAY_BYPASS),
   .C_DATA_TRI   (C_DATA_TRI),              // Combinatorial/Serialised
   .C_EN_TX_TRI  (C_EN_TX_TRI),              
   //.C_TX_UPDATE_MODE(C_TX_UPDATE_MODE),
   .C_TX_DELAY_TYPE0(C_TX_DELAY_TYPE0), // TX delay type
   .C_TX_DELAY_TYPE1(C_TX_DELAY_TYPE1), // TX delay type
   .C_TX_DELAY_TYPE2(C_TX_DELAY_TYPE2), // TX delay type
   .C_TX_DELAY_TYPE3(C_TX_DELAY_TYPE3), // TX delay type
   .C_TX_DELAY_TYPE4(C_TX_DELAY_TYPE4), // TX delay type
   .C_TX_DELAY_TYPE5(C_TX_DELAY_TYPE5), // TX delay type
   .C_TX_DELAY_TYPE6(C_TX_DELAY_TYPE6), // TX delay type
   .C_TX_DELAY_TYPE7(C_TX_DELAY_TYPE7), // TX delay type
   .C_TX_DELAY_TYPE8(C_TX_DELAY_TYPE8), // TX delay type
   .C_TX_DELAY_TYPE9(C_TX_DELAY_TYPE9), // TX delay type
   .C_TX_DELAY_TYPE10(C_TX_DELAY_TYPE10), // TX delay type
   .C_TX_DELAY_TYPE11(C_TX_DELAY_TYPE11), // TX delay type
   .C_TX_DELAY_TYPE12(C_TX_DELAY_TYPE12), // TX delay type
   .C_TX_DELAY_TYPE13(C_TX_DELAY_TYPE13), // TX delay type
   .C_TX_DELAY_TYPE14(C_TX_DELAY_TYPE14), // TX delay type
   .C_TX_DELAY_TYPE15(C_TX_DELAY_TYPE15), // TX delay type
   .C_TX_DELAY_TYPE16(C_TX_DELAY_TYPE16), // TX delay type
   .C_TX_DELAY_TYPE17(C_TX_DELAY_TYPE17), // TX delay type
   .C_TX_DELAY_TYPE18(C_TX_DELAY_TYPE18), // TX delay type
   .C_TX_DELAY_TYPE19(C_TX_DELAY_TYPE19), // TX delay type
   .C_TX_DELAY_TYPE20(C_TX_DELAY_TYPE20), // TX delay type
   .C_TX_DELAY_TYPE21(C_TX_DELAY_TYPE21), // TX delay type
   .C_TX_DELAY_TYPE22(C_TX_DELAY_TYPE22), // TX delay type
   .C_TX_DELAY_TYPE23(C_TX_DELAY_TYPE23), // TX delay type
   .C_TX_DELAY_TYPE24(C_TX_DELAY_TYPE24), // TX delay type
   .C_TX_DELAY_TYPE25(C_TX_DELAY_TYPE25), // TX delay type
   .C_TX_DELAY_TYPE26(C_TX_DELAY_TYPE26), // TX delay type
   .C_TX_DELAY_TYPE27(C_TX_DELAY_TYPE27), // TX delay type
   .C_TX_DELAY_TYPE28(C_TX_DELAY_TYPE28), // TX delay type
   .C_TX_DELAY_TYPE29(C_TX_DELAY_TYPE29), // TX delay type
   .C_TX_DELAY_TYPE30(C_TX_DELAY_TYPE30), // TX delay type
   .C_TX_DELAY_TYPE31(C_TX_DELAY_TYPE31), // TX delay type
   .C_TX_DELAY_TYPE32(C_TX_DELAY_TYPE32), // TX delay type
   .C_TX_DELAY_TYPE33(C_TX_DELAY_TYPE33), // TX delay type
   .C_TX_DELAY_TYPE34(C_TX_DELAY_TYPE34), // TX delay type
   .C_TX_DELAY_TYPE35(C_TX_DELAY_TYPE35), // TX delay type
   .C_TX_DELAY_TYPE36(C_TX_DELAY_TYPE36), // TX delay type
   .C_TX_DELAY_TYPE37(C_TX_DELAY_TYPE37), // TX delay type
   .C_TX_DELAY_TYPE38(C_TX_DELAY_TYPE38), // TX delay type
   .C_TX_DELAY_TYPE39(C_TX_DELAY_TYPE39), // TX delay type
   .C_TX_DELAY_TYPE40(C_TX_DELAY_TYPE40), // TX delay type
   .C_TX_DELAY_TYPE41(C_TX_DELAY_TYPE41), // TX delay type
   .C_TX_DELAY_TYPE42(C_TX_DELAY_TYPE42), // TX delay type
   .C_TX_DELAY_TYPE43(C_TX_DELAY_TYPE43), // TX delay type
   .C_TX_DELAY_TYPE44(C_TX_DELAY_TYPE44), // TX delay type
   .C_TX_DELAY_TYPE45(C_TX_DELAY_TYPE45), // TX delay type
   .C_TX_DELAY_TYPE46(C_TX_DELAY_TYPE46), // TX delay type
   .C_TX_DELAY_TYPE47(C_TX_DELAY_TYPE47), // TX delay type
   .C_TX_DELAY_TYPE48(C_TX_DELAY_TYPE48), // TX delay type
   .C_TX_DELAY_TYPE49(C_TX_DELAY_TYPE49), // TX delay type
   .C_TX_DELAY_TYPE50(C_TX_DELAY_TYPE50), // TX delay type
   .C_TX_DELAY_TYPE51(C_TX_DELAY_TYPE51), // TX delay type
   .C_TX_DELAY_VALUE0(C_TX_DELAY_VALUE0),  // TX delay value
   .C_TX_DELAY_VALUE1(C_TX_DELAY_VALUE1),  // TX delay value
   .C_TX_DELAY_VALUE2(C_TX_DELAY_VALUE2),  // TX delay value
   .C_TX_DELAY_VALUE3(C_TX_DELAY_VALUE3 ),  // TX delay value
   .C_TX_DELAY_VALUE4(C_TX_DELAY_VALUE4 ),  // TX delay value
   .C_TX_DELAY_VALUE5(C_TX_DELAY_VALUE5 ),  // TX delay value
   .C_TX_DELAY_VALUE6(C_TX_DELAY_VALUE6 ),  // TX delay value
   .C_TX_DELAY_VALUE7(C_TX_DELAY_VALUE7 ),  // TX delay value
   .C_TX_DELAY_VALUE8(C_TX_DELAY_VALUE8 ),  // TX delay value
   .C_TX_DELAY_VALUE9(C_TX_DELAY_VALUE9 ),  // TX delay value
   .C_TX_DELAY_VALUE10(C_TX_DELAY_VALUE10),  // TX delay value
   .C_TX_DELAY_VALUE11(C_TX_DELAY_VALUE11),  // TX delay value
   .C_TX_DELAY_VALUE12(C_TX_DELAY_VALUE12),  // TX delay value
   .C_TX_DELAY_VALUE13(C_TX_DELAY_VALUE13),  // TX delay value
   .C_TX_DELAY_VALUE14(C_TX_DELAY_VALUE14),  // TX delay value
   .C_TX_DELAY_VALUE15(C_TX_DELAY_VALUE15),  // TX delay value
   .C_TX_DELAY_VALUE16(C_TX_DELAY_VALUE16),  // TX delay value
   .C_TX_DELAY_VALUE17(C_TX_DELAY_VALUE17),  // TX delay value
   .C_TX_DELAY_VALUE18(C_TX_DELAY_VALUE18),  // TX delay value
   .C_TX_DELAY_VALUE19(C_TX_DELAY_VALUE19),  // TX delay value
   .C_TX_DELAY_VALUE20(C_TX_DELAY_VALUE20),  // TX delay value
   .C_TX_DELAY_VALUE21(C_TX_DELAY_VALUE21),  // TX delay value
   .C_TX_DELAY_VALUE22(C_TX_DELAY_VALUE22),  // TX delay value
   .C_TX_DELAY_VALUE23(C_TX_DELAY_VALUE23),  // TX delay value
   .C_TX_DELAY_VALUE24(C_TX_DELAY_VALUE24),  // TX delay value
   .C_TX_DELAY_VALUE25(C_TX_DELAY_VALUE25),  // TX delay value
   .C_TX_DELAY_VALUE26(C_TX_DELAY_VALUE26),  // TX delay value
   .C_TX_DELAY_VALUE27(C_TX_DELAY_VALUE27),  // TX delay value
   .C_TX_DELAY_VALUE28(C_TX_DELAY_VALUE28),  // TX delay value
   .C_TX_DELAY_VALUE29(C_TX_DELAY_VALUE29),  // TX delay value
   .C_TX_DELAY_VALUE30(C_TX_DELAY_VALUE30),  // TX delay value
   .C_TX_DELAY_VALUE31(C_TX_DELAY_VALUE31),  // TX delay value
   .C_TX_DELAY_VALUE32(C_TX_DELAY_VALUE32),  // TX delay value
   .C_TX_DELAY_VALUE33(C_TX_DELAY_VALUE33),  // TX delay value
   .C_TX_DELAY_VALUE34(C_TX_DELAY_VALUE34),  // TX delay value
   .C_TX_DELAY_VALUE35(C_TX_DELAY_VALUE35),  // TX delay value
   .C_TX_DELAY_VALUE36(C_TX_DELAY_VALUE36),  // TX delay value
   .C_TX_DELAY_VALUE37(C_TX_DELAY_VALUE37),  // TX delay value
   .C_TX_DELAY_VALUE38(C_TX_DELAY_VALUE38),  // TX delay value
   .C_TX_DELAY_VALUE39(C_TX_DELAY_VALUE39),  // TX delay value
   .C_TX_DELAY_VALUE40(C_TX_DELAY_VALUE40),  // TX delay value
   .C_TX_DELAY_VALUE41(C_TX_DELAY_VALUE41),  // TX delay value
   .C_TX_DELAY_VALUE42(C_TX_DELAY_VALUE42),  // TX delay value
   .C_TX_DELAY_VALUE43(C_TX_DELAY_VALUE43),  // TX delay value
   .C_TX_DELAY_VALUE44(C_TX_DELAY_VALUE44),  // TX delay value
   .C_TX_DELAY_VALUE45(C_TX_DELAY_VALUE45),  // TX delay value
   .C_TX_DELAY_VALUE46(C_TX_DELAY_VALUE46),  // TX delay value
   .C_TX_DELAY_VALUE47(C_TX_DELAY_VALUE47),  // TX delay value
   .C_TX_DELAY_VALUE48(C_TX_DELAY_VALUE48),  // TX delay value
   .C_TX_DELAY_VALUE49(C_TX_DELAY_VALUE49),  // TX delay value
   .C_TX_DELAY_VALUE50(C_TX_DELAY_VALUE50),  // TX delay value
   .C_TX_DELAY_VALUE51(C_TX_DELAY_VALUE51),  // TX delay value
   .C_TX_PREEMPHASIS_S(C_TX_PREEMPHASIS_S),  // Pre emphasis enablement
   .C_TX_PREEMPHASIS_D(C_TX_PREEMPHASIS_D),  // Pre emphasis enablement
   .C_CLK_FWD_BITSLICE_NO(C_CLK_FWD_BITSLICE_NO),  // Clock Forward bitslice #
   .C_CLK_FWD_PHASE(C_CLK_FWD_PHASE),              // Clock forward phase  
   .C_TX_DATA_PHASE(C_TX_DATA_PHASE),              // TX Data phase  
   .C_CLK_FWD_ENABLE(C_CLK_FWD_ENABLE),            // Clock forward phase 
   .C_TX_BITSLICE_EN(C_TX_BITSLICE_EN),
   .C_BS_INIT_VAL(C_BS_INIT_VAL),
   .C_TX_REFCLK_FREQ(C_TX_REFCLK_FREQ)             // TX clock frequency
   )
     u_tx_bs (
   // Common signals    
      .rst_seq_done (rst_seq_done),
      .tx_bs_clk_in(bs_tx_clk_in),
      .tx_bs_rst_dly_in(bs_tx_rst_dly_in),
      .tx_bs_rst_in(bs_tx_rst_in),
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs0_ce_in(tx_bs_ce_in[0]),
      .tx_bs0_cntvaluein(tx_bs_cntvaluein[0]),
      .tx_bs0_cntvalueout(tx_bs_cntvalueout[0]),
      .tx_bs0_en_vtc_in(tx_bs_en_vtc_in[0]),
      .tx_bs0_inc_in(tx_bs_inc_in[0]),
      .tx_bs0_load_in(tx_bs_load_in[0]),
   
   // Data Signals
      .tx_bs0_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[0]),
      .tx_bs0_O_data_out(tx_bs_O_data_out[0]),
   
   // Tristate control signals
      .tx_bs0_t_in(tx_bs_t_in[0]),
      .tx_bs0_t_out(tx_bs_t_out[0]),
      .tx_bs0_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs0_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[0]),
      .tx_bs0_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[0]),
      .tx_bs0_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[0]),
      .tx_bs0_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[0]),
   
   
   // --------------------------------------------------------
   // Bitslice1 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs1_ce_in(tx_bs_ce_in[1]),
      .tx_bs1_cntvaluein(tx_bs_cntvaluein[1]),
      .tx_bs1_cntvalueout(tx_bs_cntvalueout[1]),
      .tx_bs1_en_vtc_in(tx_bs_en_vtc_in[1]),
      .tx_bs1_inc_in(tx_bs_inc_in[1]),
      .tx_bs1_load_in(tx_bs_load_in[1]),
   
   // Data Signals
      .tx_bs1_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[1]),
      .tx_bs1_O_data_out(tx_bs_O_data_out[1]),
   
   // Tristate control signals
      .tx_bs1_t_in(tx_bs_t_in[1]),
      .tx_bs1_t_out(tx_bs_t_out[1]),
      .tx_bs1_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs1_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[1]),
      .tx_bs1_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[1]),
      .tx_bs1_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[1]),
      .tx_bs1_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[1]),
   
   // --------------------------------------------------------
   // Bitslice2 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs2_ce_in(tx_bs_ce_in[2]),
      .tx_bs2_cntvaluein(tx_bs_cntvaluein[2]),
      .tx_bs2_cntvalueout(tx_bs_cntvalueout[2]),
      .tx_bs2_en_vtc_in(tx_bs_en_vtc_in[2]),
      .tx_bs2_inc_in(tx_bs_inc_in[2]),
      .tx_bs2_load_in(tx_bs_load_in[2]),
   
   // Data Signals
      .tx_bs2_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[2]),
      .tx_bs2_O_data_out(tx_bs_O_data_out[2]),
   
   // Tristate control signals
      .tx_bs2_t_in(tx_bs_t_in[2]),
      .tx_bs2_t_out(tx_bs_t_out[2]),
      .tx_bs2_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs2_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[2]),
      .tx_bs2_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[2]),
      .tx_bs2_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[2]),
      .tx_bs2_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[2]),
   
   // --------------------------------------------------------
   // Bitslice3 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs3_ce_in(tx_bs_ce_in[3]),
      .tx_bs3_cntvaluein(tx_bs_cntvaluein[3]),
      .tx_bs3_cntvalueout(tx_bs_cntvalueout[3]),
      .tx_bs3_en_vtc_in(tx_bs_en_vtc_in[3]),
      .tx_bs3_inc_in(tx_bs_inc_in[3]),
      .tx_bs3_load_in(tx_bs_load_in[3]),
   
   // Data Signals
      .tx_bs3_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[3]),
      .tx_bs3_O_data_out(tx_bs_O_data_out[3]),
   
   // Tristate control signals
      .tx_bs3_t_in(tx_bs_t_in[3]),
      .tx_bs3_t_out(tx_bs_t_out[3]),
      .tx_bs3_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs3_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[3]),
      .tx_bs3_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[3]),
      .tx_bs3_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[3]),
      .tx_bs3_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[3]),
   
   // --------------------------------------------------------
   // Bitslice4 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs4_ce_in(tx_bs_ce_in[4]),
      .tx_bs4_cntvaluein(tx_bs_cntvaluein[4]),
      .tx_bs4_cntvalueout(tx_bs_cntvalueout[4]),
      .tx_bs4_en_vtc_in(tx_bs_en_vtc_in[4]),
      .tx_bs4_inc_in(tx_bs_inc_in[4]),
      .tx_bs4_load_in(tx_bs_load_in[4]),
   
   // Data Signals
      .tx_bs4_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[4]),
      .tx_bs4_O_data_out(tx_bs_O_data_out[4]),
   
   // Tristate control signals
      .tx_bs4_t_in(tx_bs_t_in[4]),
      .tx_bs4_t_out(tx_bs_t_out[4]),
      .tx_bs4_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs4_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[4]),
      .tx_bs4_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[4]),
      .tx_bs4_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[4]),
      .tx_bs4_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[4]),
   
   // --------------------------------------------------------
   // Bitslice5 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs5_ce_in(tx_bs_ce_in[5]),
      .tx_bs5_cntvaluein(tx_bs_cntvaluein[5]),
      .tx_bs5_cntvalueout(tx_bs_cntvalueout[5]),
      .tx_bs5_en_vtc_in(tx_bs_en_vtc_in[5]),
      .tx_bs5_inc_in(tx_bs_inc_in[5]),
      .tx_bs5_load_in(tx_bs_load_in[5]),
   
   // Data Signals
      .tx_bs5_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[5]),
      .tx_bs5_O_data_out(tx_bs_O_data_out[5]),
   
   // Tristate control signals
      .tx_bs5_t_in(tx_bs_t_in[5]),
      .tx_bs5_t_out(tx_bs_t_out[5]),
      .tx_bs5_tbyte_in(tx_bs_tri_nib_t_out[0]),
   
   //Ribbon cable signals
      .tx_bs5_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[5]),
      .tx_bs5_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[5]),
      .tx_bs5_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[5]),
      .tx_bs5_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[5]),
   
   // --------------------------------------------------------
   // Bitslice6 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs6_ce_in(tx_bs_ce_in[6]),
      .tx_bs6_cntvaluein(tx_bs_cntvaluein[6]),
      .tx_bs6_cntvalueout(tx_bs_cntvalueout[6]),
      .tx_bs6_en_vtc_in(tx_bs_en_vtc_in[6]),
      .tx_bs6_inc_in(tx_bs_inc_in[6]),
      .tx_bs6_load_in(tx_bs_load_in[6]),
   
   // Data Signals
      .tx_bs6_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[6]),
      .tx_bs6_O_data_out(tx_bs_O_data_out[6]),
   
   // Tristate control signals
      .tx_bs6_t_in(tx_bs_t_in[6]),
      .tx_bs6_t_out(tx_bs_t_out[6]),
      .tx_bs6_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs6_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[6]),
      .tx_bs6_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[6]),
      .tx_bs6_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[6]),
      .tx_bs6_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[6]),
   
   // --------------------------------------------------------
   // Bitslice7 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs7_ce_in(tx_bs_ce_in[7]),
      .tx_bs7_cntvaluein(tx_bs_cntvaluein[7]),
      .tx_bs7_cntvalueout(tx_bs_cntvalueout[7]),
      .tx_bs7_en_vtc_in(tx_bs_en_vtc_in[7]),
      .tx_bs7_inc_in(tx_bs_inc_in[7]),
      .tx_bs7_load_in(tx_bs_load_in[7]),
   
   // Data Signals
      .tx_bs7_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[7]),
      .tx_bs7_O_data_out(tx_bs_O_data_out[7]),
   
   // Tristate control signals
      .tx_bs7_t_in(tx_bs_t_in[7]),
      .tx_bs7_t_out(tx_bs_t_out[7]),
      .tx_bs7_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs7_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[7]),
      .tx_bs7_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[7]),
      .tx_bs7_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[7]),
      .tx_bs7_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[7]),
   
   // --------------------------------------------------------
   // Bitslice8 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs8_ce_in(tx_bs_ce_in[8]),
      .tx_bs8_cntvaluein(tx_bs_cntvaluein[8]),
      .tx_bs8_cntvalueout(tx_bs_cntvalueout[8]),
      .tx_bs8_en_vtc_in(tx_bs_en_vtc_in[8]),
      .tx_bs8_inc_in(tx_bs_inc_in[8]),
      .tx_bs8_load_in(tx_bs_load_in[8]),
   
   // Data Signals
      .tx_bs8_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[8]),
      .tx_bs8_O_data_out(tx_bs_O_data_out[8]),
   
   // Tristate control signals
      .tx_bs8_t_in(tx_bs_t_in[8]),
      .tx_bs8_t_out(tx_bs_t_out[8]),
      .tx_bs8_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs8_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[8]),
      .tx_bs8_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[8]),
      .tx_bs8_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[8]),
      .tx_bs8_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[8]),
   
   // --------------------------------------------------------
   // Bitslice09signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs9_ce_in(tx_bs_ce_in[9]),
      .tx_bs9_cntvaluein(tx_bs_cntvaluein[9]),
      .tx_bs9_cntvalueout(tx_bs_cntvalueout[9]),
      .tx_bs9_en_vtc_in(tx_bs_en_vtc_in[9]),
      .tx_bs9_inc_in(tx_bs_inc_in[9]),
      .tx_bs9_load_in(tx_bs_load_in[9]),
   
   // Data Signals
      .tx_bs9_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[9]),
      .tx_bs9_O_data_out(tx_bs_O_data_out[9]),
   
   // Tristate control signals
      .tx_bs9_t_in(tx_bs_t_in[9]),
      .tx_bs9_t_out(tx_bs_t_out[9]),
      .tx_bs9_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs9_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[9]),
      .tx_bs9_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[9]),
      .tx_bs9_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[9]),
      .tx_bs9_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[9]),
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs10_ce_in(tx_bs_ce_in[10]),
      .tx_bs10_cntvaluein(tx_bs_cntvaluein[10]),
      .tx_bs10_cntvalueout(tx_bs_cntvalueout[10]),
      .tx_bs10_en_vtc_in(tx_bs_en_vtc_in[10]),
      .tx_bs10_inc_in(tx_bs_inc_in[10]),
      .tx_bs10_load_in(tx_bs_load_in[10]),
   
   // Data Signals
      .tx_bs10_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[10]),
      .tx_bs10_O_data_out(tx_bs_O_data_out[10]),
   
   // Tristate control signals
      .tx_bs10_t_in(tx_bs_t_in[10]),
      .tx_bs10_t_out(tx_bs_t_out[10]),
      .tx_bs10_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs10_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[10]),
      .tx_bs10_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[10]),
      .tx_bs10_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[10]),
      .tx_bs10_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[10]),
   
   // --------------------------------------------------------
   // Bitslice11 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs11_ce_in(tx_bs_ce_in[11]),
      .tx_bs11_cntvaluein(tx_bs_cntvaluein[11]),
      .tx_bs11_cntvalueout(tx_bs_cntvalueout[11]),
      .tx_bs11_en_vtc_in(tx_bs_en_vtc_in[11]),
      .tx_bs11_inc_in(tx_bs_inc_in[11]),
      .tx_bs11_load_in(tx_bs_load_in[11]),
   
   // Data Signals
      .tx_bs11_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[11]),
      .tx_bs11_O_data_out(tx_bs_O_data_out[11]),
   
   // Tristate control signals
      .tx_bs11_t_in(tx_bs_t_in[11]),
      .tx_bs11_t_out(tx_bs_t_out[11]),
      .tx_bs11_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs11_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[11]),
      .tx_bs11_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[11]),
      .tx_bs11_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[11]),
      .tx_bs11_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[11]),
   
   // --------------------------------------------------------
   // Bitslice12 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs12_ce_in(tx_bs_ce_in[12]),
      .tx_bs12_cntvaluein(tx_bs_cntvaluein[12]),
      .tx_bs12_cntvalueout(tx_bs_cntvalueout[12]),
      .tx_bs12_en_vtc_in(tx_bs_en_vtc_in[12]),
      .tx_bs12_inc_in(tx_bs_inc_in[12]),
      .tx_bs12_load_in(tx_bs_load_in[12]),
   
   // Data Signals
      .tx_bs12_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[12]),
      .tx_bs12_O_data_out(tx_bs_O_data_out[12]),
   
   // Tristate control signals
      .tx_bs12_t_in(tx_bs_t_in[12]),
      .tx_bs12_t_out(tx_bs_t_out[12]),
      .tx_bs12_tbyte_in(tx_bs_tri_nib_t_out[1]),
   
   //Ribbon cable signals
      .tx_bs12_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[12]),
      .tx_bs12_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[12]),
      .tx_bs12_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[12]),
      .tx_bs12_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[12]),
   
   // --------------------------------------------------------
   // Bitslice13 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs13_ce_in(tx_bs_ce_in[13]),
      .tx_bs13_cntvaluein(tx_bs_cntvaluein[13]),
      .tx_bs13_cntvalueout(tx_bs_cntvalueout[13]),
      .tx_bs13_en_vtc_in(tx_bs_en_vtc_in[13]),
      .tx_bs13_inc_in(tx_bs_inc_in[13]),
      .tx_bs13_load_in(tx_bs_load_in[13]),
   
   // Data Signals
      .tx_bs13_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[13]),
      .tx_bs13_O_data_out(tx_bs_O_data_out[13]),
   
   // Tristate control signals
      .tx_bs13_t_in(tx_bs_t_in[13]),
      .tx_bs13_t_out(tx_bs_t_out[13]),
      .tx_bs13_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs13_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[13]),
      .tx_bs13_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[13]),
      .tx_bs13_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[13]),
      .tx_bs13_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[13]),
   
   // --------------------------------------------------------
   // Bitslice14 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs14_ce_in(tx_bs_ce_in[14]),
      .tx_bs14_cntvaluein(tx_bs_cntvaluein[14]),
      .tx_bs14_cntvalueout(tx_bs_cntvalueout[14]),
      .tx_bs14_en_vtc_in(tx_bs_en_vtc_in[14]),
      .tx_bs14_inc_in(tx_bs_inc_in[14]),
      .tx_bs14_load_in(tx_bs_load_in[14]),
   
   // Data Signals
      .tx_bs14_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[14]),
      .tx_bs14_O_data_out(tx_bs_O_data_out[14]),
   
   // Tristate control signals
      .tx_bs14_t_in(tx_bs_t_in[14]),
      .tx_bs14_t_out(tx_bs_t_out[14]),
      .tx_bs14_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs14_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[14]),
      .tx_bs14_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[14]),
      .tx_bs14_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[14]),
      .tx_bs14_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[14]),
   
   // --------------------------------------------------------
   // Bitslice15 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs15_ce_in(tx_bs_ce_in[15]),
      .tx_bs15_cntvaluein(tx_bs_cntvaluein[15]),
      .tx_bs15_cntvalueout(tx_bs_cntvalueout[15]),
      .tx_bs15_en_vtc_in(tx_bs_en_vtc_in[15]),
      .tx_bs15_inc_in(tx_bs_inc_in[15]),
      .tx_bs15_load_in(tx_bs_load_in[15]),
   
   // Data Signals
      .tx_bs15_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[15]),
      .tx_bs15_O_data_out(tx_bs_O_data_out[15]),
   
   // Tristate control signals
      .tx_bs15_t_in(tx_bs_t_in[15]),
      .tx_bs15_t_out(tx_bs_t_out[15]),
      .tx_bs15_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs15_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[15]),
      .tx_bs15_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[15]),
      .tx_bs15_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[15]),
      .tx_bs15_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[15]),
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs16_ce_in(tx_bs_ce_in[16]),
      .tx_bs16_cntvaluein(tx_bs_cntvaluein[16]),
      .tx_bs16_cntvalueout(tx_bs_cntvalueout[16]),
      .tx_bs16_en_vtc_in(tx_bs_en_vtc_in[16]),
      .tx_bs16_inc_in(tx_bs_inc_in[16]),
      .tx_bs16_load_in(tx_bs_load_in[16]),
   
   // Data Signals
      .tx_bs16_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[16]),
      .tx_bs16_O_data_out(tx_bs_O_data_out[16]),
   
   // Tristate control signals
      .tx_bs16_t_in(tx_bs_t_in[16]),
      .tx_bs16_t_out(tx_bs_t_out[16]),
      .tx_bs16_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs16_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[16]),
      .tx_bs16_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[16]),
      .tx_bs16_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[16]),
      .tx_bs16_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[16]),
   
   // --------------------------------------------------------
   // Bitslice17 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs17_ce_in(tx_bs_ce_in[17]),
      .tx_bs17_cntvaluein(tx_bs_cntvaluein[17]),
      .tx_bs17_cntvalueout(tx_bs_cntvalueout[17]),
      .tx_bs17_en_vtc_in(tx_bs_en_vtc_in[17]),
      .tx_bs17_inc_in(tx_bs_inc_in[17]),
      .tx_bs17_load_in(tx_bs_load_in[17]),
   
   // Data Signals
      .tx_bs17_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[17]),
      .tx_bs17_O_data_out(tx_bs_O_data_out[17]),
   
   // Tristate control signals
      .tx_bs17_t_in(tx_bs_t_in[17]),
      .tx_bs17_t_out(tx_bs_t_out[17]),
      .tx_bs17_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs17_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[17]),
      .tx_bs17_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[17]),
      .tx_bs17_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[17]),
      .tx_bs17_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[17]),
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs18_ce_in(tx_bs_ce_in[18]),
      .tx_bs18_cntvaluein(tx_bs_cntvaluein[18]),
      .tx_bs18_cntvalueout(tx_bs_cntvalueout[18]),
      .tx_bs18_en_vtc_in(tx_bs_en_vtc_in[18]),
      .tx_bs18_inc_in(tx_bs_inc_in[18]),
      .tx_bs18_load_in(tx_bs_load_in[18]),
   
   // Data Signals
      .tx_bs18_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[18]),
      .tx_bs18_O_data_out(tx_bs_O_data_out[18]),
   
   // Tristate control signals
      .tx_bs18_t_in(tx_bs_t_in[18]),
      .tx_bs18_t_out(tx_bs_t_out[18]),
      .tx_bs18_tbyte_in(tx_bs_tri_nib_t_out[2]),
   
   //Ribbon cable signals
      .tx_bs18_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[18]),
      .tx_bs18_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[18]),
      .tx_bs18_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[18]),
      .tx_bs18_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[18]),
   
   // --------------------------------------------------------
   // Bitslice19 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs19_ce_in(tx_bs_ce_in[19]),
      .tx_bs19_cntvaluein(tx_bs_cntvaluein[19]),
      .tx_bs19_cntvalueout(tx_bs_cntvalueout[19]),
      .tx_bs19_en_vtc_in(tx_bs_en_vtc_in[19]),
      .tx_bs19_inc_in(tx_bs_inc_in[19]),
      .tx_bs19_load_in(tx_bs_load_in[19]),
   
   // Data Signals
      .tx_bs19_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[19]),
      .tx_bs19_O_data_out(tx_bs_O_data_out[19]),
   
   // Tristate control signals
      .tx_bs19_t_in(tx_bs_t_in[19]),
      .tx_bs19_t_out(tx_bs_t_out[19]),
      .tx_bs19_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs19_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[19]),
      .tx_bs19_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[19]),
      .tx_bs19_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[19]),
      .tx_bs19_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[19]),
   
   // --------------------------------------------------------
   // Bitslice20 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs20_ce_in(tx_bs_ce_in[20]),
      .tx_bs20_cntvaluein(tx_bs_cntvaluein[20]),
      .tx_bs20_cntvalueout(tx_bs_cntvalueout[20]),
      .tx_bs20_en_vtc_in(tx_bs_en_vtc_in[20]),
      .tx_bs20_inc_in(tx_bs_inc_in[20]),
      .tx_bs20_load_in(tx_bs_load_in[20]),
   
   // Data Signals
      .tx_bs20_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[20]),
      .tx_bs20_O_data_out(tx_bs_O_data_out[20]),
   
   // Tristate control signals
      .tx_bs20_t_in(tx_bs_t_in[20]),
      .tx_bs20_t_out(tx_bs_t_out[20]),
      .tx_bs20_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs20_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[20]),
      .tx_bs20_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[20]),
      .tx_bs20_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[20]),
      .tx_bs20_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[20]),
   
   // --------------------------------------------------------
   // Bitslice21 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs21_ce_in(tx_bs_ce_in[21]),
      .tx_bs21_cntvaluein(tx_bs_cntvaluein[21]),
      .tx_bs21_cntvalueout(tx_bs_cntvalueout[21]),
      .tx_bs21_en_vtc_in(tx_bs_en_vtc_in[21]),
      .tx_bs21_inc_in(tx_bs_inc_in[21]),
      .tx_bs21_load_in(tx_bs_load_in[21]),
   
   // Data Signals
      .tx_bs21_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[21]),
      .tx_bs21_O_data_out(tx_bs_O_data_out[21]),
   
   // Tristate control signals
      .tx_bs21_t_in(tx_bs_t_in[21]),
      .tx_bs21_t_out(tx_bs_t_out[21]),
      .tx_bs21_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs21_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[21]),
      .tx_bs21_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[21]),
      .tx_bs21_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[21]),
      .tx_bs21_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[21]),
   
   // --------------------------------------------------------
   // Bitslice22 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs22_ce_in(tx_bs_ce_in[22]),
      .tx_bs22_cntvaluein(tx_bs_cntvaluein[22]),
      .tx_bs22_cntvalueout(tx_bs_cntvalueout[22]),
      .tx_bs22_en_vtc_in(tx_bs_en_vtc_in[22]),
      .tx_bs22_inc_in(tx_bs_inc_in[22]),
      .tx_bs22_load_in(tx_bs_load_in[22]),
   
   // Data Signals
      .tx_bs22_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[22]),
      .tx_bs22_O_data_out(tx_bs_O_data_out[22]),
   
   // Tristate control signals
      .tx_bs22_t_in(tx_bs_t_in[22]),
      .tx_bs22_t_out(tx_bs_t_out[22]),
      .tx_bs22_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs22_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[22]),
      .tx_bs22_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[22]),
      .tx_bs22_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[22]),
      .tx_bs22_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[22]),
   
   // --------------------------------------------------------
   // Bitslice23 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs23_ce_in(tx_bs_ce_in[23]),
      .tx_bs23_cntvaluein(tx_bs_cntvaluein[23]),
      .tx_bs23_cntvalueout(tx_bs_cntvalueout[23]),
      .tx_bs23_en_vtc_in(tx_bs_en_vtc_in[23]),
      .tx_bs23_inc_in(tx_bs_inc_in[23]),
      .tx_bs23_load_in(tx_bs_load_in[23]),
   
   // Data Signals
      .tx_bs23_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[23]),
      .tx_bs23_O_data_out(tx_bs_O_data_out[23]),
   
   // Tristate control signals
      .tx_bs23_t_in(tx_bs_t_in[23]),
      .tx_bs23_t_out(tx_bs_t_out[23]),
      .tx_bs23_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs23_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[23]),
      .tx_bs23_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[23]),
      .tx_bs23_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[23]),
      .tx_bs23_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[23]),
   
   // --------------------------------------------------------
   // Bitslice24 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs24_ce_in(tx_bs_ce_in[24]),
      .tx_bs24_cntvaluein(tx_bs_cntvaluein[24]),
      .tx_bs24_cntvalueout(tx_bs_cntvalueout[24]),
      .tx_bs24_en_vtc_in(tx_bs_en_vtc_in[24]),
      .tx_bs24_inc_in(tx_bs_inc_in[24]),
      .tx_bs24_load_in(tx_bs_load_in[24]),
   
   // Data Signals
      .tx_bs24_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[24]),
      .tx_bs24_O_data_out(tx_bs_O_data_out[24]),
   
   // Tristate control signals
      .tx_bs24_t_in(tx_bs_t_in[24]),
      .tx_bs24_t_out(tx_bs_t_out[24]),
      .tx_bs24_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs24_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[24]),
      .tx_bs24_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[24]),
      .tx_bs24_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[24]),
      .tx_bs24_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[24]),
   
   // --------------------------------------------------------
   // Bitslice25 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs25_ce_in(tx_bs_ce_in[25]),
      .tx_bs25_cntvaluein(tx_bs_cntvaluein[25]),
      .tx_bs25_cntvalueout(tx_bs_cntvalueout[25]),
      .tx_bs25_en_vtc_in(tx_bs_en_vtc_in[25]),
      .tx_bs25_inc_in(tx_bs_inc_in[25]),
      .tx_bs25_load_in(tx_bs_load_in[25]),
   
   // Data Signals
      .tx_bs25_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[25]),
      .tx_bs25_O_data_out(tx_bs_O_data_out[25]),
   
   // Tristate control signals
      .tx_bs25_t_in(tx_bs_t_in[25]),
      .tx_bs25_t_out(tx_bs_t_out[25]),
      .tx_bs25_tbyte_in(tx_bs_tri_nib_t_out[3]),
   
   //Ribbon cable signals
      .tx_bs25_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[25]),
      .tx_bs25_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[25]),
      .tx_bs25_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[25]),
      .tx_bs25_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[25]),
   
   // --------------------------------------------------------
   // Bitslice26 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs26_ce_in(tx_bs_ce_in[26]),
      .tx_bs26_cntvaluein(tx_bs_cntvaluein[26]),
      .tx_bs26_cntvalueout(tx_bs_cntvalueout[26]),
      .tx_bs26_en_vtc_in(tx_bs_en_vtc_in[26]),
      .tx_bs26_inc_in(tx_bs_inc_in[26]),
      .tx_bs26_load_in(tx_bs_load_in[26]),
   
   // Data Signals
      .tx_bs26_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[26]),
      .tx_bs26_O_data_out(tx_bs_O_data_out[26]),
   
   // Tristate control signals
      .tx_bs26_t_in(tx_bs_t_in[26]),
      .tx_bs26_t_out(tx_bs_t_out[26]),
      .tx_bs26_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs26_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[26]),
      .tx_bs26_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[26]),
      .tx_bs26_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[26]),
      .tx_bs26_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[26]),
   
   // --------------------------------------------------------
   // Bitslice27 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs27_ce_in(tx_bs_ce_in[27]),
      .tx_bs27_cntvaluein(tx_bs_cntvaluein[27]),
      .tx_bs27_cntvalueout(tx_bs_cntvalueout[27]),
      .tx_bs27_en_vtc_in(tx_bs_en_vtc_in[27]),
      .tx_bs27_inc_in(tx_bs_inc_in[27]),
      .tx_bs27_load_in(tx_bs_load_in[27]),
   
   // Data Signals
      .tx_bs27_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[27]),
      .tx_bs27_O_data_out(tx_bs_O_data_out[27]),
   
   // Tristate control signals
      .tx_bs27_t_in(tx_bs_t_in[27]),
      .tx_bs27_t_out(tx_bs_t_out[27]),
      .tx_bs27_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs27_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[27]),
      .tx_bs27_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[27]),
      .tx_bs27_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[27]),
      .tx_bs27_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[27]),
   
   // --------------------------------------------------------
   // Bitslice28 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs28_ce_in(tx_bs_ce_in[28]),
      .tx_bs28_cntvaluein(tx_bs_cntvaluein[28]),
      .tx_bs28_cntvalueout(tx_bs_cntvalueout[28]),
      .tx_bs28_en_vtc_in(tx_bs_en_vtc_in[28]),
      .tx_bs28_inc_in(tx_bs_inc_in[28]),
      .tx_bs28_load_in(tx_bs_load_in[28]),
   
   // Data Signals
      .tx_bs28_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[28]),
      .tx_bs28_O_data_out(tx_bs_O_data_out[28]),
   
   // Tristate control signals
      .tx_bs28_t_in(tx_bs_t_in[28]),
      .tx_bs28_t_out(tx_bs_t_out[28]),
      .tx_bs28_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs28_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[28]),
      .tx_bs28_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[28]),
      .tx_bs28_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[28]),
      .tx_bs28_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[28]),
   
   // --------------------------------------------------------
   // Bitslice29 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs29_ce_in(tx_bs_ce_in[29]),
      .tx_bs29_cntvaluein(tx_bs_cntvaluein[29]),
      .tx_bs29_cntvalueout(tx_bs_cntvalueout[29]),
      .tx_bs29_en_vtc_in(tx_bs_en_vtc_in[29]),
      .tx_bs29_inc_in(tx_bs_inc_in[29]),
      .tx_bs29_load_in(tx_bs_load_in[29]),
   
   // Data Signals
      .tx_bs29_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[29]),
      .tx_bs29_O_data_out(tx_bs_O_data_out[29]),
   
   // Tristate control signals
      .tx_bs29_t_in(tx_bs_t_in[29]),
      .tx_bs29_t_out(tx_bs_t_out[29]),
      .tx_bs29_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs29_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[29]),
      .tx_bs29_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[29]),
      .tx_bs29_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[29]),
      .tx_bs29_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[29]),
   
   // --------------------------------------------------------
   // Bitslice30 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs30_ce_in(tx_bs_ce_in[30]),
      .tx_bs30_cntvaluein(tx_bs_cntvaluein[30]),
      .tx_bs30_cntvalueout(tx_bs_cntvalueout[30]),
      .tx_bs30_en_vtc_in(tx_bs_en_vtc_in[30]),
      .tx_bs30_inc_in(tx_bs_inc_in[30]),
      .tx_bs30_load_in(tx_bs_load_in[30]),
   
   // Data Signals
      .tx_bs30_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[30]),
      .tx_bs30_O_data_out(tx_bs_O_data_out[30]),
   
   // Tristate control signals
      .tx_bs30_t_in(tx_bs_t_in[30]),
      .tx_bs30_t_out(tx_bs_t_out[30]),
      .tx_bs30_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs30_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[30]),
      .tx_bs30_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[30]),
      .tx_bs30_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[30]),
      .tx_bs30_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[30]),
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs31_ce_in(tx_bs_ce_in[31]),
      .tx_bs31_cntvaluein(tx_bs_cntvaluein[31]),
      .tx_bs31_cntvalueout(tx_bs_cntvalueout[31]),
      .tx_bs31_en_vtc_in(tx_bs_en_vtc_in[31]),
      .tx_bs31_inc_in(tx_bs_inc_in[31]),
      .tx_bs31_load_in(tx_bs_load_in[31]),
   
   // Data Signals
      .tx_bs31_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[31]),
      .tx_bs31_O_data_out(tx_bs_O_data_out[31]),
   
   // Tristate control signals
      .tx_bs31_t_in(tx_bs_t_in[31]),
      .tx_bs31_t_out(tx_bs_t_out[31]),
      .tx_bs31_tbyte_in(tx_bs_tri_nib_t_out[4]),
   
   //Ribbon cable signals
      .tx_bs31_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[31]),
      .tx_bs31_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[31]),
      .tx_bs31_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[31]),
      .tx_bs31_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[31]),
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs32_ce_in(tx_bs_ce_in[32]),
      .tx_bs32_cntvaluein(tx_bs_cntvaluein[32]),
      .tx_bs32_cntvalueout(tx_bs_cntvalueout[32]),
      .tx_bs32_en_vtc_in(tx_bs_en_vtc_in[32]),
      .tx_bs32_inc_in(tx_bs_inc_in[32]),
      .tx_bs32_load_in(tx_bs_load_in[32]),
   
   // Data Signals
      .tx_bs32_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[32]),
      .tx_bs32_O_data_out(tx_bs_O_data_out[32]),
   
   // Tristate control signals
      .tx_bs32_t_in(tx_bs_t_in[32]),
      .tx_bs32_t_out(tx_bs_t_out[32]),
      .tx_bs32_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs32_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[32]),
      .tx_bs32_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[32]),
      .tx_bs32_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[32]),
      .tx_bs32_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[32]),
   
   // --------------------------------------------------------
   // Bitslice33 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs33_ce_in(tx_bs_ce_in[33]),
      .tx_bs33_cntvaluein(tx_bs_cntvaluein[33]),
      .tx_bs33_cntvalueout(tx_bs_cntvalueout[33]),
      .tx_bs33_en_vtc_in(tx_bs_en_vtc_in[33]),
      .tx_bs33_inc_in(tx_bs_inc_in[33]),
      .tx_bs33_load_in(tx_bs_load_in[33]),
   
   // Data Signals
      .tx_bs33_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[33]),
      .tx_bs33_O_data_out(tx_bs_O_data_out[33]),
   
   // Tristate control signals
      .tx_bs33_t_in(tx_bs_t_in[33]),
      .tx_bs33_t_out(tx_bs_t_out[33]),
      .tx_bs33_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs33_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[33]),
      .tx_bs33_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[33]),
      .tx_bs33_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[33]),
      .tx_bs33_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[33]),
   
   // --------------------------------------------------------
   // Bitslice34 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs34_ce_in(tx_bs_ce_in[34]),
      .tx_bs34_cntvaluein(tx_bs_cntvaluein[34]),
      .tx_bs34_cntvalueout(tx_bs_cntvalueout[34]),
      .tx_bs34_en_vtc_in(tx_bs_en_vtc_in[34]),
      .tx_bs34_inc_in(tx_bs_inc_in[34]),
      .tx_bs34_load_in(tx_bs_load_in[34]),
   
   // Data Signals
      .tx_bs34_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[34]),
      .tx_bs34_O_data_out(tx_bs_O_data_out[34]),
   
   // Tristate control signals
      .tx_bs34_t_in(tx_bs_t_in[34]),
      .tx_bs34_t_out(tx_bs_t_out[34]),
      .tx_bs34_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs34_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[34]),
      .tx_bs34_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[34]),
      .tx_bs34_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[34]),
      .tx_bs34_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[34]),
   
   // --------------------------------------------------------
   // Bitslice35 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs35_ce_in(tx_bs_ce_in[35]),
      .tx_bs35_cntvaluein(tx_bs_cntvaluein[35]),
      .tx_bs35_cntvalueout(tx_bs_cntvalueout[35]),
      .tx_bs35_en_vtc_in(tx_bs_en_vtc_in[35]),
      .tx_bs35_inc_in(tx_bs_inc_in[35]),
      .tx_bs35_load_in(tx_bs_load_in[35]),
   
   // Data Signals
      .tx_bs35_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[35]),
      .tx_bs35_O_data_out(tx_bs_O_data_out[35]),
   
   // Tristate control signals
      .tx_bs35_t_in(tx_bs_t_in[35]),
      .tx_bs35_t_out(tx_bs_t_out[35]),
      .tx_bs35_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs35_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[35]),
      .tx_bs35_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[35]),
      .tx_bs35_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[35]),
      .tx_bs35_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[35]),
   
   // --------------------------------------------------------
   // Bitslice36 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs36_ce_in(tx_bs_ce_in[36]),
      .tx_bs36_cntvaluein(tx_bs_cntvaluein[36]),
      .tx_bs36_cntvalueout(tx_bs_cntvalueout[36]),
      .tx_bs36_en_vtc_in(tx_bs_en_vtc_in[36]),
      .tx_bs36_inc_in(tx_bs_inc_in[36]),
      .tx_bs36_load_in(tx_bs_load_in[36]),
   
   // Data Signals
      .tx_bs36_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[36]),
      .tx_bs36_O_data_out(tx_bs_O_data_out[36]),
   
   // Tristate control signals
      .tx_bs36_t_in(tx_bs_t_in[36]),
      .tx_bs36_t_out(tx_bs_t_out[36]),
      .tx_bs36_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs36_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[36]),
      .tx_bs36_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[36]),
      .tx_bs36_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[36]),
      .tx_bs36_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[36]),
   
   // --------------------------------------------------------
   // Bitslice37 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs37_ce_in(tx_bs_ce_in[37]),
      .tx_bs37_cntvaluein(tx_bs_cntvaluein[37]),
      .tx_bs37_cntvalueout(tx_bs_cntvalueout[37]),
      .tx_bs37_en_vtc_in(tx_bs_en_vtc_in[37]),
      .tx_bs37_inc_in(tx_bs_inc_in[37]),
      .tx_bs37_load_in(tx_bs_load_in[37]),
   
   // Data Signals
      .tx_bs37_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[37]),
      .tx_bs37_O_data_out(tx_bs_O_data_out[37]),
   
   // Tristate control signals
      .tx_bs37_t_in(tx_bs_t_in[37]),
      .tx_bs37_t_out(tx_bs_t_out[37]),
      .tx_bs37_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs37_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[37]),
      .tx_bs37_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[37]),
      .tx_bs37_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[37]),
      .tx_bs37_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[37]),
   
   // --------------------------------------------------------
   // Bitslice38 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs38_ce_in(tx_bs_ce_in[38]),
      .tx_bs38_cntvaluein(tx_bs_cntvaluein[38]),
      .tx_bs38_cntvalueout(tx_bs_cntvalueout[38]),
      .tx_bs38_en_vtc_in(tx_bs_en_vtc_in[38]),
      .tx_bs38_inc_in(tx_bs_inc_in[38]),
      .tx_bs38_load_in(tx_bs_load_in[38]),
   
   // Data Signals
      .tx_bs38_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[38]),
      .tx_bs38_O_data_out(tx_bs_O_data_out[38]),
   
   // Tristate control signals
      .tx_bs38_t_in(tx_bs_t_in[38]),
      .tx_bs38_t_out(tx_bs_t_out[38]),
      .tx_bs38_tbyte_in(tx_bs_tri_nib_t_out[5]),
   
   //Ribbon cable signals
      .tx_bs38_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[38]),
      .tx_bs38_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[38]),
      .tx_bs38_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[38]),
      .tx_bs38_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[38]),
   
   // --------------------------------------------------------
   // Bitslice39 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs39_ce_in(tx_bs_ce_in[39]),
      .tx_bs39_cntvaluein(tx_bs_cntvaluein[39]),
      .tx_bs39_cntvalueout(tx_bs_cntvalueout[39]),
      .tx_bs39_en_vtc_in(tx_bs_en_vtc_in[39]),
      .tx_bs39_inc_in(tx_bs_inc_in[39]),
      .tx_bs39_load_in(tx_bs_load_in[39]),
   
   // Data Signals
      .tx_bs39_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[39]),
      .tx_bs39_O_data_out(tx_bs_O_data_out[39]),
   
   // Tristate control signals
      .tx_bs39_t_in(tx_bs_t_in[39]),
      .tx_bs39_t_out(tx_bs_t_out[39]),
      .tx_bs39_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs39_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[39]),
      .tx_bs39_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[39]),
      .tx_bs39_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[39]),
      .tx_bs39_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[39]),
   
   // --------------------------------------------------------
   // Bitslice40 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs40_ce_in(tx_bs_ce_in[40]),
      .tx_bs40_cntvaluein(tx_bs_cntvaluein[40]),
      .tx_bs40_cntvalueout(tx_bs_cntvalueout[40]),
      .tx_bs40_en_vtc_in(tx_bs_en_vtc_in[40]),
      .tx_bs40_inc_in(tx_bs_inc_in[40]),
      .tx_bs40_load_in(tx_bs_load_in[40]),
   
   // Data Signals
      .tx_bs40_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[40]),
      .tx_bs40_O_data_out(tx_bs_O_data_out[40]),
   
   // Tristate control signals
      .tx_bs40_t_in(tx_bs_t_in[40]),
      .tx_bs40_t_out(tx_bs_t_out[40]),
      .tx_bs40_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs40_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[40]),
      .tx_bs40_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[40]),
      .tx_bs40_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[40]),
      .tx_bs40_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[40]),
   
   // --------------------------------------------------------
   // Bitslice41 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs41_ce_in(tx_bs_ce_in[41]),
      .tx_bs41_cntvaluein(tx_bs_cntvaluein[41]),
      .tx_bs41_cntvalueout(tx_bs_cntvalueout[41]),
      .tx_bs41_en_vtc_in(tx_bs_en_vtc_in[41]),
      .tx_bs41_inc_in(tx_bs_inc_in[41]),
      .tx_bs41_load_in(tx_bs_load_in[41]),
   
   // Data Signals
      .tx_bs41_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[41]),
      .tx_bs41_O_data_out(tx_bs_O_data_out[41]),
   
   // Tristate control signals
      .tx_bs41_t_in(tx_bs_t_in[41]),
      .tx_bs41_t_out(tx_bs_t_out[41]),
      .tx_bs41_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs41_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[41]),
      .tx_bs41_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[41]),
      .tx_bs41_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[41]),
      .tx_bs41_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[41]),
   
   // --------------------------------------------------------
   // Bitslice42 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs42_ce_in(tx_bs_ce_in[42]),
      .tx_bs42_cntvaluein(tx_bs_cntvaluein[42]),
      .tx_bs42_cntvalueout(tx_bs_cntvalueout[42]),
      .tx_bs42_en_vtc_in(tx_bs_en_vtc_in[42]),
      .tx_bs42_inc_in(tx_bs_inc_in[42]),
      .tx_bs42_load_in(tx_bs_load_in[42]),
   
   // Data Signals
      .tx_bs42_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[42]),
      .tx_bs42_O_data_out(tx_bs_O_data_out[42]),
   
   // Tristate control signals
      .tx_bs42_t_in(tx_bs_t_in[42]),
      .tx_bs42_t_out(tx_bs_t_out[42]),
      .tx_bs42_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs42_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[42]),
      .tx_bs42_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[42]),
      .tx_bs42_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[42]),
      .tx_bs42_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[42]),
   
   // --------------------------------------------------------
   // Bitslice43 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs43_ce_in(tx_bs_ce_in[43]),
      .tx_bs43_cntvaluein(tx_bs_cntvaluein[43]),
      .tx_bs43_cntvalueout(tx_bs_cntvalueout[43]),
      .tx_bs43_en_vtc_in(tx_bs_en_vtc_in[43]),
      .tx_bs43_inc_in(tx_bs_inc_in[43]),
      .tx_bs43_load_in(tx_bs_load_in[43]),
   
   // Data Signals
      .tx_bs43_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[43]),
      .tx_bs43_O_data_out(tx_bs_O_data_out[43]),
   
   // Tristate control signals
      .tx_bs43_t_in(tx_bs_t_in[43]),
      .tx_bs43_t_out(tx_bs_t_out[43]),
      .tx_bs43_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs43_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[43]),
      .tx_bs43_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[43]),
      .tx_bs43_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[43]),
      .tx_bs43_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[43]),
   
   // --------------------------------------------------------
   // Bitslice44 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs44_ce_in(tx_bs_ce_in[44]),
      .tx_bs44_cntvaluein(tx_bs_cntvaluein[44]),
      .tx_bs44_cntvalueout(tx_bs_cntvalueout[44]),
      .tx_bs44_en_vtc_in(tx_bs_en_vtc_in[44]),
      .tx_bs44_inc_in(tx_bs_inc_in[44]),
      .tx_bs44_load_in(tx_bs_load_in[44]),
   
   // Data Signals
      .tx_bs44_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[44]),
      .tx_bs44_O_data_out(tx_bs_O_data_out[44]),
   
   // Tristate control signals
      .tx_bs44_t_in(tx_bs_t_in[44]),
      .tx_bs44_t_out(tx_bs_t_out[44]),
      .tx_bs44_tbyte_in(tx_bs_tri_nib_t_out[6]),
   
   //Ribbon cable signals
      .tx_bs44_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[44]),
      .tx_bs44_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[44]),
      .tx_bs44_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[44]),
      .tx_bs44_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[44]),
   
   // --------------------------------------------------------
   // Bitslice45 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs45_ce_in(tx_bs_ce_in[45]),
      .tx_bs45_cntvaluein(tx_bs_cntvaluein[45]),
      .tx_bs45_cntvalueout(tx_bs_cntvalueout[45]),
      .tx_bs45_en_vtc_in(tx_bs_en_vtc_in[45]),
      .tx_bs45_inc_in(tx_bs_inc_in[45]),
      .tx_bs45_load_in(tx_bs_load_in[45]),
   
   // Data Signals
      .tx_bs45_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[45]),
      .tx_bs45_O_data_out(tx_bs_O_data_out[45]),
   
   // Tristate control signals
      .tx_bs45_t_in(tx_bs_t_in[45]),
      .tx_bs45_t_out(tx_bs_t_out[45]),
      .tx_bs45_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs45_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[45]),
      .tx_bs45_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[45]),
      .tx_bs45_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[45]),
      .tx_bs45_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[45]),
   
   // --------------------------------------------------------
   // Bitslice46 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs46_ce_in(tx_bs_ce_in[46]),
      .tx_bs46_cntvaluein(tx_bs_cntvaluein[46]),
      .tx_bs46_cntvalueout(tx_bs_cntvalueout[46]),
      .tx_bs46_en_vtc_in(tx_bs_en_vtc_in[46]),
      .tx_bs46_inc_in(tx_bs_inc_in[46]),
      .tx_bs46_load_in(tx_bs_load_in[46]),
   
   // Data Signals
      .tx_bs46_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[46]),
      .tx_bs46_O_data_out(tx_bs_O_data_out[46]),
   
   // Tristate control signals
      .tx_bs46_t_in(tx_bs_t_in[46]),
      .tx_bs46_t_out(tx_bs_t_out[46]),
      .tx_bs46_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs46_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[46]),
      .tx_bs46_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[46]),
      .tx_bs46_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[46]),
      .tx_bs46_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[46]),
   
   // --------------------------------------------------------
   // Bitslice47 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs47_ce_in(tx_bs_ce_in[47]),
      .tx_bs47_cntvaluein(tx_bs_cntvaluein[47]),
      .tx_bs47_cntvalueout(tx_bs_cntvalueout[47]),
      .tx_bs47_en_vtc_in(tx_bs_en_vtc_in[47]),
      .tx_bs47_inc_in(tx_bs_inc_in[47]),
      .tx_bs47_load_in(tx_bs_load_in[47]),
   
   // Data Signals
      .tx_bs47_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[47]),
      .tx_bs47_O_data_out(tx_bs_O_data_out[47]),
   
   // Tristate control signals
      .tx_bs47_t_in(tx_bs_t_in[47]),
      .tx_bs47_t_out(tx_bs_t_out[47]),
      .tx_bs47_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs47_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[47]),
      .tx_bs47_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[47]),
      .tx_bs47_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[47]),
      .tx_bs47_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[47]),
   
   // --------------------------------------------------------
   // Bitslice48 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs48_ce_in(tx_bs_ce_in[48]),
      .tx_bs48_cntvaluein(tx_bs_cntvaluein[48]),
      .tx_bs48_cntvalueout(tx_bs_cntvalueout[48]),
      .tx_bs48_en_vtc_in(tx_bs_en_vtc_in[48]),
      .tx_bs48_inc_in(tx_bs_inc_in[48]),
      .tx_bs48_load_in(tx_bs_load_in[48]),
   
   // Data Signals
      .tx_bs48_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[48]),
      .tx_bs48_O_data_out(tx_bs_O_data_out[48]),
   
   // Tristate control signals
      .tx_bs48_t_in(tx_bs_t_in[48]),
      .tx_bs48_t_out(tx_bs_t_out[48]),
      .tx_bs48_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs48_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[48]),
      .tx_bs48_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[48]),
      .tx_bs48_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[48]),
      .tx_bs48_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[48]),
   
   // --------------------------------------------------------
   // Bitslice49 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs49_ce_in(tx_bs_ce_in[49]),
      .tx_bs49_cntvaluein(tx_bs_cntvaluein[49]),
      .tx_bs49_cntvalueout(tx_bs_cntvalueout[49]),
      .tx_bs49_en_vtc_in(tx_bs_en_vtc_in[49]),
      .tx_bs49_inc_in(tx_bs_inc_in[49]),
      .tx_bs49_load_in(tx_bs_load_in[49]),
   
   // Data Signals
      .tx_bs49_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[49]),
      .tx_bs49_O_data_out(tx_bs_O_data_out[49]),
   
   // Tristate control signals
      .tx_bs49_t_in(tx_bs_t_in[49]),
      .tx_bs49_t_out(tx_bs_t_out[49]),
      .tx_bs49_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs49_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[49]),
      .tx_bs49_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[49]),
      .tx_bs49_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[49]),
      .tx_bs49_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[49]),
   
   // --------------------------------------------------------
   // Bitslice50 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs50_ce_in(tx_bs_ce_in[50]),
      .tx_bs50_cntvaluein(tx_bs_cntvaluein[50]),
      .tx_bs50_cntvalueout(tx_bs_cntvalueout[50]),
      .tx_bs50_en_vtc_in(tx_bs_en_vtc_in[50]),
      .tx_bs50_inc_in(tx_bs_inc_in[50]),
      .tx_bs50_load_in(tx_bs_load_in[50]),
   
   // Data Signals
      .tx_bs50_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[50]),
      .tx_bs50_O_data_out(tx_bs_O_data_out[50]),
   
   // Tristate control signals
      .tx_bs50_t_in(tx_bs_t_in[50]),
      .tx_bs50_t_out(tx_bs_t_out[50]),
      .tx_bs50_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs50_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[50]),
      .tx_bs50_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[50]),
      .tx_bs50_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[50]),
      .tx_bs50_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[50]),
   
   // --------------------------------------------------------
   // Bitslice51 signals  
   // --------------------------------------------------------
   // Delay signals
      .tx_bs51_ce_in(tx_bs_ce_in[51]),
      .tx_bs51_cntvaluein(tx_bs_cntvaluein[51]),
      .tx_bs51_cntvalueout(tx_bs_cntvalueout[51]),
      .tx_bs51_en_vtc_in(tx_bs_en_vtc_in[51]),
      .tx_bs51_inc_in(tx_bs_inc_in[51]),
      .tx_bs51_load_in(tx_bs_load_in[51]),
   
   // Data Signals
      .tx_bs51_D_data_from_fabric_in(tx_bs_D_data_from_fabric_in[51]),
      .tx_bs51_O_data_out(tx_bs_O_data_out[51]),
   
   // Tristate control signals
      .tx_bs51_t_in(tx_bs_t_in[51]),
      .tx_bs51_t_out(tx_bs_t_out[51]),
      .tx_bs51_tbyte_in(tx_bs_tri_nib_t_out[7]),
   
   //Ribbon cable signals
      .tx_bs51_rx_bit_ctrl_in(tx_bs_rx_bit_ctrl_in[51]),
      .tx_bs51_rx_bit_ctrl_out(tx_bs_rx_bit_ctrl_out[51]),
      .tx_bs51_tx_bit_ctrl_in(tx_bs_tx_bit_ctrl_in[51]),
      .tx_bs51_tx_bit_ctrl_out(tx_bs_tx_bit_ctrl_out[51]) 
   
   );
   
   //-------------------------------------------------------------------------------------------
   // TX BITSLICE TRI INSTANTIATION   
   //-------------------------------------------------------------------------------------------
   
   high_speed_selectio_wiz_v3_5_1_tx_bs_tri  #(
   .C_SIM_DEVICE(C_SIM_DEVICE),
   .C_SIM_VERSION(C_SIM_VERSION),
   .C_SERIALIZATION_FACTOR(C_SERIALIZATION_FACTOR),    
   .C_TX_TRI_DELAY_FORMAT(C_TX_TRI_DELAY_FORMAT),
   .C_TX_TRI_INIT(C_TX_TRI_INIT),                        // Default value for the attribute
   .C_TX_TRI_IS_CLK_INVERTED(C_TX_TRI_IS_CLK_INVERTED),           // Default value for the attribute
   .C_TX_TRI_IS_RST_DLY_INVERTED(C_TX_TRI_IS_RST_DLY_INVERTED),   // Default value for the attribute
   .C_TX_TRI_IS_RST_INVERTED(C_TX_TRI_IS_RST_INVERTED),     // Default value for the attribute
   .C_TX_TRI_OUTPUT_PHASE_90(C_TX_TRI_OUTPUT_PHASE_90),     // Only for Clock forward delay format is used
   //.C_TX_TRI_UPDATE_MODE(C_TX_TRI_UPDATE_MODE),
   .C_TX_TRI_NATIVE_ODELAY_BYPASS (C_TX_TRI_NATIVE_ODELAY_BYPASS),
   .C_TX_TRI_DELAY_TYPE0(C_TX_TRI_DELAY_TYPE0),    // TX delay type
   .C_TX_TRI_DELAY_TYPE1(C_TX_TRI_DELAY_TYPE1),    // TX delay type
   .C_TX_TRI_DELAY_TYPE2(C_TX_TRI_DELAY_TYPE2),    // TX delay type
   .C_TX_TRI_DELAY_TYPE3(C_TX_TRI_DELAY_TYPE3),    // TX delay type
   .C_TX_TRI_DELAY_TYPE4(C_TX_TRI_DELAY_TYPE4),    // TX delay type
   .C_TX_TRI_DELAY_TYPE5(C_TX_TRI_DELAY_TYPE5),    // TX delay type
   .C_TX_TRI_DELAY_TYPE6(C_TX_TRI_DELAY_TYPE6),    // TX delay type
   .C_TX_TRI_DELAY_TYPE7(C_TX_TRI_DELAY_TYPE7),    // TX delay type
   .C_TX_TRI_DELAY_VALUE0(C_TX_TRI_DELAY_VALUE0),  // TX delay value
   .C_TX_TRI_DELAY_VALUE1(C_TX_TRI_DELAY_VALUE1),  // TX delay value
   .C_TX_TRI_DELAY_VALUE2(C_TX_TRI_DELAY_VALUE2),  // TX delay value
   .C_TX_TRI_DELAY_VALUE3(C_TX_TRI_DELAY_VALUE3),  // TX delay value
   .C_TX_TRI_DELAY_VALUE4(C_TX_TRI_DELAY_VALUE4),  // TX delay value
   .C_TX_TRI_DELAY_VALUE5(C_TX_TRI_DELAY_VALUE5),  // TX delay value
   .C_TX_TRI_DELAY_VALUE6(C_TX_TRI_DELAY_VALUE6),  // TX delay value
   .C_TX_TRI_DELAY_VALUE7(C_TX_TRI_DELAY_VALUE7),  // TX delay value
   .TX_BITSLICE_TRI_EN(TX_BITSLICE_TRI_EN),
   .C_TX_REFCLK_FREQ(C_TX_REFCLK_FREQ)             // TX clock frequency  
   ) u_tx_bs_tri (
     
      .rst_seq_done (rst_seq_done),
      .tx_bs_tri_clk_in(bs_tri_clk_in),                
      .tx_bs_tri_rst_dly_in(bs_tri_rst_dly_in),            
      .tx_bs_tri_rst_in(bs_tri_reset_in),
   
   // -----------------------------------------------------------
   // Nibble0 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib0_ce_in(tx_bs_tri_nib_ce_in[0]),                        
      .tx_bs_tri_nib0_cntvaluein(tx_bs_tri_nib_cntvaluein[0]),    
      .tx_bs_tri_nib0_cntvalueout(tx_bs_tri_nib_cntvalueout[0]), 
      .tx_bs_tri_nib0_en_vtc_in(tx_bs_tri_nib_en_vtc_in[0]),        
      .tx_bs_tri_nib0_inc_in(tx_bs_tri_nib_inc_in[0]),           
      .tx_bs_tri_nib0_load_in(tx_bs_tri_nib_load_in[0]),          
   
   // Tristate Signals
      .tx_bs_tri_nib0_t_out(tx_bs_tri_nib_t_out[0]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib0_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[0]),   
      .tx_bs_tri_nib0_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[0]), 
   
   
   // -----------------------------------------------------------
   // Nibble1 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib1_ce_in(tx_bs_tri_nib_ce_in[1]),            
      .tx_bs_tri_nib1_cntvaluein(tx_bs_tri_nib_cntvaluein[1]),    
      .tx_bs_tri_nib1_cntvalueout(tx_bs_tri_nib_cntvalueout[1]), 
      .tx_bs_tri_nib1_en_vtc_in(tx_bs_tri_nib_en_vtc_in[1]),        
      .tx_bs_tri_nib1_inc_in(tx_bs_tri_nib_inc_in[1]),           
      .tx_bs_tri_nib1_load_in(tx_bs_tri_nib_load_in[1]),          
   
   // Tristate Signals
      .tx_bs_tri_nib1_t_out(tx_bs_tri_nib_t_out[1]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib1_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[1]),   
      .tx_bs_tri_nib1_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[1]), 
   
   
   // -----------------------------------------------------------
   // Nibble2 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib2_ce_in(tx_bs_tri_nib_ce_in[2]),            
      .tx_bs_tri_nib2_cntvaluein(tx_bs_tri_nib_cntvaluein[2]),    
      .tx_bs_tri_nib2_cntvalueout(tx_bs_tri_nib_cntvalueout[2]), 
      .tx_bs_tri_nib2_en_vtc_in(tx_bs_tri_nib_en_vtc_in[2]),        
      .tx_bs_tri_nib2_inc_in(tx_bs_tri_nib_inc_in[2]),           
      .tx_bs_tri_nib2_load_in(tx_bs_tri_nib_load_in[2]),          
   
   // Tristate Signals
      .tx_bs_tri_nib2_t_out(tx_bs_tri_nib_t_out[2]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib2_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[2]),   
      .tx_bs_tri_nib2_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[2]), 
   
   
   // -----------------------------------------------------------
   // Nibble3 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib3_ce_in(tx_bs_tri_nib_ce_in[3]),            
      .tx_bs_tri_nib3_cntvaluein(tx_bs_tri_nib_cntvaluein[3]),    
      .tx_bs_tri_nib3_cntvalueout(tx_bs_tri_nib_cntvalueout[3]), 
      .tx_bs_tri_nib3_en_vtc_in(tx_bs_tri_nib_en_vtc_in[3]),        
      .tx_bs_tri_nib3_inc_in(tx_bs_tri_nib_inc_in[3]),           
      .tx_bs_tri_nib3_load_in(tx_bs_tri_nib_load_in[3]),          
   
   // Tristate Signals
      .tx_bs_tri_nib3_t_out(tx_bs_tri_nib_t_out[3]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib3_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[3]),   
      .tx_bs_tri_nib3_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[3]), 
   
   // -----------------------------------------------------------
   // Nibble4 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib4_ce_in(tx_bs_tri_nib_ce_in[4]),            
      .tx_bs_tri_nib4_cntvaluein(tx_bs_tri_nib_cntvaluein[4]),    
      .tx_bs_tri_nib4_cntvalueout(tx_bs_tri_nib_cntvalueout[4]), 
      .tx_bs_tri_nib4_en_vtc_in(tx_bs_tri_nib_en_vtc_in[4]),        
      .tx_bs_tri_nib4_inc_in(tx_bs_tri_nib_inc_in[4]),           
      .tx_bs_tri_nib4_load_in(tx_bs_tri_nib_load_in[4]),          
   
   // Tristate Signals
      .tx_bs_tri_nib4_t_out(tx_bs_tri_nib_t_out[4]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib4_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[4]),   
      .tx_bs_tri_nib4_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[4]), 
   
   // -----------------------------------------------------------
   // Nibble5 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib5_ce_in(tx_bs_tri_nib_ce_in[5]),            
      .tx_bs_tri_nib5_cntvaluein(tx_bs_tri_nib_cntvaluein[5]),    
      .tx_bs_tri_nib5_cntvalueout(tx_bs_tri_nib_cntvalueout[5]), 
      .tx_bs_tri_nib5_en_vtc_in(tx_bs_tri_nib_en_vtc_in[5]),        
      .tx_bs_tri_nib5_inc_in(tx_bs_tri_nib_inc_in[5]),           
      .tx_bs_tri_nib5_load_in(tx_bs_tri_nib_load_in[5]),          
   
   // Tristate Signals
      .tx_bs_tri_nib5_t_out(tx_bs_tri_nib_t_out[5]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib5_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[5]),   
      .tx_bs_tri_nib5_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[5]), 
   
   
   // -----------------------------------------------------------
   // Nibble6 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib6_ce_in(tx_bs_tri_nib_ce_in[6]),            
      .tx_bs_tri_nib6_cntvaluein(tx_bs_tri_nib_cntvaluein[6]),    
      .tx_bs_tri_nib6_cntvalueout(tx_bs_tri_nib_cntvalueout[6]), 
      .tx_bs_tri_nib6_en_vtc_in(tx_bs_tri_nib_en_vtc_in[6]),        
      .tx_bs_tri_nib6_inc_in(tx_bs_tri_nib_inc_in[6]),           
      .tx_bs_tri_nib6_load_in(tx_bs_tri_nib_load_in[6]),          
   
   // Tristate Signals
      .tx_bs_tri_nib6_t_out(tx_bs_tri_nib_t_out[6]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib6_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[6]),   
      .tx_bs_tri_nib6_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[6]), 
   
   
   // -----------------------------------------------------------
   // Nibble7 Signals
   // -----------------------------------------------------------
   // Delay Signals
      .tx_bs_tri_nib7_ce_in(tx_bs_tri_nib_ce_in[7]),            
      .tx_bs_tri_nib7_cntvaluein(tx_bs_tri_nib_cntvaluein[7]),    
      .tx_bs_tri_nib7_cntvalueout(tx_bs_tri_nib_cntvalueout[7]), 
      .tx_bs_tri_nib7_en_vtc_in(tx_bs_tri_nib_en_vtc_in[7]),        
      .tx_bs_tri_nib7_inc_in(tx_bs_tri_nib_inc_in[7]),           
      .tx_bs_tri_nib7_load_in(tx_bs_tri_nib_load_in[7]),          
   
   // Tristate Signals
      .tx_bs_tri_nib7_t_out(tx_bs_tri_nib_t_out[7]),            
   
   // Ribbon Cable Signals
      .tx_bs_tri_nib7_bit_ctrl_in(tx_bs_tri_nib_bit_ctrl_in[7]),   
      .tx_bs_tri_nib7_bit_ctrl_out(tx_bs_tri_nib_bit_ctrl_out[7])
   				   );
   // ----------------------TX Bitslice tri ends----------------------------------------
   
   // --------------------------------------------------------
   // RX BITSLICE INSTANTIATION
   // --------------------------------------------------------   
   high_speed_selectio_wiz_v3_5_1_rx_bs #(
   .C_SIM_DEVICE(C_SIM_DEVICE),
   .C_RX_PIN_EN(C_RX_PIN_EN),
   .C_ENABLE_N_PINS(C_ENABLE_N_PINS),
   .C_DIFF_EN(C_DIFF_EN),
   .C_TEMPLATE(C_TEMPLATE),
   .C_SIM_VERSION(C_SIM_VERSION),
   .C_SERIALIZATION_FACTOR(C_SERIALIZATION_FACTOR),   // Serialization Factor
   .C_SERIAL_MODE(C_SERIAL_MODE),                     // Serial mode
   .C_RX_STROBE_EN(C_RX_STROBE_EN),                   // Strobe Enable
   .C_RX_DELAY_CASCADE(C_RX_DELAY_CASCADE),           // Cascased RX delay enablement  
   .C_RX_DELAY_FORMAT(C_RX_DELAY_FORMAT),
   .C_RX_FIFO_SYNC_MODE(C_RX_FIFO_SYNC_MODE),
   .C_RX_IS_CLK_EXT_INVERTED(C_RX_IS_CLK_EXT_INVERTED),           
   .C_RX_IS_RST_DLY_EXT_INVERTED(C_RX_IS_RST_DLY_EXT_INVERTED),   
   .C_RX_IS_CLK_INVERTED(C_RX_IS_CLK_INVERTED),                   
   .C_RX_IS_RST_DLY_INVERTED(C_RX_IS_RST_DLY_INVERTED),           
   .C_RX_IS_RST_INVERTED(C_RX_IS_RST_INVERTED),                   
   //.C_RX_UPDATE_MODE(C_RX_UPDATE_MODE),
   //.C_RX_UPDATE_MODE_EXT(C_RX_UPDATE_MODE_EXT),
   .C_RX_DELAY_TYPE0(C_RX_DELAY_TYPE0),   // RX delay type
   .C_RX_DELAY_TYPE1(C_RX_DELAY_TYPE1),   // RX delay type
   .C_RX_DELAY_TYPE2(C_RX_DELAY_TYPE2),   // RX delay type
   .C_RX_DELAY_TYPE3(C_RX_DELAY_TYPE3),   // RX delay type
   .C_RX_DELAY_TYPE4(C_RX_DELAY_TYPE4),   // RX delay type
   .C_RX_DELAY_TYPE5(C_RX_DELAY_TYPE5),   // RX delay type
   .C_RX_DELAY_TYPE6(C_RX_DELAY_TYPE6),   // RX delay type
   .C_RX_DELAY_TYPE7(C_RX_DELAY_TYPE7),   // RX delay type
   .C_RX_DELAY_TYPE8(C_RX_DELAY_TYPE8),   // RX delay type
   .C_RX_DELAY_TYPE9(C_RX_DELAY_TYPE9),   // RX delay type
   .C_RX_DELAY_TYPE10(C_RX_DELAY_TYPE10), // RX delay type
   .C_RX_DELAY_TYPE11(C_RX_DELAY_TYPE11), // RX delay type
   .C_RX_DELAY_TYPE12(C_RX_DELAY_TYPE12), // RX delay type
   .C_RX_DELAY_TYPE13(C_RX_DELAY_TYPE13), // RX delay type
   .C_RX_DELAY_TYPE14(C_RX_DELAY_TYPE14), // RX delay type
   .C_RX_DELAY_TYPE15(C_RX_DELAY_TYPE15), // RX delay type
   .C_RX_DELAY_TYPE16(C_RX_DELAY_TYPE16), // RX delay type
   .C_RX_DELAY_TYPE17(C_RX_DELAY_TYPE17), // RX delay type
   .C_RX_DELAY_TYPE18(C_RX_DELAY_TYPE18), // RX delay type
   .C_RX_DELAY_TYPE19(C_RX_DELAY_TYPE19), // RX delay type
   .C_RX_DELAY_TYPE20(C_RX_DELAY_TYPE20), // RX delay type
   .C_RX_DELAY_TYPE21(C_RX_DELAY_TYPE21), // RX delay type
   .C_RX_DELAY_TYPE22(C_RX_DELAY_TYPE22), // RX delay type
   .C_RX_DELAY_TYPE23(C_RX_DELAY_TYPE23), // RX delay type
   .C_RX_DELAY_TYPE24(C_RX_DELAY_TYPE24), // RX delay type
   .C_RX_DELAY_TYPE25(C_RX_DELAY_TYPE25), // RX delay type
   .C_RX_DELAY_TYPE26(C_RX_DELAY_TYPE26), // RX delay type
   .C_RX_DELAY_TYPE27(C_RX_DELAY_TYPE27), // RX delay type
   .C_RX_DELAY_TYPE28(C_RX_DELAY_TYPE28), // RX delay type
   .C_RX_DELAY_TYPE29(C_RX_DELAY_TYPE29), // RX delay type
   .C_RX_DELAY_TYPE30(C_RX_DELAY_TYPE30), // RX delay type
   .C_RX_DELAY_TYPE31(C_RX_DELAY_TYPE31), // RX delay type
   .C_RX_DELAY_TYPE32(C_RX_DELAY_TYPE32), // RX delay type
   .C_RX_DELAY_TYPE33(C_RX_DELAY_TYPE33), // RX delay type
   .C_RX_DELAY_TYPE34(C_RX_DELAY_TYPE34), // RX delay type
   .C_RX_DELAY_TYPE35(C_RX_DELAY_TYPE35), // RX delay type
   .C_RX_DELAY_TYPE36(C_RX_DELAY_TYPE36), // RX delay type
   .C_RX_DELAY_TYPE37(C_RX_DELAY_TYPE37), // RX delay type
   .C_RX_DELAY_TYPE38(C_RX_DELAY_TYPE38), // RX delay type
   .C_RX_DELAY_TYPE39(C_RX_DELAY_TYPE39), // RX delay type
   .C_RX_DELAY_TYPE40(C_RX_DELAY_TYPE40), // RX delay type
   .C_RX_DELAY_TYPE41(C_RX_DELAY_TYPE41), // RX delay type
   .C_RX_DELAY_TYPE42(C_RX_DELAY_TYPE42), // RX delay type
   .C_RX_DELAY_TYPE43(C_RX_DELAY_TYPE43), // RX delay type
   .C_RX_DELAY_TYPE44(C_RX_DELAY_TYPE44), // RX delay type
   .C_RX_DELAY_TYPE45(C_RX_DELAY_TYPE45), // RX delay type
   .C_RX_DELAY_TYPE46(C_RX_DELAY_TYPE46), // RX delay type
   .C_RX_DELAY_TYPE47(C_RX_DELAY_TYPE47), // RX delay type
   .C_RX_DELAY_TYPE48(C_RX_DELAY_TYPE48), // RX delay type
   .C_RX_DELAY_TYPE49(C_RX_DELAY_TYPE49), // RX delay type
   .C_RX_DELAY_TYPE50(C_RX_DELAY_TYPE50), // RX delay type
   .C_RX_DELAY_TYPE51(C_RX_DELAY_TYPE51), // RX delay type
   .C_RX_DELAY_VALUE0(C_RX_DELAY_VALUE0),  // RX delay value
   .C_RX_DELAY_VALUE1(C_RX_DELAY_VALUE1),  // RX delay value
   .C_RX_DELAY_VALUE2(C_RX_DELAY_VALUE2),  // RX delay value
   .C_RX_DELAY_VALUE3(C_RX_DELAY_VALUE3),  // RX delay value
   .C_RX_DELAY_VALUE4(C_RX_DELAY_VALUE4),  // RX delay value
   .C_RX_DELAY_VALUE5(C_RX_DELAY_VALUE5),  // RX delay value
   .C_RX_DELAY_VALUE6(C_RX_DELAY_VALUE6),  // RX delay value
   .C_RX_DELAY_VALUE7(C_RX_DELAY_VALUE7),  // RX delay value
   .C_RX_DELAY_VALUE8(C_RX_DELAY_VALUE8),  // RX delay value
   .C_RX_DELAY_VALUE9(C_RX_DELAY_VALUE9),  // RX delay value
   .C_RX_DELAY_VALUE10(C_RX_DELAY_VALUE10),  // RX delay value
   .C_RX_DELAY_VALUE11(C_RX_DELAY_VALUE11),  // RX delay value
   .C_RX_DELAY_VALUE12(C_RX_DELAY_VALUE12),  // RX delay value
   .C_RX_DELAY_VALUE13(C_RX_DELAY_VALUE13),  // RX delay value
   .C_RX_DELAY_VALUE14(C_RX_DELAY_VALUE14),  // RX delay value
   .C_RX_DELAY_VALUE15(C_RX_DELAY_VALUE15),  // RX delay value
   .C_RX_DELAY_VALUE16(C_RX_DELAY_VALUE16),  // RX delay value
   .C_RX_DELAY_VALUE17(C_RX_DELAY_VALUE17),  // RX delay value
   .C_RX_DELAY_VALUE18(C_RX_DELAY_VALUE18),  // RX delay value
   .C_RX_DELAY_VALUE19(C_RX_DELAY_VALUE19),  // RX delay value
   .C_RX_DELAY_VALUE20(C_RX_DELAY_VALUE20),  // RX delay value
   .C_RX_DELAY_VALUE21(C_RX_DELAY_VALUE21),  // RX delay value
   .C_RX_DELAY_VALUE22(C_RX_DELAY_VALUE22),  // RX delay value
   .C_RX_DELAY_VALUE23(C_RX_DELAY_VALUE23),  // RX delay value
   .C_RX_DELAY_VALUE24(C_RX_DELAY_VALUE24),  // RX delay value
   .C_RX_DELAY_VALUE25(C_RX_DELAY_VALUE25),  // RX delay value
   .C_RX_DELAY_VALUE26(C_RX_DELAY_VALUE26),  // RX delay value
   .C_RX_DELAY_VALUE27(C_RX_DELAY_VALUE27),  // RX delay value
   .C_RX_DELAY_VALUE28(C_RX_DELAY_VALUE28),  // RX delay value
   .C_RX_DELAY_VALUE29(C_RX_DELAY_VALUE29),  // RX delay value
   .C_RX_DELAY_VALUE30(C_RX_DELAY_VALUE30),  // RX delay value
   .C_RX_DELAY_VALUE31(C_RX_DELAY_VALUE31),  // RX delay value
   .C_RX_DELAY_VALUE32(C_RX_DELAY_VALUE32),  // RX delay value
   .C_RX_DELAY_VALUE33(C_RX_DELAY_VALUE33),  // RX delay value
   .C_RX_DELAY_VALUE34(C_RX_DELAY_VALUE34),  // RX delay value
   .C_RX_DELAY_VALUE35(C_RX_DELAY_VALUE35),  // RX delay value
   .C_RX_DELAY_VALUE36(C_RX_DELAY_VALUE36),  // RX delay value
   .C_RX_DELAY_VALUE37(C_RX_DELAY_VALUE37),  // RX delay value
   .C_RX_DELAY_VALUE38(C_RX_DELAY_VALUE38),  // RX delay value
   .C_RX_DELAY_VALUE39(C_RX_DELAY_VALUE39),  // RX delay value
   .C_RX_DELAY_VALUE40(C_RX_DELAY_VALUE40),  // RX delay value
   .C_RX_DELAY_VALUE41(C_RX_DELAY_VALUE41),  // RX delay value
   .C_RX_DELAY_VALUE42(C_RX_DELAY_VALUE42),  // RX delay value
   .C_RX_DELAY_VALUE43(C_RX_DELAY_VALUE43),  // RX delay value
   .C_RX_DELAY_VALUE44(C_RX_DELAY_VALUE44),  // RX delay value
   .C_RX_DELAY_VALUE45(C_RX_DELAY_VALUE45),  // RX delay value
   .C_RX_DELAY_VALUE46(C_RX_DELAY_VALUE46),  // RX delay value
   .C_RX_DELAY_VALUE47(C_RX_DELAY_VALUE47),  // RX delay value
   .C_RX_DELAY_VALUE48(C_RX_DELAY_VALUE48),  // RX delay value
   .C_RX_DELAY_VALUE49(C_RX_DELAY_VALUE49),  // RX delay value
   .C_RX_DELAY_VALUE50(C_RX_DELAY_VALUE50),  // RX delay value
   .C_RX_DELAY_VALUE51(C_RX_DELAY_VALUE51),  // RX delay value
   
   .C_RX_DELAY_VALUE_EXT0(C_RX_DELAY_VALUE_EXT0),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT1(C_RX_DELAY_VALUE_EXT1),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT2(C_RX_DELAY_VALUE_EXT2),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT3(C_RX_DELAY_VALUE_EXT3),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT4(C_RX_DELAY_VALUE_EXT4),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT5(C_RX_DELAY_VALUE_EXT5),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT6(C_RX_DELAY_VALUE_EXT6),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT7(C_RX_DELAY_VALUE_EXT7),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT8(C_RX_DELAY_VALUE_EXT8),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT9(C_RX_DELAY_VALUE_EXT9),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT10(C_RX_DELAY_VALUE_EXT10),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT11(C_RX_DELAY_VALUE_EXT11),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT12(C_RX_DELAY_VALUE_EXT12),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT13(C_RX_DELAY_VALUE_EXT13),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT14(C_RX_DELAY_VALUE_EXT14),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT15(C_RX_DELAY_VALUE_EXT15),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT16(C_RX_DELAY_VALUE_EXT16),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT17(C_RX_DELAY_VALUE_EXT17),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT18(C_RX_DELAY_VALUE_EXT18),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT19(C_RX_DELAY_VALUE_EXT19),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT20(C_RX_DELAY_VALUE_EXT20),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT21(C_RX_DELAY_VALUE_EXT21),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT22(C_RX_DELAY_VALUE_EXT22),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT23(C_RX_DELAY_VALUE_EXT23),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT24(C_RX_DELAY_VALUE_EXT24),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT25(C_RX_DELAY_VALUE_EXT25),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT26(C_RX_DELAY_VALUE_EXT26),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT27(C_RX_DELAY_VALUE_EXT27),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT28(C_RX_DELAY_VALUE_EXT28),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT29(C_RX_DELAY_VALUE_EXT29),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT30(C_RX_DELAY_VALUE_EXT30),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT31(C_RX_DELAY_VALUE_EXT31),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT32(C_RX_DELAY_VALUE_EXT32),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT33(C_RX_DELAY_VALUE_EXT33),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT34(C_RX_DELAY_VALUE_EXT34),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT35(C_RX_DELAY_VALUE_EXT35),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT36(C_RX_DELAY_VALUE_EXT36),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT37(C_RX_DELAY_VALUE_EXT37),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT38(C_RX_DELAY_VALUE_EXT38),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT39(C_RX_DELAY_VALUE_EXT39),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT40(C_RX_DELAY_VALUE_EXT40),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT41(C_RX_DELAY_VALUE_EXT41),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT42(C_RX_DELAY_VALUE_EXT42),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT43(C_RX_DELAY_VALUE_EXT43),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT44(C_RX_DELAY_VALUE_EXT44),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT45(C_RX_DELAY_VALUE_EXT45),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT46(C_RX_DELAY_VALUE_EXT46),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT47(C_RX_DELAY_VALUE_EXT47),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT48(C_RX_DELAY_VALUE_EXT48),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT49(C_RX_DELAY_VALUE_EXT49),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT50(C_RX_DELAY_VALUE_EXT50),  // RX extended delay value
   .C_RX_DELAY_VALUE_EXT51(C_RX_DELAY_VALUE_EXT51),  // RX extended delay value
   .C_RX_REFCLK_FREQ(C_RX_REFCLK_FREQ),              // RX clock frequency
   .C_RX_BITSLICE_EN(C_RX_BITSLICE_EN),
   .C_FIFO_SYNC_MODE(C_FIFO_SYNC_MODE),              // RX fifo sync mode
   .C_FIFO_WR_CLK_EN(C_FIFO_WR_CLK_EN),              // Fifo Write Clock
   .C_ENABLE_BITSLIP(C_ENABLE_BITSLIP),              // Enable Bitslip
   .C_ENABLE_DATA_BITSLIP(C_ENABLE_DATA_BITSLIP),    
   .C_BITSLIP_MODE(C_BITSLIP_MODE),                  //  Bitslip Mode
   .C_BITSLIP_VAL(C_BITSLIP_VAL),                    // Bitslip value
   .C_RX_BITSLICE0_EN(C_RX_BITSLICE0_EN),
   // Strobe propagation signals
   .C_NIB5_EN_CLK_TO_EXT_NORTH(C_NIB5_EN_CLK_TO_EXT_NORTH),  
   .C_NIB5_EN_CLK_TO_EXT_SOUTH(C_NIB5_EN_CLK_TO_EXT_SOUTH), 
   .C_NIB4_EN_CLK_TO_EXT_NORTH(C_NIB4_EN_CLK_TO_EXT_NORTH), 
   .C_NIB4_EN_CLK_TO_EXT_SOUTH(C_NIB4_EN_CLK_TO_EXT_SOUTH),
   .C_NIB3_EN_CLK_TO_EXT_NORTH(C_NIB3_EN_CLK_TO_EXT_NORTH), 
   .C_NIB3_EN_CLK_TO_EXT_SOUTH(C_NIB3_EN_CLK_TO_EXT_SOUTH),
   .C_NIB2_EN_CLK_TO_EXT_NORTH(C_NIB2_EN_CLK_TO_EXT_NORTH), 
   .C_NIB2_EN_CLK_TO_EXT_SOUTH(C_NIB2_EN_CLK_TO_EXT_SOUTH) 
   
   )
   // COMMON signals
    u_rx_bs (
      .div_clk_to_fabric (div_clk_to_fabric),
      .rst_in (rst_in),
      .start_bitslip (start_bitslip),
      .core_rdy (core_rdy),
      .rst_seq_done (rst_seq_done),
      .rx_bitslip_sync_done (rx_bitslip_sync_done),
      .rx_bs_clk_in(bs_rx_clk_in),
      .rx_bs_clk_ext_in(bs_clk_ext_in),               
      .rx_bs_rst_in(bs_rx_rst_in),                    
      .rx_bs_rst_dly_in(bs_rx_rst_dly_in),               
      .rx_bs_rst_dly_ext_in(bs_rst_dly_ext_in),           
   
   // --------------------------------------------------------
   // Bitslice0 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs0_ce_in(rx_bs_ce_in[0]),                    
      .rx_bs0_cntvaluein(rx_bs_cntvaluein[0]),            
      .rx_bs0_cntvalueout(rx_bs_cntvalueout[0]),          
      .rx_bs0_en_vtc_in(rx_bs_en_vtc_in[0]),                
      .rx_bs0_inc_in(rx_bs_inc_in[0]),                   
      .rx_bs0_load_in(rx_bs_load_in[0]),                  
    
   // Extended Delay Signals
      .rx_bs0_ce_ext_in(rx_bs_ce_ext_in[0]),               
   
      .rx_bs0_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[0]),       
      .rx_bs0_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[0]),     
      .rx_bs0_en_vtc_ext_in(rx_bs_en_vtc_ext_in[0]),           
      .rx_bs0_inc_ext_in(rx_bs_inc_ext_in[0]),              
      .rx_bs0_load_ext_in(rx_bs_load_ext_in[0]),             
    
   // Data Signals
      .rx_bs0_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[0]),    
      .rx_bs0_datain(rx_bs_datain[0]),               
   
   // Fifo Signals
      .rx_bs0_fifo_empty_out(rx_bs_fifo_empty_out[0]),           
      .rx_bs0_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[0]),          
      .rx_bs0_fifo_rd_en_in(rx_bs_fifo_rd_en_in[0]),           
    
   // Ribbon Signals
      .rx_bs0_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[0]),       
      .rx_bs0_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[0]),     
      .rx_bs0_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[0]),       
      .rx_bs0_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[0]),     
    
   
   // --------------------------------------------------------
   // Bitslice1 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs1_ce_in(rx_bs_ce_in[1]),                    
      .rx_bs1_cntvaluein(rx_bs_cntvaluein[1]),            
      .rx_bs1_cntvalueout(rx_bs_cntvalueout[1]),          
      .rx_bs1_en_vtc_in(rx_bs_en_vtc_in[1]),                
      .rx_bs1_inc_in(rx_bs_inc_in[1]),                   
      .rx_bs1_load_in(rx_bs_load_in[1]),                  
    
   // Extended Delay Signals
      .rx_bs1_ce_ext_in(rx_bs_ce_ext_in[1]),               
   
      .rx_bs1_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[1]),       
      .rx_bs1_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[1]),     
      .rx_bs1_en_vtc_ext_in(rx_bs_en_vtc_ext_in[1]),           
      .rx_bs1_inc_ext_in(rx_bs_inc_ext_in[1]),              
      .rx_bs1_load_ext_in(rx_bs_load_ext_in[1]),             
    
   // Data Signals
      .rx_bs1_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[1]),    
      .rx_bs1_datain(rx_bs_datain[1]),               
   
   // Fifo Signals
      .rx_bs1_fifo_empty_out(rx_bs_fifo_empty_out[1]),           
      .rx_bs1_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[1]),          
      .rx_bs1_fifo_rd_en_in(rx_bs_fifo_rd_en_in[1]),           
    
   // Ribbon Signals
      .rx_bs1_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[1]),       
      .rx_bs1_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[1]),     
      .rx_bs1_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[1]),       
      .rx_bs1_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[1]),     
   
   
   // --------------------------------------------------------
   // Bitslice2 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs2_ce_in(rx_bs_ce_in[2]),                    
      .rx_bs2_cntvaluein(rx_bs_cntvaluein[2]),            
      .rx_bs2_cntvalueout(rx_bs_cntvalueout[2]),          
      .rx_bs2_en_vtc_in(rx_bs_en_vtc_in[2]),                
      .rx_bs2_inc_in(rx_bs_inc_in[2]),                   
      .rx_bs2_load_in(rx_bs_load_in[2]),                  
    
   // Extended Delay Signals
      .rx_bs2_ce_ext_in(rx_bs_ce_ext_in[2]),               
   
      .rx_bs2_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[2]),       
      .rx_bs2_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[2]),     
      .rx_bs2_en_vtc_ext_in(rx_bs_en_vtc_ext_in[2]),           
      .rx_bs2_inc_ext_in(rx_bs_inc_ext_in[2]),              
      .rx_bs2_load_ext_in(rx_bs_load_ext_in[2]),             
    
   // Data Signals
      .rx_bs2_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[2]),    
      .rx_bs2_datain(rx_bs_datain[2]),               
   
   // Fifo Signals
      .rx_bs2_fifo_empty_out(rx_bs_fifo_empty_out[2]),           
      .rx_bs2_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[2]),          
      .rx_bs2_fifo_rd_en_in(rx_bs_fifo_rd_en_in[2]),           
    
   // Ribbon Signals
      .rx_bs2_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[2]),       
      .rx_bs2_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[2]),     
      .rx_bs2_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[2]),       
      .rx_bs2_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[2]),     
   
   
   // --------------------------------------------------------
   // Bitslice3 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs3_ce_in(rx_bs_ce_in[3]),                    
      .rx_bs3_cntvaluein(rx_bs_cntvaluein[3]),            
      .rx_bs3_cntvalueout(rx_bs_cntvalueout[3]),          
      .rx_bs3_en_vtc_in(rx_bs_en_vtc_in[3]),                
      .rx_bs3_inc_in(rx_bs_inc_in[3]),                   
      .rx_bs3_load_in(rx_bs_load_in[3]),                  
    
   // Extended Delay Signals
      .rx_bs3_ce_ext_in(rx_bs_ce_ext_in[3]),               
   
      .rx_bs3_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[3]),       
      .rx_bs3_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[3]),     
      .rx_bs3_en_vtc_ext_in(rx_bs_en_vtc_ext_in[3]),           
      .rx_bs3_inc_ext_in(rx_bs_inc_ext_in[3]),              
      .rx_bs3_load_ext_in(rx_bs_load_ext_in[3]),             
    
   // Data Signals
      .rx_bs3_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[3]),    
      .rx_bs3_datain(rx_bs_datain[3]),               
   
   // Fifo Signals
      .rx_bs3_fifo_empty_out(rx_bs_fifo_empty_out[3]),           
      .rx_bs3_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[3]),          
      .rx_bs3_fifo_rd_en_in(rx_bs_fifo_rd_en_in[3]),           
    
   // Ribbon Signals
      .rx_bs3_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[3]),       
      .rx_bs3_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[3]),     
      .rx_bs3_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[3]),       
      .rx_bs3_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[3]),     
   
   
   // --------------------------------------------------------
   // Bitslice4 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs4_ce_in(rx_bs_ce_in[4]),                    
      .rx_bs4_cntvaluein(rx_bs_cntvaluein[4]),            
      .rx_bs4_cntvalueout(rx_bs_cntvalueout[4]),          
      .rx_bs4_en_vtc_in(rx_bs_en_vtc_in[4]),                
      .rx_bs4_inc_in(rx_bs_inc_in[4]),                   
      .rx_bs4_load_in(rx_bs_load_in[4]),                  
    
   // Extended Delay Signals
      .rx_bs4_ce_ext_in(rx_bs_ce_ext_in[4]),               
   
      .rx_bs4_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[4]),       
      .rx_bs4_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[4]),     
      .rx_bs4_en_vtc_ext_in(rx_bs_en_vtc_ext_in[4]),           
      .rx_bs4_inc_ext_in(rx_bs_inc_ext_in[4]),              
      .rx_bs4_load_ext_in(rx_bs_load_ext_in[4]),             
    
   // Data Signals
      .rx_bs4_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[4]),    
      .rx_bs4_datain(rx_bs_datain[4]),               
   
   // Fifo Signals
      .rx_bs4_fifo_empty_out(rx_bs_fifo_empty_out[4]),           
      .rx_bs4_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[4]),          
      .rx_bs4_fifo_rd_en_in(rx_bs_fifo_rd_en_in[4]),           
    
   // Ribbon Signals
      .rx_bs4_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[4]),       
      .rx_bs4_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[4]),     
      .rx_bs4_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[4]),       
      .rx_bs4_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[4]),     
   
   
   // --------------------------------------------------------
   // Bitslice5 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs5_ce_in(rx_bs_ce_in[5]),                    
      .rx_bs5_cntvaluein(rx_bs_cntvaluein[5]),            
      .rx_bs5_cntvalueout(rx_bs_cntvalueout[5]),          
      .rx_bs5_en_vtc_in(rx_bs_en_vtc_in[5]),                
      .rx_bs5_inc_in(rx_bs_inc_in[5]),                   
      .rx_bs5_load_in(rx_bs_load_in[5]),                  
    
   // Extended Delay Signals
      .rx_bs5_ce_ext_in(rx_bs_ce_ext_in[5]),               
   
      .rx_bs5_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[5]),       
      .rx_bs5_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[5]),     
      .rx_bs5_en_vtc_ext_in(rx_bs_en_vtc_ext_in[5]),           
      .rx_bs5_inc_ext_in(rx_bs_inc_ext_in[5]),              
      .rx_bs5_load_ext_in(rx_bs_load_ext_in[5]),             
    
   // Data Signals
      .rx_bs5_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[5]),    
      .rx_bs5_datain(rx_bs_datain[5]),               
   
   // Fifo Signals
      .rx_bs5_fifo_empty_out(rx_bs_fifo_empty_out[5]),           
      .rx_bs5_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[5]),          
      .rx_bs5_fifo_rd_en_in(rx_bs_fifo_rd_en_in[5]),           
    
   // Ribbon Signals
      .rx_bs5_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[5]),       
      .rx_bs5_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[5]),     
      .rx_bs5_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[5]),       
      .rx_bs5_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[5]),     
   
   // --------------------------------------------------------
   // Bitslice6 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs6_ce_in(rx_bs_ce_in[6]),                    
      .rx_bs6_cntvaluein(rx_bs_cntvaluein[6]),            
      .rx_bs6_cntvalueout(rx_bs_cntvalueout[6]),          
      .rx_bs6_en_vtc_in(rx_bs_en_vtc_in[6]),                
      .rx_bs6_inc_in(rx_bs_inc_in[6]),                   
      .rx_bs6_load_in(rx_bs_load_in[6]),                  
    
   // Extended Delay Signals
      .rx_bs6_ce_ext_in(rx_bs_ce_ext_in[6]),               
   
      .rx_bs6_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[6]),       
      .rx_bs6_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[6]),     
      .rx_bs6_en_vtc_ext_in(rx_bs_en_vtc_ext_in[6]),           
      .rx_bs6_inc_ext_in(rx_bs_inc_ext_in[6]),              
      .rx_bs6_load_ext_in(rx_bs_load_ext_in[6]),             
    
   // Data Signals
      .rx_bs6_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[6]),    
      .rx_bs6_datain(rx_bs_datain[6]),               
   
   // Fifo Signals
      .rx_bs6_fifo_empty_out(rx_bs_fifo_empty_out[6]),           
      .rx_bs6_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[6]),          
      .rx_bs6_fifo_rd_en_in(rx_bs_fifo_rd_en_in[6]),           
    
   // Ribbon Signals
      .rx_bs6_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[6]),       
      .rx_bs6_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[6]),     
      .rx_bs6_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[6]),       
      .rx_bs6_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[6]),     
   
   
   // --------------------------------------------------------
   // Bitslice7 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs7_ce_in(rx_bs_ce_in[7]),                    
      .rx_bs7_cntvaluein(rx_bs_cntvaluein[7]),            
      .rx_bs7_cntvalueout(rx_bs_cntvalueout[7]),          
      .rx_bs7_en_vtc_in(rx_bs_en_vtc_in[7]),                
      .rx_bs7_inc_in(rx_bs_inc_in[7]),                   
      .rx_bs7_load_in(rx_bs_load_in[7]),                  
    
   // Extended Delay Signals
      .rx_bs7_ce_ext_in(rx_bs_ce_ext_in[7]),               
   
      .rx_bs7_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[7]),       
      .rx_bs7_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[7]),     
      .rx_bs7_en_vtc_ext_in(rx_bs_en_vtc_ext_in[7]),           
      .rx_bs7_inc_ext_in(rx_bs_inc_ext_in[7]),              
      .rx_bs7_load_ext_in(rx_bs_load_ext_in[7]),             
    
   // Data Signals
      .rx_bs7_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[7]),    
      .rx_bs7_datain(rx_bs_datain[7]),               
   
   // Fifo Signals
      .rx_bs7_fifo_empty_out(rx_bs_fifo_empty_out[7]),           
      .rx_bs7_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[7]),          
      .rx_bs7_fifo_rd_en_in(rx_bs_fifo_rd_en_in[7]),           
    
   // Ribbon Signals
      .rx_bs7_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[7]),       
      .rx_bs7_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[7]),     
      .rx_bs7_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[7]),       
      .rx_bs7_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[7]),     
   
   
   // --------------------------------------------------------
   // Bitslice8 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs8_ce_in(rx_bs_ce_in[8]),                    
      .rx_bs8_cntvaluein(rx_bs_cntvaluein[8]),            
      .rx_bs8_cntvalueout(rx_bs_cntvalueout[8]),          
      .rx_bs8_en_vtc_in(rx_bs_en_vtc_in[8]),                
      .rx_bs8_inc_in(rx_bs_inc_in[8]),                   
      .rx_bs8_load_in(rx_bs_load_in[8]),                  
    
   // Extended Delay Signals
      .rx_bs8_ce_ext_in(rx_bs_ce_ext_in[8]),               
   
      .rx_bs8_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[8]),       
      .rx_bs8_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[8]),     
      .rx_bs8_en_vtc_ext_in(rx_bs_en_vtc_ext_in[8]),           
      .rx_bs8_inc_ext_in(rx_bs_inc_ext_in[8]),              
      .rx_bs8_load_ext_in(rx_bs_load_ext_in[8]),             
    
   // Data Signals
      .rx_bs8_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[8]),    
      .rx_bs8_datain(rx_bs_datain[8]),               
   
   // Fifo Signals
      .rx_bs8_fifo_empty_out(rx_bs_fifo_empty_out[8]),           
      .rx_bs8_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[8]),          
      .rx_bs8_fifo_rd_en_in(rx_bs_fifo_rd_en_in[8]),           
    
   // Ribbon Signals
      .rx_bs8_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[8]),       
      .rx_bs8_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[8]),     
      .rx_bs8_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[8]),       
      .rx_bs8_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[8]),     
   
   
   // --------------------------------------------------------
   // Bitslice9 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs9_ce_in(rx_bs_ce_in[9]),                    
      .rx_bs9_cntvaluein(rx_bs_cntvaluein[9]),            
      .rx_bs9_cntvalueout(rx_bs_cntvalueout[9]),          
      .rx_bs9_en_vtc_in(rx_bs_en_vtc_in[9]),                
      .rx_bs9_inc_in(rx_bs_inc_in[9]),                   
      .rx_bs9_load_in(rx_bs_load_in[9]),                  
    
   // Extended Delay Signals
      .rx_bs9_ce_ext_in(rx_bs_ce_ext_in[9]),               
   
      .rx_bs9_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[9]),       
      .rx_bs9_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[9]),     
      .rx_bs9_en_vtc_ext_in(rx_bs_en_vtc_ext_in[9]),           
      .rx_bs9_inc_ext_in(rx_bs_inc_ext_in[9]),              
      .rx_bs9_load_ext_in(rx_bs_load_ext_in[9]),             
    
   // Data Signals
      .rx_bs9_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[9]),    
      .rx_bs9_datain(rx_bs_datain[9]),               
   
   // Fifo Signals
      .rx_bs9_fifo_empty_out(rx_bs_fifo_empty_out[9]),           
      .rx_bs9_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[9]),          
      .rx_bs9_fifo_rd_en_in(rx_bs_fifo_rd_en_in[9]),           
    
   // Ribbon Signals
      .rx_bs9_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[9]),       
      .rx_bs9_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[9]),     
      .rx_bs9_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[9]),       
      .rx_bs9_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[9]),     
   
   
   // --------------------------------------------------------
   // Bitslice10 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs10_ce_in(rx_bs_ce_in[10]),                    
      .rx_bs10_cntvaluein(rx_bs_cntvaluein[10]),            
      .rx_bs10_cntvalueout(rx_bs_cntvalueout[10]),          
      .rx_bs10_en_vtc_in(rx_bs_en_vtc_in[10]),                
      .rx_bs10_inc_in(rx_bs_inc_in[10]),                   
      .rx_bs10_load_in(rx_bs_load_in[10]),                  
    
   // Extended Delay Signals
      .rx_bs10_ce_ext_in(rx_bs_ce_ext_in[10]),               
   
      .rx_bs10_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[10]),       
      .rx_bs10_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[10]),     
      .rx_bs10_en_vtc_ext_in(rx_bs_en_vtc_ext_in[10]),           
      .rx_bs10_inc_ext_in(rx_bs_inc_ext_in[10]),              
      .rx_bs10_load_ext_in(rx_bs_load_ext_in[10]),             
    
   // Data Signals
      .rx_bs10_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[10]),    
      .rx_bs10_datain(rx_bs_datain[10]),               
   
   // Fifo Signals
      .rx_bs10_fifo_empty_out(rx_bs_fifo_empty_out[10]),           
      .rx_bs10_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[10]),          
      .rx_bs10_fifo_rd_en_in(rx_bs_fifo_rd_en_in[10]),           
    
   // Ribbon Signals
      .rx_bs10_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[10]),       
      .rx_bs10_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[10]),     
      .rx_bs10_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[10]),       
      .rx_bs10_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[10]),     
   
   
   // --------------------------------------------------------
   // Bitslice11 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs11_ce_in(rx_bs_ce_in[11]),                    
      .rx_bs11_cntvaluein(rx_bs_cntvaluein[11]),            
      .rx_bs11_cntvalueout(rx_bs_cntvalueout[11]),          
      .rx_bs11_en_vtc_in(rx_bs_en_vtc_in[11]),                
      .rx_bs11_inc_in(rx_bs_inc_in[11]),                   
      .rx_bs11_load_in(rx_bs_load_in[11]),                  
    
   // Extended Delay Signals
      .rx_bs11_ce_ext_in(rx_bs_ce_ext_in[11]),               
   
      .rx_bs11_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[11]),       
      .rx_bs11_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[11]),     
      .rx_bs11_en_vtc_ext_in(rx_bs_en_vtc_ext_in[11]),           
      .rx_bs11_inc_ext_in(rx_bs_inc_ext_in[11]),              
      .rx_bs11_load_ext_in(rx_bs_load_ext_in[11]),             
    
   // Data Signals
      .rx_bs11_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[11]),    
      .rx_bs11_datain(rx_bs_datain[11]),               
   
   // Fifo Signals
      .rx_bs11_fifo_empty_out(rx_bs_fifo_empty_out[11]),           
      .rx_bs11_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[11]),          
      .rx_bs11_fifo_rd_en_in(rx_bs_fifo_rd_en_in[11]),           
    
   // Ribbon Signals
      .rx_bs11_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[11]),       
      .rx_bs11_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[11]),     
      .rx_bs11_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[11]),       
      .rx_bs11_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[11]),     
    
   
   // --------------------------------------------------------
   // Bitslice12 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs12_ce_in(rx_bs_ce_in[12]),                    
      .rx_bs12_cntvaluein(rx_bs_cntvaluein[12]),            
      .rx_bs12_cntvalueout(rx_bs_cntvalueout[12]),          
      .rx_bs12_en_vtc_in(rx_bs_en_vtc_in[12]),                
      .rx_bs12_inc_in(rx_bs_inc_in[12]),                   
      .rx_bs12_load_in(rx_bs_load_in[12]),                  
    
   // Extended Delay Signals
      .rx_bs12_ce_ext_in(rx_bs_ce_ext_in[12]),               
   
      .rx_bs12_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[12]),       
      .rx_bs12_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[12]),     
      .rx_bs12_en_vtc_ext_in(rx_bs_en_vtc_ext_in[12]),           
      .rx_bs12_inc_ext_in(rx_bs_inc_ext_in[12]),              
      .rx_bs12_load_ext_in(rx_bs_load_ext_in[12]),             
    
   // Data Signals
      .rx_bs12_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[12]),    
      .rx_bs12_datain(rx_bs_datain[12]),               
   
   // Fifo Signals
      .rx_bs12_fifo_empty_out(rx_bs_fifo_empty_out[12]),           
      .rx_bs12_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[12]),          
      .rx_bs12_fifo_rd_en_in(rx_bs_fifo_rd_en_in[12]),           
    
   // Ribbon Signals
      .rx_bs12_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[12]),       
      .rx_bs12_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[12]),     
      .rx_bs12_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[12]),       
      .rx_bs12_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[12]),     
   
   
   // --------------------------------------------------------
   // Bitslice13 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs13_ce_in(rx_bs_ce_in[13]),                    
      .rx_bs13_cntvaluein(rx_bs_cntvaluein[13]),            
      .rx_bs13_cntvalueout(rx_bs_cntvalueout[13]),          
      .rx_bs13_en_vtc_in(rx_bs_en_vtc_in[13]),                
      .rx_bs13_inc_in(rx_bs_inc_in[13]),                   
      .rx_bs13_load_in(rx_bs_load_in[13]),                  
    
   // Extended Delay Signals
      .rx_bs13_ce_ext_in(rx_bs_ce_ext_in[13]),               
   
      .rx_bs13_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[13]),       
      .rx_bs13_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[13]),     
      .rx_bs13_en_vtc_ext_in(rx_bs_en_vtc_ext_in[13]),           
      .rx_bs13_inc_ext_in(rx_bs_inc_ext_in[13]),              
      .rx_bs13_load_ext_in(rx_bs_load_ext_in[13]),             
    
   // Data Signals
      .rx_bs13_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[13]),    
      .rx_bs13_datain(rx_bs_datain[13]),               
   
   // Fifo Signals
      .rx_bs13_fifo_empty_out(rx_bs_fifo_empty_out[13]),           
      .rx_bs13_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[13]),          
      .rx_bs13_fifo_rd_en_in(rx_bs_fifo_rd_en_in[13]),           
    
   // Ribbon Signals
      .rx_bs13_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[13]),       
      .rx_bs13_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[13]),     
      .rx_bs13_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[13]),       
      .rx_bs13_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[13]),     
   
   
   // --------------------------------------------------------
   // Bitslice14 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs14_ce_in(rx_bs_ce_in[14]),                    
      .rx_bs14_cntvaluein(rx_bs_cntvaluein[14]),            
      .rx_bs14_cntvalueout(rx_bs_cntvalueout[14]),          
      .rx_bs14_en_vtc_in(rx_bs_en_vtc_in[14]),                
      .rx_bs14_inc_in(rx_bs_inc_in[14]),                   
      .rx_bs14_load_in(rx_bs_load_in[14]),                  
    
   // Extended Delay Signals
      .rx_bs14_ce_ext_in(rx_bs_ce_ext_in[14]),               
   
      .rx_bs14_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[14]),       
      .rx_bs14_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[14]),     
      .rx_bs14_en_vtc_ext_in(rx_bs_en_vtc_ext_in[14]),           
      .rx_bs14_inc_ext_in(rx_bs_inc_ext_in[14]),              
      .rx_bs14_load_ext_in(rx_bs_load_ext_in[14]),             
    
   // Data Signals
      .rx_bs14_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[14]),    
      .rx_bs14_datain(rx_bs_datain[14]),               
   
   // Fifo Signals
      .rx_bs14_fifo_empty_out(rx_bs_fifo_empty_out[14]),           
      .rx_bs14_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[14]),          
      .rx_bs14_fifo_rd_en_in(rx_bs_fifo_rd_en_in[14]),           
    
   // Ribbon Signals
      .rx_bs14_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[14]),       
      .rx_bs14_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[14]),     
      .rx_bs14_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[14]),       
      .rx_bs14_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[14]),     
   
   
   // --------------------------------------------------------
   // Bitslice15 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs15_ce_in(rx_bs_ce_in[15]),                    
      .rx_bs15_cntvaluein(rx_bs_cntvaluein[15]),            
      .rx_bs15_cntvalueout(rx_bs_cntvalueout[15]),          
      .rx_bs15_en_vtc_in(rx_bs_en_vtc_in[15]),                
      .rx_bs15_inc_in(rx_bs_inc_in[15]),                   
      .rx_bs15_load_in(rx_bs_load_in[15]),                  
    
   // Extended Delay Signals
      .rx_bs15_ce_ext_in(rx_bs_ce_ext_in[15]),               
   
      .rx_bs15_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[15]),       
      .rx_bs15_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[15]),     
      .rx_bs15_en_vtc_ext_in(rx_bs_en_vtc_ext_in[15]),           
      .rx_bs15_inc_ext_in(rx_bs_inc_ext_in[15]),              
      .rx_bs15_load_ext_in(rx_bs_load_ext_in[15]),             
    
   // Data Signals
      .rx_bs15_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[15]),    
      .rx_bs15_datain(rx_bs_datain[15]),               
   
   // Fifo Signals
      .rx_bs15_fifo_empty_out(rx_bs_fifo_empty_out[15]),           
      .rx_bs15_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[15]),          
      .rx_bs15_fifo_rd_en_in(rx_bs_fifo_rd_en_in[15]),           
    
   // Ribbon Signals
      .rx_bs15_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[15]),       
      .rx_bs15_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[15]),     
      .rx_bs15_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[15]),       
      .rx_bs15_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[15]),     
   
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs16_ce_in(rx_bs_ce_in[16]),                    
      .rx_bs16_cntvaluein(rx_bs_cntvaluein[16]),            
      .rx_bs16_cntvalueout(rx_bs_cntvalueout[16]),          
      .rx_bs16_en_vtc_in(rx_bs_en_vtc_in[16]),                
      .rx_bs16_inc_in(rx_bs_inc_in[16]),                   
      .rx_bs16_load_in(rx_bs_load_in[16]),                  
    
   // Extended Delay Signals
      .rx_bs16_ce_ext_in(rx_bs_ce_ext_in[16]),               
   
      .rx_bs16_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[16]),       
      .rx_bs16_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[16]),     
      .rx_bs16_en_vtc_ext_in(rx_bs_en_vtc_ext_in[16]),           
      .rx_bs16_inc_ext_in(rx_bs_inc_ext_in[16]),              
      .rx_bs16_load_ext_in(rx_bs_load_ext_in[16]),             
    
   // Data Signals
      .rx_bs16_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[16]),    
      .rx_bs16_datain(rx_bs_datain[16]),               
   
   // Fifo Signals
      .rx_bs16_fifo_empty_out(rx_bs_fifo_empty_out[16]),           
      .rx_bs16_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[16]),          
      .rx_bs16_fifo_rd_en_in(rx_bs_fifo_rd_en_in[16]),           
    
   // Ribbon Signals
      .rx_bs16_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[16]),       
      .rx_bs16_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[16]),     
      .rx_bs16_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[16]),       
      .rx_bs16_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[16]),     
   
   // --------------------------------------------------------
   // Bitslice17 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs17_ce_in(rx_bs_ce_in[17]),                    
      .rx_bs17_cntvaluein(rx_bs_cntvaluein[17]),            
      .rx_bs17_cntvalueout(rx_bs_cntvalueout[17]),          
      .rx_bs17_en_vtc_in(rx_bs_en_vtc_in[17]),                
      .rx_bs17_inc_in(rx_bs_inc_in[17]),                   
      .rx_bs17_load_in(rx_bs_load_in[17]),                  
    
   // Extended Delay Signals
      .rx_bs17_ce_ext_in(rx_bs_ce_ext_in[17]),               
   
      .rx_bs17_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[17]),       
      .rx_bs17_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[17]),     
      .rx_bs17_en_vtc_ext_in(rx_bs_en_vtc_ext_in[17]),           
      .rx_bs17_inc_ext_in(rx_bs_inc_ext_in[17]),              
      .rx_bs17_load_ext_in(rx_bs_load_ext_in[17]),             
    
   // Data Signals
      .rx_bs17_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[17]),    
      .rx_bs17_datain(rx_bs_datain[17]),               
   
   // Fifo Signals
      .rx_bs17_fifo_empty_out(rx_bs_fifo_empty_out[17]),           
      .rx_bs17_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[17]),          
      .rx_bs17_fifo_rd_en_in(rx_bs_fifo_rd_en_in[17]),           
    
   // Ribbon Signals
      .rx_bs17_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[17]),       
      .rx_bs17_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[17]),     
      .rx_bs17_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[17]),       
      .rx_bs17_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[17]),     
   
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs18_ce_in(rx_bs_ce_in[18]),                    
      .rx_bs18_cntvaluein(rx_bs_cntvaluein[18]),            
      .rx_bs18_cntvalueout(rx_bs_cntvalueout[18]),          
      .rx_bs18_en_vtc_in(rx_bs_en_vtc_in[18]),                
      .rx_bs18_inc_in(rx_bs_inc_in[18]),                   
      .rx_bs18_load_in(rx_bs_load_in[18]),                  
    
   // Extended Delay Signals
      .rx_bs18_ce_ext_in(rx_bs_ce_ext_in[18]),               
   
      .rx_bs18_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[18]),       
      .rx_bs18_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[18]),     
      .rx_bs18_en_vtc_ext_in(rx_bs_en_vtc_ext_in[18]),           
      .rx_bs18_inc_ext_in(rx_bs_inc_ext_in[18]),              
      .rx_bs18_load_ext_in(rx_bs_load_ext_in[18]),             
    
   // Data Signals
      .rx_bs18_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[18]),    
      .rx_bs18_datain(rx_bs_datain[18]),               
   
   // Fifo Signals
      .rx_bs18_fifo_empty_out(rx_bs_fifo_empty_out[18]),           
      .rx_bs18_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[18]),          
      .rx_bs18_fifo_rd_en_in(rx_bs_fifo_rd_en_in[18]),           
    
   // Ribbon Signals
      .rx_bs18_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[18]),       
      .rx_bs18_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[18]),     
      .rx_bs18_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[18]),       
      .rx_bs18_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[18]),     
   
   
   // --------------------------------------------------------
   // Bitslice19 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs19_ce_in(rx_bs_ce_in[19]),                    
      .rx_bs19_cntvaluein(rx_bs_cntvaluein[19]),            
      .rx_bs19_cntvalueout(rx_bs_cntvalueout[19]),          
      .rx_bs19_en_vtc_in(rx_bs_en_vtc_in[19]),                
      .rx_bs19_inc_in(rx_bs_inc_in[19]),                   
      .rx_bs19_load_in(rx_bs_load_in[19]),                  
    
   // Extended Delay Signals
      .rx_bs19_ce_ext_in(rx_bs_ce_ext_in[19]),               
   
      .rx_bs19_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[19]),       
      .rx_bs19_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[19]),     
      .rx_bs19_en_vtc_ext_in(rx_bs_en_vtc_ext_in[19]),           
      .rx_bs19_inc_ext_in(rx_bs_inc_ext_in[19]),              
      .rx_bs19_load_ext_in(rx_bs_load_ext_in[19]),             
    
   // Data Signals
      .rx_bs19_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[19]),    
      .rx_bs19_datain(rx_bs_datain[19]),               
   
   // Fifo Signals
      .rx_bs19_fifo_empty_out(rx_bs_fifo_empty_out[19]),           
      .rx_bs19_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[19]),          
      .rx_bs19_fifo_rd_en_in(rx_bs_fifo_rd_en_in[19]),           
    
   // Ribbon Signals
      .rx_bs19_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[19]),       
      .rx_bs19_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[19]),     
      .rx_bs19_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[19]),       
      .rx_bs19_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[19]),     
   
   
   // --------------------------------------------------------
   // Bitslice20 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs20_ce_in(rx_bs_ce_in[20]),                    
      .rx_bs20_cntvaluein(rx_bs_cntvaluein[20]),            
      .rx_bs20_cntvalueout(rx_bs_cntvalueout[20]),          
      .rx_bs20_en_vtc_in(rx_bs_en_vtc_in[20]),                
      .rx_bs20_inc_in(rx_bs_inc_in[20]),                   
      .rx_bs20_load_in(rx_bs_load_in[20]),                  
    
   // Extended Delay Signals
      .rx_bs20_ce_ext_in(rx_bs_ce_ext_in[20]),               
   
      .rx_bs20_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[20]),       
      .rx_bs20_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[20]),     
      .rx_bs20_en_vtc_ext_in(rx_bs_en_vtc_ext_in[20]),           
      .rx_bs20_inc_ext_in(rx_bs_inc_ext_in[20]),              
      .rx_bs20_load_ext_in(rx_bs_load_ext_in[20]),             
    
   // Data Signals
      .rx_bs20_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[20]),    
      .rx_bs20_datain(rx_bs_datain[20]),               
   
   // Fifo Signals
      .rx_bs20_fifo_empty_out(rx_bs_fifo_empty_out[20]),           
      .rx_bs20_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[20]),          
      .rx_bs20_fifo_rd_en_in(rx_bs_fifo_rd_en_in[20]),           
    
   // Ribbon Signals
      .rx_bs20_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[20]),       
      .rx_bs20_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[20]),     
      .rx_bs20_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[20]),       
      .rx_bs20_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[20]),     
   
   // --------------------------------------------------------
   // Bitslice21 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs21_ce_in(rx_bs_ce_in[21]),                    
      .rx_bs21_cntvaluein(rx_bs_cntvaluein[21]),            
      .rx_bs21_cntvalueout(rx_bs_cntvalueout[21]),          
      .rx_bs21_en_vtc_in(rx_bs_en_vtc_in[21]),                
      .rx_bs21_inc_in(rx_bs_inc_in[21]),                   
      .rx_bs21_load_in(rx_bs_load_in[21]),                  
    
   // Extended Delay Signals
      .rx_bs21_ce_ext_in(rx_bs_ce_ext_in[21]),               
   
      .rx_bs21_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[21]),       
      .rx_bs21_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[21]),     
      .rx_bs21_en_vtc_ext_in(rx_bs_en_vtc_ext_in[21]),           
      .rx_bs21_inc_ext_in(rx_bs_inc_ext_in[21]),              
      .rx_bs21_load_ext_in(rx_bs_load_ext_in[21]),             
    
   // Data Signals
      .rx_bs21_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[21]),    
      .rx_bs21_datain(rx_bs_datain[21]),               
   
   // Fifo Signals
      .rx_bs21_fifo_empty_out(rx_bs_fifo_empty_out[21]),           
      .rx_bs21_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[21]),          
      .rx_bs21_fifo_rd_en_in(rx_bs_fifo_rd_en_in[21]),           
    
   // Ribbon Signals
      .rx_bs21_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[21]),       
      .rx_bs21_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[21]),     
      .rx_bs21_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[21]),       
      .rx_bs21_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[21]),     
    
   
   // --------------------------------------------------------
   // Bitslice22 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs22_ce_in(rx_bs_ce_in[22]),                    
      .rx_bs22_cntvaluein(rx_bs_cntvaluein[22]),            
      .rx_bs22_cntvalueout(rx_bs_cntvalueout[22]),          
      .rx_bs22_en_vtc_in(rx_bs_en_vtc_in[22]),                
      .rx_bs22_inc_in(rx_bs_inc_in[22]),                   
      .rx_bs22_load_in(rx_bs_load_in[22]),                  
    
   // Extended Delay Signals
      .rx_bs22_ce_ext_in(rx_bs_ce_ext_in[22]),               
   
      .rx_bs22_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[22]),       
      .rx_bs22_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[22]),     
      .rx_bs22_en_vtc_ext_in(rx_bs_en_vtc_ext_in[22]),           
      .rx_bs22_inc_ext_in(rx_bs_inc_ext_in[22]),              
      .rx_bs22_load_ext_in(rx_bs_load_ext_in[22]),             
    
   // Data Signals
      .rx_bs22_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[22]),    
      .rx_bs22_datain(rx_bs_datain[22]),               
   
   // Fifo Signals
      .rx_bs22_fifo_empty_out(rx_bs_fifo_empty_out[22]),           
      .rx_bs22_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[22]),          
      .rx_bs22_fifo_rd_en_in(rx_bs_fifo_rd_en_in[22]),           
    
   // Ribbon Signals
      .rx_bs22_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[22]),       
      .rx_bs22_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[22]),     
      .rx_bs22_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[22]),       
      .rx_bs22_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[22]),     
   
   
   // --------------------------------------------------------
   // Bitslice23 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs23_ce_in(rx_bs_ce_in[23]),                    
      .rx_bs23_cntvaluein(rx_bs_cntvaluein[23]),            
      .rx_bs23_cntvalueout(rx_bs_cntvalueout[23]),          
      .rx_bs23_en_vtc_in(rx_bs_en_vtc_in[23]),                
      .rx_bs23_inc_in(rx_bs_inc_in[23]),                   
      .rx_bs23_load_in(rx_bs_load_in[23]),                  
    
   // Extended Delay Signals
      .rx_bs23_ce_ext_in(rx_bs_ce_ext_in[23]),               
   
      .rx_bs23_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[23]),       
      .rx_bs23_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[23]),     
      .rx_bs23_en_vtc_ext_in(rx_bs_en_vtc_ext_in[23]),           
      .rx_bs23_inc_ext_in(rx_bs_inc_ext_in[23]),              
      .rx_bs23_load_ext_in(rx_bs_load_ext_in[23]),             
    
   // Data Signals
      .rx_bs23_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[23]),    
      .rx_bs23_datain(rx_bs_datain[23]),               
   
   // Fifo Signals
      .rx_bs23_fifo_empty_out(rx_bs_fifo_empty_out[23]),           
      .rx_bs23_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[23]),          
      .rx_bs23_fifo_rd_en_in(rx_bs_fifo_rd_en_in[23]),           
    
   // Ribbon Signals
      .rx_bs23_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[23]),       
      .rx_bs23_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[23]),     
      .rx_bs23_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[23]),       
      .rx_bs23_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[23]),     
   
   // --------------------------------------------------------
   // Bitslice24 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs24_ce_in(rx_bs_ce_in[24]),                    
      .rx_bs24_cntvaluein(rx_bs_cntvaluein[24]),            
      .rx_bs24_cntvalueout(rx_bs_cntvalueout[24]),          
      .rx_bs24_en_vtc_in(rx_bs_en_vtc_in[24]),                
      .rx_bs24_inc_in(rx_bs_inc_in[24]),                   
      .rx_bs24_load_in(rx_bs_load_in[24]),                  
    
   // Extended Delay Signals
      .rx_bs24_ce_ext_in(rx_bs_ce_ext_in[24]),               
   
      .rx_bs24_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[24]),       
      .rx_bs24_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[24]),     
      .rx_bs24_en_vtc_ext_in(rx_bs_en_vtc_ext_in[24]),           
      .rx_bs24_inc_ext_in(rx_bs_inc_ext_in[24]),              
      .rx_bs24_load_ext_in(rx_bs_load_ext_in[24]),             
    
   // Data Signals
      .rx_bs24_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[24]),    
      .rx_bs24_datain(rx_bs_datain[24]),               
   
   // Fifo Signals
      .rx_bs24_fifo_empty_out(rx_bs_fifo_empty_out[24]),           
      .rx_bs24_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[24]),          
      .rx_bs24_fifo_rd_en_in(rx_bs_fifo_rd_en_in[24]),           
    
   // Ribbon Signals
      .rx_bs24_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[24]),       
      .rx_bs24_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[24]),     
      .rx_bs24_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[24]),       
      .rx_bs24_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[24]),     
   
   
   // --------------------------------------------------------
   // Bitslice25 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs25_ce_in(rx_bs_ce_in[25]),                    
      .rx_bs25_cntvaluein(rx_bs_cntvaluein[25]),            
      .rx_bs25_cntvalueout(rx_bs_cntvalueout[25]),          
      .rx_bs25_en_vtc_in(rx_bs_en_vtc_in[25]),                
      .rx_bs25_inc_in(rx_bs_inc_in[25]),                   
      .rx_bs25_load_in(rx_bs_load_in[25]),                  
    
   // Extended Delay Signals
      .rx_bs25_ce_ext_in(rx_bs_ce_ext_in[25]),               
   
      .rx_bs25_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[25]),       
      .rx_bs25_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[25]),     
      .rx_bs25_en_vtc_ext_in(rx_bs_en_vtc_ext_in[25]),           
      .rx_bs25_inc_ext_in(rx_bs_inc_ext_in[25]),              
      .rx_bs25_load_ext_in(rx_bs_load_ext_in[25]),             
    
   // Data Signals
      .rx_bs25_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[25]),    
      .rx_bs25_datain(rx_bs_datain[25]),               
   
   // Fifo Signals
      .rx_bs25_fifo_empty_out(rx_bs_fifo_empty_out[25]),           
      .rx_bs25_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[25]),          
      .rx_bs25_fifo_rd_en_in(rx_bs_fifo_rd_en_in[25]),           
    
   // Ribbon Signals
      .rx_bs25_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[25]),       
      .rx_bs25_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[25]),     
      .rx_bs25_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[25]),       
      .rx_bs25_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[25]),     
   
   
   // --------------------------------------------------------
   // Bitslice26 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs26_ce_in(rx_bs_ce_in[26]),                    
      .rx_bs26_cntvaluein(rx_bs_cntvaluein[26]),            
      .rx_bs26_cntvalueout(rx_bs_cntvalueout[26]),          
      .rx_bs26_en_vtc_in(rx_bs_en_vtc_in[26]),                
      .rx_bs26_inc_in(rx_bs_inc_in[26]),                   
      .rx_bs26_load_in(rx_bs_load_in[26]),                  
    
   // Extended Delay Signals
      .rx_bs26_ce_ext_in(rx_bs_ce_ext_in[26]),               
   
      .rx_bs26_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[26]),       
      .rx_bs26_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[26]),     
      .rx_bs26_en_vtc_ext_in(rx_bs_en_vtc_ext_in[26]),           
      .rx_bs26_inc_ext_in(rx_bs_inc_ext_in[26]),              
      .rx_bs26_load_ext_in(rx_bs_load_ext_in[26]),             
    
   // Data Signals
      .rx_bs26_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[26]),    
      .rx_bs26_datain(rx_bs_datain[26]),               
   
   // Fifo Signals
      .rx_bs26_fifo_empty_out(rx_bs_fifo_empty_out[26]),           
      .rx_bs26_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[26]),          
      .rx_bs26_fifo_rd_en_in(rx_bs_fifo_rd_en_in[26]),           
    
   // Ribbon Signals
      .rx_bs26_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[26]),       
      .rx_bs26_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[26]),     
      .rx_bs26_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[26]),       
      .rx_bs26_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[26]),     
   
   
   // --------------------------------------------------------
   // Bitslice27 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs27_ce_in(rx_bs_ce_in[27]),                    
      .rx_bs27_cntvaluein(rx_bs_cntvaluein[27]),            
      .rx_bs27_cntvalueout(rx_bs_cntvalueout[27]),          
      .rx_bs27_en_vtc_in(rx_bs_en_vtc_in[27]),                
      .rx_bs27_inc_in(rx_bs_inc_in[27]),                   
      .rx_bs27_load_in(rx_bs_load_in[27]),                  
    
   // Extended Delay Signals
      .rx_bs27_ce_ext_in(rx_bs_ce_ext_in[27]),               
   
      .rx_bs27_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[27]),       
      .rx_bs27_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[27]),     
      .rx_bs27_en_vtc_ext_in(rx_bs_en_vtc_ext_in[27]),           
      .rx_bs27_inc_ext_in(rx_bs_inc_ext_in[27]),              
      .rx_bs27_load_ext_in(rx_bs_load_ext_in[27]),             
    
   // Data Signals
      .rx_bs27_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[27]),    
      .rx_bs27_datain(rx_bs_datain[27]),               
   
   // Fifo Signals
      .rx_bs27_fifo_empty_out(rx_bs_fifo_empty_out[27]),           
      .rx_bs27_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[27]),          
      .rx_bs27_fifo_rd_en_in(rx_bs_fifo_rd_en_in[27]),           
    
   // Ribbon Signals
      .rx_bs27_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[27]),       
      .rx_bs27_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[27]),     
      .rx_bs27_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[27]),       
      .rx_bs27_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[27]),     
   
   // --------------------------------------------------------
   // Bitslice28 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs28_ce_in(rx_bs_ce_in[28]),                    
      .rx_bs28_cntvaluein(rx_bs_cntvaluein[28]),            
      .rx_bs28_cntvalueout(rx_bs_cntvalueout[28]),          
      .rx_bs28_en_vtc_in(rx_bs_en_vtc_in[28]),                
      .rx_bs28_inc_in(rx_bs_inc_in[28]),                   
      .rx_bs28_load_in(rx_bs_load_in[28]),                  
    
   // Extended Delay Signals
      .rx_bs28_ce_ext_in(rx_bs_ce_ext_in[28]),               
   
      .rx_bs28_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[28]),       
      .rx_bs28_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[28]),     
      .rx_bs28_en_vtc_ext_in(rx_bs_en_vtc_ext_in[28]),           
      .rx_bs28_inc_ext_in(rx_bs_inc_ext_in[28]),              
      .rx_bs28_load_ext_in(rx_bs_load_ext_in[28]),             
    
   // Data Signals
      .rx_bs28_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[28]),    
      .rx_bs28_datain(rx_bs_datain[28]),               
   
   // Fifo Signals
      .rx_bs28_fifo_empty_out(rx_bs_fifo_empty_out[28]),           
      .rx_bs28_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[28]),          
      .rx_bs28_fifo_rd_en_in(rx_bs_fifo_rd_en_in[28]),           
    
   // Ribbon Signals
      .rx_bs28_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[28]),       
      .rx_bs28_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[28]),     
      .rx_bs28_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[28]),       
      .rx_bs28_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[28]),     
   
   
   // --------------------------------------------------------
   // Bitslice29 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs29_ce_in(rx_bs_ce_in[29]),                    
      .rx_bs29_cntvaluein(rx_bs_cntvaluein[29]),            
      .rx_bs29_cntvalueout(rx_bs_cntvalueout[29]),          
      .rx_bs29_en_vtc_in(rx_bs_en_vtc_in[29]),                
      .rx_bs29_inc_in(rx_bs_inc_in[29]),                   
      .rx_bs29_load_in(rx_bs_load_in[29]),                  
    
   // Extended Delay Signals
      .rx_bs29_ce_ext_in(rx_bs_ce_ext_in[29]),               
   
      .rx_bs29_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[29]),       
      .rx_bs29_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[29]),     
      .rx_bs29_en_vtc_ext_in(rx_bs_en_vtc_ext_in[29]),           
      .rx_bs29_inc_ext_in(rx_bs_inc_ext_in[29]),              
      .rx_bs29_load_ext_in(rx_bs_load_ext_in[29]),             
    
   // Data Signals
      .rx_bs29_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[29]),    
      .rx_bs29_datain(rx_bs_datain[29]),               
   
   // Fifo Signals
      .rx_bs29_fifo_empty_out(rx_bs_fifo_empty_out[29]),           
      .rx_bs29_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[29]),          
      .rx_bs29_fifo_rd_en_in(rx_bs_fifo_rd_en_in[29]),           
    
   // Ribbon Signals
      .rx_bs29_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[29]),       
      .rx_bs29_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[29]),     
      .rx_bs29_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[29]),       
      .rx_bs29_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[29]),     
   
   
   // --------------------------------------------------------
   // Bitslice30 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs30_ce_in(rx_bs_ce_in[30]),                    
      .rx_bs30_cntvaluein(rx_bs_cntvaluein[30]),            
      .rx_bs30_cntvalueout(rx_bs_cntvalueout[30]),          
      .rx_bs30_en_vtc_in(rx_bs_en_vtc_in[30]),                
      .rx_bs30_inc_in(rx_bs_inc_in[30]),                   
      .rx_bs30_load_in(rx_bs_load_in[30]),                  
    
   // Extended Delay Signals
      .rx_bs30_ce_ext_in(rx_bs_ce_ext_in[30]),               
   
      .rx_bs30_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[30]),       
      .rx_bs30_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[30]),     
      .rx_bs30_en_vtc_ext_in(rx_bs_en_vtc_ext_in[30]),           
      .rx_bs30_inc_ext_in(rx_bs_inc_ext_in[30]),              
      .rx_bs30_load_ext_in(rx_bs_load_ext_in[30]),             
    
   // Data Signals
      .rx_bs30_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[30]),    
      .rx_bs30_datain(rx_bs_datain[30]),               
   
   // Fifo Signals
      .rx_bs30_fifo_empty_out(rx_bs_fifo_empty_out[30]),           
      .rx_bs30_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[30]),          
      .rx_bs30_fifo_rd_en_in(rx_bs_fifo_rd_en_in[30]),           
    
   // Ribbon Signals
      .rx_bs30_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[30]),       
      .rx_bs30_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[30]),     
      .rx_bs30_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[30]),       
      .rx_bs30_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[30]),     
   
   
   // --------------------------------------------------------
   // Bitslice31 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs31_ce_in(rx_bs_ce_in[31]),                    
      .rx_bs31_cntvaluein(rx_bs_cntvaluein[31]),            
      .rx_bs31_cntvalueout(rx_bs_cntvalueout[31]),          
      .rx_bs31_en_vtc_in(rx_bs_en_vtc_in[31]),                
      .rx_bs31_inc_in(rx_bs_inc_in[31]),                   
      .rx_bs31_load_in(rx_bs_load_in[31]),                  
    
   // Extended Delay Signals
      .rx_bs31_ce_ext_in(rx_bs_ce_ext_in[31]),               
   
      .rx_bs31_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[31]),       
      .rx_bs31_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[31]),     
      .rx_bs31_en_vtc_ext_in(rx_bs_en_vtc_ext_in[31]),           
      .rx_bs31_inc_ext_in(rx_bs_inc_ext_in[31]),              
      .rx_bs31_load_ext_in(rx_bs_load_ext_in[31]),             
    
   // Data Signals
      .rx_bs31_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[31]),    
      .rx_bs31_datain(rx_bs_datain[31]),               
   
   // Fifo Signals
      .rx_bs31_fifo_empty_out(rx_bs_fifo_empty_out[31]),           
      .rx_bs31_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[31]),          
      .rx_bs31_fifo_rd_en_in(rx_bs_fifo_rd_en_in[31]),           
    
   // Ribbon Signals
      .rx_bs31_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[31]),       
      .rx_bs31_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[31]),     
      .rx_bs31_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[31]),       
      .rx_bs31_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[31]),     
   
   
   // --------------------------------------------------------
   // Bitslice32 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs32_ce_in(rx_bs_ce_in[32]),                    
      .rx_bs32_cntvaluein(rx_bs_cntvaluein[32]),            
      .rx_bs32_cntvalueout(rx_bs_cntvalueout[32]),          
      .rx_bs32_en_vtc_in(rx_bs_en_vtc_in[32]),                
      .rx_bs32_inc_in(rx_bs_inc_in[32]),                   
      .rx_bs32_load_in(rx_bs_load_in[32]),                  
    
   // Extended Delay Signals
      .rx_bs32_ce_ext_in(rx_bs_ce_ext_in[32]),               
   
      .rx_bs32_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[32]),       
      .rx_bs32_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[32]),     
      .rx_bs32_en_vtc_ext_in(rx_bs_en_vtc_ext_in[32]),           
      .rx_bs32_inc_ext_in(rx_bs_inc_ext_in[32]),              
      .rx_bs32_load_ext_in(rx_bs_load_ext_in[32]),             
    
   // Data Signals
      .rx_bs32_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[32]),    
      .rx_bs32_datain(rx_bs_datain[32]),               
   
   // Fifo Signals
      .rx_bs32_fifo_empty_out(rx_bs_fifo_empty_out[32]),           
      .rx_bs32_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[32]),          
      .rx_bs32_fifo_rd_en_in(rx_bs_fifo_rd_en_in[32]),           
    
   // Ribbon Signals
      .rx_bs32_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[32]),       
      .rx_bs32_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[32]),     
      .rx_bs32_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[32]),       
      .rx_bs32_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[32]),     
   
   
   // --------------------------------------------------------
   // Bitslice33 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs33_ce_in(rx_bs_ce_in[33]),                    
      .rx_bs33_cntvaluein(rx_bs_cntvaluein[33]),            
      .rx_bs33_cntvalueout(rx_bs_cntvalueout[33]),          
      .rx_bs33_en_vtc_in(rx_bs_en_vtc_in[33]),                
      .rx_bs33_inc_in(rx_bs_inc_in[33]),                   
      .rx_bs33_load_in(rx_bs_load_in[33]),                  
    
   // Extended Delay Signals
      .rx_bs33_ce_ext_in(rx_bs_ce_ext_in[33]),               
   
      .rx_bs33_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[33]),       
      .rx_bs33_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[33]),     
      .rx_bs33_en_vtc_ext_in(rx_bs_en_vtc_ext_in[33]),           
      .rx_bs33_inc_ext_in(rx_bs_inc_ext_in[33]),              
      .rx_bs33_load_ext_in(rx_bs_load_ext_in[33]),             
    
   // Data Signals
      .rx_bs33_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[33]),    
      .rx_bs33_datain(rx_bs_datain[33]),               
   
   // Fifo Signals
      .rx_bs33_fifo_empty_out(rx_bs_fifo_empty_out[33]),           
      .rx_bs33_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[33]),          
      .rx_bs33_fifo_rd_en_in(rx_bs_fifo_rd_en_in[33]),           
    
   // Ribbon Signals
      .rx_bs33_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[33]),       
      .rx_bs33_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[33]),     
      .rx_bs33_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[33]),       
      .rx_bs33_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[33]),     
   
   // --------------------------------------------------------
   // Bitslice34 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs34_ce_in(rx_bs_ce_in[34]),                    
      .rx_bs34_cntvaluein(rx_bs_cntvaluein[34]),            
      .rx_bs34_cntvalueout(rx_bs_cntvalueout[34]),          
      .rx_bs34_en_vtc_in(rx_bs_en_vtc_in[34]),                
      .rx_bs34_inc_in(rx_bs_inc_in[34]),                   
      .rx_bs34_load_in(rx_bs_load_in[34]),                  
    
   // Extended Delay Signals
      .rx_bs34_ce_ext_in(rx_bs_ce_ext_in[34]),               
   
      .rx_bs34_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[34]),       
      .rx_bs34_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[34]),     
      .rx_bs34_en_vtc_ext_in(rx_bs_en_vtc_ext_in[34]),           
      .rx_bs34_inc_ext_in(rx_bs_inc_ext_in[34]),              
      .rx_bs34_load_ext_in(rx_bs_load_ext_in[34]),             
    
   // Data Signals
      .rx_bs34_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[34]),    
      .rx_bs34_datain(rx_bs_datain[34]),               
   
   // Fifo Signals
      .rx_bs34_fifo_empty_out(rx_bs_fifo_empty_out[34]),           
      .rx_bs34_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[34]),          
      .rx_bs34_fifo_rd_en_in(rx_bs_fifo_rd_en_in[34]),           
    
   // Ribbon Signals
      .rx_bs34_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[34]),       
      .rx_bs34_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[34]),     
      .rx_bs34_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[34]),       
      .rx_bs34_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[34]),     
    
   
   // --------------------------------------------------------
   // Bitslice35 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs35_ce_in(rx_bs_ce_in[35]),                    
      .rx_bs35_cntvaluein(rx_bs_cntvaluein[35]),            
      .rx_bs35_cntvalueout(rx_bs_cntvalueout[35]),          
      .rx_bs35_en_vtc_in(rx_bs_en_vtc_in[35]),                
      .rx_bs35_inc_in(rx_bs_inc_in[35]),                   
      .rx_bs35_load_in(rx_bs_load_in[35]),                  
    
   // Extended Delay Signals
      .rx_bs35_ce_ext_in(rx_bs_ce_ext_in[35]),               
   
      .rx_bs35_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[35]),       
      .rx_bs35_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[35]),     
      .rx_bs35_en_vtc_ext_in(rx_bs_en_vtc_ext_in[35]),           
      .rx_bs35_inc_ext_in(rx_bs_inc_ext_in[35]),              
      .rx_bs35_load_ext_in(rx_bs_load_ext_in[35]),             
    
   // Data Signals
      .rx_bs35_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[35]),    
      .rx_bs35_datain(rx_bs_datain[35]),               
   
   // Fifo Signals
      .rx_bs35_fifo_empty_out(rx_bs_fifo_empty_out[35]),           
      .rx_bs35_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[35]),          
      .rx_bs35_fifo_rd_en_in(rx_bs_fifo_rd_en_in[35]),           
    
   // Ribbon Signals
      .rx_bs35_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[35]),       
      .rx_bs35_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[35]),     
      .rx_bs35_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[35]),       
      .rx_bs35_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[35]),     
   
   
   // --------------------------------------------------------
   // Bitslice36 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs36_ce_in(rx_bs_ce_in[36]),                    
      .rx_bs36_cntvaluein(rx_bs_cntvaluein[36]),            
      .rx_bs36_cntvalueout(rx_bs_cntvalueout[36]),          
      .rx_bs36_en_vtc_in(rx_bs_en_vtc_in[36]),                
      .rx_bs36_inc_in(rx_bs_inc_in[36]),                   
      .rx_bs36_load_in(rx_bs_load_in[36]),                  
    
   // Extended Delay Signals
      .rx_bs36_ce_ext_in(rx_bs_ce_ext_in[36]),               
   
      .rx_bs36_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[36]),       
      .rx_bs36_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[36]),     
      .rx_bs36_en_vtc_ext_in(rx_bs_en_vtc_ext_in[36]),           
      .rx_bs36_inc_ext_in(rx_bs_inc_ext_in[36]),              
      .rx_bs36_load_ext_in(rx_bs_load_ext_in[36]),             
    
   // Data Signals
      .rx_bs36_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[36]),    
      .rx_bs36_datain(rx_bs_datain[36]),               
   
   // Fifo Signals
      .rx_bs36_fifo_empty_out(rx_bs_fifo_empty_out[36]),           
      .rx_bs36_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[36]),          
      .rx_bs36_fifo_rd_en_in(rx_bs_fifo_rd_en_in[36]),           
    
   // Ribbon Signals
      .rx_bs36_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[36]),       
      .rx_bs36_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[36]),     
      .rx_bs36_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[36]),       
      .rx_bs36_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[36]),     
   
   
   // --------------------------------------------------------
   // Bitslice37 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs37_ce_in(rx_bs_ce_in[37]),                    
      .rx_bs37_cntvaluein(rx_bs_cntvaluein[37]),            
      .rx_bs37_cntvalueout(rx_bs_cntvalueout[37]),          
      .rx_bs37_en_vtc_in(rx_bs_en_vtc_in[37]),                
      .rx_bs37_inc_in(rx_bs_inc_in[37]),                   
      .rx_bs37_load_in(rx_bs_load_in[37]),                  
    
   // Extended Delay Signals
      .rx_bs37_ce_ext_in(rx_bs_ce_ext_in[37]),               
   
      .rx_bs37_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[37]),       
      .rx_bs37_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[37]),     
      .rx_bs37_en_vtc_ext_in(rx_bs_en_vtc_ext_in[37]),           
      .rx_bs37_inc_ext_in(rx_bs_inc_ext_in[37]),              
      .rx_bs37_load_ext_in(rx_bs_load_ext_in[37]),             
    
   // Data Signals
      .rx_bs37_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[37]),    
      .rx_bs37_datain(rx_bs_datain[37]),               
   
   // Fifo Signals
      .rx_bs37_fifo_empty_out(rx_bs_fifo_empty_out[37]),           
      .rx_bs37_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[37]),          
      .rx_bs37_fifo_rd_en_in(rx_bs_fifo_rd_en_in[37]),           
    
   // Ribbon Signals
      .rx_bs37_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[37]),       
      .rx_bs37_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[37]),     
      .rx_bs37_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[37]),       
      .rx_bs37_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[37]),     
   
   
   // --------------------------------------------------------
   // Bitslice38 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs38_ce_in(rx_bs_ce_in[38]),                    
      .rx_bs38_cntvaluein(rx_bs_cntvaluein[38]),            
      .rx_bs38_cntvalueout(rx_bs_cntvalueout[38]),          
      .rx_bs38_en_vtc_in(rx_bs_en_vtc_in[38]),                
      .rx_bs38_inc_in(rx_bs_inc_in[38]),                   
      .rx_bs38_load_in(rx_bs_load_in[38]),                  
    
   // Extended Delay Signals
      .rx_bs38_ce_ext_in(rx_bs_ce_ext_in[38]),               
   
      .rx_bs38_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[38]),       
      .rx_bs38_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[38]),     
      .rx_bs38_en_vtc_ext_in(rx_bs_en_vtc_ext_in[38]),           
      .rx_bs38_inc_ext_in(rx_bs_inc_ext_in[38]),              
      .rx_bs38_load_ext_in(rx_bs_load_ext_in[38]),             
    
   // Data Signals
      .rx_bs38_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[38]),    
      .rx_bs38_datain(rx_bs_datain[38]),               
   
   // Fifo Signals
      .rx_bs38_fifo_empty_out(rx_bs_fifo_empty_out[38]),           
      .rx_bs38_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[38]),          
      .rx_bs38_fifo_rd_en_in(rx_bs_fifo_rd_en_in[38]),           
    
   // Ribbon Signals
      .rx_bs38_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[38]),       
      .rx_bs38_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[38]),     
      .rx_bs38_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[38]),       
      .rx_bs38_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[38]),     
   
   
   // --------------------------------------------------------
   // Bitslice16 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs39_ce_in(rx_bs_ce_in[39]),                    
      .rx_bs39_cntvaluein(rx_bs_cntvaluein[39]),            
      .rx_bs39_cntvalueout(rx_bs_cntvalueout[39]),          
      .rx_bs39_en_vtc_in(rx_bs_en_vtc_in[39]),                
      .rx_bs39_inc_in(rx_bs_inc_in[39]),                   
      .rx_bs39_load_in(rx_bs_load_in[39]),                  
    
   // Extended Delay Signals
      .rx_bs39_ce_ext_in(rx_bs_ce_ext_in[39]),               
   
      .rx_bs39_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[39]),       
      .rx_bs39_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[39]),     
      .rx_bs39_en_vtc_ext_in(rx_bs_en_vtc_ext_in[39]),           
      .rx_bs39_inc_ext_in(rx_bs_inc_ext_in[39]),              
      .rx_bs39_load_ext_in(rx_bs_load_ext_in[39]),             
    
   // Data Signals
      .rx_bs39_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[39]),    
      .rx_bs39_datain(rx_bs_datain[39]),               
   
   // Fifo Signals
      .rx_bs39_fifo_empty_out(rx_bs_fifo_empty_out[39]),           
      .rx_bs39_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[39]),          
      .rx_bs39_fifo_rd_en_in(rx_bs_fifo_rd_en_in[39]),           
    
   // Ribbon Signals
      .rx_bs39_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[39]),       
      .rx_bs39_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[39]),     
      .rx_bs39_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[39]),       
      .rx_bs39_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[39]),     
   
   // --------------------------------------------------------
   // Bitslice40 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs40_ce_in(rx_bs_ce_in[40]),                    
      .rx_bs40_cntvaluein(rx_bs_cntvaluein[40]),            
      .rx_bs40_cntvalueout(rx_bs_cntvalueout[40]),          
      .rx_bs40_en_vtc_in(rx_bs_en_vtc_in[40]),                
      .rx_bs40_inc_in(rx_bs_inc_in[40]),                   
      .rx_bs40_load_in(rx_bs_load_in[40]),                  
    
   // Extended Delay Signals
      .rx_bs40_ce_ext_in(rx_bs_ce_ext_in[40]),               
   
      .rx_bs40_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[40]),       
      .rx_bs40_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[40]),     
      .rx_bs40_en_vtc_ext_in(rx_bs_en_vtc_ext_in[40]),           
      .rx_bs40_inc_ext_in(rx_bs_inc_ext_in[40]),              
      .rx_bs40_load_ext_in(rx_bs_load_ext_in[40]),             
    
   // Data Signals
      .rx_bs40_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[40]),    
      .rx_bs40_datain(rx_bs_datain[40]),               
   
   // Fifo Signals
      .rx_bs40_fifo_empty_out(rx_bs_fifo_empty_out[40]),           
      .rx_bs40_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[40]),          
      .rx_bs40_fifo_rd_en_in(rx_bs_fifo_rd_en_in[40]),           
    
   // Ribbon Signals
      .rx_bs40_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[40]),       
      .rx_bs40_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[40]),     
      .rx_bs40_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[40]),       
      .rx_bs40_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[40]),     
   
   
   // --------------------------------------------------------
   // Bitslice18 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs41_ce_in(rx_bs_ce_in[41]),                    
      .rx_bs41_cntvaluein(rx_bs_cntvaluein[41]),            
      .rx_bs41_cntvalueout(rx_bs_cntvalueout[41]),          
      .rx_bs41_en_vtc_in(rx_bs_en_vtc_in[41]),                
      .rx_bs41_inc_in(rx_bs_inc_in[41]),                   
      .rx_bs41_load_in(rx_bs_load_in[41]),                  
    
   // Extended Delay Signals
      .rx_bs41_ce_ext_in(rx_bs_ce_ext_in[41]),               
   
      .rx_bs41_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[41]),       
      .rx_bs41_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[41]),     
      .rx_bs41_en_vtc_ext_in(rx_bs_en_vtc_ext_in[41]),           
      .rx_bs41_inc_ext_in(rx_bs_inc_ext_in[41]),              
      .rx_bs41_load_ext_in(rx_bs_load_ext_in[41]),             
    
   // Data Signals
      .rx_bs41_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[41]),    
      .rx_bs41_datain(rx_bs_datain[41]),               
   
   // Fifo Signals
      .rx_bs41_fifo_empty_out(rx_bs_fifo_empty_out[41]),           
      .rx_bs41_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[41]),          
      .rx_bs41_fifo_rd_en_in(rx_bs_fifo_rd_en_in[41]),           
    
   // Ribbon Signals
      .rx_bs41_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[41]),       
      .rx_bs41_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[41]),     
      .rx_bs41_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[41]),       
      .rx_bs41_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[41]),     
   
   
   // --------------------------------------------------------
   // Bitslice42 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs42_ce_in(rx_bs_ce_in[42]),                    
      .rx_bs42_cntvaluein(rx_bs_cntvaluein[42]),            
      .rx_bs42_cntvalueout(rx_bs_cntvalueout[42]),          
      .rx_bs42_en_vtc_in(rx_bs_en_vtc_in[42]),                
      .rx_bs42_inc_in(rx_bs_inc_in[42]),                   
      .rx_bs42_load_in(rx_bs_load_in[42]),                  
    
   // Extended Delay Signals
      .rx_bs42_ce_ext_in(rx_bs_ce_ext_in[42]),               
   
      .rx_bs42_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[42]),       
      .rx_bs42_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[42]),     
      .rx_bs42_en_vtc_ext_in(rx_bs_en_vtc_ext_in[42]),           
      .rx_bs42_inc_ext_in(rx_bs_inc_ext_in[42]),              
      .rx_bs42_load_ext_in(rx_bs_load_ext_in[42]),             
    
   // Data Signals
      .rx_bs42_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[42]),    
      .rx_bs42_datain(rx_bs_datain[42]),               
   
   // Fifo Signals
      .rx_bs42_fifo_empty_out(rx_bs_fifo_empty_out[42]),           
      .rx_bs42_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[42]),          
      .rx_bs42_fifo_rd_en_in(rx_bs_fifo_rd_en_in[42]),           
    
   // Ribbon Signals
      .rx_bs42_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[42]),       
      .rx_bs42_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[42]),     
      .rx_bs42_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[42]),       
      .rx_bs42_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[42]),     
   
   
   // --------------------------------------------------------
   // Bitslice43 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs43_ce_in(rx_bs_ce_in[43]),                    
      .rx_bs43_cntvaluein(rx_bs_cntvaluein[43]),            
      .rx_bs43_cntvalueout(rx_bs_cntvalueout[43]),          
      .rx_bs43_en_vtc_in(rx_bs_en_vtc_in[43]),                
      .rx_bs43_inc_in(rx_bs_inc_in[43]),                   
      .rx_bs43_load_in(rx_bs_load_in[43]),                  
    
   // Extended Delay Signals
      .rx_bs43_ce_ext_in(rx_bs_ce_ext_in[43]),               
   
      .rx_bs43_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[43]),       
      .rx_bs43_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[43]),     
      .rx_bs43_en_vtc_ext_in(rx_bs_en_vtc_ext_in[43]),           
      .rx_bs43_inc_ext_in(rx_bs_inc_ext_in[43]),              
      .rx_bs43_load_ext_in(rx_bs_load_ext_in[43]),             
    
   // Data Signals
      .rx_bs43_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[43]),    
      .rx_bs43_datain(rx_bs_datain[43]),               
   
   // Fifo Signals
      .rx_bs43_fifo_empty_out(rx_bs_fifo_empty_out[43]),           
      .rx_bs43_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[43]),          
      .rx_bs43_fifo_rd_en_in(rx_bs_fifo_rd_en_in[43]),           
    
   // Ribbon Signals
      .rx_bs43_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[43]),       
      .rx_bs43_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[43]),     
      .rx_bs43_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[43]),       
      .rx_bs43_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[43]),     
   
   // --------------------------------------------------------
   // Bitslice44 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs44_ce_in(rx_bs_ce_in[44]),                    
      .rx_bs44_cntvaluein(rx_bs_cntvaluein[44]),            
      .rx_bs44_cntvalueout(rx_bs_cntvalueout[44]),          
      .rx_bs44_en_vtc_in(rx_bs_en_vtc_in[44]),                
      .rx_bs44_inc_in(rx_bs_inc_in[44]),                   
      .rx_bs44_load_in(rx_bs_load_in[44]),                  
    
   // Extended Delay Signals
      .rx_bs44_ce_ext_in(rx_bs_ce_ext_in[44]),               
   
      .rx_bs44_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[44]),       
      .rx_bs44_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[44]),     
      .rx_bs44_en_vtc_ext_in(rx_bs_en_vtc_ext_in[44]),           
      .rx_bs44_inc_ext_in(rx_bs_inc_ext_in[44]),              
      .rx_bs44_load_ext_in(rx_bs_load_ext_in[44]),             
    
   // Data Signals
      .rx_bs44_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[44]),    
      .rx_bs44_datain(rx_bs_datain[44]),               
   
   // Fifo Signals
      .rx_bs44_fifo_empty_out(rx_bs_fifo_empty_out[44]),           
      .rx_bs44_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[44]),          
      .rx_bs44_fifo_rd_en_in(rx_bs_fifo_rd_en_in[44]),           
    
   // Ribbon Signals
      .rx_bs44_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[44]),       
      .rx_bs44_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[44]),     
      .rx_bs44_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[44]),       
      .rx_bs44_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[44]),     
    
   
   // --------------------------------------------------------
   // Bitslice45 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs45_ce_in(rx_bs_ce_in[45]),                    
      .rx_bs45_cntvaluein(rx_bs_cntvaluein[45]),            
      .rx_bs45_cntvalueout(rx_bs_cntvalueout[45]),          
      .rx_bs45_en_vtc_in(rx_bs_en_vtc_in[45]),                
      .rx_bs45_inc_in(rx_bs_inc_in[45]),                   
      .rx_bs45_load_in(rx_bs_load_in[45]),                  
    
   // Extended Delay Signals
      .rx_bs45_ce_ext_in(rx_bs_ce_ext_in[45]),               
   
      .rx_bs45_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[45]),       
      .rx_bs45_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[45]),     
      .rx_bs45_en_vtc_ext_in(rx_bs_en_vtc_ext_in[45]),           
      .rx_bs45_inc_ext_in(rx_bs_inc_ext_in[45]),              
      .rx_bs45_load_ext_in(rx_bs_load_ext_in[45]),             
    
   // Data Signals
      .rx_bs45_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[45]),    
      .rx_bs45_datain(rx_bs_datain[45]),               
   
   // Fifo Signals
      .rx_bs45_fifo_empty_out(rx_bs_fifo_empty_out[45]),           
      .rx_bs45_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[45]),          
      .rx_bs45_fifo_rd_en_in(rx_bs_fifo_rd_en_in[45]),           
    
   // Ribbon Signals
      .rx_bs45_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[45]),       
      .rx_bs45_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[45]),     
      .rx_bs45_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[45]),       
      .rx_bs45_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[45]),     
   
   
   // --------------------------------------------------------
   // Bitslice46 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs46_ce_in(rx_bs_ce_in[46]),                    
      .rx_bs46_cntvaluein(rx_bs_cntvaluein[46]),            
      .rx_bs46_cntvalueout(rx_bs_cntvalueout[46]),          
      .rx_bs46_en_vtc_in(rx_bs_en_vtc_in[46]),                
      .rx_bs46_inc_in(rx_bs_inc_in[46]),                   
      .rx_bs46_load_in(rx_bs_load_in[46]),                  
    
   // Extended Delay Signals
      .rx_bs46_ce_ext_in(rx_bs_ce_ext_in[46]),               
   
      .rx_bs46_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[46]),       
      .rx_bs46_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[46]),     
      .rx_bs46_en_vtc_ext_in(rx_bs_en_vtc_ext_in[46]),           
      .rx_bs46_inc_ext_in(rx_bs_inc_ext_in[46]),              
      .rx_bs46_load_ext_in(rx_bs_load_ext_in[46]),             
    
   // Data Signals
      .rx_bs46_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[46]),    
      .rx_bs46_datain(rx_bs_datain[46]),               
   
   // Fifo Signals
      .rx_bs46_fifo_empty_out(rx_bs_fifo_empty_out[46]),           
      .rx_bs46_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[46]),          
      .rx_bs46_fifo_rd_en_in(rx_bs_fifo_rd_en_in[46]),           
    
   // Ribbon Signals
      .rx_bs46_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[46]),       
      .rx_bs46_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[46]),     
      .rx_bs46_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[46]),       
      .rx_bs46_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[46]),     
   
   
   // --------------------------------------------------------
   // Bitslice47 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs47_ce_in(rx_bs_ce_in[47]),                    
      .rx_bs47_cntvaluein(rx_bs_cntvaluein[47]),            
      .rx_bs47_cntvalueout(rx_bs_cntvalueout[47]),          
      .rx_bs47_en_vtc_in(rx_bs_en_vtc_in[47]),                
      .rx_bs47_inc_in(rx_bs_inc_in[47]),                   
      .rx_bs47_load_in(rx_bs_load_in[47]),                  
    
   // Extended Delay Signals
      .rx_bs47_ce_ext_in(rx_bs_ce_ext_in[47]),               
   
      .rx_bs47_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[47]),       
      .rx_bs47_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[47]),     
      .rx_bs47_en_vtc_ext_in(rx_bs_en_vtc_ext_in[47]),           
      .rx_bs47_inc_ext_in(rx_bs_inc_ext_in[47]),              
      .rx_bs47_load_ext_in(rx_bs_load_ext_in[47]),             
    
   // Data Signals
      .rx_bs47_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[47]),    
      .rx_bs47_datain(rx_bs_datain[47]),               
   
   // Fifo Signals
      .rx_bs47_fifo_empty_out(rx_bs_fifo_empty_out[47]),           
      .rx_bs47_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[47]),          
      .rx_bs47_fifo_rd_en_in(rx_bs_fifo_rd_en_in[47]),           
    
   // Ribbon Signals
      .rx_bs47_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[47]),       
      .rx_bs47_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[47]),     
      .rx_bs47_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[47]),       
      .rx_bs47_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[47]),     
   
   
   // --------------------------------------------------------
   // Bitslice48 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs48_ce_in(rx_bs_ce_in[48]),                    
      .rx_bs48_cntvaluein(rx_bs_cntvaluein[48]),            
      .rx_bs48_cntvalueout(rx_bs_cntvalueout[48]),          
      .rx_bs48_en_vtc_in(rx_bs_en_vtc_in[48]),                
      .rx_bs48_inc_in(rx_bs_inc_in[48]),                   
      .rx_bs48_load_in(rx_bs_load_in[48]),                  
    
   // Extended Delay Signals
      .rx_bs48_ce_ext_in(rx_bs_ce_ext_in[48]),               
   
      .rx_bs48_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[48]),       
      .rx_bs48_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[48]),     
      .rx_bs48_en_vtc_ext_in(rx_bs_en_vtc_ext_in[48]),           
      .rx_bs48_inc_ext_in(rx_bs_inc_ext_in[48]),              
      .rx_bs48_load_ext_in(rx_bs_load_ext_in[48]),             
    
   // Data Signals
      .rx_bs48_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[48]),    
      .rx_bs48_datain(rx_bs_datain[48]),               
   
   // Fifo Signals
      .rx_bs48_fifo_empty_out(rx_bs_fifo_empty_out[48]),           
      .rx_bs48_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[48]),          
      .rx_bs48_fifo_rd_en_in(rx_bs_fifo_rd_en_in[48]),           
    
   // Ribbon Signals
      .rx_bs48_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[48]),       
      .rx_bs48_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[48]),     
      .rx_bs48_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[48]),       
      .rx_bs48_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[48]),     
   
   
   // --------------------------------------------------------
   // Bitslice49 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs49_ce_in(rx_bs_ce_in[49]),                    
      .rx_bs49_cntvaluein(rx_bs_cntvaluein[49]),            
      .rx_bs49_cntvalueout(rx_bs_cntvalueout[49]),          
      .rx_bs49_en_vtc_in(rx_bs_en_vtc_in[49]),                
      .rx_bs49_inc_in(rx_bs_inc_in[49]),                   
      .rx_bs49_load_in(rx_bs_load_in[49]),                  
    
   // Extended Delay Signals
      .rx_bs49_ce_ext_in(rx_bs_ce_ext_in[49]),               
   
      .rx_bs49_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[49]),       
      .rx_bs49_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[49]),     
      .rx_bs49_en_vtc_ext_in(rx_bs_en_vtc_ext_in[49]),           
      .rx_bs49_inc_ext_in(rx_bs_inc_ext_in[49]),              
      .rx_bs49_load_ext_in(rx_bs_load_ext_in[49]),             
    
   // Data Signals
      .rx_bs49_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[49]),    
      .rx_bs49_datain(rx_bs_datain[49]),               
   
   // Fifo Signals
      .rx_bs49_fifo_empty_out(rx_bs_fifo_empty_out[49]),           
      .rx_bs49_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[49]),          
      .rx_bs49_fifo_rd_en_in(rx_bs_fifo_rd_en_in[49]),           
    
   // Ribbon Signals
      .rx_bs49_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[49]),       
      .rx_bs49_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[49]),     
      .rx_bs49_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[49]),       
      .rx_bs49_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[49]),     
   
   // --------------------------------------------------------
   // Bitslice50 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs50_ce_in(rx_bs_ce_in[50]),                    
      .rx_bs50_cntvaluein(rx_bs_cntvaluein[50]),            
      .rx_bs50_cntvalueout(rx_bs_cntvalueout[50]),          
      .rx_bs50_en_vtc_in(rx_bs_en_vtc_in[50]),                
      .rx_bs50_inc_in(rx_bs_inc_in[50]),                   
      .rx_bs50_load_in(rx_bs_load_in[50]),                  
    
   // Extended Delay Signals
      .rx_bs50_ce_ext_in(rx_bs_ce_ext_in[50]),               
   
      .rx_bs50_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[50]),       
      .rx_bs50_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[50]),     
      .rx_bs50_en_vtc_ext_in(rx_bs_en_vtc_ext_in[50]),           
      .rx_bs50_inc_ext_in(rx_bs_inc_ext_in[50]),              
      .rx_bs50_load_ext_in(rx_bs_load_ext_in[50]),             
    
   // Data Signals
      .rx_bs50_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[50]),    
      .rx_bs50_datain(rx_bs_datain[50]),               
   
   // Fifo Signals
      .rx_bs50_fifo_empty_out(rx_bs_fifo_empty_out[50]),           
      .rx_bs50_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[50]),          
      .rx_bs50_fifo_rd_en_in(rx_bs_fifo_rd_en_in[50]),           
    
   // Ribbon Signals
      .rx_bs50_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[50]),       
      .rx_bs50_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[50]),     
      .rx_bs50_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[50]),       
      .rx_bs50_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[50]),     
   
   
   // --------------------------------------------------------
   // Bitslice51 signals  
   // --------------------------------------------------------
   // Delay Signals
      .rx_bs51_ce_in(rx_bs_ce_in[51]),                    
      .rx_bs51_cntvaluein(rx_bs_cntvaluein[51]),            
      .rx_bs51_cntvalueout(rx_bs_cntvalueout[51]),          
      .rx_bs51_en_vtc_in(rx_bs_en_vtc_in[51]),                
      .rx_bs51_inc_in(rx_bs_inc_in[51]),                   
      .rx_bs51_load_in(rx_bs_load_in[51]),                  
    
   // Extended Delay Signals
      .rx_bs51_ce_ext_in(rx_bs_ce_ext_in[51]),               
   
      .rx_bs51_cntvaluein_ext_in(rx_bs_cntvaluein_ext_in[51]),       
      .rx_bs51_cntvalueout_ext_out(rx_bs_cntvalueout_ext_out[51]),     
      .rx_bs51_en_vtc_ext_in(rx_bs_en_vtc_ext_in[51]),           
      .rx_bs51_inc_ext_in(rx_bs_inc_ext_in[51]),              
      .rx_bs51_load_ext_in(rx_bs_load_ext_in[51]),             
    
   // Data Signals
      .rx_bs51_Q_data_to_fabric_out(rx_bs_Q_data_to_fabric_out[51]),    
      .rx_bs51_datain(rx_bs_datain[51]),               
   
   // Fifo Signals
      .rx_bs51_fifo_empty_out(rx_bs_fifo_empty_out[51]),           
      .rx_bs51_fifo_rd_clk_in(rx_bs_fifo_rd_clk_in[51]),          
      .rx_bs51_fifo_rd_en_in(rx_bs_fifo_rd_en_in[51]),           
    
   // Ribbon Signals
      .rx_bs51_rx_bit_ctrl_in(rx_bs_rx_bit_ctrl_in[51]),       
      .rx_bs51_rx_bit_ctrl_out(rx_bs_rx_bit_ctrl_out[51]),     
      .rx_bs51_tx_bit_ctrl_in(rx_bs_tx_bit_ctrl_in[51]),       
      .rx_bs51_tx_bit_ctrl_out(rx_bs_tx_bit_ctrl_out[51]),
   
   // Fifo Write clock Signals
      .rx_bs0_nib0_fifo_wrclk_out(rx_bs0_nib0_fifo_wrclk_out),   	  
      .rx_bs6_nib1_fifo_wrclk_out(rx_bs6_nib1_fifo_wrclk_out), 
      .rx_bs13_nib2_fifo_wrclk_out(rx_bs13_nib2_fifo_wrclk_out),  
      .rx_bs19_nib3_fifo_wrclk_out(rx_bs19_nib3_fifo_wrclk_out),     
      .rx_bs26_nib4_fifo_wrclk_out(rx_bs26_nib4_fifo_wrclk_out),   
      .rx_bs32_nib5_fifo_wrclk_out(rx_bs32_nib5_fifo_wrclk_out), 
      .rx_bs39_nib6_fifo_wrclk_out(rx_bs39_nib6_fifo_wrclk_out),    
      .rx_bs45_nib7_fifo_wrclk_out(rx_bs45_nib7_fifo_wrclk_out),  
      .rx_bs0_bitslip_error_out(rx_bs_bitslip_error_out[0]),
      .rx_bs1_bitslip_error_out(rx_bs_bitslip_error_out[1]), 
      .rx_bs2_bitslip_error_out(rx_bs_bitslip_error_out[2]), 
      .rx_bs3_bitslip_error_out(rx_bs_bitslip_error_out[3]), 
      .rx_bs4_bitslip_error_out(rx_bs_bitslip_error_out[4]), 
      .rx_bs5_bitslip_error_out(rx_bs_bitslip_error_out[5]),
      .rx_bs6_bitslip_error_out(rx_bs_bitslip_error_out[6]),
      .rx_bs7_bitslip_error_out(rx_bs_bitslip_error_out[7]), 
      .rx_bs8_bitslip_error_out(rx_bs_bitslip_error_out[8]), 
      .rx_bs9_bitslip_error_out(rx_bs_bitslip_error_out[9]), 
      .rx_bs10_bitslip_error_out(rx_bs_bitslip_error_out[10]),
      .rx_bs11_bitslip_error_out(rx_bs_bitslip_error_out[11]), 
      .rx_bs12_bitslip_error_out(rx_bs_bitslip_error_out[12]), 
      .rx_bs13_bitslip_error_out(rx_bs_bitslip_error_out[13]), 
      .rx_bs14_bitslip_error_out(rx_bs_bitslip_error_out[14]), 
      .rx_bs15_bitslip_error_out(rx_bs_bitslip_error_out[15]),
      .rx_bs16_bitslip_error_out(rx_bs_bitslip_error_out[16]),
      .rx_bs17_bitslip_error_out(rx_bs_bitslip_error_out[17]), 
      .rx_bs18_bitslip_error_out(rx_bs_bitslip_error_out[18]), 
      .rx_bs19_bitslip_error_out(rx_bs_bitslip_error_out[19]), 
      .rx_bs20_bitslip_error_out(rx_bs_bitslip_error_out[20]), 
      .rx_bs21_bitslip_error_out(rx_bs_bitslip_error_out[21]), 
      .rx_bs22_bitslip_error_out(rx_bs_bitslip_error_out[22]), 
      .rx_bs23_bitslip_error_out(rx_bs_bitslip_error_out[23]), 
      .rx_bs24_bitslip_error_out(rx_bs_bitslip_error_out[24]), 
      .rx_bs25_bitslip_error_out(rx_bs_bitslip_error_out[25]),
      .rx_bs26_bitslip_error_out(rx_bs_bitslip_error_out[26]),
      .rx_bs27_bitslip_error_out(rx_bs_bitslip_error_out[27]), 
      .rx_bs28_bitslip_error_out(rx_bs_bitslip_error_out[28]), 
      .rx_bs29_bitslip_error_out(rx_bs_bitslip_error_out[29]), 
      .rx_bs30_bitslip_error_out(rx_bs_bitslip_error_out[30]), 
      .rx_bs31_bitslip_error_out(rx_bs_bitslip_error_out[31]), 
      .rx_bs32_bitslip_error_out(rx_bs_bitslip_error_out[32]), 
      .rx_bs33_bitslip_error_out(rx_bs_bitslip_error_out[33]), 
      .rx_bs34_bitslip_error_out(rx_bs_bitslip_error_out[34]), 
      .rx_bs35_bitslip_error_out(rx_bs_bitslip_error_out[35]),
      .rx_bs36_bitslip_error_out(rx_bs_bitslip_error_out[36]),
      .rx_bs37_bitslip_error_out(rx_bs_bitslip_error_out[37]), 
      .rx_bs38_bitslip_error_out(rx_bs_bitslip_error_out[38]), 
      .rx_bs39_bitslip_error_out(rx_bs_bitslip_error_out[39]), 
      .rx_bs40_bitslip_error_out(rx_bs_bitslip_error_out[40]),
      .rx_bs41_bitslip_error_out(rx_bs_bitslip_error_out[41]), 
      .rx_bs42_bitslip_error_out(rx_bs_bitslip_error_out[42]), 
      .rx_bs43_bitslip_error_out(rx_bs_bitslip_error_out[43]), 
      .rx_bs44_bitslip_error_out(rx_bs_bitslip_error_out[44]), 
      .rx_bs45_bitslip_error_out(rx_bs_bitslip_error_out[45]),
      .rx_bs46_bitslip_error_out(rx_bs_bitslip_error_out[46]),
      .rx_bs47_bitslip_error_out(rx_bs_bitslip_error_out[47]), 
      .rx_bs48_bitslip_error_out(rx_bs_bitslip_error_out[48]), 
      .rx_bs49_bitslip_error_out(rx_bs_bitslip_error_out[49]), 
      .rx_bs50_bitslip_error_out(rx_bs_bitslip_error_out[50]),
      .rx_bs51_bitslip_error_out(rx_bs_bitslip_error_out[51])
      
      );
   
   // ----------------------------------------------------------------
   // RXTX Bitslice Instantiation
   // ----------------------------------------------------------------				       
    high_speed_selectio_wiz_v3_5_1_rxtx_bs #(
   .C_SIM_DEVICE(C_SIM_DEVICE),
   .C_DIFF_EN(C_DIFF_EN),
   .C_PLL0_RX_EXTERNAL_CLK_TO_DATA(C_PLL0_RX_EXTERNAL_CLK_TO_DATA),
   .C_SIM_VERSION(C_SIM_VERSION),
   .C_BS_INIT_VAL(C_BS_INIT_VAL),
   .C_SERIALIZATION_FACTOR(C_SERIALIZATION_FACTOR),
   .C_BIDIR_FIFO_SYNC_MODE(C_BIDIR_FIFO_SYNC_MODE),
   .C_BIDIR_RX_DELAY_FORMAT(C_BIDIR_RX_DELAY_FORMAT),
   .C_BIDIR_TX_DELAY_FORMAT(C_BIDIR_TX_DELAY_FORMAT),
   //.C_BIDIR_RX_UPDATE_MODE(C_BIDIR_RX_UPDATE_MODE),
   //.C_BIDIR_TX_UPDATE_MODE(C_BIDIR_TX_UPDATE_MODE),
   .C_BIDIR_IS_RX_CLK_INVERTED(C_BIDIR_IS_RX_CLK_INVERTED),
   .C_BIDIR_IS_RX_RST_DLY_INVERTED(C_BIDIR_IS_RX_RST_DLY_INVERTED),
   .C_BIDIR_IS_RX_RST_INVERTED(C_BIDIR_IS_RX_RST_INVERTED),
   .C_BIDIR_IS_TX_CLK_INVERTED(C_BIDIR_IS_TX_CLK_INVERTED),
   .C_BIDIR_IS_TX_RST_DLY_INVERTED(C_BIDIR_IS_TX_RST_DLY_INVERTED),
   .C_BIDIR_IS_TX_RST_INVERTED(C_BIDIR_IS_TX_RST_INVERTED),
   .C_RX_DELAY_TYPE0(C_RX_DELAY_TYPE0), // RX delay type
   .C_RX_DELAY_TYPE1(C_RX_DELAY_TYPE1), // RX delay type
   .C_RX_DELAY_TYPE2(C_RX_DELAY_TYPE2), // RX delay type
   .C_RX_DELAY_TYPE3(C_RX_DELAY_TYPE3), // RX delay type
   .C_RX_DELAY_TYPE4(C_RX_DELAY_TYPE4), // RX delay type
   .C_RX_DELAY_TYPE5(C_RX_DELAY_TYPE5), // RX delay type
   .C_RX_DELAY_TYPE6(C_RX_DELAY_TYPE6), // RX delay type
   .C_RX_DELAY_TYPE7(C_RX_DELAY_TYPE7), // RX delay type
   .C_RX_DELAY_TYPE8(C_RX_DELAY_TYPE8), // RX delay type
   .C_RX_DELAY_TYPE9(C_RX_DELAY_TYPE9), // RX delay type
   .C_RX_DELAY_TYPE10(C_RX_DELAY_TYPE10), // RX delay type
   .C_RX_DELAY_TYPE11(C_RX_DELAY_TYPE11), // RX delay type
   .C_RX_DELAY_TYPE12(C_RX_DELAY_TYPE12), // RX delay type
   .C_RX_DELAY_TYPE13(C_RX_DELAY_TYPE13), // RX delay type
   .C_RX_DELAY_TYPE14(C_RX_DELAY_TYPE14), // RX delay type
   .C_RX_DELAY_TYPE15(C_RX_DELAY_TYPE15), // RX delay type
   .C_RX_DELAY_TYPE16(C_RX_DELAY_TYPE16), // RX delay type
   .C_RX_DELAY_TYPE17(C_RX_DELAY_TYPE17), // RX delay type
   .C_RX_DELAY_TYPE18(C_RX_DELAY_TYPE18), // RX delay type
   .C_RX_DELAY_TYPE19(C_RX_DELAY_TYPE19), // RX delay type
   .C_RX_DELAY_TYPE20(C_RX_DELAY_TYPE20), // RX delay type
   .C_RX_DELAY_TYPE21(C_RX_DELAY_TYPE21), // RX delay type
   .C_RX_DELAY_TYPE22(C_RX_DELAY_TYPE22), // RX delay type
   .C_RX_DELAY_TYPE23(C_RX_DELAY_TYPE23), // RX delay type
   .C_RX_DELAY_TYPE24(C_RX_DELAY_TYPE24), // RX delay type
   .C_RX_DELAY_TYPE25(C_RX_DELAY_TYPE25), // RX delay type
   .C_RX_DELAY_TYPE26(C_RX_DELAY_TYPE26), // RX delay type
   .C_RX_DELAY_TYPE27(C_RX_DELAY_TYPE27), // RX delay type
   .C_RX_DELAY_TYPE28(C_RX_DELAY_TYPE28), // RX delay type
   .C_RX_DELAY_TYPE29(C_RX_DELAY_TYPE29), // RX delay type
   .C_RX_DELAY_TYPE30(C_RX_DELAY_TYPE30), // RX delay type
   .C_RX_DELAY_TYPE31(C_RX_DELAY_TYPE31), // RX delay type
   .C_RX_DELAY_TYPE32(C_RX_DELAY_TYPE32), // RX delay type
   .C_RX_DELAY_TYPE33(C_RX_DELAY_TYPE33), // RX delay type
   .C_RX_DELAY_TYPE34(C_RX_DELAY_TYPE34), // RX delay type
   .C_RX_DELAY_TYPE35(C_RX_DELAY_TYPE35), // RX delay type
   .C_RX_DELAY_TYPE36(C_RX_DELAY_TYPE36), // RX delay type
   .C_RX_DELAY_TYPE37(C_RX_DELAY_TYPE37), // RX delay type
   .C_RX_DELAY_TYPE38(C_RX_DELAY_TYPE38), // RX delay type
   .C_RX_DELAY_TYPE39(C_RX_DELAY_TYPE39), // RX delay type
   .C_RX_DELAY_TYPE40(C_RX_DELAY_TYPE40), // RX delay type
   .C_RX_DELAY_TYPE41(C_RX_DELAY_TYPE41), // RX delay type
   .C_RX_DELAY_TYPE42(C_RX_DELAY_TYPE42), // RX delay type
   .C_RX_DELAY_TYPE43(C_RX_DELAY_TYPE43), // RX delay type
   .C_RX_DELAY_TYPE44(C_RX_DELAY_TYPE44), // RX delay type
   .C_RX_DELAY_TYPE45(C_RX_DELAY_TYPE45), // RX delay type
   .C_RX_DELAY_TYPE46(C_RX_DELAY_TYPE46), // RX delay type
   .C_RX_DELAY_TYPE47(C_RX_DELAY_TYPE47), // RX delay type
   .C_RX_DELAY_TYPE48(C_RX_DELAY_TYPE48), // RX delay type
   .C_RX_DELAY_TYPE49(C_RX_DELAY_TYPE49), // RX delay type
   .C_RX_DELAY_TYPE50(C_RX_DELAY_TYPE50), // RX delay type
   .C_RX_DELAY_TYPE51(C_RX_DELAY_TYPE51), // RX delay type
   .C_RX_DELAY_VALUE0(C_RX_DELAY_VALUE0),  // RX delay value
   .C_RX_DELAY_VALUE1(C_RX_DELAY_VALUE1),  // RX delay value
   .C_RX_DELAY_VALUE2(C_RX_DELAY_VALUE2),  // RX delay value
   .C_RX_DELAY_VALUE3(C_RX_DELAY_VALUE3),  // RX delay value
   .C_RX_DELAY_VALUE4(C_RX_DELAY_VALUE4),  // RX delay value
   .C_RX_DELAY_VALUE5(C_RX_DELAY_VALUE5),  // RX delay value
   .C_RX_DELAY_VALUE6(C_RX_DELAY_VALUE6),  // RX delay value
   .C_RX_DELAY_VALUE7(C_RX_DELAY_VALUE7),  // RX delay value
   .C_RX_DELAY_VALUE8(C_RX_DELAY_VALUE8),  // RX delay value
   .C_RX_DELAY_VALUE9(C_RX_DELAY_VALUE9),  // RX delay value
   .C_RX_DELAY_VALUE10(C_RX_DELAY_VALUE10),  // RX delay value
   .C_RX_DELAY_VALUE11(C_RX_DELAY_VALUE11),  // RX delay value
   .C_RX_DELAY_VALUE12(C_RX_DELAY_VALUE12),  // RX delay value
   .C_RX_DELAY_VALUE13(C_RX_DELAY_VALUE13),  // RX delay value
   .C_RX_DELAY_VALUE14(C_RX_DELAY_VALUE14),  // RX delay value
   .C_RX_DELAY_VALUE15(C_RX_DELAY_VALUE15),  // RX delay value
   .C_RX_DELAY_VALUE16(C_RX_DELAY_VALUE16),  // RX delay value
   .C_RX_DELAY_VALUE17(C_RX_DELAY_VALUE17),  // RX delay value
   .C_RX_DELAY_VALUE18(C_RX_DELAY_VALUE18),  // RX delay value
   .C_RX_DELAY_VALUE19(C_RX_DELAY_VALUE19),  // RX delay value
   .C_RX_DELAY_VALUE20(C_RX_DELAY_VALUE20),  // RX delay value
   .C_RX_DELAY_VALUE21(C_RX_DELAY_VALUE21),  // RX delay value
   .C_RX_DELAY_VALUE22(C_RX_DELAY_VALUE22),  // RX delay value
   .C_RX_DELAY_VALUE23(C_RX_DELAY_VALUE23),  // RX delay value
   .C_RX_DELAY_VALUE24(C_RX_DELAY_VALUE24),  // RX delay value
   .C_RX_DELAY_VALUE25(C_RX_DELAY_VALUE25),  // RX delay value
   .C_RX_DELAY_VALUE26(C_RX_DELAY_VALUE26),  // RX delay value
   .C_RX_DELAY_VALUE27(C_RX_DELAY_VALUE27),  // RX delay value
   .C_RX_DELAY_VALUE28(C_RX_DELAY_VALUE28),  // RX delay value
   .C_RX_DELAY_VALUE29(C_RX_DELAY_VALUE29),  // RX delay value
   .C_RX_DELAY_VALUE30(C_RX_DELAY_VALUE30),  // RX delay value
   .C_RX_DELAY_VALUE31(C_RX_DELAY_VALUE31),  // RX delay value
   .C_RX_DELAY_VALUE32(C_RX_DELAY_VALUE32),  // RX delay value
   .C_RX_DELAY_VALUE33(C_RX_DELAY_VALUE33),  // RX delay value
   .C_RX_DELAY_VALUE34(C_RX_DELAY_VALUE34),  // RX delay value
   .C_RX_DELAY_VALUE35(C_RX_DELAY_VALUE35),  // RX delay value
   .C_RX_DELAY_VALUE36(C_RX_DELAY_VALUE36),  // RX delay value
   .C_RX_DELAY_VALUE37(C_RX_DELAY_VALUE37),  // RX delay value
   .C_RX_DELAY_VALUE38(C_RX_DELAY_VALUE38),  // RX delay value
   .C_RX_DELAY_VALUE39(C_RX_DELAY_VALUE39),  // RX delay value
   .C_RX_DELAY_VALUE40(C_RX_DELAY_VALUE40),  // RX delay value
   .C_RX_DELAY_VALUE41(C_RX_DELAY_VALUE41),  // RX delay value
   .C_RX_DELAY_VALUE42(C_RX_DELAY_VALUE42),  // RX delay value
   .C_RX_DELAY_VALUE43(C_RX_DELAY_VALUE43),  // RX delay value
   .C_RX_DELAY_VALUE44(C_RX_DELAY_VALUE44),  // RX delay value
   .C_RX_DELAY_VALUE45(C_RX_DELAY_VALUE45),  // RX delay value
   .C_RX_DELAY_VALUE46(C_RX_DELAY_VALUE46),  // RX delay value
   .C_RX_DELAY_VALUE47(C_RX_DELAY_VALUE47),  // RX delay value
   .C_RX_DELAY_VALUE48(C_RX_DELAY_VALUE48),  // RX delay value
   .C_RX_DELAY_VALUE49(C_RX_DELAY_VALUE49),  // RX delay value
   .C_RX_DELAY_VALUE50(C_RX_DELAY_VALUE50),  // RX delay value
   .C_RX_DELAY_VALUE51(C_RX_DELAY_VALUE51),  // RX delay value
   .C_CLOCK_TRI  (C_CLOCK_TRI),             // Combinatorial/Serialised
   .C_DATA_TRI   (C_DATA_TRI),              // Combinatorial/Serialised
   .C_FIFO_SYNC_MODE  (C_FIFO_SYNC_MODE),   // 
   .C_RX_REFCLK_FREQ  (C_RX_REFCLK_FREQ),   // RX clock frequency
   .C_RX_STROBE_EN(C_RX_STROBE_EN),
   .C_TX_DELAY_TYPE0(C_TX_DELAY_TYPE0), // TX delay type
   .C_TX_DELAY_TYPE1(C_TX_DELAY_TYPE1), // TX delay type
   .C_TX_DELAY_TYPE2(C_TX_DELAY_TYPE2), // TX delay type
   .C_TX_DELAY_TYPE3(C_TX_DELAY_TYPE3), // TX delay type
   .C_TX_DELAY_TYPE4(C_TX_DELAY_TYPE4), // TX delay type
   .C_TX_DELAY_TYPE5(C_TX_DELAY_TYPE5), // TX delay type
   .C_TX_DELAY_TYPE6(C_TX_DELAY_TYPE6), // TX delay type
   .C_TX_DELAY_TYPE7(C_TX_DELAY_TYPE7), // TX delay type
   .C_TX_DELAY_TYPE8(C_TX_DELAY_TYPE8), // TX delay type
   .C_TX_DELAY_TYPE9(C_TX_DELAY_TYPE9), // TX delay type
   .C_TX_DELAY_TYPE10(C_TX_DELAY_TYPE10), // TX delay type
   .C_TX_DELAY_TYPE11(C_TX_DELAY_TYPE11), // TX delay type
   .C_TX_DELAY_TYPE12(C_TX_DELAY_TYPE12), // TX delay type
   .C_TX_DELAY_TYPE13(C_TX_DELAY_TYPE13), // TX delay type
   .C_TX_DELAY_TYPE14(C_TX_DELAY_TYPE14), // TX delay type
   .C_TX_DELAY_TYPE15(C_TX_DELAY_TYPE15), // TX delay type
   .C_TX_DELAY_TYPE16(C_TX_DELAY_TYPE16), // TX delay type
   .C_TX_DELAY_TYPE17(C_TX_DELAY_TYPE17), // TX delay type
   .C_TX_DELAY_TYPE18(C_TX_DELAY_TYPE18), // TX delay type
   .C_TX_DELAY_TYPE19(C_TX_DELAY_TYPE19), // TX delay type
   .C_TX_DELAY_TYPE20(C_TX_DELAY_TYPE20), // TX delay type
   .C_TX_DELAY_TYPE21(C_TX_DELAY_TYPE21), // TX delay type
   .C_TX_DELAY_TYPE22(C_TX_DELAY_TYPE22), // TX delay type
   .C_TX_DELAY_TYPE23(C_TX_DELAY_TYPE23), // TX delay type
   .C_TX_DELAY_TYPE24(C_TX_DELAY_TYPE24), // TX delay type
   .C_TX_DELAY_TYPE25(C_TX_DELAY_TYPE25), // TX delay type
   .C_TX_DELAY_TYPE26(C_TX_DELAY_TYPE26), // TX delay type
   .C_TX_DELAY_TYPE27(C_TX_DELAY_TYPE27), // TX delay type
   .C_TX_DELAY_TYPE28(C_TX_DELAY_TYPE28), // TX delay type
   .C_TX_DELAY_TYPE29(C_TX_DELAY_TYPE29), // TX delay type
   .C_TX_DELAY_TYPE30(C_TX_DELAY_TYPE30), // TX delay type
   .C_TX_DELAY_TYPE31(C_TX_DELAY_TYPE31), // TX delay type
   .C_TX_DELAY_TYPE32(C_TX_DELAY_TYPE32), // TX delay type
   .C_TX_DELAY_TYPE33(C_TX_DELAY_TYPE33), // TX delay type
   .C_TX_DELAY_TYPE34(C_TX_DELAY_TYPE34), // TX delay type
   .C_TX_DELAY_TYPE35(C_TX_DELAY_TYPE35), // TX delay type
   .C_TX_DELAY_TYPE36(C_TX_DELAY_TYPE36), // TX delay type
   .C_TX_DELAY_TYPE37(C_TX_DELAY_TYPE37), // TX delay type
   .C_TX_DELAY_TYPE38(C_TX_DELAY_TYPE38), // TX delay type
   .C_TX_DELAY_TYPE39(C_TX_DELAY_TYPE39), // TX delay type
   .C_TX_DELAY_TYPE40(C_TX_DELAY_TYPE40), // TX delay type
   .C_TX_DELAY_TYPE41(C_TX_DELAY_TYPE41), // TX delay type
   .C_TX_DELAY_TYPE42(C_TX_DELAY_TYPE42), // TX delay type
   .C_TX_DELAY_TYPE43(C_TX_DELAY_TYPE43), // TX delay type
   .C_TX_DELAY_TYPE44(C_TX_DELAY_TYPE44), // TX delay type
   .C_TX_DELAY_TYPE45(C_TX_DELAY_TYPE45), // TX delay type
   .C_TX_DELAY_TYPE46(C_TX_DELAY_TYPE46), // TX delay type
   .C_TX_DELAY_TYPE47(C_TX_DELAY_TYPE47), // TX delay type
   .C_TX_DELAY_TYPE48(C_TX_DELAY_TYPE48), // TX delay type
   .C_TX_DELAY_TYPE49(C_TX_DELAY_TYPE49), // TX delay type
   .C_TX_DELAY_TYPE50(C_TX_DELAY_TYPE50), // TX delay type
   .C_TX_DELAY_TYPE51(C_TX_DELAY_TYPE51), // TX delay type
   .C_TX_DELAY_VALUE0(C_TX_DELAY_VALUE0),  // TX delay value
   .C_TX_DELAY_VALUE1(C_TX_DELAY_VALUE1),  // TX delay value
   .C_TX_DELAY_VALUE2 (C_TX_DELAY_VALUE2),  // TX delay value
   .C_TX_DELAY_VALUE3 (C_TX_DELAY_VALUE3 ),  // TX delay value
   .C_TX_DELAY_VALUE4 (C_TX_DELAY_VALUE4 ),  // TX delay value
   .C_TX_DELAY_VALUE5 (C_TX_DELAY_VALUE5 ),  // TX delay value
   .C_TX_DELAY_VALUE6 (C_TX_DELAY_VALUE6 ),  // TX delay value
   .C_TX_DELAY_VALUE7 (C_TX_DELAY_VALUE7 ),  // TX delay value
   .C_TX_DELAY_VALUE8 (C_TX_DELAY_VALUE8 ),  // TX delay value
   .C_TX_DELAY_VALUE9 (C_TX_DELAY_VALUE9 ),  // TX delay value
   .C_TX_DELAY_VALUE10(C_TX_DELAY_VALUE10),  // TX delay value
   .C_TX_DELAY_VALUE11(C_TX_DELAY_VALUE11),  // TX delay value
   .C_TX_DELAY_VALUE12(C_TX_DELAY_VALUE12),  // TX delay value
   .C_TX_DELAY_VALUE13(C_TX_DELAY_VALUE13),  // TX delay value
   .C_TX_DELAY_VALUE14(C_TX_DELAY_VALUE14),  // TX delay value
   .C_TX_DELAY_VALUE15(C_TX_DELAY_VALUE15),  // TX delay value
   .C_TX_DELAY_VALUE16(C_TX_DELAY_VALUE16),  // TX delay value
   .C_TX_DELAY_VALUE17(C_TX_DELAY_VALUE17),  // TX delay value
   .C_TX_DELAY_VALUE18(C_TX_DELAY_VALUE18),  // TX delay value
   .C_TX_DELAY_VALUE19(C_TX_DELAY_VALUE19),  // TX delay value
   .C_TX_DELAY_VALUE20(C_TX_DELAY_VALUE20),  // TX delay value
   .C_TX_DELAY_VALUE21(C_TX_DELAY_VALUE21),  // TX delay value
   .C_TX_DELAY_VALUE22(C_TX_DELAY_VALUE22),  // TX delay value
   .C_TX_DELAY_VALUE23(C_TX_DELAY_VALUE23),  // TX delay value
   .C_TX_DELAY_VALUE24(C_TX_DELAY_VALUE24),  // TX delay value
   .C_TX_DELAY_VALUE25(C_TX_DELAY_VALUE25),  // TX delay value
   .C_TX_DELAY_VALUE26(C_TX_DELAY_VALUE26),  // TX delay value
   .C_TX_DELAY_VALUE27(C_TX_DELAY_VALUE27),  // TX delay value
   .C_TX_DELAY_VALUE28(C_TX_DELAY_VALUE28),  // TX delay value
   .C_TX_DELAY_VALUE29(C_TX_DELAY_VALUE29),  // TX delay value
   .C_TX_DELAY_VALUE30(C_TX_DELAY_VALUE30),  // TX delay value
   .C_TX_DELAY_VALUE31(C_TX_DELAY_VALUE31),  // TX delay value
   .C_TX_DELAY_VALUE32(C_TX_DELAY_VALUE32),  // TX delay value
   .C_TX_DELAY_VALUE33(C_TX_DELAY_VALUE33),  // TX delay value
   .C_TX_DELAY_VALUE34(C_TX_DELAY_VALUE34),  // TX delay value
   .C_TX_DELAY_VALUE35(C_TX_DELAY_VALUE35),  // TX delay value
   .C_TX_DELAY_VALUE36(C_TX_DELAY_VALUE36),  // TX delay value
   .C_TX_DELAY_VALUE37(C_TX_DELAY_VALUE37),  // TX delay value
   .C_TX_DELAY_VALUE38(C_TX_DELAY_VALUE38),  // TX delay value
   .C_TX_DELAY_VALUE39(C_TX_DELAY_VALUE39),  // TX delay value
   .C_TX_DELAY_VALUE40(C_TX_DELAY_VALUE40),  // TX delay value
   .C_TX_DELAY_VALUE41(C_TX_DELAY_VALUE41),  // TX delay value
   .C_TX_DELAY_VALUE42(C_TX_DELAY_VALUE42),  // TX delay value
   .C_TX_DELAY_VALUE43(C_TX_DELAY_VALUE43),  // TX delay value
   .C_TX_DELAY_VALUE44(C_TX_DELAY_VALUE44),  // TX delay value
   .C_TX_DELAY_VALUE45(C_TX_DELAY_VALUE45),  // TX delay value
   .C_TX_DELAY_VALUE46(C_TX_DELAY_VALUE46),  // TX delay value
   .C_TX_DELAY_VALUE47(C_TX_DELAY_VALUE47),  // TX delay value
   .C_TX_DELAY_VALUE48(C_TX_DELAY_VALUE48),  // TX delay value
   .C_TX_DELAY_VALUE49(C_TX_DELAY_VALUE49),  // TX delay value
   .C_TX_DELAY_VALUE50(C_TX_DELAY_VALUE50),  // TX delay value
   .C_TX_DELAY_VALUE51(C_TX_DELAY_VALUE51),  // TX delay value
   .C_TX_REFCLK_FREQ(C_TX_REFCLK_FREQ),      // TX clock frequency
   .C_FIFO_WR_CLK_EN(C_FIFO_WR_CLK_EN),      // Fifo Write Clock
   .C_ENABLE_BITSLIP(C_ENABLE_BITSLIP),      
   .C_BITSLIP_MODE(C_BITSLIP_MODE),          //  Bitslip Mode
   .C_BITSLIP_VAL(C_BITSLIP_VAL),            // Bitslip value	
   .C_BIDIR_BITSLICE_EN(C_BIDIR_BITSLICE_EN),
   // Strobe propagation signals
   .C_NIB5_EN_CLK_TO_EXT_NORTH(C_NIB5_EN_CLK_TO_EXT_NORTH),  
   .C_NIB5_EN_CLK_TO_EXT_SOUTH(C_NIB5_EN_CLK_TO_EXT_SOUTH), 
   .C_NIB4_EN_CLK_TO_EXT_NORTH(C_NIB4_EN_CLK_TO_EXT_NORTH), 
   .C_NIB4_EN_CLK_TO_EXT_SOUTH(C_NIB4_EN_CLK_TO_EXT_SOUTH),
   .C_NIB3_EN_CLK_TO_EXT_NORTH(C_NIB3_EN_CLK_TO_EXT_NORTH), 
   .C_NIB3_EN_CLK_TO_EXT_SOUTH(C_NIB3_EN_CLK_TO_EXT_SOUTH),
   .C_NIB2_EN_CLK_TO_EXT_NORTH(C_NIB2_EN_CLK_TO_EXT_NORTH), 
   .C_NIB2_EN_CLK_TO_EXT_SOUTH(C_NIB2_EN_CLK_TO_EXT_SOUTH), 
   .C_TX_PREEMPHASIS_S(C_TX_PREEMPHASIS_S),  // Pre emphasis enablement
   .C_TX_PREEMPHASIS_D(C_TX_PREEMPHASIS_D)  // Pre emphasis enablement
   )
    u_rxtx_bs (
   // Common Signals  
      .rst_seq_done (rst_seq_done),
      .rst_in (rst_in),
      .div_clk_to_fabric (div_clk_to_fabric),
      .start_bitslip (start_bitslip),
      .core_rdy (core_rdy),
      .rxtx_bitslip_sync_done (rxtx_bitslip_sync_done),
      .rxtx_bs_rx_clk_in(bs_rxtx_rx_clk_in),
      .rxtx_bs_rx_rst_dly_in(bs_rxtx_rx_rst_dly_in),
      .rxtx_bs_rx_rst_in(bs_rxtx_rx_rst_in),
      .rxtx_bs_tx_rst_in(bs_rxtx_tx_rst_in),
      .rxtx_bs_tx_rst_dly_in(bs_rxtx_tx_rst_dly_in),
      .rxtx_bs_tx_clk_in(bs_rxtx_tx_clk_in),
   
   // TBYTE signals from TX_BITSLICE_TRI, One for each nibble, these pins are
   // not required for rxtx_bs. 
      .rxtx_nib0_tx_tbyte_in(tx_bs_tri_nib_t_out[0]),
      .rxtx_nib1_tx_tbyte_in(tx_bs_tri_nib_t_out[1]),
      .rxtx_nib2_tx_tbyte_in(tx_bs_tri_nib_t_out[2]),
      .rxtx_nib3_tx_tbyte_in(tx_bs_tri_nib_t_out[3]),
      .rxtx_nib4_tx_tbyte_in(tx_bs_tri_nib_t_out[4]),
      .rxtx_nib5_tx_tbyte_in(tx_bs_tri_nib_t_out[5]),
      .rxtx_nib6_tx_tbyte_in(tx_bs_tri_nib_t_out[6]),
      .rxtx_nib7_tx_tbyte_in(tx_bs_tri_nib_t_out[7]), 
   
   // -----------------------------------------------------------------------
   // Bitslice0 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs0_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[0]),
      .rxtx_bs0_rx_datain(rxtx_bs_rx_datain[0]),
      .rxtx_bs0_O_tx_data_out(rxtx_bs_O_tx_data_out[0]),
      .rxtx_bs0_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[0]),
   
   // Fifo Signals
      .rxtx_bs0_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[0]),
      .rxtx_bs0_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[0]),
      .rxtx_bs0_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[0]),
   
   // RX Delay Signals
      .rxtx_bs0_rx_ce_in(rxtx_bs_rx_ce_in[0]),
      .rxtx_bs0_rx_cntvaluein(rxtx_bs_rx_cntvaluein[0]),
      .rxtx_bs0_rx_cntvalueout(rxtx_bs_rx_cntvalueout[0]),
      .rxtx_bs0_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[0]),
      .rxtx_bs0_rx_inc_in(rxtx_bs_rx_inc_in[0]),
      .rxtx_bs0_rx_load_in(rxtx_bs_rx_load_in[0]),
   
   // Tristate signals
      .rxtx_bs0_tx_t_in(rxtx_bs_tx_t_in[0]),
      .rxtx_bs0_tx_t_out(rxtx_bs_tx_t_out[0]),
   
   // TX Delay Signals
      .rxtx_bs0_tx_ce_in(rxtx_bs_tx_ce_in[0]),
      .rxtx_bs0_tx_cntvaluein(rxtx_bs_tx_cntvaluein[0]),
      .rxtx_bs0_tx_cntvalueout(rxtx_bs_tx_cntvalueout[0]),
      .rxtx_bs0_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[0]),
      .rxtx_bs0_tx_inc_in(rxtx_bs_tx_inc_in[0]),
      .rxtx_bs0_tx_load_in(rxtx_bs_tx_load_in[0]),
   
   // Ribbon cable signals
      .rxtx_bs0_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[0]),
      .rxtx_bs0_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[0]),
      .rxtx_bs0_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[0]),
      .rxtx_bs0_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[0]),
   
   // -----------------------------------------------------------------------
   // Bitslice1 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs1_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[1]),
      .rxtx_bs1_rx_datain(rxtx_bs_rx_datain[1]),
      .rxtx_bs1_O_tx_data_out(rxtx_bs_O_tx_data_out[1]),
      .rxtx_bs1_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[1]),
   
   // Fifo Signals
      .rxtx_bs1_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[1]),
      .rxtx_bs1_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[1]),
      .rxtx_bs1_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[1]),
   
   // RX Delay Signals
      .rxtx_bs1_rx_ce_in(rxtx_bs_rx_ce_in[1]),
      .rxtx_bs1_rx_cntvaluein(rxtx_bs_rx_cntvaluein[1]),
      .rxtx_bs1_rx_cntvalueout(rxtx_bs_rx_cntvalueout[1]),
      .rxtx_bs1_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[1]),
      .rxtx_bs1_rx_inc_in(rxtx_bs_rx_inc_in[1]),
      .rxtx_bs1_rx_load_in(rxtx_bs_rx_load_in[1]),
   
   // Tristate signals
      .rxtx_bs1_tx_t_in(rxtx_bs_tx_t_in[1]),
      .rxtx_bs1_tx_t_out(rxtx_bs_tx_t_out[1]),
   
   // TX Delay Signals
      .rxtx_bs1_tx_ce_in(rxtx_bs_tx_ce_in[1]),
      .rxtx_bs1_tx_cntvaluein(rxtx_bs_tx_cntvaluein[1]),        
      .rxtx_bs1_tx_cntvalueout(rxtx_bs_tx_cntvalueout[1]),
      .rxtx_bs1_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[1]),
      .rxtx_bs1_tx_inc_in(rxtx_bs_tx_inc_in[1]),
      .rxtx_bs1_tx_load_in(rxtx_bs_tx_load_in[1]),
   
      .rxtx_bs1_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[1]),
      .rxtx_bs1_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[1]),
      .rxtx_bs1_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[1]),
      .rxtx_bs1_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[1]),
   
   // -----------------------------------------------------------------------
   // Bitslice2 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs2_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[2]),
      .rxtx_bs2_rx_datain(rxtx_bs_rx_datain[2]),
      .rxtx_bs2_O_tx_data_out(rxtx_bs_O_tx_data_out[2]),
      .rxtx_bs2_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[2]),
   
   // Fifo Signals
      .rxtx_bs2_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[2]),
      .rxtx_bs2_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[2]),
      .rxtx_bs2_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[2]),
   
   // RX Delay Signals
      .rxtx_bs2_rx_ce_in(rxtx_bs_rx_ce_in[2]),
      .rxtx_bs2_rx_cntvaluein(rxtx_bs_rx_cntvaluein[2]),
      .rxtx_bs2_rx_cntvalueout(rxtx_bs_rx_cntvalueout[2]),
      .rxtx_bs2_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[2]),
      .rxtx_bs2_rx_inc_in(rxtx_bs_rx_inc_in[2]),
      .rxtx_bs2_rx_load_in(rxtx_bs_rx_load_in[2]),
   
   // Tristate signals
      .rxtx_bs2_tx_t_in(rxtx_bs_tx_t_in[2]),
      .rxtx_bs2_tx_t_out(rxtx_bs_tx_t_out[2]),
   
   // TX Delay Signals
      .rxtx_bs2_tx_ce_in(rxtx_bs_tx_ce_in[2]),
      .rxtx_bs2_tx_cntvaluein(rxtx_bs_tx_cntvaluein[2]),
      .rxtx_bs2_tx_cntvalueout(rxtx_bs_tx_cntvalueout[2]),
      .rxtx_bs2_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[2]),
      .rxtx_bs2_tx_inc_in(rxtx_bs_tx_inc_in[2]),
      .rxtx_bs2_tx_load_in(rxtx_bs_tx_load_in[2]),
   
      .rxtx_bs2_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[2]),
      .rxtx_bs2_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[2]),
      .rxtx_bs2_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[2]),
      .rxtx_bs2_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[2]),
   
   // -----------------------------------------------------------------------
   // Bitslice3 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs3_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[3]),
      .rxtx_bs3_rx_datain(rxtx_bs_rx_datain[3]),
      .rxtx_bs3_O_tx_data_out(rxtx_bs_O_tx_data_out[3]),
      .rxtx_bs3_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[3]),
   
   // Fifo Signals
      .rxtx_bs3_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[3]),
      .rxtx_bs3_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[3]),
      .rxtx_bs3_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[3]),
   
   // RX Delay Signals
      .rxtx_bs3_rx_ce_in(rxtx_bs_rx_ce_in[3]),
      .rxtx_bs3_rx_cntvaluein(rxtx_bs_rx_cntvaluein[3]),
      .rxtx_bs3_rx_cntvalueout(rxtx_bs_rx_cntvalueout[3]),
      .rxtx_bs3_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[3]),
      .rxtx_bs3_rx_inc_in(rxtx_bs_rx_inc_in[3]),
      .rxtx_bs3_rx_load_in(rxtx_bs_rx_load_in[3]),
   
   // Tristate signals
      .rxtx_bs3_tx_t_in(rxtx_bs_tx_t_in[3]),
      .rxtx_bs3_tx_t_out(rxtx_bs_tx_t_out[3]),
   
   // TX Delay Signals
      .rxtx_bs3_tx_ce_in(rxtx_bs_tx_ce_in[3]),
      .rxtx_bs3_tx_cntvaluein(rxtx_bs_tx_cntvaluein[3]),
      .rxtx_bs3_tx_cntvalueout(rxtx_bs_tx_cntvalueout[3]),
      .rxtx_bs3_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[3]),
      .rxtx_bs3_tx_inc_in(rxtx_bs_tx_inc_in[3]),
      .rxtx_bs3_tx_load_in(rxtx_bs_tx_load_in[3]),
   
      .rxtx_bs3_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[3]),
      .rxtx_bs3_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[3]),
      .rxtx_bs3_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[3]),
      .rxtx_bs3_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[3]),
   
   // -----------------------------------------------------------------------
   // Bitslice4 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs4_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[4]),
      .rxtx_bs4_rx_datain(rxtx_bs_rx_datain[4]),
      .rxtx_bs4_O_tx_data_out(rxtx_bs_O_tx_data_out[4]),
      .rxtx_bs4_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[4]),
   
   // Fifo Signals
      .rxtx_bs4_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[4]),
      .rxtx_bs4_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[4]),
      .rxtx_bs4_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[4]),
   
   // RX Delay Signals
      .rxtx_bs4_rx_ce_in(rxtx_bs_rx_ce_in[4]),
      .rxtx_bs4_rx_cntvaluein(rxtx_bs_rx_cntvaluein[4]),
      .rxtx_bs4_rx_cntvalueout(rxtx_bs_rx_cntvalueout[4]),
      .rxtx_bs4_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[4]),
      .rxtx_bs4_rx_inc_in(rxtx_bs_rx_inc_in[4]),
      .rxtx_bs4_rx_load_in(rxtx_bs_rx_load_in[4]),
   
   // Tristate signals
      .rxtx_bs4_tx_t_in(rxtx_bs_tx_t_in[4]),
      .rxtx_bs4_tx_t_out(rxtx_bs_tx_t_out[4]),
   
   // TX Delay Signals
      .rxtx_bs4_tx_ce_in(rxtx_bs_tx_ce_in[4]),
      .rxtx_bs4_tx_cntvaluein(rxtx_bs_tx_cntvaluein[4]),        
      .rxtx_bs4_tx_cntvalueout(rxtx_bs_tx_cntvalueout[4]),
      .rxtx_bs4_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[4]),
      .rxtx_bs4_tx_inc_in(rxtx_bs_tx_inc_in[4]),
      .rxtx_bs4_tx_load_in(rxtx_bs_tx_load_in[4]),
   
      .rxtx_bs4_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[4]),
      .rxtx_bs4_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[4]),
      .rxtx_bs4_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[4]),
      .rxtx_bs4_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[4]),
   
   // -----------------------------------------------------------------------
   // Bitslice5 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs5_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[5]),
      .rxtx_bs5_rx_datain(rxtx_bs_rx_datain[5]),
      .rxtx_bs5_O_tx_data_out(rxtx_bs_O_tx_data_out[5]),
      .rxtx_bs5_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[5]),
   
   // Fifo Signals
      .rxtx_bs5_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[5]),
      .rxtx_bs5_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[5]),
      .rxtx_bs5_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[5]),
   
   // RX Delay Signals
      .rxtx_bs5_rx_ce_in(rxtx_bs_rx_ce_in[5]),
      .rxtx_bs5_rx_cntvaluein(rxtx_bs_rx_cntvaluein[5]),
      .rxtx_bs5_rx_cntvalueout(rxtx_bs_rx_cntvalueout[5]),
      .rxtx_bs5_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[5]),
      .rxtx_bs5_rx_inc_in(rxtx_bs_rx_inc_in[5]),
      .rxtx_bs5_rx_load_in(rxtx_bs_rx_load_in[5]),
   
   // Tristate signals
      .rxtx_bs5_tx_t_in(rxtx_bs_tx_t_in[5]),
      .rxtx_bs5_tx_t_out(rxtx_bs_tx_t_out[5]),
   
   // TX Delay Signals
      .rxtx_bs5_tx_ce_in(rxtx_bs_tx_ce_in[5]),
      .rxtx_bs5_tx_cntvaluein(rxtx_bs_tx_cntvaluein[5]),        
      .rxtx_bs5_tx_cntvalueout(rxtx_bs_tx_cntvalueout[5]),
      .rxtx_bs5_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[5]),
      .rxtx_bs5_tx_inc_in(rxtx_bs_tx_inc_in[5]),
      .rxtx_bs5_tx_load_in(rxtx_bs_tx_load_in[5]),
   
      .rxtx_bs5_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[5]),
      .rxtx_bs5_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[5]),
      .rxtx_bs5_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[5]),
      .rxtx_bs5_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[5]),
   
   // -----------------------------------------------------------------------
   // Bitslice6 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs6_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[6]),
      .rxtx_bs6_rx_datain(rxtx_bs_rx_datain[6]),
      .rxtx_bs6_O_tx_data_out(rxtx_bs_O_tx_data_out[6]),
      .rxtx_bs6_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[6]),
   
   // Fifo Signals
      .rxtx_bs6_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[6]),
      .rxtx_bs6_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[6]),
      .rxtx_bs6_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[6]),
   
   // RX Delay Signals
      .rxtx_bs6_rx_ce_in(rxtx_bs_rx_ce_in[6]),
      .rxtx_bs6_rx_cntvaluein(rxtx_bs_rx_cntvaluein[6]),
      .rxtx_bs6_rx_cntvalueout(rxtx_bs_rx_cntvalueout[6]),
      .rxtx_bs6_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[6]),
      .rxtx_bs6_rx_inc_in(rxtx_bs_rx_inc_in[6]),
      .rxtx_bs6_rx_load_in(rxtx_bs_rx_load_in[6]),
   
   // Tristate signals
      .rxtx_bs6_tx_t_in(rxtx_bs_tx_t_in[6]),
      .rxtx_bs6_tx_t_out(rxtx_bs_tx_t_out[6]),
   
   // TX Delay Signals
      .rxtx_bs6_tx_ce_in(rxtx_bs_tx_ce_in[6]),
      .rxtx_bs6_tx_cntvaluein(rxtx_bs_tx_cntvaluein[6]),        
      .rxtx_bs6_tx_cntvalueout(rxtx_bs_tx_cntvalueout[6]),
      .rxtx_bs6_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[6]),
      .rxtx_bs6_tx_inc_in(rxtx_bs_tx_inc_in[6]),
      .rxtx_bs6_tx_load_in(rxtx_bs_tx_load_in[6]),
   
      .rxtx_bs6_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[6]),
      .rxtx_bs6_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[6]),
      .rxtx_bs6_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[6]),
      .rxtx_bs6_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[6]),
   
   // -----------------------------------------------------------------------
   // Bitslice7 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs7_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[7]),
      .rxtx_bs7_rx_datain(rxtx_bs_rx_datain[7]),
      .rxtx_bs7_O_tx_data_out(rxtx_bs_O_tx_data_out[7]),
      .rxtx_bs7_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[7]),
   
   // Fifo Signals
      .rxtx_bs7_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[7]),
      .rxtx_bs7_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[7]),
      .rxtx_bs7_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[7]),
   
   // RX Delay Signals
      .rxtx_bs7_rx_ce_in(rxtx_bs_rx_ce_in[7]),
      .rxtx_bs7_rx_cntvaluein(rxtx_bs_rx_cntvaluein[7]),
      .rxtx_bs7_rx_cntvalueout(rxtx_bs_rx_cntvalueout[7]),
      .rxtx_bs7_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[7]),
      .rxtx_bs7_rx_inc_in(rxtx_bs_rx_inc_in[7]),
      .rxtx_bs7_rx_load_in(rxtx_bs_rx_load_in[7]),
   
   // Tristate signals
      .rxtx_bs7_tx_t_in(rxtx_bs_tx_t_in[7]),
      .rxtx_bs7_tx_t_out(rxtx_bs_tx_t_out[7]),
   
   // TX Delay Signals
      .rxtx_bs7_tx_ce_in(rxtx_bs_tx_ce_in[7]),
      .rxtx_bs7_tx_cntvaluein(rxtx_bs_tx_cntvaluein[7]),        
      .rxtx_bs7_tx_cntvalueout(rxtx_bs_tx_cntvalueout[7]),
      .rxtx_bs7_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[7]),
      .rxtx_bs7_tx_inc_in(rxtx_bs_tx_inc_in[7]),
      .rxtx_bs7_tx_load_in(rxtx_bs_tx_load_in[7]),
   
      .rxtx_bs7_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[7]),
      .rxtx_bs7_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[7]),
      .rxtx_bs7_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[7]),
      .rxtx_bs7_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[7]),
   
   // -----------------------------------------------------------------------
   // Bitslice8 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs8_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[8]),
      .rxtx_bs8_rx_datain(rxtx_bs_rx_datain[8]),
      .rxtx_bs8_O_tx_data_out(rxtx_bs_O_tx_data_out[8]),
      .rxtx_bs8_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[8]),
   
   // Fifo Signals
      .rxtx_bs8_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[8]),
      .rxtx_bs8_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[8]),
      .rxtx_bs8_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[8]),
   
   // RX Delay Signals
      .rxtx_bs8_rx_ce_in(rxtx_bs_rx_ce_in[8]),
      .rxtx_bs8_rx_cntvaluein(rxtx_bs_rx_cntvaluein[8]),
      .rxtx_bs8_rx_cntvalueout(rxtx_bs_rx_cntvalueout[8]),
      .rxtx_bs8_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[8]),
      .rxtx_bs8_rx_inc_in(rxtx_bs_rx_inc_in[8]),
      .rxtx_bs8_rx_load_in(rxtx_bs_rx_load_in[8]),
   
   // Tristate signals
      .rxtx_bs8_tx_t_in(rxtx_bs_tx_t_in[8]),
      .rxtx_bs8_tx_t_out(rxtx_bs_tx_t_out[8]),
   
   // TX Delay Signals
      .rxtx_bs8_tx_ce_in(rxtx_bs_tx_ce_in[8]),
      .rxtx_bs8_tx_cntvaluein(rxtx_bs_tx_cntvaluein[8]),        
      .rxtx_bs8_tx_cntvalueout(rxtx_bs_tx_cntvalueout[8]),
      .rxtx_bs8_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[8]),
      .rxtx_bs8_tx_inc_in(rxtx_bs_tx_inc_in[8]),
      .rxtx_bs8_tx_load_in(rxtx_bs_tx_load_in[8]),
   
      .rxtx_bs8_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[8]),
      .rxtx_bs8_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[8]),
      .rxtx_bs8_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[8]),
      .rxtx_bs8_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[8]),
   
   // -----------------------------------------------------------------------
   // Bitslice9 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs9_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[9]),
      .rxtx_bs9_rx_datain(rxtx_bs_rx_datain[9]),
      .rxtx_bs9_O_tx_data_out(rxtx_bs_O_tx_data_out[9]),
      .rxtx_bs9_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[9]),
   
   // Fifo Signals
      .rxtx_bs9_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[9]),
      .rxtx_bs9_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[9]),
      .rxtx_bs9_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[9]),
   
   // RX Delay Signals
      .rxtx_bs9_rx_ce_in(rxtx_bs_rx_ce_in[9]),
      .rxtx_bs9_rx_cntvaluein(rxtx_bs_rx_cntvaluein[9]),
      .rxtx_bs9_rx_cntvalueout(rxtx_bs_rx_cntvalueout[9]),
      .rxtx_bs9_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[9]),
      .rxtx_bs9_rx_inc_in(rxtx_bs_rx_inc_in[9]),
      .rxtx_bs9_rx_load_in(rxtx_bs_rx_load_in[9]),
   
   // Tristate signals
      .rxtx_bs9_tx_t_in(rxtx_bs_tx_t_in[9]),
      .rxtx_bs9_tx_t_out(rxtx_bs_tx_t_out[9]),
   
   // TX Delay Signals
      .rxtx_bs9_tx_ce_in(rxtx_bs_tx_ce_in[9]),
      .rxtx_bs9_tx_cntvaluein(rxtx_bs_tx_cntvaluein[9]),        
      .rxtx_bs9_tx_cntvalueout(rxtx_bs_tx_cntvalueout[9]),
      .rxtx_bs9_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[9]),
      .rxtx_bs9_tx_inc_in(rxtx_bs_tx_inc_in[9]),
      .rxtx_bs9_tx_load_in(rxtx_bs_tx_load_in[9]),
   
      .rxtx_bs9_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[9]),
      .rxtx_bs9_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[9]),
      .rxtx_bs9_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[9]),
      .rxtx_bs9_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[9]),
   
   // -----------------------------------------------------------------------
   // Bitslice10 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs10_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[10]),
      .rxtx_bs10_rx_datain(rxtx_bs_rx_datain[10]),
      .rxtx_bs10_O_tx_data_out(rxtx_bs_O_tx_data_out[10]),
      .rxtx_bs10_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[10]),
   
   // Fifo Signals
      .rxtx_bs10_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[10]),
      .rxtx_bs10_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[10]),
      .rxtx_bs10_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[10]),
   
   // RX Delay Signals
      .rxtx_bs10_rx_ce_in(rxtx_bs_rx_ce_in[10]),
      .rxtx_bs10_rx_cntvaluein(rxtx_bs_rx_cntvaluein[10]),
      .rxtx_bs10_rx_cntvalueout(rxtx_bs_rx_cntvalueout[10]),
      .rxtx_bs10_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[10]),
      .rxtx_bs10_rx_inc_in(rxtx_bs_rx_inc_in[10]),
      .rxtx_bs10_rx_load_in(rxtx_bs_rx_load_in[10]),
   
   // Tristate signals
      .rxtx_bs10_tx_t_in(rxtx_bs_tx_t_in[10]),
      .rxtx_bs10_tx_t_out(rxtx_bs_tx_t_out[10]),
   
   // TX Delay Signals
      .rxtx_bs10_tx_ce_in(rxtx_bs_tx_ce_in[10]),
      .rxtx_bs10_tx_cntvaluein(rxtx_bs_tx_cntvaluein[10]),        
      .rxtx_bs10_tx_cntvalueout(rxtx_bs_tx_cntvalueout[10]),
      .rxtx_bs10_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[10]),
      .rxtx_bs10_tx_inc_in(rxtx_bs_tx_inc_in[10]),
      .rxtx_bs10_tx_load_in(rxtx_bs_tx_load_in[10]),
   
      .rxtx_bs10_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[10]),
      .rxtx_bs10_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[10]),
      .rxtx_bs10_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[10]),
      .rxtx_bs10_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[10]),
   
   // -----------------------------------------------------------------------
   // Bitslice11 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs11_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[11]),
      .rxtx_bs11_rx_datain(rxtx_bs_rx_datain[11]),
      .rxtx_bs11_O_tx_data_out(rxtx_bs_O_tx_data_out[11]),
      .rxtx_bs11_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[11]),
   
   // Fifo Signals
      .rxtx_bs11_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[11]),
      .rxtx_bs11_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[11]),
      .rxtx_bs11_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[11]),
   
   // RX Delay Signals
      .rxtx_bs11_rx_ce_in(rxtx_bs_rx_ce_in[11]),
      .rxtx_bs11_rx_cntvaluein(rxtx_bs_rx_cntvaluein[11]),
      .rxtx_bs11_rx_cntvalueout(rxtx_bs_rx_cntvalueout[11]),
      .rxtx_bs11_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[11]),
      .rxtx_bs11_rx_inc_in(rxtx_bs_rx_inc_in[11]),
      .rxtx_bs11_rx_load_in(rxtx_bs_rx_load_in[11]),
   
   // Tristate signals
      .rxtx_bs11_tx_t_in(rxtx_bs_tx_t_in[11]),
      .rxtx_bs11_tx_t_out(rxtx_bs_tx_t_out[11]),
   
   // TX Delay Signals
      .rxtx_bs11_tx_ce_in(rxtx_bs_tx_ce_in[11]),
      .rxtx_bs11_tx_cntvaluein(rxtx_bs_tx_cntvaluein[11]),        
      .rxtx_bs11_tx_cntvalueout(rxtx_bs_tx_cntvalueout[11]),
      .rxtx_bs11_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[11]),
      .rxtx_bs11_tx_inc_in(rxtx_bs_tx_inc_in[11]),
      .rxtx_bs11_tx_load_in(rxtx_bs_tx_load_in[11]),
   
      .rxtx_bs11_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[11]),
      .rxtx_bs11_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[11]),
      .rxtx_bs11_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[11]),
      .rxtx_bs11_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[11]),
   
   // -----------------------------------------------------------------------
   // Bitslice12 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs12_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[12]),
      .rxtx_bs12_rx_datain(rxtx_bs_rx_datain[12]),
      .rxtx_bs12_O_tx_data_out(rxtx_bs_O_tx_data_out[12]),
      .rxtx_bs12_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[12]),
   
   // Fifo Signals
      .rxtx_bs12_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[12]),
      .rxtx_bs12_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[12]),
      .rxtx_bs12_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[12]),
   
   // RX Delay Signals
      .rxtx_bs12_rx_ce_in(rxtx_bs_rx_ce_in[12]),
      .rxtx_bs12_rx_cntvaluein(rxtx_bs_rx_cntvaluein[12]),
      .rxtx_bs12_rx_cntvalueout(rxtx_bs_rx_cntvalueout[12]),
      .rxtx_bs12_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[12]),
      .rxtx_bs12_rx_inc_in(rxtx_bs_rx_inc_in[12]),
      .rxtx_bs12_rx_load_in(rxtx_bs_rx_load_in[12]),
   
   // Tristate signals
      .rxtx_bs12_tx_t_in(rxtx_bs_tx_t_in[12]),
      .rxtx_bs12_tx_t_out(rxtx_bs_tx_t_out[12]),
   
   // TX Delay Signals
      .rxtx_bs12_tx_ce_in(rxtx_bs_tx_ce_in[12]),
      .rxtx_bs12_tx_cntvaluein(rxtx_bs_tx_cntvaluein[12]),        
      .rxtx_bs12_tx_cntvalueout(rxtx_bs_tx_cntvalueout[12]),
      .rxtx_bs12_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[12]),
      .rxtx_bs12_tx_inc_in(rxtx_bs_tx_inc_in[12]),
      .rxtx_bs12_tx_load_in(rxtx_bs_tx_load_in[12]),
   
      .rxtx_bs12_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[12]),
      .rxtx_bs12_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[12]),
      .rxtx_bs12_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[12]),
      .rxtx_bs12_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[12]),
   
   // -----------------------------------------------------------------------
   // Bitslice13 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs13_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[13]),
      .rxtx_bs13_rx_datain(rxtx_bs_rx_datain[13]),
      .rxtx_bs13_O_tx_data_out(rxtx_bs_O_tx_data_out[13]),
      .rxtx_bs13_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[13]),
   
   // Fifo Signals
      .rxtx_bs13_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[13]),
      .rxtx_bs13_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[13]),
      .rxtx_bs13_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[13]),
   
   // RX Delay Signals
      .rxtx_bs13_rx_ce_in(rxtx_bs_rx_ce_in[13]),
      .rxtx_bs13_rx_cntvaluein(rxtx_bs_rx_cntvaluein[13]),
      .rxtx_bs13_rx_cntvalueout(rxtx_bs_rx_cntvalueout[13]),
      .rxtx_bs13_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[13]),
      .rxtx_bs13_rx_inc_in(rxtx_bs_rx_inc_in[13]),
      .rxtx_bs13_rx_load_in(rxtx_bs_rx_load_in[13]),
   
   // Tristate signals
      .rxtx_bs13_tx_t_in(rxtx_bs_tx_t_in[13]),
      .rxtx_bs13_tx_t_out(rxtx_bs_tx_t_out[13]),
   
   // TX Delay Signals
      .rxtx_bs13_tx_ce_in(rxtx_bs_tx_ce_in[13]),
      .rxtx_bs13_tx_cntvaluein(rxtx_bs_tx_cntvaluein[13]),        
      .rxtx_bs13_tx_cntvalueout(rxtx_bs_tx_cntvalueout[13]),
      .rxtx_bs13_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[13]),
      .rxtx_bs13_tx_inc_in(rxtx_bs_tx_inc_in[13]),
      .rxtx_bs13_tx_load_in(rxtx_bs_tx_load_in[13]),
   
      .rxtx_bs13_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[13]),
      .rxtx_bs13_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[13]),
      .rxtx_bs13_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[13]),
      .rxtx_bs13_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[13]),
   
   // -----------------------------------------------------------------------
   // Bitslice14 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs14_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[14]),
      .rxtx_bs14_rx_datain(rxtx_bs_rx_datain[14]),
      .rxtx_bs14_O_tx_data_out(rxtx_bs_O_tx_data_out[14]),
      .rxtx_bs14_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[14]),
   
   // Fifo Signals
      .rxtx_bs14_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[14]),
      .rxtx_bs14_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[14]),
      .rxtx_bs14_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[14]),
   
   // RX Delay Signals
      .rxtx_bs14_rx_ce_in(rxtx_bs_rx_ce_in[14]),
      .rxtx_bs14_rx_cntvaluein(rxtx_bs_rx_cntvaluein[14]),
      .rxtx_bs14_rx_cntvalueout(rxtx_bs_rx_cntvalueout[14]),
      .rxtx_bs14_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[14]),
      .rxtx_bs14_rx_inc_in(rxtx_bs_rx_inc_in[14]),
      .rxtx_bs14_rx_load_in(rxtx_bs_rx_load_in[14]),
   
   // Tristate signals
      .rxtx_bs14_tx_t_in(rxtx_bs_tx_t_in[14]),
      .rxtx_bs14_tx_t_out(rxtx_bs_tx_t_out[14]),
   
   // TX Delay Signals
      .rxtx_bs14_tx_ce_in(rxtx_bs_tx_ce_in[14]),
      .rxtx_bs14_tx_cntvaluein(rxtx_bs_tx_cntvaluein[14]),        
      .rxtx_bs14_tx_cntvalueout(rxtx_bs_tx_cntvalueout[14]),
      .rxtx_bs14_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[14]),
      .rxtx_bs14_tx_inc_in(rxtx_bs_tx_inc_in[14]),
      .rxtx_bs14_tx_load_in(rxtx_bs_tx_load_in[14]),
   
      .rxtx_bs14_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[14]),
      .rxtx_bs14_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[14]),
      .rxtx_bs14_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[14]),
      .rxtx_bs14_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[14]),
   
   // -----------------------------------------------------------------------
   // Bitslice15 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs15_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[15]),
      .rxtx_bs15_rx_datain(rxtx_bs_rx_datain[15]),
      .rxtx_bs15_O_tx_data_out(rxtx_bs_O_tx_data_out[15]),
      .rxtx_bs15_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[15]),
   
   // Fifo Signals
      .rxtx_bs15_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[15]),
      .rxtx_bs15_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[15]),
      .rxtx_bs15_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[15]),
   
   // RX Delay Signals
      .rxtx_bs15_rx_ce_in(rxtx_bs_rx_ce_in[15]),
      .rxtx_bs15_rx_cntvaluein(rxtx_bs_rx_cntvaluein[15]),
      .rxtx_bs15_rx_cntvalueout(rxtx_bs_rx_cntvalueout[15]),
      .rxtx_bs15_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[15]),
      .rxtx_bs15_rx_inc_in(rxtx_bs_rx_inc_in[15]),
      .rxtx_bs15_rx_load_in(rxtx_bs_rx_load_in[15]),
   
   // Tristate signals
      .rxtx_bs15_tx_t_in(rxtx_bs_tx_t_in[15]),
      .rxtx_bs15_tx_t_out(rxtx_bs_tx_t_out[15]),
   
   // TX Delay Signals
      .rxtx_bs15_tx_ce_in(rxtx_bs_tx_ce_in[15]),
      .rxtx_bs15_tx_cntvaluein(rxtx_bs_tx_cntvaluein[15]),        
      .rxtx_bs15_tx_cntvalueout(rxtx_bs_tx_cntvalueout[15]),
      .rxtx_bs15_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[15]),
      .rxtx_bs15_tx_inc_in(rxtx_bs_tx_inc_in[15]),
      .rxtx_bs15_tx_load_in(rxtx_bs_tx_load_in[15]),
   
      .rxtx_bs15_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[15]),
      .rxtx_bs15_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[15]),
      .rxtx_bs15_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[15]),
      .rxtx_bs15_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[15]),
   
   // -----------------------------------------------------------------------
   // Bitslice16 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs16_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[16]),
      .rxtx_bs16_rx_datain(rxtx_bs_rx_datain[16]),
      .rxtx_bs16_O_tx_data_out(rxtx_bs_O_tx_data_out[16]),
      .rxtx_bs16_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[16]),
   
   // Fifo Signals
      .rxtx_bs16_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[16]),
      .rxtx_bs16_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[16]),
      .rxtx_bs16_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[16]),
   
   // RX Delay Signals
      .rxtx_bs16_rx_ce_in(rxtx_bs_rx_ce_in[16]),
      .rxtx_bs16_rx_cntvaluein(rxtx_bs_rx_cntvaluein[16]),
      .rxtx_bs16_rx_cntvalueout(rxtx_bs_rx_cntvalueout[16]),
      .rxtx_bs16_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[16]),
      .rxtx_bs16_rx_inc_in(rxtx_bs_rx_inc_in[16]),
      .rxtx_bs16_rx_load_in(rxtx_bs_rx_load_in[16]),
   
   // Tristate signals
      .rxtx_bs16_tx_t_in(rxtx_bs_tx_t_in[16]),
      .rxtx_bs16_tx_t_out(rxtx_bs_tx_t_out[16]),
   
   // TX Delay Signals
      .rxtx_bs16_tx_ce_in(rxtx_bs_tx_ce_in[16]),
      .rxtx_bs16_tx_cntvaluein(rxtx_bs_tx_cntvaluein[16]),        
      .rxtx_bs16_tx_cntvalueout(rxtx_bs_tx_cntvalueout[16]),
      .rxtx_bs16_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[16]),
      .rxtx_bs16_tx_inc_in(rxtx_bs_tx_inc_in[16]),
      .rxtx_bs16_tx_load_in(rxtx_bs_tx_load_in[16]),
   
      .rxtx_bs16_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[16]),
      .rxtx_bs16_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[16]),
      .rxtx_bs16_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[16]),
      .rxtx_bs16_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[16]),
   
   // -----------------------------------------------------------------------
   // Bitslice17 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs17_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[17]),
      .rxtx_bs17_rx_datain(rxtx_bs_rx_datain[17]),
      .rxtx_bs17_O_tx_data_out(rxtx_bs_O_tx_data_out[17]),
      .rxtx_bs17_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[17]),
   
   // Fifo Signals
      .rxtx_bs17_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[17]),
      .rxtx_bs17_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[17]),
      .rxtx_bs17_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[17]),
   
   // RX Delay Signals
      .rxtx_bs17_rx_ce_in(rxtx_bs_rx_ce_in[17]),
      .rxtx_bs17_rx_cntvaluein(rxtx_bs_rx_cntvaluein[17]),
      .rxtx_bs17_rx_cntvalueout(rxtx_bs_rx_cntvalueout[17]),
      .rxtx_bs17_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[17]),
      .rxtx_bs17_rx_inc_in(rxtx_bs_rx_inc_in[17]),
      .rxtx_bs17_rx_load_in(rxtx_bs_rx_load_in[17]),
   
   // Tristate signals
      .rxtx_bs17_tx_t_in(rxtx_bs_tx_t_in[17]),
      .rxtx_bs17_tx_t_out(rxtx_bs_tx_t_out[17]),
   
   // TX Delay Signals
      .rxtx_bs17_tx_ce_in(rxtx_bs_tx_ce_in[17]),
      .rxtx_bs17_tx_cntvaluein(rxtx_bs_tx_cntvaluein[17]),        
      .rxtx_bs17_tx_cntvalueout(rxtx_bs_tx_cntvalueout[17]),
      .rxtx_bs17_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[17]),
      .rxtx_bs17_tx_inc_in(rxtx_bs_tx_inc_in[17]),
      .rxtx_bs17_tx_load_in(rxtx_bs_tx_load_in[17]),
   
      .rxtx_bs17_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[17]),
      .rxtx_bs17_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[17]),
      .rxtx_bs17_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[17]),
      .rxtx_bs17_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[17]),
   
   // -----------------------------------------------------------------------
   // Bitslice18 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs18_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[18]),
      .rxtx_bs18_rx_datain(rxtx_bs_rx_datain[18]),
      .rxtx_bs18_O_tx_data_out(rxtx_bs_O_tx_data_out[18]),
      .rxtx_bs18_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[18]),
   
   // Fifo Signals
      .rxtx_bs18_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[18]),
      .rxtx_bs18_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[18]),
      .rxtx_bs18_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[18]),
   
   // RX Delay Signals
      .rxtx_bs18_rx_ce_in(rxtx_bs_rx_ce_in[18]),
      .rxtx_bs18_rx_cntvaluein(rxtx_bs_rx_cntvaluein[18]),
      .rxtx_bs18_rx_cntvalueout(rxtx_bs_rx_cntvalueout[18]),
      .rxtx_bs18_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[18]),
      .rxtx_bs18_rx_inc_in(rxtx_bs_rx_inc_in[18]),
      .rxtx_bs18_rx_load_in(rxtx_bs_rx_load_in[18]),
   
   // Tristate signals
      .rxtx_bs18_tx_t_in(rxtx_bs_tx_t_in[18]),
      .rxtx_bs18_tx_t_out(rxtx_bs_tx_t_out[18]),
   
   // TX Delay Signals
      .rxtx_bs18_tx_ce_in(rxtx_bs_tx_ce_in[18]),
      .rxtx_bs18_tx_cntvaluein(rxtx_bs_tx_cntvaluein[18]),        
      .rxtx_bs18_tx_cntvalueout(rxtx_bs_tx_cntvalueout[18]),
      .rxtx_bs18_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[18]),
      .rxtx_bs18_tx_inc_in(rxtx_bs_tx_inc_in[18]),
      .rxtx_bs18_tx_load_in(rxtx_bs_tx_load_in[18]),
   
      .rxtx_bs18_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[18]),
      .rxtx_bs18_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[18]),
      .rxtx_bs18_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[18]),
      .rxtx_bs18_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[18]),
   
   // -----------------------------------------------------------------------
   // Bitslice19 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs19_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[19]),
      .rxtx_bs19_rx_datain(rxtx_bs_rx_datain[19]),
      .rxtx_bs19_O_tx_data_out(rxtx_bs_O_tx_data_out[19]),
      .rxtx_bs19_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[19]),
   
   // Fifo Signals
      .rxtx_bs19_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[19]),
      .rxtx_bs19_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[19]),
      .rxtx_bs19_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[19]),
   
   // RX Delay Signals
      .rxtx_bs19_rx_ce_in(rxtx_bs_rx_ce_in[19]),
      .rxtx_bs19_rx_cntvaluein(rxtx_bs_rx_cntvaluein[19]),
      .rxtx_bs19_rx_cntvalueout(rxtx_bs_rx_cntvalueout[19]),
      .rxtx_bs19_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[19]),
      .rxtx_bs19_rx_inc_in(rxtx_bs_rx_inc_in[19]),
      .rxtx_bs19_rx_load_in(rxtx_bs_rx_load_in[19]),
   
   // Tristate signals
      .rxtx_bs19_tx_t_in(rxtx_bs_tx_t_in[19]),
      .rxtx_bs19_tx_t_out(rxtx_bs_tx_t_out[19]),
   
   // TX Delay Signals
      .rxtx_bs19_tx_ce_in(rxtx_bs_tx_ce_in[19]),
      .rxtx_bs19_tx_cntvaluein(rxtx_bs_tx_cntvaluein[19]),        
      .rxtx_bs19_tx_cntvalueout(rxtx_bs_tx_cntvalueout[19]),
      .rxtx_bs19_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[19]),
      .rxtx_bs19_tx_inc_in(rxtx_bs_tx_inc_in[19]),
      .rxtx_bs19_tx_load_in(rxtx_bs_tx_load_in[19]),
   
      .rxtx_bs19_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[19]),
      .rxtx_bs19_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[19]),
      .rxtx_bs19_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[19]),
      .rxtx_bs19_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[19]),
   
   // -----------------------------------------------------------------------
   // Bitslice20 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs20_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[20]),
      .rxtx_bs20_rx_datain(rxtx_bs_rx_datain[20]),
      .rxtx_bs20_O_tx_data_out(rxtx_bs_O_tx_data_out[20]),
      .rxtx_bs20_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[20]),
   
   // Fifo Signals
      .rxtx_bs20_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[20]),
      .rxtx_bs20_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[20]),
      .rxtx_bs20_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[20]),
   
   // RX Delay Signals
      .rxtx_bs20_rx_ce_in(rxtx_bs_rx_ce_in[20]),
      .rxtx_bs20_rx_cntvaluein(rxtx_bs_rx_cntvaluein[20]),
      .rxtx_bs20_rx_cntvalueout(rxtx_bs_rx_cntvalueout[20]),
      .rxtx_bs20_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[20]),
      .rxtx_bs20_rx_inc_in(rxtx_bs_rx_inc_in[20]),
      .rxtx_bs20_rx_load_in(rxtx_bs_rx_load_in[20]),
   
   // Tristate signals
      .rxtx_bs20_tx_t_in(rxtx_bs_tx_t_in[20]),
      .rxtx_bs20_tx_t_out(rxtx_bs_tx_t_out[20]),
   
   // TX Delay Signals
      .rxtx_bs20_tx_ce_in(rxtx_bs_tx_ce_in[20]),
      .rxtx_bs20_tx_cntvaluein(rxtx_bs_tx_cntvaluein[20]),        
      .rxtx_bs20_tx_cntvalueout(rxtx_bs_tx_cntvalueout[20]),
      .rxtx_bs20_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[20]),
      .rxtx_bs20_tx_inc_in(rxtx_bs_tx_inc_in[20]),
      .rxtx_bs20_tx_load_in(rxtx_bs_tx_load_in[20]),
   
      .rxtx_bs20_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[20]),
      .rxtx_bs20_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[20]),
      .rxtx_bs20_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[20]),
      .rxtx_bs20_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[20]),
   
   // -----------------------------------------------------------------------
   // Bitslice21 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs21_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[21]),
      .rxtx_bs21_rx_datain(rxtx_bs_rx_datain[21]),
      .rxtx_bs21_O_tx_data_out(rxtx_bs_O_tx_data_out[21]),
      .rxtx_bs21_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[21]),
   
   // Fifo Signals
      .rxtx_bs21_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[21]),
      .rxtx_bs21_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[21]),
      .rxtx_bs21_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[21]),
   
   // RX Delay Signals
      .rxtx_bs21_rx_ce_in(rxtx_bs_rx_ce_in[21]),
      .rxtx_bs21_rx_cntvaluein(rxtx_bs_rx_cntvaluein[21]),
      .rxtx_bs21_rx_cntvalueout(rxtx_bs_rx_cntvalueout[21]),
      .rxtx_bs21_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[21]),
      .rxtx_bs21_rx_inc_in(rxtx_bs_rx_inc_in[21]),
      .rxtx_bs21_rx_load_in(rxtx_bs_rx_load_in[21]),
   
   // Tristate signals
      .rxtx_bs21_tx_t_in(rxtx_bs_tx_t_in[21]),
      .rxtx_bs21_tx_t_out(rxtx_bs_tx_t_out[21]),
   
   // TX Delay Signals
      .rxtx_bs21_tx_ce_in(rxtx_bs_tx_ce_in[21]),
      .rxtx_bs21_tx_cntvaluein(rxtx_bs_tx_cntvaluein[21]),        
      .rxtx_bs21_tx_cntvalueout(rxtx_bs_tx_cntvalueout[21]),
      .rxtx_bs21_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[21]),
      .rxtx_bs21_tx_inc_in(rxtx_bs_tx_inc_in[21]),
      .rxtx_bs21_tx_load_in(rxtx_bs_tx_load_in[21]),
   
      .rxtx_bs21_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[21]),
      .rxtx_bs21_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[21]),
      .rxtx_bs21_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[21]),
      .rxtx_bs21_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[21]),
   
   // -----------------------------------------------------------------------
   // Bitslice22 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs22_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[22]),
      .rxtx_bs22_rx_datain(rxtx_bs_rx_datain[22]),
      .rxtx_bs22_O_tx_data_out(rxtx_bs_O_tx_data_out[22]),
      .rxtx_bs22_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[22]),
   
   // Fifo Signals
      .rxtx_bs22_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[22]),
      .rxtx_bs22_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[22]),
      .rxtx_bs22_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[22]),
   
   // RX Delay Signals
      .rxtx_bs22_rx_ce_in(rxtx_bs_rx_ce_in[22]),
      .rxtx_bs22_rx_cntvaluein(rxtx_bs_rx_cntvaluein[22]),
      .rxtx_bs22_rx_cntvalueout(rxtx_bs_rx_cntvalueout[22]),
      .rxtx_bs22_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[22]),
      .rxtx_bs22_rx_inc_in(rxtx_bs_rx_inc_in[22]),
      .rxtx_bs22_rx_load_in(rxtx_bs_rx_load_in[22]),
   
   // Tristate signals
      .rxtx_bs22_tx_t_in(rxtx_bs_tx_t_in[22]),
      .rxtx_bs22_tx_t_out(rxtx_bs_tx_t_out[22]),
   
   // TX Delay Signals
      .rxtx_bs22_tx_ce_in(rxtx_bs_tx_ce_in[22]),
      .rxtx_bs22_tx_cntvaluein(rxtx_bs_tx_cntvaluein[22]),        
      .rxtx_bs22_tx_cntvalueout(rxtx_bs_tx_cntvalueout[22]),
      .rxtx_bs22_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[22]),
      .rxtx_bs22_tx_inc_in(rxtx_bs_tx_inc_in[22]),
      .rxtx_bs22_tx_load_in(rxtx_bs_tx_load_in[22]),
   
      .rxtx_bs22_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[22]),
      .rxtx_bs22_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[22]),
      .rxtx_bs22_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[22]),
      .rxtx_bs22_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[22]),
   
   // -----------------------------------------------------------------------
   // Bitslice23 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs23_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[23]),
      .rxtx_bs23_rx_datain(rxtx_bs_rx_datain[23]),
      .rxtx_bs23_O_tx_data_out(rxtx_bs_O_tx_data_out[23]),
      .rxtx_bs23_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[23]),
   
   // Fifo Signals
      .rxtx_bs23_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[23]),
      .rxtx_bs23_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[23]),
      .rxtx_bs23_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[23]),
   
   // RX Delay Signals
      .rxtx_bs23_rx_ce_in(rxtx_bs_rx_ce_in[23]),
      .rxtx_bs23_rx_cntvaluein(rxtx_bs_rx_cntvaluein[23]),
      .rxtx_bs23_rx_cntvalueout(rxtx_bs_rx_cntvalueout[23]),
      .rxtx_bs23_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[23]),
      .rxtx_bs23_rx_inc_in(rxtx_bs_rx_inc_in[23]),
      .rxtx_bs23_rx_load_in(rxtx_bs_rx_load_in[23]),
   
   // Tristate signals
      .rxtx_bs23_tx_t_in(rxtx_bs_tx_t_in[23]),
      .rxtx_bs23_tx_t_out(rxtx_bs_tx_t_out[23]),
   
   // TX Delay Signals
      .rxtx_bs23_tx_ce_in(rxtx_bs_tx_ce_in[23]),
      .rxtx_bs23_tx_cntvaluein(rxtx_bs_tx_cntvaluein[23]),        
      .rxtx_bs23_tx_cntvalueout(rxtx_bs_tx_cntvalueout[23]),
      .rxtx_bs23_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[23]),
      .rxtx_bs23_tx_inc_in(rxtx_bs_tx_inc_in[23]),
      .rxtx_bs23_tx_load_in(rxtx_bs_tx_load_in[23]),
   
      .rxtx_bs23_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[23]),
      .rxtx_bs23_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[23]),
      .rxtx_bs23_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[23]),
      .rxtx_bs23_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[23]),
   
   // -----------------------------------------------------------------------
   // Bitslice24 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs24_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[24]),
      .rxtx_bs24_rx_datain(rxtx_bs_rx_datain[24]),
      .rxtx_bs24_O_tx_data_out(rxtx_bs_O_tx_data_out[24]),
      .rxtx_bs24_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[24]),
   
   // Fifo Signals
      .rxtx_bs24_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[24]),
      .rxtx_bs24_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[24]),
      .rxtx_bs24_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[24]),
   
   // RX Delay Signals
      .rxtx_bs24_rx_ce_in(rxtx_bs_rx_ce_in[24]),
      .rxtx_bs24_rx_cntvaluein(rxtx_bs_rx_cntvaluein[24]),
      .rxtx_bs24_rx_cntvalueout(rxtx_bs_rx_cntvalueout[24]),
      .rxtx_bs24_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[24]),
      .rxtx_bs24_rx_inc_in(rxtx_bs_rx_inc_in[24]),
      .rxtx_bs24_rx_load_in(rxtx_bs_rx_load_in[24]),
   
   // Tristate signals
      .rxtx_bs24_tx_t_in(rxtx_bs_tx_t_in[24]),
      .rxtx_bs24_tx_t_out(rxtx_bs_tx_t_out[24]),
   
   // TX Delay Signals
      .rxtx_bs24_tx_ce_in(rxtx_bs_tx_ce_in[24]),
      .rxtx_bs24_tx_cntvaluein(rxtx_bs_tx_cntvaluein[24]),        
      .rxtx_bs24_tx_cntvalueout(rxtx_bs_tx_cntvalueout[24]),
      .rxtx_bs24_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[24]),
      .rxtx_bs24_tx_inc_in(rxtx_bs_tx_inc_in[24]),
      .rxtx_bs24_tx_load_in(rxtx_bs_tx_load_in[24]),
   
      .rxtx_bs24_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[24]),
      .rxtx_bs24_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[24]),
      .rxtx_bs24_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[24]),
      .rxtx_bs24_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[24]),
   
   // -----------------------------------------------------------------------
   // Bitslice25 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs25_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[25]),
      .rxtx_bs25_rx_datain(rxtx_bs_rx_datain[25]),
      .rxtx_bs25_O_tx_data_out(rxtx_bs_O_tx_data_out[25]),
      .rxtx_bs25_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[25]),
   
   // Fifo Signals
      .rxtx_bs25_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[25]),
      .rxtx_bs25_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[25]),
      .rxtx_bs25_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[25]),
   
   // RX Delay Signals
      .rxtx_bs25_rx_ce_in(rxtx_bs_rx_ce_in[25]),
      .rxtx_bs25_rx_cntvaluein(rxtx_bs_rx_cntvaluein[25]),
      .rxtx_bs25_rx_cntvalueout(rxtx_bs_rx_cntvalueout[25]),
      .rxtx_bs25_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[25]),
      .rxtx_bs25_rx_inc_in(rxtx_bs_rx_inc_in[25]),
      .rxtx_bs25_rx_load_in(rxtx_bs_rx_load_in[25]),
   
   // Tristate signals
      .rxtx_bs25_tx_t_in(rxtx_bs_tx_t_in[25]),
      .rxtx_bs25_tx_t_out(rxtx_bs_tx_t_out[25]),
   
   // TX Delay Signals
      .rxtx_bs25_tx_ce_in(rxtx_bs_tx_ce_in[25]),
      .rxtx_bs25_tx_cntvaluein(rxtx_bs_tx_cntvaluein[25]),        
      .rxtx_bs25_tx_cntvalueout(rxtx_bs_tx_cntvalueout[25]),
      .rxtx_bs25_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[25]),
      .rxtx_bs25_tx_inc_in(rxtx_bs_tx_inc_in[25]),
      .rxtx_bs25_tx_load_in(rxtx_bs_tx_load_in[25]),
   
      .rxtx_bs25_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[25]),
      .rxtx_bs25_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[25]),
      .rxtx_bs25_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[25]),
      .rxtx_bs25_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[25]),
   
   // -----------------------------------------------------------------------
   // Bitslice26 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs26_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[26]),
      .rxtx_bs26_rx_datain(rxtx_bs_rx_datain[26]),
      .rxtx_bs26_O_tx_data_out(rxtx_bs_O_tx_data_out[26]),
      .rxtx_bs26_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[26]),
   
   // Fifo Signals
      .rxtx_bs26_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[26]),
      .rxtx_bs26_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[26]),
      .rxtx_bs26_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[26]),
   
   // RX Delay Signals
      .rxtx_bs26_rx_ce_in(rxtx_bs_rx_ce_in[26]),
      .rxtx_bs26_rx_cntvaluein(rxtx_bs_rx_cntvaluein[26]),
      .rxtx_bs26_rx_cntvalueout(rxtx_bs_rx_cntvalueout[26]),
      .rxtx_bs26_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[26]),
      .rxtx_bs26_rx_inc_in(rxtx_bs_rx_inc_in[26]),
      .rxtx_bs26_rx_load_in(rxtx_bs_rx_load_in[26]),
   
   // Tristate signals
      .rxtx_bs26_tx_t_in(rxtx_bs_tx_t_in[26]),
      .rxtx_bs26_tx_t_out(rxtx_bs_tx_t_out[26]),
   
   // TX Delay Signals
      .rxtx_bs26_tx_ce_in(rxtx_bs_tx_ce_in[26]),
      .rxtx_bs26_tx_cntvaluein(rxtx_bs_tx_cntvaluein[26]),        
      .rxtx_bs26_tx_cntvalueout(rxtx_bs_tx_cntvalueout[26]),
      .rxtx_bs26_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[26]),
      .rxtx_bs26_tx_inc_in(rxtx_bs_tx_inc_in[26]),
      .rxtx_bs26_tx_load_in(rxtx_bs_tx_load_in[26]),
   
      .rxtx_bs26_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[26]),
      .rxtx_bs26_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[26]),
      .rxtx_bs26_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[26]),
      .rxtx_bs26_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[26]),
   
   // -----------------------------------------------------------------------
   // Bitslice27 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs27_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[27]),
      .rxtx_bs27_rx_datain(rxtx_bs_rx_datain[27]),
      .rxtx_bs27_O_tx_data_out(rxtx_bs_O_tx_data_out[27]),
      .rxtx_bs27_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[27]),
   
   // Fifo Signals
      .rxtx_bs27_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[27]),
      .rxtx_bs27_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[27]),
      .rxtx_bs27_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[27]),
   
   // RX Delay Signals
      .rxtx_bs27_rx_ce_in(rxtx_bs_rx_ce_in[27]),
      .rxtx_bs27_rx_cntvaluein(rxtx_bs_rx_cntvaluein[27]),
      .rxtx_bs27_rx_cntvalueout(rxtx_bs_rx_cntvalueout[27]),
      .rxtx_bs27_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[27]),
      .rxtx_bs27_rx_inc_in(rxtx_bs_rx_inc_in[27]),
      .rxtx_bs27_rx_load_in(rxtx_bs_rx_load_in[27]),
   
   // Tristate signals
      .rxtx_bs27_tx_t_in(rxtx_bs_tx_t_in[27]),
      .rxtx_bs27_tx_t_out(rxtx_bs_tx_t_out[27]),
   
   // TX Delay Signals
      .rxtx_bs27_tx_ce_in(rxtx_bs_tx_ce_in[27]),
      .rxtx_bs27_tx_cntvaluein(rxtx_bs_tx_cntvaluein[27]),        
      .rxtx_bs27_tx_cntvalueout(rxtx_bs_tx_cntvalueout[27]),
      .rxtx_bs27_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[27]),
      .rxtx_bs27_tx_inc_in(rxtx_bs_tx_inc_in[27]),
      .rxtx_bs27_tx_load_in(rxtx_bs_tx_load_in[27]),
   
      .rxtx_bs27_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[27]),
      .rxtx_bs27_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[27]),
      .rxtx_bs27_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[27]),
      .rxtx_bs27_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[27]),
   
   // -----------------------------------------------------------------------
   // Bitslice28 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs28_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[28]),
      .rxtx_bs28_rx_datain(rxtx_bs_rx_datain[28]),
      .rxtx_bs28_O_tx_data_out(rxtx_bs_O_tx_data_out[28]),
      .rxtx_bs28_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[28]),
   
   // Fifo Signals
      .rxtx_bs28_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[28]),
      .rxtx_bs28_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[28]),
      .rxtx_bs28_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[28]),
   
   // RX Delay Signals
      .rxtx_bs28_rx_ce_in(rxtx_bs_rx_ce_in[28]),
      .rxtx_bs28_rx_cntvaluein(rxtx_bs_rx_cntvaluein[28]),
      .rxtx_bs28_rx_cntvalueout(rxtx_bs_rx_cntvalueout[28]),
      .rxtx_bs28_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[28]),
      .rxtx_bs28_rx_inc_in(rxtx_bs_rx_inc_in[28]),
      .rxtx_bs28_rx_load_in(rxtx_bs_rx_load_in[28]),
   
   // Tristate signals
      .rxtx_bs28_tx_t_in(rxtx_bs_tx_t_in[28]),
      .rxtx_bs28_tx_t_out(rxtx_bs_tx_t_out[28]),
   
   // TX Delay Signals
      .rxtx_bs28_tx_ce_in(rxtx_bs_tx_ce_in[28]),
      .rxtx_bs28_tx_cntvaluein(rxtx_bs_tx_cntvaluein[28]),        
      .rxtx_bs28_tx_cntvalueout(rxtx_bs_tx_cntvalueout[28]),
      .rxtx_bs28_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[28]),
      .rxtx_bs28_tx_inc_in(rxtx_bs_tx_inc_in[28]),
      .rxtx_bs28_tx_load_in(rxtx_bs_tx_load_in[28]),
   
      .rxtx_bs28_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[28]),
      .rxtx_bs28_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[28]),
      .rxtx_bs28_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[28]),
      .rxtx_bs28_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[28]),
   
   // -----------------------------------------------------------------------
   // Bitslice29 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs29_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[29]),
      .rxtx_bs29_rx_datain(rxtx_bs_rx_datain[29]),
      .rxtx_bs29_O_tx_data_out(rxtx_bs_O_tx_data_out[29]),
      .rxtx_bs29_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[29]),
   
   // Fifo Signals
      .rxtx_bs29_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[29]),
      .rxtx_bs29_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[29]),
      .rxtx_bs29_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[29]),
   
   // RX Delay Signals
      .rxtx_bs29_rx_ce_in(rxtx_bs_rx_ce_in[29]),
      .rxtx_bs29_rx_cntvaluein(rxtx_bs_rx_cntvaluein[29]),
      .rxtx_bs29_rx_cntvalueout(rxtx_bs_rx_cntvalueout[29]),
      .rxtx_bs29_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[29]),
      .rxtx_bs29_rx_inc_in(rxtx_bs_rx_inc_in[29]),
      .rxtx_bs29_rx_load_in(rxtx_bs_rx_load_in[29]),
   
   // Tristate signals
      .rxtx_bs29_tx_t_in(rxtx_bs_tx_t_in[29]),
      .rxtx_bs29_tx_t_out(rxtx_bs_tx_t_out[29]),
   
   // TX Delay Signals
      .rxtx_bs29_tx_ce_in(rxtx_bs_tx_ce_in[29]),
      .rxtx_bs29_tx_cntvaluein(rxtx_bs_tx_cntvaluein[29]),        
      .rxtx_bs29_tx_cntvalueout(rxtx_bs_tx_cntvalueout[29]),
      .rxtx_bs29_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[29]),
      .rxtx_bs29_tx_inc_in(rxtx_bs_tx_inc_in[29]),
      .rxtx_bs29_tx_load_in(rxtx_bs_tx_load_in[29]),
   
      .rxtx_bs29_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[29]),
      .rxtx_bs29_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[29]),
      .rxtx_bs29_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[29]),
      .rxtx_bs29_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[29]),
   
   // -----------------------------------------------------------------------
   // Bitslice30 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs30_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[30]),
      .rxtx_bs30_rx_datain(rxtx_bs_rx_datain[30]),
      .rxtx_bs30_O_tx_data_out(rxtx_bs_O_tx_data_out[30]),
      .rxtx_bs30_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[30]),
   
   // Fifo Signals
      .rxtx_bs30_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[30]),
      .rxtx_bs30_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[30]),
      .rxtx_bs30_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[30]),
   
   // RX Delay Signals
      .rxtx_bs30_rx_ce_in(rxtx_bs_rx_ce_in[30]),
      .rxtx_bs30_rx_cntvaluein(rxtx_bs_rx_cntvaluein[30]),
      .rxtx_bs30_rx_cntvalueout(rxtx_bs_rx_cntvalueout[30]),
      .rxtx_bs30_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[30]),
      .rxtx_bs30_rx_inc_in(rxtx_bs_rx_inc_in[30]),
      .rxtx_bs30_rx_load_in(rxtx_bs_rx_load_in[30]),
   
   // Tristate signals
      .rxtx_bs30_tx_t_in(rxtx_bs_tx_t_in[30]),
      .rxtx_bs30_tx_t_out(rxtx_bs_tx_t_out[30]),
   
   // TX Delay Signals
      .rxtx_bs30_tx_ce_in(rxtx_bs_tx_ce_in[30]),
      .rxtx_bs30_tx_cntvaluein(rxtx_bs_tx_cntvaluein[30]),        
      .rxtx_bs30_tx_cntvalueout(rxtx_bs_tx_cntvalueout[30]),
      .rxtx_bs30_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[30]),
      .rxtx_bs30_tx_inc_in(rxtx_bs_tx_inc_in[30]),
      .rxtx_bs30_tx_load_in(rxtx_bs_tx_load_in[30]),
   
      .rxtx_bs30_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[30]),
      .rxtx_bs30_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[30]),
      .rxtx_bs30_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[30]),
      .rxtx_bs30_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[30]),
   
   // -----------------------------------------------------------------------
   // Bitslice31 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs31_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[31]),
      .rxtx_bs31_rx_datain(rxtx_bs_rx_datain[31]),
      .rxtx_bs31_O_tx_data_out(rxtx_bs_O_tx_data_out[31]),
      .rxtx_bs31_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[31]),
   
   // Fifo Signals
      .rxtx_bs31_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[31]),
      .rxtx_bs31_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[31]),
      .rxtx_bs31_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[31]),
   
   // RX Delay Signals
      .rxtx_bs31_rx_ce_in(rxtx_bs_rx_ce_in[31]),
      .rxtx_bs31_rx_cntvaluein(rxtx_bs_rx_cntvaluein[31]),
      .rxtx_bs31_rx_cntvalueout(rxtx_bs_rx_cntvalueout[31]),
      .rxtx_bs31_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[31]),
      .rxtx_bs31_rx_inc_in(rxtx_bs_rx_inc_in[31]),
      .rxtx_bs31_rx_load_in(rxtx_bs_rx_load_in[31]),
   
   // Tristate signals
      .rxtx_bs31_tx_t_in(rxtx_bs_tx_t_in[31]),
      .rxtx_bs31_tx_t_out(rxtx_bs_tx_t_out[31]),
   
   // TX Delay Signals
      .rxtx_bs31_tx_ce_in(rxtx_bs_tx_ce_in[31]),
      .rxtx_bs31_tx_cntvaluein(rxtx_bs_tx_cntvaluein[31]),        
      .rxtx_bs31_tx_cntvalueout(rxtx_bs_tx_cntvalueout[31]),
      .rxtx_bs31_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[31]),
      .rxtx_bs31_tx_inc_in(rxtx_bs_tx_inc_in[31]),
      .rxtx_bs31_tx_load_in(rxtx_bs_tx_load_in[31]),
   
      .rxtx_bs31_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[31]),
      .rxtx_bs31_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[31]),
      .rxtx_bs31_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[31]),
      .rxtx_bs31_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[31]),
   
   // -----------------------------------------------------------------------
   // Bitslice32 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs32_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[32]),
      .rxtx_bs32_rx_datain(rxtx_bs_rx_datain[32]),
      .rxtx_bs32_O_tx_data_out(rxtx_bs_O_tx_data_out[32]),
      .rxtx_bs32_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[32]),
   
   // Fifo Signals
      .rxtx_bs32_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[32]),
      .rxtx_bs32_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[32]),
      .rxtx_bs32_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[32]),
   
   // RX Delay Signals
      .rxtx_bs32_rx_ce_in(rxtx_bs_rx_ce_in[32]),
      .rxtx_bs32_rx_cntvaluein(rxtx_bs_rx_cntvaluein[32]),
      .rxtx_bs32_rx_cntvalueout(rxtx_bs_rx_cntvalueout[32]),
      .rxtx_bs32_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[32]),
      .rxtx_bs32_rx_inc_in(rxtx_bs_rx_inc_in[32]),
      .rxtx_bs32_rx_load_in(rxtx_bs_rx_load_in[32]),
   
   // Tristate signals
      .rxtx_bs32_tx_t_in(rxtx_bs_tx_t_in[32]),
      .rxtx_bs32_tx_t_out(rxtx_bs_tx_t_out[32]),
   
   // TX Delay Signals
      .rxtx_bs32_tx_ce_in(rxtx_bs_tx_ce_in[32]),
      .rxtx_bs32_tx_cntvaluein(rxtx_bs_tx_cntvaluein[32]),        
      .rxtx_bs32_tx_cntvalueout(rxtx_bs_tx_cntvalueout[32]),
      .rxtx_bs32_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[32]),
      .rxtx_bs32_tx_inc_in(rxtx_bs_tx_inc_in[32]),
      .rxtx_bs32_tx_load_in(rxtx_bs_tx_load_in[32]),
   
      .rxtx_bs32_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[32]),
      .rxtx_bs32_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[32]),
      .rxtx_bs32_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[32]),
      .rxtx_bs32_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[32]),
   
   // -----------------------------------------------------------------------
   // Bitslice33 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs33_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[33]),
      .rxtx_bs33_rx_datain(rxtx_bs_rx_datain[33]),
      .rxtx_bs33_O_tx_data_out(rxtx_bs_O_tx_data_out[33]),
      .rxtx_bs33_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[33]),
   
   // Fifo Signals
      .rxtx_bs33_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[33]),
      .rxtx_bs33_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[33]),
      .rxtx_bs33_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[33]),
   
   // RX Delay Signals
      .rxtx_bs33_rx_ce_in(rxtx_bs_rx_ce_in[33]),
      .rxtx_bs33_rx_cntvaluein(rxtx_bs_rx_cntvaluein[33]),
      .rxtx_bs33_rx_cntvalueout(rxtx_bs_rx_cntvalueout[33]),
      .rxtx_bs33_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[33]),
      .rxtx_bs33_rx_inc_in(rxtx_bs_rx_inc_in[33]),
      .rxtx_bs33_rx_load_in(rxtx_bs_rx_load_in[33]),
   
   // Tristate signals
      .rxtx_bs33_tx_t_in(rxtx_bs_tx_t_in[33]),
      .rxtx_bs33_tx_t_out(rxtx_bs_tx_t_out[33]),
   
   // TX Delay Signals
      .rxtx_bs33_tx_ce_in(rxtx_bs_tx_ce_in[33]),
      .rxtx_bs33_tx_cntvaluein(rxtx_bs_tx_cntvaluein[33]),        
      .rxtx_bs33_tx_cntvalueout(rxtx_bs_tx_cntvalueout[33]),
      .rxtx_bs33_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[33]),
      .rxtx_bs33_tx_inc_in(rxtx_bs_tx_inc_in[33]),
      .rxtx_bs33_tx_load_in(rxtx_bs_tx_load_in[33]),
   
      .rxtx_bs33_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[33]),
      .rxtx_bs33_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[33]),
      .rxtx_bs33_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[33]),
      .rxtx_bs33_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[33]),
   
   // -----------------------------------------------------------------------
   // Bitslice34 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs34_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[34]),
      .rxtx_bs34_rx_datain(rxtx_bs_rx_datain[34]),
      .rxtx_bs34_O_tx_data_out(rxtx_bs_O_tx_data_out[34]),
      .rxtx_bs34_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[34]),
   
   // Fifo Signals
      .rxtx_bs34_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[34]),
      .rxtx_bs34_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[34]),
      .rxtx_bs34_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[34]),
   
   // RX Delay Signals
      .rxtx_bs34_rx_ce_in(rxtx_bs_rx_ce_in[34]),
      .rxtx_bs34_rx_cntvaluein(rxtx_bs_rx_cntvaluein[34]),
      .rxtx_bs34_rx_cntvalueout(rxtx_bs_rx_cntvalueout[34]),
      .rxtx_bs34_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[34]),
      .rxtx_bs34_rx_inc_in(rxtx_bs_rx_inc_in[34]),
      .rxtx_bs34_rx_load_in(rxtx_bs_rx_load_in[34]),
   
   // Tristate signals
      .rxtx_bs34_tx_t_in(rxtx_bs_tx_t_in[34]),
      .rxtx_bs34_tx_t_out(rxtx_bs_tx_t_out[34]),
   
   // TX Delay Signals
      .rxtx_bs34_tx_ce_in(rxtx_bs_tx_ce_in[34]),
      .rxtx_bs34_tx_cntvaluein(rxtx_bs_tx_cntvaluein[34]),        
      .rxtx_bs34_tx_cntvalueout(rxtx_bs_tx_cntvalueout[34]),
      .rxtx_bs34_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[34]),
      .rxtx_bs34_tx_inc_in(rxtx_bs_tx_inc_in[34]),
      .rxtx_bs34_tx_load_in(rxtx_bs_tx_load_in[34]),
   
      .rxtx_bs34_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[34]),
      .rxtx_bs34_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[34]),
      .rxtx_bs34_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[34]),
      .rxtx_bs34_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[34]),
   
   // -----------------------------------------------------------------------
   // Bitslice35 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs35_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[35]),
      .rxtx_bs35_rx_datain(rxtx_bs_rx_datain[35]),
      .rxtx_bs35_O_tx_data_out(rxtx_bs_O_tx_data_out[35]),
      .rxtx_bs35_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[35]),
   
   // Fifo Signals
      .rxtx_bs35_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[35]),
      .rxtx_bs35_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[35]),
      .rxtx_bs35_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[35]),
   
   // RX Delay Signals
      .rxtx_bs35_rx_ce_in(rxtx_bs_rx_ce_in[35]),
      .rxtx_bs35_rx_cntvaluein(rxtx_bs_rx_cntvaluein[35]),
      .rxtx_bs35_rx_cntvalueout(rxtx_bs_rx_cntvalueout[35]),
      .rxtx_bs35_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[35]),
      .rxtx_bs35_rx_inc_in(rxtx_bs_rx_inc_in[35]),
      .rxtx_bs35_rx_load_in(rxtx_bs_rx_load_in[35]),
   
   // Tristate signals
      .rxtx_bs35_tx_t_in(rxtx_bs_tx_t_in[35]),
      .rxtx_bs35_tx_t_out(rxtx_bs_tx_t_out[35]),
   
   // TX Delay Signals
      .rxtx_bs35_tx_ce_in(rxtx_bs_tx_ce_in[35]),
      .rxtx_bs35_tx_cntvaluein(rxtx_bs_tx_cntvaluein[35]),        
      .rxtx_bs35_tx_cntvalueout(rxtx_bs_tx_cntvalueout[35]),
      .rxtx_bs35_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[35]),
      .rxtx_bs35_tx_inc_in(rxtx_bs_tx_inc_in[35]),
      .rxtx_bs35_tx_load_in(rxtx_bs_tx_load_in[35]),
   
      .rxtx_bs35_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[35]),
      .rxtx_bs35_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[35]),
      .rxtx_bs35_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[35]),
      .rxtx_bs35_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[35]),
   
   // -----------------------------------------------------------------------
   // Bitslice36 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs36_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[36]),
      .rxtx_bs36_rx_datain(rxtx_bs_rx_datain[36]),
      .rxtx_bs36_O_tx_data_out(rxtx_bs_O_tx_data_out[36]),
      .rxtx_bs36_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[36]),
   
   // Fifo Signals
      .rxtx_bs36_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[36]),
      .rxtx_bs36_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[36]),
      .rxtx_bs36_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[36]),
   
   // RX Delay Signals
      .rxtx_bs36_rx_ce_in(rxtx_bs_rx_ce_in[36]),
      .rxtx_bs36_rx_cntvaluein(rxtx_bs_rx_cntvaluein[36]),
      .rxtx_bs36_rx_cntvalueout(rxtx_bs_rx_cntvalueout[36]),
      .rxtx_bs36_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[36]),
      .rxtx_bs36_rx_inc_in(rxtx_bs_rx_inc_in[36]),
      .rxtx_bs36_rx_load_in(rxtx_bs_rx_load_in[36]),
   
   // Tristate signals
      .rxtx_bs36_tx_t_in(rxtx_bs_tx_t_in[36]),
      .rxtx_bs36_tx_t_out(rxtx_bs_tx_t_out[36]),
   
   // TX Delay Signals
      .rxtx_bs36_tx_ce_in(rxtx_bs_tx_ce_in[36]),
      .rxtx_bs36_tx_cntvaluein(rxtx_bs_tx_cntvaluein[36]),        
      .rxtx_bs36_tx_cntvalueout(rxtx_bs_tx_cntvalueout[36]),
      .rxtx_bs36_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[36]),
      .rxtx_bs36_tx_inc_in(rxtx_bs_tx_inc_in[36]),
      .rxtx_bs36_tx_load_in(rxtx_bs_tx_load_in[36]),
   
      .rxtx_bs36_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[36]),
      .rxtx_bs36_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[36]),
      .rxtx_bs36_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[36]),
      .rxtx_bs36_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[36]),
   
   // -----------------------------------------------------------------------
   // Bitslice37 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs37_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[37]),
      .rxtx_bs37_rx_datain(rxtx_bs_rx_datain[37]),
      .rxtx_bs37_O_tx_data_out(rxtx_bs_O_tx_data_out[37]),
      .rxtx_bs37_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[37]),
   
   // Fifo Signals
      .rxtx_bs37_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[37]),
      .rxtx_bs37_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[37]),
      .rxtx_bs37_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[37]),
   
   // RX Delay Signals
      .rxtx_bs37_rx_ce_in(rxtx_bs_rx_ce_in[37]),
      .rxtx_bs37_rx_cntvaluein(rxtx_bs_rx_cntvaluein[37]),
      .rxtx_bs37_rx_cntvalueout(rxtx_bs_rx_cntvalueout[37]),
      .rxtx_bs37_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[37]),
      .rxtx_bs37_rx_inc_in(rxtx_bs_rx_inc_in[37]),
      .rxtx_bs37_rx_load_in(rxtx_bs_rx_load_in[37]),
   
   // Tristate signals
      .rxtx_bs37_tx_t_in(rxtx_bs_tx_t_in[37]),
      .rxtx_bs37_tx_t_out(rxtx_bs_tx_t_out[37]),
   
   // TX Delay Signals
      .rxtx_bs37_tx_ce_in(rxtx_bs_tx_ce_in[37]),
      .rxtx_bs37_tx_cntvaluein(rxtx_bs_tx_cntvaluein[37]),        
      .rxtx_bs37_tx_cntvalueout(rxtx_bs_tx_cntvalueout[37]),
      .rxtx_bs37_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[37]),
      .rxtx_bs37_tx_inc_in(rxtx_bs_tx_inc_in[37]),
      .rxtx_bs37_tx_load_in(rxtx_bs_tx_load_in[37]),
   
      .rxtx_bs37_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[37]),
      .rxtx_bs37_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[37]),
      .rxtx_bs37_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[37]),
      .rxtx_bs37_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[37]),
   
   // -----------------------------------------------------------------------
   // Bitslice38 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs38_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[38]),
      .rxtx_bs38_rx_datain(rxtx_bs_rx_datain[38]),
      .rxtx_bs38_O_tx_data_out(rxtx_bs_O_tx_data_out[38]),
      .rxtx_bs38_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[38]),
   
   // Fifo Signals
      .rxtx_bs38_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[38]),
      .rxtx_bs38_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[38]),
      .rxtx_bs38_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[38]),
   
   // RX Delay Signals
      .rxtx_bs38_rx_ce_in(rxtx_bs_rx_ce_in[38]),
      .rxtx_bs38_rx_cntvaluein(rxtx_bs_rx_cntvaluein[38]),
      .rxtx_bs38_rx_cntvalueout(rxtx_bs_rx_cntvalueout[38]),
      .rxtx_bs38_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[38]),
      .rxtx_bs38_rx_inc_in(rxtx_bs_rx_inc_in[38]),
      .rxtx_bs38_rx_load_in(rxtx_bs_rx_load_in[38]),
   
   // Tristate signals
      .rxtx_bs38_tx_t_in(rxtx_bs_tx_t_in[38]),
      .rxtx_bs38_tx_t_out(rxtx_bs_tx_t_out[38]),
   
   // TX Delay Signals
      .rxtx_bs38_tx_ce_in(rxtx_bs_tx_ce_in[38]),
      .rxtx_bs38_tx_cntvaluein(rxtx_bs_tx_cntvaluein[38]),        
      .rxtx_bs38_tx_cntvalueout(rxtx_bs_tx_cntvalueout[38]),
      .rxtx_bs38_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[38]),
      .rxtx_bs38_tx_inc_in(rxtx_bs_tx_inc_in[38]),
      .rxtx_bs38_tx_load_in(rxtx_bs_tx_load_in[38]),
   
      .rxtx_bs38_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[38]),
      .rxtx_bs38_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[38]),
      .rxtx_bs38_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[38]),
      .rxtx_bs38_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[38]),
   
   // -----------------------------------------------------------------------
   // Bitslice39 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs39_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[39]),
      .rxtx_bs39_rx_datain(rxtx_bs_rx_datain[39]),
      .rxtx_bs39_O_tx_data_out(rxtx_bs_O_tx_data_out[39]),
      .rxtx_bs39_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[39]),
   
   // Fifo Signals
      .rxtx_bs39_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[39]),
      .rxtx_bs39_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[39]),
      .rxtx_bs39_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[39]),
   
   // RX Delay Signals
      .rxtx_bs39_rx_ce_in(rxtx_bs_rx_ce_in[39]),
      .rxtx_bs39_rx_cntvaluein(rxtx_bs_rx_cntvaluein[39]),
      .rxtx_bs39_rx_cntvalueout(rxtx_bs_rx_cntvalueout[39]),
      .rxtx_bs39_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[39]),
      .rxtx_bs39_rx_inc_in(rxtx_bs_rx_inc_in[39]),
      .rxtx_bs39_rx_load_in(rxtx_bs_rx_load_in[39]),
   
   // Tristate signals
      .rxtx_bs39_tx_t_in(rxtx_bs_tx_t_in[39]),
      .rxtx_bs39_tx_t_out(rxtx_bs_tx_t_out[39]),
   
   // TX Delay Signals
      .rxtx_bs39_tx_ce_in(rxtx_bs_tx_ce_in[39]),
      .rxtx_bs39_tx_cntvaluein(rxtx_bs_tx_cntvaluein[39]),        
      .rxtx_bs39_tx_cntvalueout(rxtx_bs_tx_cntvalueout[39]),
      .rxtx_bs39_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[39]),
      .rxtx_bs39_tx_inc_in(rxtx_bs_tx_inc_in[39]),
      .rxtx_bs39_tx_load_in(rxtx_bs_tx_load_in[39]),
   
      .rxtx_bs39_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[39]),
      .rxtx_bs39_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[39]),
      .rxtx_bs39_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[39]),
      .rxtx_bs39_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[39]),
   
   // -----------------------------------------------------------------------
   // Bitslice40 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs40_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[40]),
      .rxtx_bs40_rx_datain(rxtx_bs_rx_datain[40]),
      .rxtx_bs40_O_tx_data_out(rxtx_bs_O_tx_data_out[40]),
      .rxtx_bs40_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[40]),
   
   // Fifo Signals
      .rxtx_bs40_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[40]),
      .rxtx_bs40_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[40]),
      .rxtx_bs40_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[40]),
   
   // RX Delay Signals
      .rxtx_bs40_rx_ce_in(rxtx_bs_rx_ce_in[40]),
      .rxtx_bs40_rx_cntvaluein(rxtx_bs_rx_cntvaluein[40]),
      .rxtx_bs40_rx_cntvalueout(rxtx_bs_rx_cntvalueout[40]),
      .rxtx_bs40_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[40]),
      .rxtx_bs40_rx_inc_in(rxtx_bs_rx_inc_in[40]),
      .rxtx_bs40_rx_load_in(rxtx_bs_rx_load_in[40]),
   
   // Tristate signals
      .rxtx_bs40_tx_t_in(rxtx_bs_tx_t_in[40]),
      .rxtx_bs40_tx_t_out(rxtx_bs_tx_t_out[40]),
   
   // TX Delay Signals
      .rxtx_bs40_tx_ce_in(rxtx_bs_tx_ce_in[40]),
      .rxtx_bs40_tx_cntvaluein(rxtx_bs_tx_cntvaluein[40]),        
      .rxtx_bs40_tx_cntvalueout(rxtx_bs_tx_cntvalueout[40]),
      .rxtx_bs40_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[40]),
      .rxtx_bs40_tx_inc_in(rxtx_bs_tx_inc_in[40]),
      .rxtx_bs40_tx_load_in(rxtx_bs_tx_load_in[40]),
   
      .rxtx_bs40_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[40]),
      .rxtx_bs40_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[40]),
      .rxtx_bs40_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[40]),
      .rxtx_bs40_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[40]),
   
   // -----------------------------------------------------------------------
   // Bitslice41 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs41_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[41]),
      .rxtx_bs41_rx_datain(rxtx_bs_rx_datain[41]),
      .rxtx_bs41_O_tx_data_out(rxtx_bs_O_tx_data_out[41]),
      .rxtx_bs41_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[41]),
   
   // Fifo Signals
      .rxtx_bs41_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[41]),
      .rxtx_bs41_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[41]),
      .rxtx_bs41_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[41]),
   
   // RX Delay Signals
      .rxtx_bs41_rx_ce_in(rxtx_bs_rx_ce_in[41]),
      .rxtx_bs41_rx_cntvaluein(rxtx_bs_rx_cntvaluein[41]),
      .rxtx_bs41_rx_cntvalueout(rxtx_bs_rx_cntvalueout[41]),
      .rxtx_bs41_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[41]),
      .rxtx_bs41_rx_inc_in(rxtx_bs_rx_inc_in[41]),
      .rxtx_bs41_rx_load_in(rxtx_bs_rx_load_in[41]),
   
   // Tristate signals
      .rxtx_bs41_tx_t_in(rxtx_bs_tx_t_in[41]),
      .rxtx_bs41_tx_t_out(rxtx_bs_tx_t_out[41]),
   
   // TX Delay Signals
      .rxtx_bs41_tx_ce_in(rxtx_bs_tx_ce_in[41]),
      .rxtx_bs41_tx_cntvaluein(rxtx_bs_tx_cntvaluein[41]),        
      .rxtx_bs41_tx_cntvalueout(rxtx_bs_tx_cntvalueout[41]),
      .rxtx_bs41_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[41]),
      .rxtx_bs41_tx_inc_in(rxtx_bs_tx_inc_in[41]),
      .rxtx_bs41_tx_load_in(rxtx_bs_tx_load_in[41]),
   
      .rxtx_bs41_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[41]),
      .rxtx_bs41_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[41]),
      .rxtx_bs41_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[41]),
      .rxtx_bs41_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[41]),
   
   // -----------------------------------------------------------------------
   // Bitslice42 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs42_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[42]),
      .rxtx_bs42_rx_datain(rxtx_bs_rx_datain[42]),
      .rxtx_bs42_O_tx_data_out(rxtx_bs_O_tx_data_out[42]),
      .rxtx_bs42_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[42]),
   
   // Fifo Signals
      .rxtx_bs42_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[42]),
      .rxtx_bs42_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[42]),
      .rxtx_bs42_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[42]),
   
   // RX Delay Signals
      .rxtx_bs42_rx_ce_in(rxtx_bs_rx_ce_in[42]),
      .rxtx_bs42_rx_cntvaluein(rxtx_bs_rx_cntvaluein[42]),
      .rxtx_bs42_rx_cntvalueout(rxtx_bs_rx_cntvalueout[42]),
      .rxtx_bs42_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[42]),
      .rxtx_bs42_rx_inc_in(rxtx_bs_rx_inc_in[42]),
      .rxtx_bs42_rx_load_in(rxtx_bs_rx_load_in[42]),
   
   // Tristate signals
      .rxtx_bs42_tx_t_in(rxtx_bs_tx_t_in[42]),
      .rxtx_bs42_tx_t_out(rxtx_bs_tx_t_out[42]),
   
   // TX Delay Signals
      .rxtx_bs42_tx_ce_in(rxtx_bs_tx_ce_in[42]),
      .rxtx_bs42_tx_cntvaluein(rxtx_bs_tx_cntvaluein[42]),        
      .rxtx_bs42_tx_cntvalueout(rxtx_bs_tx_cntvalueout[42]),
      .rxtx_bs42_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[42]),
      .rxtx_bs42_tx_inc_in(rxtx_bs_tx_inc_in[42]),
      .rxtx_bs42_tx_load_in(rxtx_bs_tx_load_in[42]),
   
      .rxtx_bs42_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[42]),
      .rxtx_bs42_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[42]),
      .rxtx_bs42_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[42]),
      .rxtx_bs42_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[42]),
   
   // -----------------------------------------------------------------------
   // Bitslice43 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs43_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[43]),
      .rxtx_bs43_rx_datain(rxtx_bs_rx_datain[43]),
      .rxtx_bs43_O_tx_data_out(rxtx_bs_O_tx_data_out[43]),
      .rxtx_bs43_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[43]),
   
   // Fifo Signals
      .rxtx_bs43_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[43]),
      .rxtx_bs43_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[43]),
      .rxtx_bs43_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[43]),
   
   // RX Delay Signals
      .rxtx_bs43_rx_ce_in(rxtx_bs_rx_ce_in[43]),
      .rxtx_bs43_rx_cntvaluein(rxtx_bs_rx_cntvaluein[43]),
      .rxtx_bs43_rx_cntvalueout(rxtx_bs_rx_cntvalueout[43]),
      .rxtx_bs43_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[43]),
      .rxtx_bs43_rx_inc_in(rxtx_bs_rx_inc_in[43]),
      .rxtx_bs43_rx_load_in(rxtx_bs_rx_load_in[43]),
   
   // Tristate signals
      .rxtx_bs43_tx_t_in(rxtx_bs_tx_t_in[43]),
      .rxtx_bs43_tx_t_out(rxtx_bs_tx_t_out[43]),
   
   // TX Delay Signals
      .rxtx_bs43_tx_ce_in(rxtx_bs_tx_ce_in[43]),
      .rxtx_bs43_tx_cntvaluein(rxtx_bs_tx_cntvaluein[43]),        
      .rxtx_bs43_tx_cntvalueout(rxtx_bs_tx_cntvalueout[43]),
      .rxtx_bs43_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[43]),
      .rxtx_bs43_tx_inc_in(rxtx_bs_tx_inc_in[43]),
      .rxtx_bs43_tx_load_in(rxtx_bs_tx_load_in[43]),
   
      .rxtx_bs43_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[43]),
      .rxtx_bs43_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[43]),
      .rxtx_bs43_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[43]),
      .rxtx_bs43_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[43]),
   
   // -----------------------------------------------------------------------
   // Bitslice44 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs44_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[44]),
      .rxtx_bs44_rx_datain(rxtx_bs_rx_datain[44]),
      .rxtx_bs44_O_tx_data_out(rxtx_bs_O_tx_data_out[44]),
      .rxtx_bs44_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[44]),
   
   // Fifo Signals
      .rxtx_bs44_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[44]),
      .rxtx_bs44_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[44]),
      .rxtx_bs44_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[44]),
   
   // RX Delay Signals
      .rxtx_bs44_rx_ce_in(rxtx_bs_rx_ce_in[44]),
      .rxtx_bs44_rx_cntvaluein(rxtx_bs_rx_cntvaluein[44]),
      .rxtx_bs44_rx_cntvalueout(rxtx_bs_rx_cntvalueout[44]),
      .rxtx_bs44_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[44]),
      .rxtx_bs44_rx_inc_in(rxtx_bs_rx_inc_in[44]),
      .rxtx_bs44_rx_load_in(rxtx_bs_rx_load_in[44]),
   
   // Tristate signals
      .rxtx_bs44_tx_t_in(rxtx_bs_tx_t_in[44]),
      .rxtx_bs44_tx_t_out(rxtx_bs_tx_t_out[44]),
   
   // TX Delay Signals
      .rxtx_bs44_tx_ce_in(rxtx_bs_tx_ce_in[44]),
      .rxtx_bs44_tx_cntvaluein(rxtx_bs_tx_cntvaluein[44]),        
      .rxtx_bs44_tx_cntvalueout(rxtx_bs_tx_cntvalueout[44]),
      .rxtx_bs44_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[44]),
      .rxtx_bs44_tx_inc_in(rxtx_bs_tx_inc_in[44]),
      .rxtx_bs44_tx_load_in(rxtx_bs_tx_load_in[44]),
   
      .rxtx_bs44_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[44]),
      .rxtx_bs44_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[44]),
      .rxtx_bs44_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[44]),
      .rxtx_bs44_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[44]),
   
   // -----------------------------------------------------------------------
   // Bitslice45 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs45_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[45]),
      .rxtx_bs45_rx_datain(rxtx_bs_rx_datain[45]),
      .rxtx_bs45_O_tx_data_out(rxtx_bs_O_tx_data_out[45]),
      .rxtx_bs45_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[45]),
   
   // Fifo Signals
      .rxtx_bs45_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[45]),
      .rxtx_bs45_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[45]),
      .rxtx_bs45_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[45]),
   
   // RX Delay Signals
      .rxtx_bs45_rx_ce_in(rxtx_bs_rx_ce_in[45]),
      .rxtx_bs45_rx_cntvaluein(rxtx_bs_rx_cntvaluein[45]),
      .rxtx_bs45_rx_cntvalueout(rxtx_bs_rx_cntvalueout[45]),
      .rxtx_bs45_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[45]),
      .rxtx_bs45_rx_inc_in(rxtx_bs_rx_inc_in[45]),
      .rxtx_bs45_rx_load_in(rxtx_bs_rx_load_in[45]),
   
   // Tristate signals
      .rxtx_bs45_tx_t_in(rxtx_bs_tx_t_in[45]),
      .rxtx_bs45_tx_t_out(rxtx_bs_tx_t_out[45]),
   
   // TX Delay Signals
      .rxtx_bs45_tx_ce_in(rxtx_bs_tx_ce_in[45]),
      .rxtx_bs45_tx_cntvaluein(rxtx_bs_tx_cntvaluein[45]),        
      .rxtx_bs45_tx_cntvalueout(rxtx_bs_tx_cntvalueout[45]),
      .rxtx_bs45_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[45]),
      .rxtx_bs45_tx_inc_in(rxtx_bs_tx_inc_in[45]),
      .rxtx_bs45_tx_load_in(rxtx_bs_tx_load_in[45]),
   
      .rxtx_bs45_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[45]),
      .rxtx_bs45_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[45]),
      .rxtx_bs45_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[45]),
      .rxtx_bs45_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[45]),
   
   // -----------------------------------------------------------------------
   // Bitslice46 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs46_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[46]),
      .rxtx_bs46_rx_datain(rxtx_bs_rx_datain[46]),
      .rxtx_bs46_O_tx_data_out(rxtx_bs_O_tx_data_out[46]),
      .rxtx_bs46_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[46]),
   
   // Fifo Signals
      .rxtx_bs46_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[46]),
      .rxtx_bs46_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[46]),
      .rxtx_bs46_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[46]),
   
   // RX Delay Signals
      .rxtx_bs46_rx_ce_in(rxtx_bs_rx_ce_in[46]),
      .rxtx_bs46_rx_cntvaluein(rxtx_bs_rx_cntvaluein[46]),
      .rxtx_bs46_rx_cntvalueout(rxtx_bs_rx_cntvalueout[46]),
      .rxtx_bs46_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[46]),
      .rxtx_bs46_rx_inc_in(rxtx_bs_rx_inc_in[46]),
      .rxtx_bs46_rx_load_in(rxtx_bs_rx_load_in[46]),
   
   // Tristate signals
      .rxtx_bs46_tx_t_in(rxtx_bs_tx_t_in[46]),
      .rxtx_bs46_tx_t_out(rxtx_bs_tx_t_out[46]),
   
   // TX Delay Signals
      .rxtx_bs46_tx_ce_in(rxtx_bs_tx_ce_in[46]),
      .rxtx_bs46_tx_cntvaluein(rxtx_bs_tx_cntvaluein[46]),        
      .rxtx_bs46_tx_cntvalueout(rxtx_bs_tx_cntvalueout[46]),
      .rxtx_bs46_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[46]),
      .rxtx_bs46_tx_inc_in(rxtx_bs_tx_inc_in[46]),
      .rxtx_bs46_tx_load_in(rxtx_bs_tx_load_in[46]),
   
      .rxtx_bs46_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[46]),
      .rxtx_bs46_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[46]),
      .rxtx_bs46_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[46]),
      .rxtx_bs46_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[46]),
   
   // -----------------------------------------------------------------------
   // Bitslice47 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs47_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[47]),
      .rxtx_bs47_rx_datain(rxtx_bs_rx_datain[47]),
      .rxtx_bs47_O_tx_data_out(rxtx_bs_O_tx_data_out[47]),
      .rxtx_bs47_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[47]),
   
   // Fifo Signals
      .rxtx_bs47_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[47]),
      .rxtx_bs47_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[47]),
      .rxtx_bs47_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[47]),
   
   // RX Delay Signals
      .rxtx_bs47_rx_ce_in(rxtx_bs_rx_ce_in[47]),
      .rxtx_bs47_rx_cntvaluein(rxtx_bs_rx_cntvaluein[47]),
      .rxtx_bs47_rx_cntvalueout(rxtx_bs_rx_cntvalueout[47]),
      .rxtx_bs47_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[47]),
      .rxtx_bs47_rx_inc_in(rxtx_bs_rx_inc_in[47]),
      .rxtx_bs47_rx_load_in(rxtx_bs_rx_load_in[47]),
   
   // Tristate signals
      .rxtx_bs47_tx_t_in(rxtx_bs_tx_t_in[47]),
      .rxtx_bs47_tx_t_out(rxtx_bs_tx_t_out[47]),
   
   // TX Delay Signals
      .rxtx_bs47_tx_ce_in(rxtx_bs_tx_ce_in[47]),
      .rxtx_bs47_tx_cntvaluein(rxtx_bs_tx_cntvaluein[47]),        
      .rxtx_bs47_tx_cntvalueout(rxtx_bs_tx_cntvalueout[47]),
      .rxtx_bs47_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[47]),
      .rxtx_bs47_tx_inc_in(rxtx_bs_tx_inc_in[47]),
      .rxtx_bs47_tx_load_in(rxtx_bs_tx_load_in[47]),
   
      .rxtx_bs47_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[47]),
      .rxtx_bs47_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[47]),
      .rxtx_bs47_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[47]),
      .rxtx_bs47_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[47]),
   
   // -----------------------------------------------------------------------
   // Bitslice48 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs48_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[48]),
      .rxtx_bs48_rx_datain(rxtx_bs_rx_datain[48]),
      .rxtx_bs48_O_tx_data_out(rxtx_bs_O_tx_data_out[48]),
      .rxtx_bs48_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[48]),
   
   // Fifo Signals
      .rxtx_bs48_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[48]),
      .rxtx_bs48_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[48]),
      .rxtx_bs48_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[48]),
   
   // RX Delay Signals
      .rxtx_bs48_rx_ce_in(rxtx_bs_rx_ce_in[48]),
      .rxtx_bs48_rx_cntvaluein(rxtx_bs_rx_cntvaluein[48]),
      .rxtx_bs48_rx_cntvalueout(rxtx_bs_rx_cntvalueout[48]),
      .rxtx_bs48_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[48]),
      .rxtx_bs48_rx_inc_in(rxtx_bs_rx_inc_in[48]),
      .rxtx_bs48_rx_load_in(rxtx_bs_rx_load_in[48]),
   
   // Tristate signals
      .rxtx_bs48_tx_t_in(rxtx_bs_tx_t_in[48]),
      .rxtx_bs48_tx_t_out(rxtx_bs_tx_t_out[48]),
   
   // TX Delay Signals
      .rxtx_bs48_tx_ce_in(rxtx_bs_tx_ce_in[48]),
      .rxtx_bs48_tx_cntvaluein(rxtx_bs_tx_cntvaluein[48]),        
      .rxtx_bs48_tx_cntvalueout(rxtx_bs_tx_cntvalueout[48]),
      .rxtx_bs48_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[48]),
      .rxtx_bs48_tx_inc_in(rxtx_bs_tx_inc_in[48]),
      .rxtx_bs48_tx_load_in(rxtx_bs_tx_load_in[48]),
   
      .rxtx_bs48_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[48]),
      .rxtx_bs48_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[48]),
      .rxtx_bs48_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[48]),
      .rxtx_bs48_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[48]),
   
   // -----------------------------------------------------------------------
   // Bitslice49 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs49_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[49]),
      .rxtx_bs49_rx_datain(rxtx_bs_rx_datain[49]),
      .rxtx_bs49_O_tx_data_out(rxtx_bs_O_tx_data_out[49]),
      .rxtx_bs49_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[49]),
   
   // Fifo Signals
      .rxtx_bs49_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[49]),
      .rxtx_bs49_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[49]),
      .rxtx_bs49_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[49]),
   
   // RX Delay Signals
      .rxtx_bs49_rx_ce_in(rxtx_bs_rx_ce_in[49]),
      .rxtx_bs49_rx_cntvaluein(rxtx_bs_rx_cntvaluein[49]),
      .rxtx_bs49_rx_cntvalueout(rxtx_bs_rx_cntvalueout[49]),
      .rxtx_bs49_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[49]),
      .rxtx_bs49_rx_inc_in(rxtx_bs_rx_inc_in[49]),
      .rxtx_bs49_rx_load_in(rxtx_bs_rx_load_in[49]),
   
   // Tristate signals
      .rxtx_bs49_tx_t_in(rxtx_bs_tx_t_in[49]),
      .rxtx_bs49_tx_t_out(rxtx_bs_tx_t_out[49]),
   
   // TX Delay Signals
      .rxtx_bs49_tx_ce_in(rxtx_bs_tx_ce_in[49]),
      .rxtx_bs49_tx_cntvaluein(rxtx_bs_tx_cntvaluein[49]),        
      .rxtx_bs49_tx_cntvalueout(rxtx_bs_tx_cntvalueout[49]),
      .rxtx_bs49_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[49]),
      .rxtx_bs49_tx_inc_in(rxtx_bs_tx_inc_in[49]),
      .rxtx_bs49_tx_load_in(rxtx_bs_tx_load_in[49]),
   
      .rxtx_bs49_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[49]),
      .rxtx_bs49_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[49]),
      .rxtx_bs49_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[49]),
      .rxtx_bs49_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[49]),
   
   // -----------------------------------------------------------------------
   // Bitslice50 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs50_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[50]),
      .rxtx_bs50_rx_datain(rxtx_bs_rx_datain[50]),
      .rxtx_bs50_O_tx_data_out(rxtx_bs_O_tx_data_out[50]),
      .rxtx_bs50_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[50]),
   
   // Fifo Signals
      .rxtx_bs50_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[50]),
      .rxtx_bs50_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[50]),
      .rxtx_bs50_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[50]),
   
   // RX Delay Signals
      .rxtx_bs50_rx_ce_in(rxtx_bs_rx_ce_in[50]),
      .rxtx_bs50_rx_cntvaluein(rxtx_bs_rx_cntvaluein[50]),
      .rxtx_bs50_rx_cntvalueout(rxtx_bs_rx_cntvalueout[50]),
      .rxtx_bs50_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[50]),
      .rxtx_bs50_rx_inc_in(rxtx_bs_rx_inc_in[50]),
      .rxtx_bs50_rx_load_in(rxtx_bs_rx_load_in[50]),
   
   // Tristate signals
      .rxtx_bs50_tx_t_in(rxtx_bs_tx_t_in[50]),
      .rxtx_bs50_tx_t_out(rxtx_bs_tx_t_out[50]),
   
   // TX Delay Signals
      .rxtx_bs50_tx_ce_in(rxtx_bs_tx_ce_in[50]),
      .rxtx_bs50_tx_cntvaluein(rxtx_bs_tx_cntvaluein[50]),        
      .rxtx_bs50_tx_cntvalueout(rxtx_bs_tx_cntvalueout[50]),
      .rxtx_bs50_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[50]),
      .rxtx_bs50_tx_inc_in(rxtx_bs_tx_inc_in[50]),
      .rxtx_bs50_tx_load_in(rxtx_bs_tx_load_in[50]),
   
      .rxtx_bs50_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[50]),
      .rxtx_bs50_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[50]),
      .rxtx_bs50_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[50]),
      .rxtx_bs50_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[50]),
   
   // -----------------------------------------------------------------------
   // Bitslice51 Signals
   // -----------------------------------------------------------------------
   // Data Signals from /to fabric and from/to buffer
      .rxtx_bs51_D_data_from_fabric_in(rxtx_bs_D_data_from_fabric_in[51]),
      .rxtx_bs51_rx_datain(rxtx_bs_rx_datain[51]),
      .rxtx_bs51_O_tx_data_out(rxtx_bs_O_tx_data_out[51]),
      .rxtx_bs51_Q_data_to_fabric_out(rxtx_bs_Q_data_to_fabric_out[51]),
   
   // Fifo Signals
      .rxtx_bs51_rx_fifo_empty_out(rxtx_bs_rx_fifo_empty_out[51]),
      .rxtx_bs51_rx_fifo_rd_clk_in(rxtx_bs_rx_fifo_rd_clk_in[51]),
      .rxtx_bs51_rx_fifo_rd_en_in(rxtx_bs_rx_fifo_rd_en_in[51]),
   
   // RX Delay Signals
      .rxtx_bs51_rx_ce_in(rxtx_bs_rx_ce_in[51]),
      .rxtx_bs51_rx_cntvaluein(rxtx_bs_rx_cntvaluein[51]),
      .rxtx_bs51_rx_cntvalueout(rxtx_bs_rx_cntvalueout[51]),
      .rxtx_bs51_rx_en_vtc_in(rxtx_bs_rx_en_vtc_in[51]),
      .rxtx_bs51_rx_inc_in(rxtx_bs_rx_inc_in[51]),
      .rxtx_bs51_rx_load_in(rxtx_bs_rx_load_in[51]),
   
   // Tristate signals
      .rxtx_bs51_tx_t_in(rxtx_bs_tx_t_in[51]),
      .rxtx_bs51_tx_t_out(rxtx_bs_tx_t_out[51]),
   
   // TX Delay Signals
      .rxtx_bs51_tx_ce_in(rxtx_bs_tx_ce_in[51]),
      .rxtx_bs51_tx_cntvaluein(rxtx_bs_tx_cntvaluein[51]),        
      .rxtx_bs51_tx_cntvalueout(rxtx_bs_tx_cntvalueout[51]),
      .rxtx_bs51_tx_en_vtc_in(rxtx_bs_tx_en_vtc_in[51]),
      .rxtx_bs51_tx_inc_in(rxtx_bs_tx_inc_in[51]),
      .rxtx_bs51_tx_load_in(rxtx_bs_tx_load_in[51]),
   
      .rxtx_bs51_rx_bit_ctrl_in(rxtx_bs_rx_bit_ctrl_in[51]),
      .rxtx_bs51_rx_bit_ctrl_out(rxtx_bs_rx_bit_ctrl_out[51]),
      .rxtx_bs51_tx_bit_ctrl_in(rxtx_bs_tx_bit_ctrl_in[51]),
      .rxtx_bs51_tx_bit_ctrl_out(rxtx_bs_tx_bit_ctrl_out[51]),
   
   // Bitslip error
      .rxtx_bs0_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[0]),
      .rxtx_bs1_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[1]),  
      .rxtx_bs2_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[2]),  
      .rxtx_bs3_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[3]),  
      .rxtx_bs4_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[4]),  
      .rxtx_bs5_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[5]),
      .rxtx_bs6_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[6]),
      .rxtx_bs7_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[7]),  
      .rxtx_bs8_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[8]),  
      .rxtx_bs9_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[9]),  
      .rxtx_bs10_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[10]),
      .rxtx_bs11_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[11]),
      .rxtx_bs12_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[12]),
      .rxtx_bs13_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[13]),
      .rxtx_bs14_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[14]),
      .rxtx_bs15_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[15]),
      .rxtx_bs16_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[16]),
      .rxtx_bs17_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[17]),
      .rxtx_bs18_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[18]),
      .rxtx_bs19_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[19]),
      .rxtx_bs20_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[20]),
      .rxtx_bs21_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[21]),
      .rxtx_bs22_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[22]),
      .rxtx_bs23_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[23]),
      .rxtx_bs24_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[24]),
      .rxtx_bs25_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[25]),
      .rxtx_bs26_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[26]),
      .rxtx_bs27_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[27]),
      .rxtx_bs28_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[28]),
      .rxtx_bs29_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[29]),
      .rxtx_bs30_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[30]),
      .rxtx_bs31_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[31]),
      .rxtx_bs32_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[32]),
      .rxtx_bs33_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[33]),
      .rxtx_bs34_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[34]),
      .rxtx_bs35_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[35]),
      .rxtx_bs36_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[36]),
      .rxtx_bs37_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[37]),
      .rxtx_bs38_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[38]),
      .rxtx_bs39_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[39]),
      .rxtx_bs40_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[40]),
      .rxtx_bs41_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[41]),
      .rxtx_bs42_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[42]),
      .rxtx_bs43_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[43]),
      .rxtx_bs44_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[44]),
      .rxtx_bs45_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[45]),
      .rxtx_bs46_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[46]),
      .rxtx_bs47_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[47]),
      .rxtx_bs48_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[48]),
      .rxtx_bs49_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[49]),
      .rxtx_bs50_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[50]),
      .rxtx_bs51_bitslip_error_out(rxtx_bs_rx_bitslip_error_out[51]),
   
      // Fifo Write clock Signals
      .rxtx_bs0_rx_fifo_wrclk_out(rxtx_bs0_nib0_rx_fifo_wrclk_out),   	  
      .rxtx_bs6_rx_fifo_wrclk_out(rxtx_bs6_nib1_rx_fifo_wrclk_out), 
      .rxtx_bs13_rx_fifo_wrclk_out(rxtx_bs13_nib2_rx_fifo_wrclk_out),  
      .rxtx_bs19_rx_fifo_wrclk_out(rxtx_bs19_nib3_rx_fifo_wrclk_out),     
      .rxtx_bs26_rx_fifo_wrclk_out(rxtx_bs26_nib4_rx_fifo_wrclk_out),   
      .rxtx_bs32_rx_fifo_wrclk_out(rxtx_bs32_nib5_rx_fifo_wrclk_out), 
      .rxtx_bs39_rx_fifo_wrclk_out(rxtx_bs39_nib6_rx_fifo_wrclk_out),    
      .rxtx_bs45_rx_fifo_wrclk_out(rxtx_bs45_nib7_rx_fifo_wrclk_out)
   
    );         
   endmodule


